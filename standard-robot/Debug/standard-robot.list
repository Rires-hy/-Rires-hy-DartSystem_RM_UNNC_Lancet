
standard-robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014604  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac4  080147b4  080147b4  000247b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015278  08015278  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08015278  08015278  00025278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015280  08015280  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015280  08015280  00025280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08015288  08015288  00025288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08015290  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007320  200001f8  08015488  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20007518  08015488  00037518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045fb1  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009ad3  00000000  00000000  000761d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000028c0  00000000  00000000  0007fcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000024e0  00000000  00000000  00082570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000323a6  00000000  00000000  00084a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038812  00000000  00000000  000b6df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8936  00000000  00000000  000ef608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c1  00000000  00000000  001e7f3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a770  00000000  00000000  001e8000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000018a  00000000  00000000  001f2770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801479c 	.word	0x0801479c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	0801479c 	.word	0x0801479c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @brief          hal CAN fifo call back, receive motor data
  * @param[in]      hcan, the point to CAN handle
  * @retval         none
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08c      	sub	sp, #48	; 0x30
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];

    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	f107 0214 	add.w	r2, r7, #20
 80005a8:	2100      	movs	r1, #0
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	f006 fe6f 	bl	800728e <HAL_CAN_GetRxMessage>

    switch (rx_header.StdId)
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80005b6:	2b06      	cmp	r3, #6
 80005b8:	d868      	bhi.n	800068c <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>
        case CAN_PIT_MOTOR_ID:
        case CAN_TRIGGER_MOTOR_ID:
        {
            static uint8_t i = 0;
            //get motor id
            i = rx_header.StdId - CAN_3508_M1_ID;
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	3b01      	subs	r3, #1
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	4b35      	ldr	r3, [pc, #212]	; (8000698 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 80005c4:	701a      	strb	r2, [r3, #0]
            get_motor_measure(&motor_chassis[i], rx_data);
 80005c6:	4b34      	ldr	r3, [pc, #208]	; (8000698 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	4619      	mov	r1, r3
 80005cc:	4a33      	ldr	r2, [pc, #204]	; (800069c <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 80005ce:	460b      	mov	r3, r1
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	440b      	add	r3, r1
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	4413      	add	r3, r2
 80005d8:	881a      	ldrh	r2, [r3, #0]
 80005da:	4b2f      	ldr	r3, [pc, #188]	; (8000698 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	4619      	mov	r1, r3
 80005e0:	b210      	sxth	r0, r2
 80005e2:	4a2e      	ldr	r2, [pc, #184]	; (800069c <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 80005e4:	460b      	mov	r3, r1
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	440b      	add	r3, r1
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	4413      	add	r3, r2
 80005ee:	3308      	adds	r3, #8
 80005f0:	4602      	mov	r2, r0
 80005f2:	801a      	strh	r2, [r3, #0]
 80005f4:	7b3b      	ldrb	r3, [r7, #12]
 80005f6:	021b      	lsls	r3, r3, #8
 80005f8:	b21a      	sxth	r2, r3
 80005fa:	7b7b      	ldrb	r3, [r7, #13]
 80005fc:	b21b      	sxth	r3, r3
 80005fe:	4313      	orrs	r3, r2
 8000600:	b21a      	sxth	r2, r3
 8000602:	4b25      	ldr	r3, [pc, #148]	; (8000698 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	4619      	mov	r1, r3
 8000608:	b290      	uxth	r0, r2
 800060a:	4a24      	ldr	r2, [pc, #144]	; (800069c <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 800060c:	460b      	mov	r3, r1
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	440b      	add	r3, r1
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	4413      	add	r3, r2
 8000616:	4602      	mov	r2, r0
 8000618:	801a      	strh	r2, [r3, #0]
 800061a:	7bbb      	ldrb	r3, [r7, #14]
 800061c:	021b      	lsls	r3, r3, #8
 800061e:	b21a      	sxth	r2, r3
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	b21b      	sxth	r3, r3
 8000624:	491c      	ldr	r1, [pc, #112]	; (8000698 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 8000626:	7809      	ldrb	r1, [r1, #0]
 8000628:	4313      	orrs	r3, r2
 800062a:	b218      	sxth	r0, r3
 800062c:	4a1b      	ldr	r2, [pc, #108]	; (800069c <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 800062e:	460b      	mov	r3, r1
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	440b      	add	r3, r1
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	4413      	add	r3, r2
 8000638:	3302      	adds	r3, #2
 800063a:	4602      	mov	r2, r0
 800063c:	801a      	strh	r2, [r3, #0]
 800063e:	7c3b      	ldrb	r3, [r7, #16]
 8000640:	021b      	lsls	r3, r3, #8
 8000642:	b21a      	sxth	r2, r3
 8000644:	7c7b      	ldrb	r3, [r7, #17]
 8000646:	b21b      	sxth	r3, r3
 8000648:	4913      	ldr	r1, [pc, #76]	; (8000698 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 800064a:	7809      	ldrb	r1, [r1, #0]
 800064c:	4313      	orrs	r3, r2
 800064e:	b218      	sxth	r0, r3
 8000650:	4a12      	ldr	r2, [pc, #72]	; (800069c <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 8000652:	460b      	mov	r3, r1
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	440b      	add	r3, r1
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	3304      	adds	r3, #4
 800065e:	4602      	mov	r2, r0
 8000660:	801a      	strh	r2, [r3, #0]
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	4619      	mov	r1, r3
 8000668:	7cb8      	ldrb	r0, [r7, #18]
 800066a:	4a0c      	ldr	r2, [pc, #48]	; (800069c <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 800066c:	460b      	mov	r3, r1
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	440b      	add	r3, r1
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	4413      	add	r3, r2
 8000676:	3306      	adds	r3, #6
 8000678:	4602      	mov	r2, r0
 800067a:	701a      	strb	r2, [r3, #0]

            detect_hook(CHASSIS_MOTOR1_TOE + i);
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	3301      	adds	r3, #1
 8000682:	b2db      	uxtb	r3, r3
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fb47 	bl	8001d18 <detect_hook>

            break;
 800068a:	e000      	b.n	800068e <HAL_CAN_RxFifo0MsgPendingCallback+0xf6>
        }

        default:
        {
            break;
 800068c:	bf00      	nop
        }
    }
}
 800068e:	bf00      	nop
 8000690:	3730      	adds	r7, #48	; 0x30
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	2000029c 	.word	0x2000029c
 800069c:	20000214 	.word	0x20000214

080006a0 <CAN_cmd_gimbal>:
  * @param[in]      shoot: (0x207) 2006 motor control current, range [-10000,10000]
  * @param[in]      rev: (0x208) reserve motor control current, useless currently
  * @retval         none
  */
void CAN_cmd_gimbal(int16_t yaw, int16_t pitch, int16_t shoot, int16_t rev)
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4604      	mov	r4, r0
 80006a8:	4608      	mov	r0, r1
 80006aa:	4611      	mov	r1, r2
 80006ac:	461a      	mov	r2, r3
 80006ae:	4623      	mov	r3, r4
 80006b0:	80fb      	strh	r3, [r7, #6]
 80006b2:	4603      	mov	r3, r0
 80006b4:	80bb      	strh	r3, [r7, #4]
 80006b6:	460b      	mov	r3, r1
 80006b8:	807b      	strh	r3, [r7, #2]
 80006ba:	4613      	mov	r3, r2
 80006bc:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    gimbal_tx_message.StdId = CAN_GIMBAL_ALL_ID;
 80006be:	4b22      	ldr	r3, [pc, #136]	; (8000748 <CAN_cmd_gimbal+0xa8>)
 80006c0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80006c4:	601a      	str	r2, [r3, #0]
    gimbal_tx_message.IDE = CAN_ID_STD;
 80006c6:	4b20      	ldr	r3, [pc, #128]	; (8000748 <CAN_cmd_gimbal+0xa8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
    gimbal_tx_message.RTR = CAN_RTR_DATA;
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <CAN_cmd_gimbal+0xa8>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
    gimbal_tx_message.DLC = 0x08;
 80006d2:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <CAN_cmd_gimbal+0xa8>)
 80006d4:	2208      	movs	r2, #8
 80006d6:	611a      	str	r2, [r3, #16]
    gimbal_can_send_data[0] = (yaw >> 8);
 80006d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006dc:	121b      	asrs	r3, r3, #8
 80006de:	b21b      	sxth	r3, r3
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <CAN_cmd_gimbal+0xac>)
 80006e4:	701a      	strb	r2, [r3, #0]
    gimbal_can_send_data[1] = yaw;
 80006e6:	88fb      	ldrh	r3, [r7, #6]
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <CAN_cmd_gimbal+0xac>)
 80006ec:	705a      	strb	r2, [r3, #1]
    gimbal_can_send_data[2] = (pitch >> 8);
 80006ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006f2:	121b      	asrs	r3, r3, #8
 80006f4:	b21b      	sxth	r3, r3
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <CAN_cmd_gimbal+0xac>)
 80006fa:	709a      	strb	r2, [r3, #2]
    gimbal_can_send_data[3] = pitch;
 80006fc:	88bb      	ldrh	r3, [r7, #4]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <CAN_cmd_gimbal+0xac>)
 8000702:	70da      	strb	r2, [r3, #3]
    gimbal_can_send_data[4] = (shoot >> 8);
 8000704:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000708:	121b      	asrs	r3, r3, #8
 800070a:	b21b      	sxth	r3, r3
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <CAN_cmd_gimbal+0xac>)
 8000710:	711a      	strb	r2, [r3, #4]
    gimbal_can_send_data[5] = shoot;
 8000712:	887b      	ldrh	r3, [r7, #2]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <CAN_cmd_gimbal+0xac>)
 8000718:	715a      	strb	r2, [r3, #5]
    gimbal_can_send_data[6] = (rev >> 8);
 800071a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800071e:	121b      	asrs	r3, r3, #8
 8000720:	b21b      	sxth	r3, r3
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <CAN_cmd_gimbal+0xac>)
 8000726:	719a      	strb	r2, [r3, #6]
    gimbal_can_send_data[7] = rev;
 8000728:	883b      	ldrh	r3, [r7, #0]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <CAN_cmd_gimbal+0xac>)
 800072e:	71da      	strb	r2, [r3, #7]
    HAL_CAN_AddTxMessage(&GIMBAL_CAN, &gimbal_tx_message, gimbal_can_send_data, &send_mail_box);
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	4a05      	ldr	r2, [pc, #20]	; (800074c <CAN_cmd_gimbal+0xac>)
 8000736:	4904      	ldr	r1, [pc, #16]	; (8000748 <CAN_cmd_gimbal+0xa8>)
 8000738:	4805      	ldr	r0, [pc, #20]	; (8000750 <CAN_cmd_gimbal+0xb0>)
 800073a:	f006 fccd 	bl	80070d8 <HAL_CAN_AddTxMessage>
}
 800073e:	bf00      	nop
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	bd90      	pop	{r4, r7, pc}
 8000746:	bf00      	nop
 8000748:	2000025c 	.word	0x2000025c
 800074c:	20000274 	.word	0x20000274
 8000750:	200056c8 	.word	0x200056c8

08000754 <CAN_cmd_chassis>:
  * @param[in]      motor3: (0x203) 3508 motor control current, range [-16384,16384] 
  * @param[in]      motor4: (0x204) 3508 motor control current, range [-16384,16384] 
  * @retval         none
  */
void CAN_cmd_chassis(int16_t motor1, int16_t motor2, int16_t motor3, int16_t motor4)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	4604      	mov	r4, r0
 800075c:	4608      	mov	r0, r1
 800075e:	4611      	mov	r1, r2
 8000760:	461a      	mov	r2, r3
 8000762:	4623      	mov	r3, r4
 8000764:	80fb      	strh	r3, [r7, #6]
 8000766:	4603      	mov	r3, r0
 8000768:	80bb      	strh	r3, [r7, #4]
 800076a:	460b      	mov	r3, r1
 800076c:	807b      	strh	r3, [r7, #2]
 800076e:	4613      	mov	r3, r2
 8000770:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    chassis_tx_message.StdId = CAN_CHASSIS_ALL_ID;
 8000772:	4b22      	ldr	r3, [pc, #136]	; (80007fc <CAN_cmd_chassis+0xa8>)
 8000774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000778:	601a      	str	r2, [r3, #0]
    chassis_tx_message.IDE = CAN_ID_STD;
 800077a:	4b20      	ldr	r3, [pc, #128]	; (80007fc <CAN_cmd_chassis+0xa8>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
    chassis_tx_message.RTR = CAN_RTR_DATA;
 8000780:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <CAN_cmd_chassis+0xa8>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
    chassis_tx_message.DLC = 0x08;
 8000786:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <CAN_cmd_chassis+0xa8>)
 8000788:	2208      	movs	r2, #8
 800078a:	611a      	str	r2, [r3, #16]
    chassis_can_send_data[0] = motor1 >> 8;
 800078c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000790:	121b      	asrs	r3, r3, #8
 8000792:	b21b      	sxth	r3, r3
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <CAN_cmd_chassis+0xac>)
 8000798:	701a      	strb	r2, [r3, #0]
    chassis_can_send_data[1] = motor1;
 800079a:	88fb      	ldrh	r3, [r7, #6]
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <CAN_cmd_chassis+0xac>)
 80007a0:	705a      	strb	r2, [r3, #1]
    chassis_can_send_data[2] = motor2 >> 8;
 80007a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007a6:	121b      	asrs	r3, r3, #8
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <CAN_cmd_chassis+0xac>)
 80007ae:	709a      	strb	r2, [r3, #2]
    chassis_can_send_data[3] = motor2;
 80007b0:	88bb      	ldrh	r3, [r7, #4]
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <CAN_cmd_chassis+0xac>)
 80007b6:	70da      	strb	r2, [r3, #3]
    chassis_can_send_data[4] = motor3 >> 8;
 80007b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007bc:	121b      	asrs	r3, r3, #8
 80007be:	b21b      	sxth	r3, r3
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <CAN_cmd_chassis+0xac>)
 80007c4:	711a      	strb	r2, [r3, #4]
    chassis_can_send_data[5] = motor3;
 80007c6:	887b      	ldrh	r3, [r7, #2]
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <CAN_cmd_chassis+0xac>)
 80007cc:	715a      	strb	r2, [r3, #5]
    chassis_can_send_data[6] = motor4 >> 8;
 80007ce:	f9b7 3000 	ldrsh.w	r3, [r7]
 80007d2:	121b      	asrs	r3, r3, #8
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <CAN_cmd_chassis+0xac>)
 80007da:	719a      	strb	r2, [r3, #6]
    chassis_can_send_data[7] = motor4;
 80007dc:	883b      	ldrh	r3, [r7, #0]
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <CAN_cmd_chassis+0xac>)
 80007e2:	71da      	strb	r2, [r3, #7]
    HAL_CAN_AddTxMessage(&CHASSIS_CAN, &chassis_tx_message, chassis_can_send_data, &send_mail_box);
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	4a05      	ldr	r2, [pc, #20]	; (8000800 <CAN_cmd_chassis+0xac>)
 80007ea:	4904      	ldr	r1, [pc, #16]	; (80007fc <CAN_cmd_chassis+0xa8>)
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <CAN_cmd_chassis+0xb0>)
 80007ee:	f006 fc73 	bl	80070d8 <HAL_CAN_AddTxMessage>
}
 80007f2:	bf00      	nop
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd90      	pop	{r4, r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2000027c 	.word	0x2000027c
 8000800:	20000294 	.word	0x20000294
 8000804:	200056a0 	.word	0x200056a0

08000808 <get_yaw_gimbal_motor_measure_point>:
  * @brief          return the yaw 6020 motor data point
  * @param[in]      none
  * @retval         motor data point
  */
const motor_measure_t *get_yaw_gimbal_motor_measure_point(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
    return &motor_chassis[4];
 800080c:	4b02      	ldr	r3, [pc, #8]	; (8000818 <get_yaw_gimbal_motor_measure_point+0x10>)
}
 800080e:	4618      	mov	r0, r3
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	2000023c 	.word	0x2000023c

0800081c <get_pitch_gimbal_motor_measure_point>:
  * @brief          return the pitch 6020 motor data point
  * @param[in]      none
  * @retval         motor data point
  */
const motor_measure_t *get_pitch_gimbal_motor_measure_point(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
    return &motor_chassis[5];
 8000820:	4b02      	ldr	r3, [pc, #8]	; (800082c <get_pitch_gimbal_motor_measure_point+0x10>)
}
 8000822:	4618      	mov	r0, r3
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	20000246 	.word	0x20000246

08000830 <get_trigger_motor_measure_point>:
  * @brief          return the trigger 2006 motor data point
  * @param[in]      none
  * @retval         motor data point
  */
const motor_measure_t *get_trigger_motor_measure_point(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
    return &motor_chassis[6];
 8000834:	4b02      	ldr	r3, [pc, #8]	; (8000840 <get_trigger_motor_measure_point+0x10>)
}
 8000836:	4618      	mov	r0, r3
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	20000250 	.word	0x20000250

08000844 <get_chassis_motor_measure_point>:
  * @brief          return the chassis 3508 motor data point
  * @param[in]      i: motor number,range [0,3]
  * @retval         motor data point
  */
const motor_measure_t *get_chassis_motor_measure_point(uint8_t i)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
    return &motor_chassis[(i & 0x03)];
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	f003 0203 	and.w	r2, r3, #3
 8000854:	4613      	mov	r3, r2
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	4413      	add	r3, r2
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	4a03      	ldr	r2, [pc, #12]	; (800086c <get_chassis_motor_measure_point+0x28>)
 800085e:	4413      	add	r3, r2
}
 8000860:	4618      	mov	r0, r3
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	20000214 	.word	0x20000214

08000870 <get_INS_angle_point>:
  * @brief          get the euler angle, 0:yaw, 1:pitch, 2:roll, unit: rad
  * @param[in]      none
  * @retval         the pointer of INS_angle
  */
const float32_t *get_INS_angle_point(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
    return INS_angle;
 8000874:	4b02      	ldr	r3, [pc, #8]	; (8000880 <get_INS_angle_point+0x10>)
}
 8000876:	4618      	mov	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	200002ac 	.word	0x200002ac

08000884 <get_gyro_data_point>:
  * @brief          get the rotation speed, 0:x-axis, 1:y-axis, 2:roll-axis, unit: rad/s
  * @param[in]      none
  * @retval         the pointer of INS_gyro
  */
const float32_t *get_gyro_data_point(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
    return INS_gyro;
 8000888:	4b02      	ldr	r3, [pc, #8]	; (8000894 <get_gyro_data_point+0x10>)
}
 800088a:	4618      	mov	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	200002a0 	.word	0x200002a0

08000898 <chassis_behaviour_mode_set>:
  *                 based on chassis data
  * @param[in]      chassis_move_mode: chassis data
  * @retval         none
  */
void chassis_behaviour_mode_set(chassis_move_t *chassis_move_mode)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
    if (chassis_move_mode == NULL)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d051      	beq.n	800094a <chassis_behaviour_mode_set+0xb2>
     * ->CHASSIS_INFANTRY_FOLLOW_GIMBAL_YAW
     * ->CHASSIS_ENGINEER_FOLLOW_CHASSIS_YAW
     * ->CHASSIS_NO_FOLLOW_YAW
     * ->CHASSIS_OPEN
     */
    if (switch_is_mid(chassis_move_mode->chassis_RC->rc.s[CHASSIS_MODE_CHANNEL]))
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	7a9b      	ldrb	r3, [r3, #10]
 80008ac:	2b03      	cmp	r3, #3
 80008ae:	d103      	bne.n	80008b8 <chassis_behaviour_mode_set+0x20>
    {
        chassis_behaviour_mode = CHASSIS_NO_FOLLOW_YAW;
 80008b0:	4b28      	ldr	r3, [pc, #160]	; (8000954 <chassis_behaviour_mode_set+0xbc>)
 80008b2:	2204      	movs	r2, #4
 80008b4:	701a      	strb	r2, [r3, #0]
 80008b6:	e010      	b.n	80008da <chassis_behaviour_mode_set+0x42>
    }
    else if (switch_is_down(chassis_move_mode->chassis_RC->rc.s[CHASSIS_MODE_CHANNEL]))
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	7a9b      	ldrb	r3, [r3, #10]
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d103      	bne.n	80008ca <chassis_behaviour_mode_set+0x32>
    {
        chassis_behaviour_mode = CHASSIS_INFANTRY_FOLLOW_GIMBAL_YAW;
 80008c2:	4b24      	ldr	r3, [pc, #144]	; (8000954 <chassis_behaviour_mode_set+0xbc>)
 80008c4:	2202      	movs	r2, #2
 80008c6:	701a      	strb	r2, [r3, #0]
 80008c8:	e007      	b.n	80008da <chassis_behaviour_mode_set+0x42>
    }
    else if (switch_is_up(chassis_move_mode->chassis_RC->rc.s[CHASSIS_MODE_CHANNEL]))
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	7a9b      	ldrb	r3, [r3, #10]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d102      	bne.n	80008da <chassis_behaviour_mode_set+0x42>
    {
        chassis_behaviour_mode = CHASSIS_NO_MOVE;
 80008d4:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <chassis_behaviour_mode_set+0xbc>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
    }

    //when gimbal at some modes, such as initialization, chassis do not move
    if (gimbal_cmd_to_chassis_stop())
 80008da:	f001 fcc3 	bl	8002264 <gimbal_cmd_to_chassis_stop>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d002      	beq.n	80008ea <chassis_behaviour_mode_set+0x52>
    {
        chassis_behaviour_mode = CHASSIS_NO_MOVE;
 80008e4:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <chassis_behaviour_mode_set+0xbc>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]
    //add your own logic to enter the new mode
    //customized by user


    //according to behavior mode, choose a chassis control mode
    if (chassis_behaviour_mode == CHASSIS_ZERO_FORCE)
 80008ea:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <chassis_behaviour_mode_set+0xbc>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d103      	bne.n	80008fa <chassis_behaviour_mode_set+0x62>
    {
        chassis_move_mode->chassis_mode = CHASSIS_VECTOR_RAW; 
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2203      	movs	r2, #3
 80008f6:	741a      	strb	r2, [r3, #16]
 80008f8:	e028      	b.n	800094c <chassis_behaviour_mode_set+0xb4>
    }
    else if (chassis_behaviour_mode == CHASSIS_NO_MOVE)
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <chassis_behaviour_mode_set+0xbc>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d103      	bne.n	800090a <chassis_behaviour_mode_set+0x72>
    {
        chassis_move_mode->chassis_mode = CHASSIS_VECTOR_NO_FOLLOW_YAW; 
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2202      	movs	r2, #2
 8000906:	741a      	strb	r2, [r3, #16]
 8000908:	e020      	b.n	800094c <chassis_behaviour_mode_set+0xb4>
    }
    else if (chassis_behaviour_mode == CHASSIS_INFANTRY_FOLLOW_GIMBAL_YAW)
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <chassis_behaviour_mode_set+0xbc>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b02      	cmp	r3, #2
 8000910:	d103      	bne.n	800091a <chassis_behaviour_mode_set+0x82>
    {
        chassis_move_mode->chassis_mode = CHASSIS_VECTOR_FOLLOW_GIMBAL_YAW; 
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2200      	movs	r2, #0
 8000916:	741a      	strb	r2, [r3, #16]
 8000918:	e018      	b.n	800094c <chassis_behaviour_mode_set+0xb4>
    }
    else if (chassis_behaviour_mode == CHASSIS_ENGINEER_FOLLOW_CHASSIS_YAW)
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <chassis_behaviour_mode_set+0xbc>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b03      	cmp	r3, #3
 8000920:	d103      	bne.n	800092a <chassis_behaviour_mode_set+0x92>
    {
        chassis_move_mode->chassis_mode = CHASSIS_VECTOR_FOLLOW_CHASSIS_YAW;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2201      	movs	r2, #1
 8000926:	741a      	strb	r2, [r3, #16]
 8000928:	e010      	b.n	800094c <chassis_behaviour_mode_set+0xb4>
    }
    else if (chassis_behaviour_mode == CHASSIS_NO_FOLLOW_YAW)
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <chassis_behaviour_mode_set+0xbc>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b04      	cmp	r3, #4
 8000930:	d103      	bne.n	800093a <chassis_behaviour_mode_set+0xa2>
    {
        chassis_move_mode->chassis_mode = CHASSIS_VECTOR_NO_FOLLOW_YAW;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2202      	movs	r2, #2
 8000936:	741a      	strb	r2, [r3, #16]
 8000938:	e008      	b.n	800094c <chassis_behaviour_mode_set+0xb4>
    }
    else if (chassis_behaviour_mode == CHASSIS_OPEN)
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <chassis_behaviour_mode_set+0xbc>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b05      	cmp	r3, #5
 8000940:	d104      	bne.n	800094c <chassis_behaviour_mode_set+0xb4>
    {
        chassis_move_mode->chassis_mode = CHASSIS_VECTOR_RAW;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2203      	movs	r2, #3
 8000946:	741a      	strb	r2, [r3, #16]
 8000948:	e000      	b.n	800094c <chassis_behaviour_mode_set+0xb4>
        return;
 800094a:	bf00      	nop
    }
}
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200002b8 	.word	0x200002b8

08000958 <chassis_behaviour_control_set>:
  * @param[out]     wz_set: usually controls rotation speed.
  * @param[in]      chassis_move_rc_to_vector: has all data of chassis
  * @retval         none
  */
void chassis_behaviour_control_set(float32_t *vx_set, float32_t *vy_set, float32_t *angle_set, chassis_move_t *chassis_move_rc_to_vector)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
 8000964:	603b      	str	r3, [r7, #0]

    if (vx_set == NULL || vy_set == NULL || angle_set == NULL || chassis_move_rc_to_vector == NULL)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d04a      	beq.n	8000a02 <chassis_behaviour_control_set+0xaa>
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d047      	beq.n	8000a02 <chassis_behaviour_control_set+0xaa>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d044      	beq.n	8000a02 <chassis_behaviour_control_set+0xaa>
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d041      	beq.n	8000a02 <chassis_behaviour_control_set+0xaa>
    {
        return;
    }

    if (chassis_behaviour_mode == CHASSIS_ZERO_FORCE)
 800097e:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <chassis_behaviour_control_set+0xb4>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d106      	bne.n	8000994 <chassis_behaviour_control_set+0x3c>
    {
        chassis_zero_force_control(vx_set, vy_set, angle_set, chassis_move_rc_to_vector);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	68b9      	ldr	r1, [r7, #8]
 800098c:	68f8      	ldr	r0, [r7, #12]
 800098e:	f000 f83f 	bl	8000a10 <chassis_zero_force_control>
 8000992:	e037      	b.n	8000a04 <chassis_behaviour_control_set+0xac>
    }
    else if (chassis_behaviour_mode == CHASSIS_NO_MOVE)
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <chassis_behaviour_control_set+0xb4>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d106      	bne.n	80009aa <chassis_behaviour_control_set+0x52>
    {
        chassis_no_move_control(vx_set, vy_set, angle_set, chassis_move_rc_to_vector);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	68b9      	ldr	r1, [r7, #8]
 80009a2:	68f8      	ldr	r0, [r7, #12]
 80009a4:	f000 f85a 	bl	8000a5c <chassis_no_move_control>
 80009a8:	e02c      	b.n	8000a04 <chassis_behaviour_control_set+0xac>
    }
    else if (chassis_behaviour_mode == CHASSIS_INFANTRY_FOLLOW_GIMBAL_YAW)
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <chassis_behaviour_control_set+0xb4>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d106      	bne.n	80009c0 <chassis_behaviour_control_set+0x68>
    {
        chassis_infantry_follow_gimbal_yaw_control(vx_set, vy_set, angle_set, chassis_move_rc_to_vector);
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	68b9      	ldr	r1, [r7, #8]
 80009b8:	68f8      	ldr	r0, [r7, #12]
 80009ba:	f000 f875 	bl	8000aa8 <chassis_infantry_follow_gimbal_yaw_control>
 80009be:	e021      	b.n	8000a04 <chassis_behaviour_control_set+0xac>
    }
    else if (chassis_behaviour_mode == CHASSIS_ENGINEER_FOLLOW_CHASSIS_YAW)
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <chassis_behaviour_control_set+0xb4>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b03      	cmp	r3, #3
 80009c6:	d106      	bne.n	80009d6 <chassis_behaviour_control_set+0x7e>
    {
        chassis_engineer_follow_chassis_yaw_control(vx_set, vy_set, angle_set, chassis_move_rc_to_vector);
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	68f8      	ldr	r0, [r7, #12]
 80009d0:	f000 f916 	bl	8000c00 <chassis_engineer_follow_chassis_yaw_control>
 80009d4:	e016      	b.n	8000a04 <chassis_behaviour_control_set+0xac>
    }
    else if (chassis_behaviour_mode == CHASSIS_NO_FOLLOW_YAW)
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <chassis_behaviour_control_set+0xb4>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b04      	cmp	r3, #4
 80009dc:	d106      	bne.n	80009ec <chassis_behaviour_control_set+0x94>
    {
        chassis_no_follow_yaw_control(vx_set, vy_set, angle_set, chassis_move_rc_to_vector);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	68b9      	ldr	r1, [r7, #8]
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f000 f94d 	bl	8000c84 <chassis_no_follow_yaw_control>
 80009ea:	e00b      	b.n	8000a04 <chassis_behaviour_control_set+0xac>
    }
    else if (chassis_behaviour_mode == CHASSIS_OPEN)
 80009ec:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <chassis_behaviour_control_set+0xb4>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b05      	cmp	r3, #5
 80009f2:	d107      	bne.n	8000a04 <chassis_behaviour_control_set+0xac>
    {
        chassis_open_set_control(vx_set, vy_set, angle_set, chassis_move_rc_to_vector);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	68b9      	ldr	r1, [r7, #8]
 80009fa:	68f8      	ldr	r0, [r7, #12]
 80009fc:	f000 f972 	bl	8000ce4 <chassis_open_set_control>
 8000a00:	e000      	b.n	8000a04 <chassis_behaviour_control_set+0xac>
        return;
 8000a02:	bf00      	nop
    }
}
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200002b8 	.word	0x200002b8

08000a10 <chassis_zero_force_control>:
  * @param[out]     wz_can_set: wz rotation speed value, it will be sent to CAN bus directly.
  * @param[in]      chassis_move_rc_to_vector: chassis data
  * @retval         none
  */
static void chassis_zero_force_control(float32_t *vx_can_set, float32_t *vy_can_set, float32_t *wz_can_set, chassis_move_t *chassis_move_rc_to_vector)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
 8000a1c:	603b      	str	r3, [r7, #0]
    if (vx_can_set == NULL || vy_can_set == NULL || wz_can_set == NULL || chassis_move_rc_to_vector == NULL)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d015      	beq.n	8000a50 <chassis_zero_force_control+0x40>
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d012      	beq.n	8000a50 <chassis_zero_force_control+0x40>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d00f      	beq.n	8000a50 <chassis_zero_force_control+0x40>
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d00c      	beq.n	8000a50 <chassis_zero_force_control+0x40>
    {
        return;
    }
    *vx_can_set = 0.0f;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	f04f 0200 	mov.w	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
    *vy_can_set = 0.0f;
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	f04f 0200 	mov.w	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
    *wz_can_set = 0.0f;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f04f 0200 	mov.w	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	e000      	b.n	8000a52 <chassis_zero_force_control+0x42>
        return;
 8000a50:	bf00      	nop
}
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <chassis_no_move_control>:
  * @param[out]     wz_set: wz rotation speed value, positive -> counter-clockwise, negative -> clockwise.
  * @param[in]      chassis_move_rc_to_vector: chassis data
  * @retval         none
  */
static void chassis_no_move_control(float32_t *vx_set, float32_t *vy_set, float32_t *wz_set, chassis_move_t *chassis_move_rc_to_vector)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
 8000a68:	603b      	str	r3, [r7, #0]
    if (vx_set == NULL || vy_set == NULL || wz_set == NULL || chassis_move_rc_to_vector == NULL)
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d015      	beq.n	8000a9c <chassis_no_move_control+0x40>
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d012      	beq.n	8000a9c <chassis_no_move_control+0x40>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d00f      	beq.n	8000a9c <chassis_no_move_control+0x40>
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d00c      	beq.n	8000a9c <chassis_no_move_control+0x40>
    {
        return;
    }
    *vx_set = 0.0f;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	f04f 0200 	mov.w	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
    *vy_set = 0.0f;
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	f04f 0200 	mov.w	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
    *wz_set = 0.0f;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f04f 0200 	mov.w	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	e000      	b.n	8000a9e <chassis_no_move_control+0x42>
        return;
 8000a9c:	bf00      	nop
}
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <chassis_infantry_follow_gimbal_yaw_control>:
  * @param[out]     angle_set: control angle difference between chassis and gimbal
  * @param[in]      chassis_move_rc_to_vector: chassis data
  * @retval         none
  */
static void chassis_infantry_follow_gimbal_yaw_control(float32_t *vx_set, float32_t *vy_set, float32_t *angle_set, chassis_move_t *chassis_move_rc_to_vector)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
 8000ab4:	603b      	str	r3, [r7, #0]
    if (vx_set == NULL || vy_set == NULL || angle_set == NULL || chassis_move_rc_to_vector == NULL)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	f000 808d 	beq.w	8000bd8 <chassis_infantry_follow_gimbal_yaw_control+0x130>
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	f000 8089 	beq.w	8000bd8 <chassis_infantry_follow_gimbal_yaw_control+0x130>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	f000 8085 	beq.w	8000bd8 <chassis_infantry_follow_gimbal_yaw_control+0x130>
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	f000 8081 	beq.w	8000bd8 <chassis_infantry_follow_gimbal_yaw_control+0x130>
        return;
    }

    //get x/y speed in general condition
    //based on remote controller channels and keyboards
    chassis_rc_to_control_vector(vx_set, vy_set, chassis_move_rc_to_vector);
 8000ad6:	683a      	ldr	r2, [r7, #0]
 8000ad8:	68b9      	ldr	r1, [r7, #8]
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f000 fb94 	bl	8001208 <chassis_rc_to_control_vector>
    //"swing_flag" determines if swing
    static uint8_t swing_flag = 0;

    //check if swing based on keyboard swing key input, and set "swing_flag"
    //here chassis swings only when key is pressed
    if (chassis_move_rc_to_vector->chassis_RC->key.v & SWING_KEY)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	8a9b      	ldrh	r3, [r3, #20]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	f003 0320 	and.w	r3, r3, #32
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d00b      	beq.n	8000b08 <chassis_infantry_follow_gimbal_yaw_control+0x60>
    {
        if (swing_flag == 0)
 8000af0:	4b3b      	ldr	r3, [pc, #236]	; (8000be0 <chassis_infantry_follow_gimbal_yaw_control+0x138>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d10a      	bne.n	8000b0e <chassis_infantry_follow_gimbal_yaw_control+0x66>
        {
            swing_flag = 1;
 8000af8:	4b39      	ldr	r3, [pc, #228]	; (8000be0 <chassis_infantry_follow_gimbal_yaw_control+0x138>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
            swing_time = 0.0f;
 8000afe:	4b39      	ldr	r3, [pc, #228]	; (8000be4 <chassis_infantry_follow_gimbal_yaw_control+0x13c>)
 8000b00:	f04f 0200 	mov.w	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	e002      	b.n	8000b0e <chassis_infantry_follow_gimbal_yaw_control+0x66>
        }
    }
    else
    {
        swing_flag = 0;
 8000b08:	4b35      	ldr	r3, [pc, #212]	; (8000be0 <chassis_infantry_follow_gimbal_yaw_control+0x138>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
    }

    //judge if keyboard is controlling the chassis. if yes, reduce the "max_angle"
    if (chassis_move_rc_to_vector->chassis_RC->key.v & CHASSIS_FRONT_KEY || chassis_move_rc_to_vector->chassis_RC->key.v & CHASSIS_BACK_KEY ||
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	8a9b      	ldrh	r3, [r3, #20]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d117      	bne.n	8000b4e <chassis_infantry_follow_gimbal_yaw_control+0xa6>
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	8a9b      	ldrh	r3, [r3, #20]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d10f      	bne.n	8000b4e <chassis_infantry_follow_gimbal_yaw_control+0xa6>
        chassis_move_rc_to_vector->chassis_RC->key.v & CHASSIS_LEFT_KEY || chassis_move_rc_to_vector->chassis_RC->key.v & CHASSIS_RIGHT_KEY)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	8a9b      	ldrh	r3, [r3, #20]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	f003 0304 	and.w	r3, r3, #4
    if (chassis_move_rc_to_vector->chassis_RC->key.v & CHASSIS_FRONT_KEY || chassis_move_rc_to_vector->chassis_RC->key.v & CHASSIS_BACK_KEY ||
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d107      	bne.n	8000b4e <chassis_infantry_follow_gimbal_yaw_control+0xa6>
        chassis_move_rc_to_vector->chassis_RC->key.v & CHASSIS_LEFT_KEY || chassis_move_rc_to_vector->chassis_RC->key.v & CHASSIS_RIGHT_KEY)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	8a9b      	ldrh	r3, [r3, #20]
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	f003 0308 	and.w	r3, r3, #8
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d003      	beq.n	8000b56 <chassis_infantry_follow_gimbal_yaw_control+0xae>
    {
        max_angle = SWING_MOVE_ANGLE;
 8000b4e:	4b26      	ldr	r3, [pc, #152]	; (8000be8 <chassis_infantry_follow_gimbal_yaw_control+0x140>)
 8000b50:	4a26      	ldr	r2, [pc, #152]	; (8000bec <chassis_infantry_follow_gimbal_yaw_control+0x144>)
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	e002      	b.n	8000b5c <chassis_infantry_follow_gimbal_yaw_control+0xb4>
    }
    else
    {
        max_angle = SWING_NO_MOVE_ANGLE;
 8000b56:	4b24      	ldr	r3, [pc, #144]	; (8000be8 <chassis_infantry_follow_gimbal_yaw_control+0x140>)
 8000b58:	4a25      	ldr	r2, [pc, #148]	; (8000bf0 <chassis_infantry_follow_gimbal_yaw_control+0x148>)
 8000b5a:	601a      	str	r2, [r3, #0]
    }
    
    if (swing_flag)
 8000b5c:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <chassis_infantry_follow_gimbal_yaw_control+0x138>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d01c      	beq.n	8000b9e <chassis_infantry_follow_gimbal_yaw_control+0xf6>
    {
        swing_angle = max_angle * arm_sin_f32(swing_time);
 8000b64:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <chassis_infantry_follow_gimbal_yaw_control+0x13c>)
 8000b66:	edd3 7a00 	vldr	s15, [r3]
 8000b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8000b6e:	f013 f8f9 	bl	8013d64 <arm_sin_f32>
 8000b72:	eeb0 7a40 	vmov.f32	s14, s0
 8000b76:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <chassis_infantry_follow_gimbal_yaw_control+0x140>)
 8000b78:	edd3 7a00 	vldr	s15, [r3]
 8000b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b80:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <chassis_infantry_follow_gimbal_yaw_control+0x14c>)
 8000b82:	edc3 7a00 	vstr	s15, [r3]
        swing_time += add_time;
 8000b86:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <chassis_infantry_follow_gimbal_yaw_control+0x13c>)
 8000b88:	ed93 7a00 	vldr	s14, [r3]
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <chassis_infantry_follow_gimbal_yaw_control+0x150>)
 8000b8e:	edd3 7a00 	vldr	s15, [r3]
 8000b92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <chassis_infantry_follow_gimbal_yaw_control+0x13c>)
 8000b98:	edc3 7a00 	vstr	s15, [r3]
 8000b9c:	e003      	b.n	8000ba6 <chassis_infantry_follow_gimbal_yaw_control+0xfe>
    }
    else
    {
        swing_angle = 0.0f;
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <chassis_infantry_follow_gimbal_yaw_control+0x14c>)
 8000ba0:	f04f 0200 	mov.w	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
    }

    //swing_time  range [0, 2*PI]
    if (swing_time > 2 * PI)
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <chassis_infantry_follow_gimbal_yaw_control+0x13c>)
 8000ba8:	edd3 7a00 	vldr	s15, [r3]
 8000bac:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000bfc <chassis_infantry_follow_gimbal_yaw_control+0x154>
 8000bb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb8:	dd09      	ble.n	8000bce <chassis_infantry_follow_gimbal_yaw_control+0x126>
    {
        swing_time -= 2 * PI;
 8000bba:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <chassis_infantry_follow_gimbal_yaw_control+0x13c>)
 8000bbc:	edd3 7a00 	vldr	s15, [r3]
 8000bc0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000bfc <chassis_infantry_follow_gimbal_yaw_control+0x154>
 8000bc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <chassis_infantry_follow_gimbal_yaw_control+0x13c>)
 8000bca:	edc3 7a00 	vstr	s15, [r3]
    }

    *angle_set = swing_angle;
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <chassis_infantry_follow_gimbal_yaw_control+0x14c>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	e000      	b.n	8000bda <chassis_infantry_follow_gimbal_yaw_control+0x132>
        return;
 8000bd8:	bf00      	nop
}
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200002b9 	.word	0x200002b9
 8000be4:	200002bc 	.word	0x200002bc
 8000be8:	20000000 	.word	0x20000000
 8000bec:	3ea0d97c 	.word	0x3ea0d97c
 8000bf0:	3f333333 	.word	0x3f333333
 8000bf4:	200002c0 	.word	0x200002c0
 8000bf8:	080148e8 	.word	0x080148e8
 8000bfc:	40c90fdb 	.word	0x40c90fdb

08000c00 <chassis_engineer_follow_chassis_yaw_control>:
  * @param[out]     angle_set: control angle, range: [-PI, PI]
  * @param[in]      chassis_move_rc_to_vector: chassis data
  * @retval         none
  */
static void chassis_engineer_follow_chassis_yaw_control(float32_t *vx_set, float32_t *vy_set, float32_t *angle_set, chassis_move_t *chassis_move_rc_to_vector)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
 8000c0c:	603b      	str	r3, [r7, #0]
    if (vx_set == NULL || vy_set == NULL || angle_set == NULL || chassis_move_rc_to_vector == NULL)
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d02d      	beq.n	8000c70 <chassis_engineer_follow_chassis_yaw_control+0x70>
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d02a      	beq.n	8000c70 <chassis_engineer_follow_chassis_yaw_control+0x70>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d027      	beq.n	8000c70 <chassis_engineer_follow_chassis_yaw_control+0x70>
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d024      	beq.n	8000c70 <chassis_engineer_follow_chassis_yaw_control+0x70>
    {
        return;
    }

    chassis_rc_to_control_vector(vx_set, vy_set, chassis_move_rc_to_vector);
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	68b9      	ldr	r1, [r7, #8]
 8000c2a:	68f8      	ldr	r0, [r7, #12]
 8000c2c:	f000 faec 	bl	8001208 <chassis_rc_to_control_vector>

    *angle_set = rad_format(chassis_move_rc_to_vector->chassis_yaw_set - CHASSIS_ANGLE_Z_RC_SEN * chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_WZ_CHANNEL]);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	ee07 3a90 	vmov	s15, r3
 8000c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c48:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000c78 <chassis_engineer_follow_chassis_yaw_control+0x78>
 8000c4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c54:	ed9f 1a09 	vldr	s2, [pc, #36]	; 8000c7c <chassis_engineer_follow_chassis_yaw_control+0x7c>
 8000c58:	eddf 0a09 	vldr	s1, [pc, #36]	; 8000c80 <chassis_engineer_follow_chassis_yaw_control+0x80>
 8000c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c60:	f004 fa10 	bl	8005084 <loop_fp32_constrain>
 8000c64:	eef0 7a40 	vmov.f32	s15, s0
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	edc3 7a00 	vstr	s15, [r3]
 8000c6e:	e000      	b.n	8000c72 <chassis_engineer_follow_chassis_yaw_control+0x72>
        return;
 8000c70:	bf00      	nop
}
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	360637bd 	.word	0x360637bd
 8000c7c:	40490fdb 	.word	0x40490fdb
 8000c80:	c0490fdb 	.word	0xc0490fdb

08000c84 <chassis_no_follow_yaw_control>:
  * @param[out]     wz_set: rotation speed value, positive -> counter-clockwise, negative -> clockwise.
  * @param[in]      chassis_move_rc_to_vector: chassis data
  * @retval         none
  */
static void chassis_no_follow_yaw_control(float32_t *vx_set, float32_t *vy_set, float32_t *wz_set, chassis_move_t *chassis_move_rc_to_vector)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
 8000c90:	603b      	str	r3, [r7, #0]
    if (vx_set == NULL || vy_set == NULL || wz_set == NULL || chassis_move_rc_to_vector == NULL)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d01e      	beq.n	8000cd6 <chassis_no_follow_yaw_control+0x52>
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d01b      	beq.n	8000cd6 <chassis_no_follow_yaw_control+0x52>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d018      	beq.n	8000cd6 <chassis_no_follow_yaw_control+0x52>
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d015      	beq.n	8000cd6 <chassis_no_follow_yaw_control+0x52>
    {
        return;
    }

    chassis_rc_to_control_vector(vx_set, vy_set, chassis_move_rc_to_vector);
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	68b9      	ldr	r1, [r7, #8]
 8000cae:	68f8      	ldr	r0, [r7, #12]
 8000cb0:	f000 faaa 	bl	8001208 <chassis_rc_to_control_vector>
    *wz_set = -CHASSIS_WZ_RC_SEN * chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_WZ_CHANNEL];
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000cbc:	b21b      	sxth	r3, r3
 8000cbe:	ee07 3a90 	vmov	s15, r3
 8000cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000ce0 <chassis_no_follow_yaw_control+0x5c>
 8000cca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	edc3 7a00 	vstr	s15, [r3]
 8000cd4:	e000      	b.n	8000cd8 <chassis_no_follow_yaw_control+0x54>
        return;
 8000cd6:	bf00      	nop
}
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	bba3d70a 	.word	0xbba3d70a

08000ce4 <chassis_open_set_control>:
  * @param[out]     wz_set: rotation speed value, positive -> counter-clockwise, negative -> clockwise.
  * @param[in]      chassis_move_rc_to_vector: chassis data
  * @retval         none
  */
static void chassis_open_set_control(float32_t *vx_set, float32_t *vy_set, float32_t *wz_set, chassis_move_t *chassis_move_rc_to_vector)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
 8000cf0:	603b      	str	r3, [r7, #0]
    if (vx_set == NULL || vy_set == NULL || wz_set == NULL || chassis_move_rc_to_vector == NULL)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d03c      	beq.n	8000d72 <chassis_open_set_control+0x8e>
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d039      	beq.n	8000d72 <chassis_open_set_control+0x8e>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d036      	beq.n	8000d72 <chassis_open_set_control+0x8e>
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d033      	beq.n	8000d72 <chassis_open_set_control+0x8e>
    {
        return;
    }

    *vx_set = chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_X_CHANNEL] * CHASSIS_OPEN_RC_SCALE;
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	461a      	mov	r2, r3
 8000d16:	4613      	mov	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4413      	add	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	ee07 3a90 	vmov	s15, r3
 8000d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	edc3 7a00 	vstr	s15, [r3]
    *vy_set = -chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_Y_CHANNEL] * CHASSIS_OPEN_RC_SCALE;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d34:	b21b      	sxth	r3, r3
 8000d36:	461a      	mov	r2, r3
 8000d38:	f06f 0309 	mvn.w	r3, #9
 8000d3c:	fb03 f302 	mul.w	r3, r3, r2
 8000d40:	ee07 3a90 	vmov	s15, r3
 8000d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	edc3 7a00 	vstr	s15, [r3]
    *wz_set = -chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_WZ_CHANNEL] * CHASSIS_OPEN_RC_SCALE;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d56:	b21b      	sxth	r3, r3
 8000d58:	461a      	mov	r2, r3
 8000d5a:	f06f 0309 	mvn.w	r3, #9
 8000d5e:	fb03 f302 	mul.w	r3, r3, r2
 8000d62:	ee07 3a90 	vmov	s15, r3
 8000d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	edc3 7a00 	vstr	s15, [r3]
    return;
 8000d70:	e000      	b.n	8000d74 <chassis_open_set_control+0x90>
        return;
 8000d72:	bf00      	nop
}
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <chassis_task>:
  * @brief          chassis task, osDelay CHASSIS_CONTROL_TIME_MS (2ms) 
  * @param[in]      pvParameters: null
  * @retval         none
  */
void chassis_task(void *pvParameters)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
    //wait for a period initially
    vTaskDelay(CHASSIS_TASK_INIT_TIME);
 8000d88:	f240 1065 	movw	r0, #357	; 0x165
 8000d8c:	f010 fc68 	bl	8011660 <vTaskDelay>

    //chassis initialization
    chassis_init(&chassis_move);
 8000d90:	4838      	ldr	r0, [pc, #224]	; (8000e74 <chassis_task+0xf4>)
 8000d92:	f000 f873 	bl	8000e7c <chassis_init>

    //make sure all chassis motors are online
    while (toe_is_error(CHASSIS_MOTOR1_TOE) || toe_is_error(CHASSIS_MOTOR2_TOE) || toe_is_error(CHASSIS_MOTOR3_TOE) || toe_is_error(CHASSIS_MOTOR4_TOE) || toe_is_error(DBUS_TOE))
 8000d96:	e002      	b.n	8000d9e <chassis_task+0x1e>
    {
        vTaskDelay(CHASSIS_CONTROL_TIME_MS);
 8000d98:	2002      	movs	r0, #2
 8000d9a:	f010 fc61 	bl	8011660 <vTaskDelay>
    while (toe_is_error(CHASSIS_MOTOR1_TOE) || toe_is_error(CHASSIS_MOTOR2_TOE) || toe_is_error(CHASSIS_MOTOR3_TOE) || toe_is_error(CHASSIS_MOTOR4_TOE) || toe_is_error(DBUS_TOE))
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f000 ffa0 	bl	8001ce4 <toe_is_error>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1f6      	bne.n	8000d98 <chassis_task+0x18>
 8000daa:	2002      	movs	r0, #2
 8000dac:	f000 ff9a 	bl	8001ce4 <toe_is_error>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1f0      	bne.n	8000d98 <chassis_task+0x18>
 8000db6:	2003      	movs	r0, #3
 8000db8:	f000 ff94 	bl	8001ce4 <toe_is_error>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1ea      	bne.n	8000d98 <chassis_task+0x18>
 8000dc2:	2004      	movs	r0, #4
 8000dc4:	f000 ff8e 	bl	8001ce4 <toe_is_error>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d1e4      	bne.n	8000d98 <chassis_task+0x18>
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f000 ff88 	bl	8001ce4 <toe_is_error>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1de      	bne.n	8000d98 <chassis_task+0x18>
    }

    while (1)
    {
        //set chassis control mode
        chassis_set_mode(&chassis_move);
 8000dda:	4826      	ldr	r0, [pc, #152]	; (8000e74 <chassis_task+0xf4>)
 8000ddc:	f000 f8e0 	bl	8000fa0 <chassis_set_mode>

        //when mode changes, some data may needs changing
        chassis_mode_change_control_transit(&chassis_move);
 8000de0:	4824      	ldr	r0, [pc, #144]	; (8000e74 <chassis_task+0xf4>)
 8000de2:	f000 f8ec 	bl	8000fbe <chassis_mode_change_control_transit>

        //chassis data update
        chassis_feedback_update(&chassis_move);
 8000de6:	4823      	ldr	r0, [pc, #140]	; (8000e74 <chassis_task+0xf4>)
 8000de8:	f000 f92e 	bl	8001048 <chassis_feedback_update>

        //set chassis control set-point
        chassis_set_contorl(&chassis_move);
 8000dec:	4821      	ldr	r0, [pc, #132]	; (8000e74 <chassis_task+0xf4>)
 8000dee:	f000 faf7 	bl	80013e0 <chassis_set_contorl>

        //chassis control pid calculate
        chassis_control_loop(&chassis_move);
 8000df2:	4820      	ldr	r0, [pc, #128]	; (8000e74 <chassis_task+0xf4>)
 8000df4:	f000 fcc2 	bl	800177c <chassis_control_loop>

        //make sure at least one motor is online, so that feedback CAN control message can be received
        if (!(toe_is_error(CHASSIS_MOTOR1_TOE) && toe_is_error(CHASSIS_MOTOR2_TOE) && toe_is_error(CHASSIS_MOTOR3_TOE) && toe_is_error(CHASSIS_MOTOR4_TOE)))
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f000 ff73 	bl	8001ce4 <toe_is_error>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d011      	beq.n	8000e28 <chassis_task+0xa8>
 8000e04:	2002      	movs	r0, #2
 8000e06:	f000 ff6d 	bl	8001ce4 <toe_is_error>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d00b      	beq.n	8000e28 <chassis_task+0xa8>
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 ff67 	bl	8001ce4 <toe_is_error>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d005      	beq.n	8000e28 <chassis_task+0xa8>
 8000e1c:	2004      	movs	r0, #4
 8000e1e:	f000 ff61 	bl	8001ce4 <toe_is_error>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d11a      	bne.n	8000e5e <chassis_task+0xde>
        {
            //when remote controller is offline, send zero current to chassis motor
            if (toe_is_error(DBUS_TOE))
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f000 ff5b 	bl	8001ce4 <toe_is_error>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d006      	beq.n	8000e42 <chassis_task+0xc2>
            {
                CAN_cmd_chassis(0, 0, 0, 0);
 8000e34:	2300      	movs	r3, #0
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f7ff fc8a 	bl	8000754 <CAN_cmd_chassis>
 8000e40:	e00d      	b.n	8000e5e <chassis_task+0xde>
            }
            else
            {
                //send control current
                CAN_cmd_chassis(chassis_move.motor_chassis[0].give_current, chassis_move.motor_chassis[1].give_current,
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <chassis_task+0xf4>)
 8000e44:	f9b3 0024 	ldrsh.w	r0, [r3, #36]	; 0x24
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <chassis_task+0xf4>)
 8000e4a:	f9b3 1038 	ldrsh.w	r1, [r3, #56]	; 0x38
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <chassis_task+0xf4>)
 8000e50:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	; 0x4c
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <chassis_task+0xf4>)
 8000e56:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 8000e5a:	f7ff fc7b 	bl	8000754 <CAN_cmd_chassis>
                                chassis_move.motor_chassis[2].give_current, chassis_move.motor_chassis[3].give_current);
            }
        }

        //OS delay
        vTaskDelay(CHASSIS_CONTROL_TIME_MS);
 8000e5e:	2002      	movs	r0, #2
 8000e60:	f010 fbfe 	bl	8011660 <vTaskDelay>

#if INCLUDE_uxTaskGetStackHighWaterMark
        chassis_high_water = uxTaskGetStackHighWaterMark(NULL);
 8000e64:	2000      	movs	r0, #0
 8000e66:	f011 f853 	bl	8011f10 <uxTaskGetStackHighWaterMark>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	4a02      	ldr	r2, [pc, #8]	; (8000e78 <chassis_task+0xf8>)
 8000e6e:	6013      	str	r3, [r2, #0]
        chassis_set_mode(&chassis_move);
 8000e70:	e7b3      	b.n	8000dda <chassis_task+0x5a>
 8000e72:	bf00      	nop
 8000e74:	20004ec8 	.word	0x20004ec8
 8000e78:	20004ec4 	.word	0x20004ec4

08000e7c <chassis_init>:
  *                 ->gyroscope sensor angle pointer initialization.
  * @param[out]     chassis_move_init: "chassis_move" pointer
  * @retval         none
  */
static void chassis_init(chassis_move_t *chassis_move_init)
{
 8000e7c:	b590      	push	{r4, r7, lr}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
    if (chassis_move_init == NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d074      	beq.n	8000f74 <chassis_init+0xf8>
    const static float32_t chassis_x_order_filter[1] = {CHASSIS_ACCEL_X_NUM};
    const static float32_t chassis_y_order_filter[1] = {CHASSIS_ACCEL_Y_NUM};
    uint8_t i;

    //at the beginning， chassis control mode is raw
    chassis_move_init->chassis_mode = CHASSIS_VECTOR_RAW;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	741a      	strb	r2, [r3, #16]

    //get remote control data pointer
    chassis_move_init->chassis_RC = get_remote_control_point();
 8000e90:	f002 fbc8 	bl	8003624 <get_remote_control_point>
 8000e94:	4602      	mov	r2, r0
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	601a      	str	r2, [r3, #0]

    //get gyroscope sensor euler angle pointer
    chassis_move_init->chassis_INS_angle = get_INS_angle_point();
 8000e9a:	f7ff fce9 	bl	8000870 <get_INS_angle_point>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	60da      	str	r2, [r3, #12]

    //get gimbal motor data pointer (yaw / pitch)
    chassis_move_init->chassis_yaw_motor = get_yaw_motor_point();
 8000ea4:	f001 fe06 	bl	8002ab4 <get_yaw_motor_point>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	605a      	str	r2, [r3, #4]
    chassis_move_init->chassis_pitch_motor = get_pitch_motor_point();
 8000eae:	f001 fe0b 	bl	8002ac8 <get_pitch_motor_point>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
    
    //get chassis motor data pointer, initialize motor speed PID
    for (i = 0; i < 4; i++)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	e022      	b.n	8000f04 <chassis_init+0x88>
    {
        chassis_move_init->motor_chassis[i].chassis_motor_measure = get_chassis_motor_measure_point(i);
 8000ebe:	7bfc      	ldrb	r4, [r7, #15]
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fcbe 	bl	8000844 <get_chassis_motor_measure_point>
 8000ec8:	4601      	mov	r1, r0
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	4623      	mov	r3, r4
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4423      	add	r3, r4
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4413      	add	r3, r2
 8000ed6:	3314      	adds	r3, #20
 8000ed8:	6019      	str	r1, [r3, #0]
        PID_init(&chassis_move_init->motor_speed_pid[i], PID_POSITION, motor_speed_pid, M3505_MOTOR_SPEED_PID_MAX_OUT, M3505_MOTOR_SPEED_PID_MAX_IOUT);
 8000eda:	7bfa      	ldrb	r2, [r7, #15]
 8000edc:	4613      	mov	r3, r2
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	4413      	add	r3, r2
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	3360      	adds	r3, #96	; 0x60
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	3304      	adds	r3, #4
 8000eec:	eddf 0a23 	vldr	s1, [pc, #140]	; 8000f7c <chassis_init+0x100>
 8000ef0:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8000f80 <chassis_init+0x104>
 8000ef4:	4a23      	ldr	r2, [pc, #140]	; (8000f84 <chassis_init+0x108>)
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f004 f928 	bl	800514e <PID_init>
    for (i = 0; i < 4; i++)
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	3301      	adds	r3, #1
 8000f02:	73fb      	strb	r3, [r7, #15]
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d9d9      	bls.n	8000ebe <chassis_init+0x42>
    }
    //initialize angle PID
    PID_init(&chassis_move_init->chassis_angle_pid, PID_POSITION, chassis_yaw_pid, CHASSIS_FOLLOW_GIMBAL_PID_MAX_OUT, CHASSIS_FOLLOW_GIMBAL_PID_MAX_IOUT);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000f10:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8000f88 <chassis_init+0x10c>
 8000f14:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8000f18:	4a1c      	ldr	r2, [pc, #112]	; (8000f8c <chassis_init+0x110>)
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f004 f916 	bl	800514e <PID_init>
    
    //first order low-pass filter (replace ramp function) struct initialization
    first_order_filter_init(&chassis_move_init->chassis_cmd_slow_set_vx, CHASSIS_CONTROL_TIME, chassis_x_order_filter);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8000f28:	4919      	ldr	r1, [pc, #100]	; (8000f90 <chassis_init+0x114>)
 8000f2a:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8000f94 <chassis_init+0x118>
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f003 ffec 	bl	8004f0c <first_order_filter_init>
    first_order_filter_init(&chassis_move_init->chassis_cmd_slow_set_vy, CHASSIS_CONTROL_TIME, chassis_y_order_filter);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8000f3a:	4917      	ldr	r1, [pc, #92]	; (8000f98 <chassis_init+0x11c>)
 8000f3c:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8000f94 <chassis_init+0x118>
 8000f40:	4618      	mov	r0, r3
 8000f42:	f003 ffe3 	bl	8004f0c <first_order_filter_init>

    //max and min speed
    chassis_move_init->vx_max_speed = NORMAL_MAX_CHASSIS_SPEED_X;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f4c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    chassis_move_init->vx_min_speed = -NORMAL_MAX_CHASSIS_SPEED_X;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8000f56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    chassis_move_init->vy_max_speed = NORMAL_MAX_CHASSIS_SPEED_Y;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8000f60:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    chassis_move_init->vy_min_speed = -NORMAL_MAX_CHASSIS_SPEED_Y;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <chassis_init+0x120>)
 8000f68:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    //update data
    chassis_feedback_update(chassis_move_init);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f86b 	bl	8001048 <chassis_feedback_update>
 8000f72:	e000      	b.n	8000f76 <chassis_init+0xfa>
        return;
 8000f74:	bf00      	nop
}
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd90      	pop	{r4, r7, pc}
 8000f7c:	44fa0000 	.word	0x44fa0000
 8000f80:	467a0000 	.word	0x467a0000
 8000f84:	080148ec 	.word	0x080148ec
 8000f88:	3e4ccccd 	.word	0x3e4ccccd
 8000f8c:	080148f8 	.word	0x080148f8
 8000f90:	08014904 	.word	0x08014904
 8000f94:	3b03126f 	.word	0x3b03126f
 8000f98:	08014908 	.word	0x08014908
 8000f9c:	bfc00000 	.word	0xbfc00000

08000fa0 <chassis_set_mode>:
  *                 mainly changed in 'chassis_behaviour_mode_set' function
  * @param[out]     chassis_move_mode: "chassis_move" pointer
  * @retval         none
  */
static void chassis_set_mode(chassis_move_t *chassis_move_mode)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
    if (chassis_move_mode == NULL)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <chassis_set_mode+0x16>
    {
        return;
    }

    //in file "chassis_behaviour.c"
    chassis_behaviour_mode_set(chassis_move_mode);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff fc72 	bl	8000898 <chassis_behaviour_mode_set>
 8000fb4:	e000      	b.n	8000fb8 <chassis_set_mode+0x18>
        return;
 8000fb6:	bf00      	nop
}
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <chassis_mode_change_control_transit>:
  *                 such as chassis "yaw_set" should be chassis yaw angle at this time
  * @param[in][out] chassis_move_transit: "chassis_move" pointer
  * @retval         none
  */
static void chassis_mode_change_control_transit(chassis_move_t *chassis_move_transit)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
    if (chassis_move_transit == NULL)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d035      	beq.n	8001038 <chassis_mode_change_control_transit+0x7a>
    {
        return;
    }

    if (chassis_move_transit->last_chassis_mode == chassis_move_transit->chassis_mode)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	7c5a      	ldrb	r2, [r3, #17]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	7c1b      	ldrb	r3, [r3, #16]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d031      	beq.n	800103c <chassis_mode_change_control_transit+0x7e>
    {
        return;
    }

    //change to follow gimbal angle mode
    if ((chassis_move_transit->last_chassis_mode != CHASSIS_VECTOR_FOLLOW_GIMBAL_YAW) && chassis_move_transit->chassis_mode == CHASSIS_VECTOR_FOLLOW_GIMBAL_YAW)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7c5b      	ldrb	r3, [r3, #17]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d009      	beq.n	8000ff4 <chassis_mode_change_control_transit+0x36>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	7c1b      	ldrb	r3, [r3, #16]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d105      	bne.n	8000ff4 <chassis_mode_change_control_transit+0x36>
    {
        chassis_move_transit->chassis_relative_angle_set = 0.0f;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8000ff2:	e01c      	b.n	800102e <chassis_mode_change_control_transit+0x70>
    }
    //change to follow chassis yaw angle
    else if ((chassis_move_transit->last_chassis_mode != CHASSIS_VECTOR_FOLLOW_CHASSIS_YAW) && chassis_move_transit->chassis_mode == CHASSIS_VECTOR_FOLLOW_CHASSIS_YAW)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7c5b      	ldrb	r3, [r3, #17]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d00a      	beq.n	8001012 <chassis_mode_change_control_transit+0x54>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	7c1b      	ldrb	r3, [r3, #16]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d106      	bne.n	8001012 <chassis_mode_change_control_transit+0x54>
    {
        chassis_move_transit->chassis_yaw_set = chassis_move_transit->chassis_yaw;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8001010:	e00d      	b.n	800102e <chassis_mode_change_control_transit+0x70>
    }
    //change to no follow (gimbal) angle
    else if ((chassis_move_transit->last_chassis_mode != CHASSIS_VECTOR_NO_FOLLOW_YAW) && chassis_move_transit->chassis_mode == CHASSIS_VECTOR_NO_FOLLOW_YAW)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	7c5b      	ldrb	r3, [r3, #17]
 8001016:	2b02      	cmp	r3, #2
 8001018:	d009      	beq.n	800102e <chassis_mode_change_control_transit+0x70>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7c1b      	ldrb	r3, [r3, #16]
 800101e:	2b02      	cmp	r3, #2
 8001020:	d105      	bne.n	800102e <chassis_mode_change_control_transit+0x70>
    {
        chassis_move_transit->chassis_yaw_set = chassis_move_transit->chassis_yaw;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    }

    chassis_move_transit->last_chassis_mode = chassis_move_transit->chassis_mode;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	7c1a      	ldrb	r2, [r3, #16]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	745a      	strb	r2, [r3, #17]
 8001036:	e002      	b.n	800103e <chassis_mode_change_control_transit+0x80>
        return;
 8001038:	bf00      	nop
 800103a:	e000      	b.n	800103e <chassis_mode_change_control_transit+0x80>
        return;
 800103c:	bf00      	nop
}
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <chassis_feedback_update>:
  *                 such as motor speed, euler angle， robot speed
  * @param[out]     chassis_move_update: "chassis_move" pointer
  * @retval         none
  */
static void chassis_feedback_update(chassis_move_t *chassis_move_update)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    if (chassis_move_update == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	f000 80c9 	beq.w	80011ea <chassis_feedback_update+0x1a2>
    {
        return;
    }

    uint8_t i = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < 4; i++)
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	e037      	b.n	80010d2 <chassis_feedback_update+0x8a>
    {
        //update motor speed
        chassis_move_update->motor_chassis[i].speed = CHASSIS_MOTOR_RPM_TO_VECTOR_SEN * chassis_move_update->motor_chassis[i].chassis_motor_measure->speed_rpm;
 8001062:	7bfa      	ldrb	r2, [r7, #15]
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	3314      	adds	r3, #20
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001078:	ee07 3a90 	vmov	s15, r3
 800107c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80011f4 <chassis_feedback_update+0x1ac>
 8001086:	ee67 7a87 	vmul.f32	s15, s15, s14
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	331c      	adds	r3, #28
 8001098:	edc3 7a00 	vstr	s15, [r3]
        //acceleration is differential of speed PID
        //(acceleration is useless now)
        chassis_move_update->motor_chassis[i].accel = chassis_move_update->motor_speed_pid[i].Dbuf[0] * CHASSIS_CONTROL_FREQUENCE;
 800109c:	7bfa      	ldrb	r2, [r7, #15]
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	4613      	mov	r3, r2
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	4413      	add	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	440b      	add	r3, r1
 80010aa:	3394      	adds	r3, #148	; 0x94
 80010ac:	edd3 7a00 	vldr	s15, [r3]
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80011f8 <chassis_feedback_update+0x1b0>
 80010b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	3318      	adds	r3, #24
 80010c8:	edc3 7a00 	vstr	s15, [r3]
    for (i = 0; i < 4; i++)
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	3301      	adds	r3, #1
 80010d0:	73fb      	strb	r3, [r7, #15]
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d9c4      	bls.n	8001062 <chassis_feedback_update+0x1a>
    }

    //calculate chassis vertical speed (vx), horizontal speed (vy),rotation speed (wz)
    //coordinate system based on right hand rule
    //(this part need to be checked)
    chassis_move_update->vx = (-chassis_move_update->motor_chassis[0].speed + chassis_move_update->motor_chassis[1].speed + chassis_move_update->motor_chassis[2].speed - chassis_move_update->motor_chassis[3].speed) * MOTOR_SPEED_TO_CHASSIS_SPEED_VX;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	edd3 7a07 	vldr	s15, [r3, #28]
 80010e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80010ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80010f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010fc:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001100:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	edc3 7a7b 	vstr	s15, [r3, #492]	; 0x1ec
    chassis_move_update->vy = (-chassis_move_update->motor_chassis[0].speed - chassis_move_update->motor_chassis[1].speed + chassis_move_update->motor_chassis[2].speed + chassis_move_update->motor_chassis[3].speed) * MOTOR_SPEED_TO_CHASSIS_SPEED_VY;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001110:	eeb1 7a67 	vneg.f32	s14, s15
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800111a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001124:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800112e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001132:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001136:	ee67 7a87 	vmul.f32	s15, s15, s14
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	edc3 7a7c 	vstr	s15, [r3, #496]	; 0x1f0
    chassis_move_update->wz = (-chassis_move_update->motor_chassis[0].speed - chassis_move_update->motor_chassis[1].speed - chassis_move_update->motor_chassis[2].speed - chassis_move_update->motor_chassis[3].speed) * MOTOR_SPEED_TO_CHASSIS_SPEED_WZ / MOTOR_DISTANCE_TO_CENTER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	edd3 7a07 	vldr	s15, [r3, #28]
 8001146:	eeb1 7a67 	vneg.f32	s14, s15
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001150:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800115a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001168:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800116c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001170:	eddf 6a22 	vldr	s13, [pc, #136]	; 80011fc <chassis_feedback_update+0x1b4>
 8001174:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	edc3 7a7d 	vstr	s15, [r3, #500]	; 0x1f4

    //calculate chassis euler angle
    //if chassis is added a gyroscope sensor, please change this code
    chassis_move_update->chassis_yaw = rad_format(*(chassis_move_update->chassis_INS_angle + INS_YAW_ADDRESS_OFFSET) - chassis_move_update->chassis_yaw_motor->relative_angle);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	ed93 7a00 	vldr	s14, [r3]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 800118e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001192:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8001200 <chassis_feedback_update+0x1b8>
 8001196:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8001204 <chassis_feedback_update+0x1bc>
 800119a:	eeb0 0a67 	vmov.f32	s0, s15
 800119e:	f003 ff71 	bl	8005084 <loop_fp32_constrain>
 80011a2:	eef0 7a40 	vmov.f32	s15, s0
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	edc3 7a88 	vstr	s15, [r3, #544]	; 0x220
    chassis_move_update->chassis_pitch = rad_format(*(chassis_move_update->chassis_INS_angle + INS_PITCH_ADDRESS_OFFSET) - chassis_move_update->chassis_pitch_motor->relative_angle);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	3304      	adds	r3, #4
 80011b2:	ed93 7a00 	vldr	s14, [r3]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 80011be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011c2:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 8001200 <chassis_feedback_update+0x1b8>
 80011c6:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8001204 <chassis_feedback_update+0x1bc>
 80011ca:	eeb0 0a67 	vmov.f32	s0, s15
 80011ce:	f003 ff59 	bl	8005084 <loop_fp32_constrain>
 80011d2:	eef0 7a40 	vmov.f32	s15, s0
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	edc3 7a89 	vstr	s15, [r3, #548]	; 0x224
    chassis_move_update->chassis_roll = *(chassis_move_update->chassis_INS_angle + INS_ROLL_ADDRESS_OFFSET);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
 80011e8:	e000      	b.n	80011ec <chassis_feedback_update+0x1a4>
        return;
 80011ea:	bf00      	nop
}
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	39da010a 	.word	0x39da010a
 80011f8:	43fa0000 	.word	0x43fa0000
 80011fc:	3e4ccccd 	.word	0x3e4ccccd
 8001200:	40490fdb 	.word	0x40490fdb
 8001204:	c0490fdb 	.word	0xc0490fdb

08001208 <chassis_rc_to_control_vector>:
  * @param[out]     vy_set: horizontal speed set-point
  * @param[out]     chassis_move_rc_to_vector: "chassis_move" pointer
  * @retval         none
  */
void chassis_rc_to_control_vector(float32_t *vx_set, float32_t *vy_set, chassis_move_t *chassis_move_rc_to_vector)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
    if (chassis_move_rc_to_vector == NULL || vx_set == NULL || vy_set == NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 80d1 	beq.w	80013be <chassis_rc_to_control_vector+0x1b6>
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 80cd 	beq.w	80013be <chassis_rc_to_control_vector+0x1b6>
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 80c9 	beq.w	80013be <chassis_rc_to_control_vector+0x1b6>
    int16_t vx_channel, vy_channel;
    float32_t vx_set_channel, vy_set_channel;

    //dead zone limit, because some remote control need be calibrated
    //the value of joy stick is not zero in middle place
    rc_deadband_limit(chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_X_CHANNEL], vx_channel, CHASSIS_RC_DEADLINE);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001234:	b21b      	sxth	r3, r3
 8001236:	2b0a      	cmp	r3, #10
 8001238:	dc07      	bgt.n	800124a <chassis_rc_to_control_vector+0x42>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001242:	b21b      	sxth	r3, r3
 8001244:	f113 0f0a 	cmn.w	r3, #10
 8001248:	da09      	bge.n	800125e <chassis_rc_to_control_vector+0x56>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	789a      	ldrb	r2, [r3, #2]
 8001250:	78db      	ldrb	r3, [r3, #3]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	4313      	orrs	r3, r2
 8001256:	041b      	lsls	r3, r3, #16
 8001258:	141b      	asrs	r3, r3, #16
 800125a:	83fb      	strh	r3, [r7, #30]
 800125c:	e001      	b.n	8001262 <chassis_rc_to_control_vector+0x5a>
 800125e:	2300      	movs	r3, #0
 8001260:	83fb      	strh	r3, [r7, #30]
    rc_deadband_limit(chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_Y_CHANNEL], vy_channel, CHASSIS_RC_DEADLINE);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800126a:	b21b      	sxth	r3, r3
 800126c:	2b0a      	cmp	r3, #10
 800126e:	dc07      	bgt.n	8001280 <chassis_rc_to_control_vector+0x78>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001278:	b21b      	sxth	r3, r3
 800127a:	f113 0f0a 	cmn.w	r3, #10
 800127e:	da09      	bge.n	8001294 <chassis_rc_to_control_vector+0x8c>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	781a      	ldrb	r2, [r3, #0]
 8001286:	785b      	ldrb	r3, [r3, #1]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	4313      	orrs	r3, r2
 800128c:	041b      	lsls	r3, r3, #16
 800128e:	141b      	asrs	r3, r3, #16
 8001290:	83bb      	strh	r3, [r7, #28]
 8001292:	e001      	b.n	8001298 <chassis_rc_to_control_vector+0x90>
 8001294:	2300      	movs	r3, #0
 8001296:	83bb      	strh	r3, [r7, #28]

    //(sign need checked)
    vx_set_channel = vx_channel * CHASSIS_VX_RC_SEN;
 8001298:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800129c:	ee07 3a90 	vmov	s15, r3
 80012a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80013c8 <chassis_rc_to_control_vector+0x1c0>
 80012a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ac:	edc7 7a06 	vstr	s15, [r7, #24]
    vy_set_channel = vy_channel * -CHASSIS_VY_RC_SEN;
 80012b0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012b4:	ee07 3a90 	vmov	s15, r3
 80012b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012bc:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80013cc <chassis_rc_to_control_vector+0x1c4>
 80012c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012c4:	edc7 7a05 	vstr	s15, [r7, #20]

    //keyboard set speed set-point
    if (chassis_move_rc_to_vector->chassis_RC->key.v & CHASSIS_FRONT_KEY)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	8a9b      	ldrh	r3, [r3, #20]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d004      	beq.n	80012e2 <chassis_rc_to_control_vector+0xda>
    {
        vx_set_channel = chassis_move_rc_to_vector->vx_max_speed;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80012de:	61bb      	str	r3, [r7, #24]
 80012e0:	e00b      	b.n	80012fa <chassis_rc_to_control_vector+0xf2>
    }
    else if (chassis_move_rc_to_vector->chassis_RC->key.v & CHASSIS_BACK_KEY)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	8a9b      	ldrh	r3, [r3, #20]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <chassis_rc_to_control_vector+0xf2>
    {
        vx_set_channel = chassis_move_rc_to_vector->vx_min_speed;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80012f8:	61bb      	str	r3, [r7, #24]
    }

    if (chassis_move_rc_to_vector->chassis_RC->key.v & CHASSIS_LEFT_KEY)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	8a9b      	ldrh	r3, [r3, #20]
 8001300:	b29b      	uxth	r3, r3
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	2b00      	cmp	r3, #0
 8001308:	d004      	beq.n	8001314 <chassis_rc_to_control_vector+0x10c>
    {
        vy_set_channel = chassis_move_rc_to_vector->vy_max_speed;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	e00b      	b.n	800132c <chassis_rc_to_control_vector+0x124>
    }
    else if (chassis_move_rc_to_vector->chassis_RC->key.v & CHASSIS_RIGHT_KEY)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	8a9b      	ldrh	r3, [r3, #20]
 800131a:	b29b      	uxth	r3, r3
 800131c:	f003 0308 	and.w	r3, r3, #8
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <chassis_rc_to_control_vector+0x124>
    {
        vy_set_channel = chassis_move_rc_to_vector->vy_min_speed;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800132a:	617b      	str	r3, [r7, #20]
    }

    //first order low-pass replace ramp function, calculate chassis speed set-point to improve control performance
    first_order_filter_cali(&chassis_move_rc_to_vector->chassis_cmd_slow_set_vx, vx_set_channel);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8001332:	ed97 0a06 	vldr	s0, [r7, #24]
 8001336:	4618      	mov	r0, r3
 8001338:	f003 fe04 	bl	8004f44 <first_order_filter_cali>
    first_order_filter_cali(&chassis_move_rc_to_vector->chassis_cmd_slow_set_vy, vy_set_channel);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8001342:	ed97 0a05 	vldr	s0, [r7, #20]
 8001346:	4618      	mov	r0, r3
 8001348:	f003 fdfc 	bl	8004f44 <first_order_filter_cali>

    //stop command, no need slow speed change, set zero directly
    if (vx_set_channel < CHASSIS_RC_DEADLINE * CHASSIS_VX_RC_SEN && vx_set_channel > -CHASSIS_RC_DEADLINE * CHASSIS_VX_RC_SEN)
 800134c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001350:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80013d0 <chassis_rc_to_control_vector+0x1c8>
 8001354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135c:	d50d      	bpl.n	800137a <chassis_rc_to_control_vector+0x172>
 800135e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001362:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80013d4 <chassis_rc_to_control_vector+0x1cc>
 8001366:	eef4 7ac7 	vcmpe.f32	s15, s14
 800136a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136e:	dd04      	ble.n	800137a <chassis_rc_to_control_vector+0x172>
    {
        chassis_move_rc_to_vector->chassis_cmd_slow_set_vx.out = 0.0f;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
    }

    if (vy_set_channel < CHASSIS_RC_DEADLINE * CHASSIS_VY_RC_SEN && vy_set_channel > -CHASSIS_RC_DEADLINE * CHASSIS_VY_RC_SEN)
 800137a:	edd7 7a05 	vldr	s15, [r7, #20]
 800137e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80013d8 <chassis_rc_to_control_vector+0x1d0>
 8001382:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138a:	d50d      	bpl.n	80013a8 <chassis_rc_to_control_vector+0x1a0>
 800138c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001390:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80013dc <chassis_rc_to_control_vector+0x1d4>
 8001394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139c:	dd04      	ble.n	80013a8 <chassis_rc_to_control_vector+0x1a0>
    {
        chassis_move_rc_to_vector->chassis_cmd_slow_set_vy.out = 0.0f;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
    }

    *vx_set = chassis_move_rc_to_vector->chassis_cmd_slow_set_vx.out;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f8d3 21d0 	ldr.w	r2, [r3, #464]	; 0x1d0
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	601a      	str	r2, [r3, #0]
    *vy_set = chassis_move_rc_to_vector->chassis_cmd_slow_set_vy.out;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	e000      	b.n	80013c0 <chassis_rc_to_control_vector+0x1b8>
        return;
 80013be:	bf00      	nop
}
 80013c0:	3720      	adds	r7, #32
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	3bc49ba6 	.word	0x3bc49ba6
 80013cc:	bba3d70a 	.word	0xbba3d70a
 80013d0:	3d75c290 	.word	0x3d75c290
 80013d4:	bd75c290 	.word	0xbd75c290
 80013d8:	3d4ccccc 	.word	0x3d4ccccc
 80013dc:	bd4ccccc 	.word	0xbd4ccccc

080013e0 <chassis_set_contorl>:
  *                 "chassis_behaviour_control_set" function.
  * @param[out]     chassis_move_update: "chassis_move" pointer
  * @retval         none
  */
static void chassis_set_contorl(chassis_move_t *chassis_move_control)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

    if (chassis_move_control == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 815d 	beq.w	80016aa <chassis_set_contorl+0x2ca>
    {
        return;
    }

    float32_t vx_set = 0.0f, vy_set = 0.0f, angle_set = 0.0f;
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	f04f 0300 	mov.w	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]

    //get three control set-point
    //by "chassis_behaviour_control_set" function (in "chassis_behaviour.c")
    chassis_behaviour_control_set(&vx_set, &vy_set, &angle_set, chassis_move_control);
 8001402:	f107 0208 	add.w	r2, r7, #8
 8001406:	f107 010c 	add.w	r1, r7, #12
 800140a:	f107 0010 	add.w	r0, r7, #16
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f7ff faa2 	bl	8000958 <chassis_behaviour_control_set>

    //check which mode now
    if (chassis_move_control->chassis_mode == CHASSIS_VECTOR_FOLLOW_GIMBAL_YAW)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	7c1b      	ldrb	r3, [r3, #16]
 8001418:	2b00      	cmp	r3, #0
 800141a:	f040 8096 	bne.w	800154a <chassis_set_contorl+0x16a>
    {
        float32_t sin_yaw = 0.0f, cos_yaw = 0.0f;
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	61bb      	str	r3, [r7, #24]
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	617b      	str	r3, [r7, #20]

        //rotate chassis direction, make sure vertical direction follows gimbal
        //this is good for chassis' stable
        sin_yaw = arm_sin_f32(-chassis_move_control->chassis_yaw_motor->relative_angle);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8001432:	eef1 7a67 	vneg.f32	s15, s15
 8001436:	eeb0 0a67 	vmov.f32	s0, s15
 800143a:	f012 fc93 	bl	8013d64 <arm_sin_f32>
 800143e:	ed87 0a06 	vstr	s0, [r7, #24]
        cos_yaw = arm_cos_f32(-chassis_move_control->chassis_yaw_motor->relative_angle);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 800144a:	eef1 7a67 	vneg.f32	s15, s15
 800144e:	eeb0 0a67 	vmov.f32	s0, s15
 8001452:	f012 fcd5 	bl	8013e00 <arm_cos_f32>
 8001456:	ed87 0a05 	vstr	s0, [r7, #20]

        chassis_move_control->vx_set = cos_yaw * vx_set + sin_yaw * vy_set;
 800145a:	ed97 7a04 	vldr	s14, [r7, #16]
 800145e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001462:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001466:	edd7 6a03 	vldr	s13, [r7, #12]
 800146a:	edd7 7a06 	vldr	s15, [r7, #24]
 800146e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001472:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
        chassis_move_control->vy_set = -sin_yaw * vx_set + cos_yaw * vy_set;
 800147c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001480:	eeb1 7a67 	vneg.f32	s14, s15
 8001484:	edd7 7a04 	vldr	s15, [r7, #16]
 8001488:	ee27 7a27 	vmul.f32	s14, s14, s15
 800148c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001490:	edd7 7a05 	vldr	s15, [r7, #20]
 8001494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc

        //set and control relative angle set-point
        chassis_move_control->chassis_relative_angle_set = rad_format(angle_set);
 80014a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80014a6:	ed9f 1a83 	vldr	s2, [pc, #524]	; 80016b4 <chassis_set_contorl+0x2d4>
 80014aa:	eddf 0a83 	vldr	s1, [pc, #524]	; 80016b8 <chassis_set_contorl+0x2d8>
 80014ae:	eeb0 0a67 	vmov.f32	s0, s15
 80014b2:	f003 fde7 	bl	8005084 <loop_fp32_constrain>
 80014b6:	eef0 7a40 	vmov.f32	s15, s0
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	edc3 7a82 	vstr	s15, [r3, #520]	; 0x208

        //calculate rotation speed (PID radius speed)
        //(sign needs checked)
        chassis_move_control->wz_set = -PID_calc(&chassis_move_control->chassis_angle_pid, chassis_move_control->chassis_yaw_motor->relative_angle, chassis_move_control->chassis_relative_angle_set);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f503 72c2 	add.w	r2, r3, #388	; 0x184
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 80014d4:	eef0 0a47 	vmov.f32	s1, s14
 80014d8:	eeb0 0a67 	vmov.f32	s0, s15
 80014dc:	4610      	mov	r0, r2
 80014de:	f003 fe8b 	bl	80051f8 <PID_calc>
 80014e2:	eef0 7a40 	vmov.f32	s15, s0
 80014e6:	eef1 7a67 	vneg.f32	s15, s15
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200

        //speed constrain
        chassis_move_control->vx_set = fp32_constrain(chassis_move_control->vx_set, chassis_move_control->vx_min_speed, chassis_move_control->vx_max_speed);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	edd3 7a7e 	vldr	s15, [r3, #504]	; 0x1f8
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	ed93 7a85 	vldr	s14, [r3, #532]	; 0x214
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	edd3 6a84 	vldr	s13, [r3, #528]	; 0x210
 8001502:	eeb0 1a66 	vmov.f32	s2, s13
 8001506:	eef0 0a47 	vmov.f32	s1, s14
 800150a:	eeb0 0a67 	vmov.f32	s0, s15
 800150e:	f003 fd90 	bl	8005032 <fp32_constrain>
 8001512:	eef0 7a40 	vmov.f32	s15, s0
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
        chassis_move_control->vy_set = fp32_constrain(chassis_move_control->vy_set, chassis_move_control->vy_min_speed, chassis_move_control->vy_max_speed);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	edd3 7a7f 	vldr	s15, [r3, #508]	; 0x1fc
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	ed93 7a87 	vldr	s14, [r3, #540]	; 0x21c
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	edd3 6a86 	vldr	s13, [r3, #536]	; 0x218
 800152e:	eeb0 1a66 	vmov.f32	s2, s13
 8001532:	eef0 0a47 	vmov.f32	s1, s14
 8001536:	eeb0 0a67 	vmov.f32	s0, s15
 800153a:	f003 fd7a 	bl	8005032 <fp32_constrain>
 800153e:	eef0 7a40 	vmov.f32	s15, s0
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
 8001548:	e0b0      	b.n	80016ac <chassis_set_contorl+0x2cc>
    }
    else if (chassis_move_control->chassis_mode == CHASSIS_VECTOR_FOLLOW_CHASSIS_YAW)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	7c1b      	ldrb	r3, [r3, #16]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d15d      	bne.n	800160e <chassis_set_contorl+0x22e>
    {
        float32_t delat_angle = 0.0f;
 8001552:	f04f 0300 	mov.w	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]

        //set chassis yaw angle set-point
        chassis_move_control->chassis_yaw_set = rad_format(angle_set);
 8001558:	edd7 7a02 	vldr	s15, [r7, #8]
 800155c:	ed9f 1a55 	vldr	s2, [pc, #340]	; 80016b4 <chassis_set_contorl+0x2d4>
 8001560:	eddf 0a55 	vldr	s1, [pc, #340]	; 80016b8 <chassis_set_contorl+0x2d8>
 8001564:	eeb0 0a67 	vmov.f32	s0, s15
 8001568:	f003 fd8c 	bl	8005084 <loop_fp32_constrain>
 800156c:	eef0 7a40 	vmov.f32	s15, s0
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	edc3 7a83 	vstr	s15, [r3, #524]	; 0x20c
        delat_angle = rad_format(chassis_move_control->chassis_yaw_set - chassis_move_control->chassis_yaw);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	edd3 7a88 	vldr	s15, [r3, #544]	; 0x220
 8001582:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001586:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 80016b4 <chassis_set_contorl+0x2d4>
 800158a:	eddf 0a4b 	vldr	s1, [pc, #300]	; 80016b8 <chassis_set_contorl+0x2d8>
 800158e:	eeb0 0a67 	vmov.f32	s0, s15
 8001592:	f003 fd77 	bl	8005084 <loop_fp32_constrain>
 8001596:	ed87 0a07 	vstr	s0, [r7, #28]

        //calculate chassis rotation speed
        //(sign needs checked)
        chassis_move_control->wz_set = PID_calc(&chassis_move_control->chassis_angle_pid, 0.0f, delat_angle);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80015a0:	edd7 0a07 	vldr	s1, [r7, #28]
 80015a4:	ed9f 0a45 	vldr	s0, [pc, #276]	; 80016bc <chassis_set_contorl+0x2dc>
 80015a8:	4618      	mov	r0, r3
 80015aa:	f003 fe25 	bl	80051f8 <PID_calc>
 80015ae:	eef0 7a40 	vmov.f32	s15, s0
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200

        //speed constrain
        chassis_move_control->vx_set = fp32_constrain(vx_set, chassis_move_control->vx_min_speed, chassis_move_control->vx_max_speed);
 80015b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	ed93 7a85 	vldr	s14, [r3, #532]	; 0x214
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	edd3 6a84 	vldr	s13, [r3, #528]	; 0x210
 80015c8:	eeb0 1a66 	vmov.f32	s2, s13
 80015cc:	eef0 0a47 	vmov.f32	s1, s14
 80015d0:	eeb0 0a67 	vmov.f32	s0, s15
 80015d4:	f003 fd2d 	bl	8005032 <fp32_constrain>
 80015d8:	eef0 7a40 	vmov.f32	s15, s0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
        chassis_move_control->vy_set = fp32_constrain(vy_set, chassis_move_control->vy_min_speed, chassis_move_control->vy_max_speed);
 80015e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	ed93 7a87 	vldr	s14, [r3, #540]	; 0x21c
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	edd3 6a86 	vldr	s13, [r3, #536]	; 0x218
 80015f2:	eeb0 1a66 	vmov.f32	s2, s13
 80015f6:	eef0 0a47 	vmov.f32	s1, s14
 80015fa:	eeb0 0a67 	vmov.f32	s0, s15
 80015fe:	f003 fd18 	bl	8005032 <fp32_constrain>
 8001602:	eef0 7a40 	vmov.f32	s15, s0
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
 800160c:	e04e      	b.n	80016ac <chassis_set_contorl+0x2cc>
    }
    else if (chassis_move_control->chassis_mode == CHASSIS_VECTOR_NO_FOLLOW_YAW)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7c1b      	ldrb	r3, [r3, #16]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d12e      	bne.n	8001674 <chassis_set_contorl+0x294>
    {
        //"angle_set" is rotation speed set-point
        chassis_move_control->wz_set = angle_set;
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        chassis_move_control->vx_set = fp32_constrain(vx_set, chassis_move_control->vx_min_speed, chassis_move_control->vx_max_speed);
 800161e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	ed93 7a85 	vldr	s14, [r3, #532]	; 0x214
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	edd3 6a84 	vldr	s13, [r3, #528]	; 0x210
 800162e:	eeb0 1a66 	vmov.f32	s2, s13
 8001632:	eef0 0a47 	vmov.f32	s1, s14
 8001636:	eeb0 0a67 	vmov.f32	s0, s15
 800163a:	f003 fcfa 	bl	8005032 <fp32_constrain>
 800163e:	eef0 7a40 	vmov.f32	s15, s0
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
        chassis_move_control->vy_set = fp32_constrain(vy_set, chassis_move_control->vy_min_speed, chassis_move_control->vy_max_speed);
 8001648:	edd7 7a03 	vldr	s15, [r7, #12]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	ed93 7a87 	vldr	s14, [r3, #540]	; 0x21c
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	edd3 6a86 	vldr	s13, [r3, #536]	; 0x218
 8001658:	eeb0 1a66 	vmov.f32	s2, s13
 800165c:	eef0 0a47 	vmov.f32	s1, s14
 8001660:	eeb0 0a67 	vmov.f32	s0, s15
 8001664:	f003 fce5 	bl	8005032 <fp32_constrain>
 8001668:	eef0 7a40 	vmov.f32	s15, s0
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
 8001672:	e01b      	b.n	80016ac <chassis_set_contorl+0x2cc>
    }
    else if (chassis_move_control->chassis_mode == CHASSIS_VECTOR_RAW)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7c1b      	ldrb	r3, [r3, #16]
 8001678:	2b03      	cmp	r3, #3
 800167a:	d117      	bne.n	80016ac <chassis_set_contorl+0x2cc>
    {
        //in raw mode, set-point is sent to CAN bus directly
        chassis_move_control->vx_set = vx_set;
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
        chassis_move_control->vy_set = vy_set;
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
        chassis_move_control->wz_set = angle_set;
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        chassis_move_control->chassis_cmd_slow_set_vx.out = 0.0f;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
        chassis_move_control->chassis_cmd_slow_set_vy.out = 0.0f;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
 80016a8:	e000      	b.n	80016ac <chassis_set_contorl+0x2cc>
        return;
 80016aa:	bf00      	nop
    }
}
 80016ac:	3720      	adds	r7, #32
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40490fdb 	.word	0x40490fdb
 80016b8:	c0490fdb 	.word	0xc0490fdb
 80016bc:	00000000 	.word	0x00000000

080016c0 <chassis_vector_to_mecanum_wheel_speed>:
  * @param[in]      wz_set: rotation speed
  * @param[out]     wheel_speed: four mecanum wheels speed
  * @retval         none
  */
static void chassis_vector_to_mecanum_wheel_speed(const float32_t vx_set, const float32_t vy_set, const float32_t wz_set, float32_t wheel_speed[4])
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80016ca:	edc7 0a02 	vstr	s1, [r7, #8]
 80016ce:	ed87 1a01 	vstr	s2, [r7, #4]
 80016d2:	6038      	str	r0, [r7, #0]
    //because the gimbal is in front of chassis, when chassis rotates
    //front wheel 0 and front wheel 1 should be slower
    //and back wheel 2 and back wheel 3 should be faster
    //(need check)
    wheel_speed[0] = -vx_set - vy_set + (CHASSIS_WZ_SET_SCALE - 1.0f) * MOTOR_DISTANCE_TO_CENTER * wz_set;
 80016d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80016d8:	eeb1 7a67 	vneg.f32	s14, s15
 80016dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80016e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80016e8:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001774 <chassis_vector_to_mecanum_wheel_speed+0xb4>
 80016ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80016f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	edc3 7a00 	vstr	s15, [r3]
    wheel_speed[1] = vx_set - vy_set + (CHASSIS_WZ_SET_SCALE - 1.0f) * MOTOR_DISTANCE_TO_CENTER * wz_set;
 80016fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80016fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001702:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001706:	edd7 7a01 	vldr	s15, [r7, #4]
 800170a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001774 <chassis_vector_to_mecanum_wheel_speed+0xb4>
 800170e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	3304      	adds	r3, #4
 8001716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800171a:	edc3 7a00 	vstr	s15, [r3]
    wheel_speed[2] = vx_set + vy_set + (-CHASSIS_WZ_SET_SCALE - 1.0f) * MOTOR_DISTANCE_TO_CENTER * wz_set;
 800171e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001722:	edd7 7a02 	vldr	s15, [r7, #8]
 8001726:	ee37 7a27 	vadd.f32	s14, s14, s15
 800172a:	edd7 7a01 	vldr	s15, [r7, #4]
 800172e:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001778 <chassis_vector_to_mecanum_wheel_speed+0xb8>
 8001732:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	3308      	adds	r3, #8
 800173a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800173e:	edc3 7a00 	vstr	s15, [r3]
    wheel_speed[3] = -vx_set + vy_set + (-CHASSIS_WZ_SET_SCALE - 1.0f) * MOTOR_DISTANCE_TO_CENTER * wz_set;
 8001742:	ed97 7a02 	vldr	s14, [r7, #8]
 8001746:	edd7 7a03 	vldr	s15, [r7, #12]
 800174a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800174e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001752:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001778 <chassis_vector_to_mecanum_wheel_speed+0xb8>
 8001756:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	330c      	adds	r3, #12
 800175e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001762:	edc3 7a00 	vstr	s15, [r3]
}
 8001766:	bf00      	nop
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	be3851eb 	.word	0xbe3851eb
 8001778:	be6147af 	.word	0xbe6147af

0800177c <chassis_control_loop>:
  *                 motor current, and motor currents will be sent to motors
  * @param[out]     chassis_move_control_loop: "chassis_move" pointer
  * @retval         none
  */
static void chassis_control_loop(chassis_move_t *chassis_move_control_loop)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
    float32_t max_vector = 0.0f, vector_rate = 0.0f;
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
    float32_t temp = 0.0f;
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	61bb      	str	r3, [r7, #24]
    float32_t wheel_speed[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8001796:	f107 0308 	add.w	r3, r7, #8
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
    uint8_t i = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    //Mecanum wheel speed calculation
    chassis_vector_to_mecanum_wheel_speed(chassis_move_control_loop->vx_set,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	edd3 7a7e 	vldr	s15, [r3, #504]	; 0x1f8
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	ed93 7a7f 	vldr	s14, [r3, #508]	; 0x1fc
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	edd3 6a80 	vldr	s13, [r3, #512]	; 0x200
 80017bc:	f107 0308 	add.w	r3, r7, #8
 80017c0:	4618      	mov	r0, r3
 80017c2:	eeb0 1a66 	vmov.f32	s2, s13
 80017c6:	eef0 0a47 	vmov.f32	s1, s14
 80017ca:	eeb0 0a67 	vmov.f32	s0, s15
 80017ce:	f7ff ff77 	bl	80016c0 <chassis_vector_to_mecanum_wheel_speed>
                                          chassis_move_control_loop->vy_set, chassis_move_control_loop->wz_set, wheel_speed);

    if (chassis_move_control_loop->chassis_mode == CHASSIS_VECTOR_RAW)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	7c1b      	ldrb	r3, [r3, #16]
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d126      	bne.n	8001828 <chassis_control_loop+0xac>
    {
        
        for (i = 0; i < 4; i++)
 80017da:	2300      	movs	r3, #0
 80017dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80017e0:	e01d      	b.n	800181e <chassis_control_loop+0xa2>
        {
            chassis_move_control_loop->motor_chassis[i].give_current = (int16_t)(wheel_speed[i]);
 80017e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017ec:	4413      	add	r3, r2
 80017ee:	3b20      	subs	r3, #32
 80017f0:	edd3 7a00 	vldr	s15, [r3]
 80017f4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80017f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017fc:	ee17 3a90 	vmov	r3, s15
 8001800:	b218      	sxth	r0, r3
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	3324      	adds	r3, #36	; 0x24
 8001810:	4602      	mov	r2, r0
 8001812:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < 4; i++)
 8001814:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001818:	3301      	adds	r3, #1
 800181a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800181e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001822:	2b03      	cmp	r3, #3
 8001824:	d9dd      	bls.n	80017e2 <chassis_control_loop+0x66>
        }
        //in raw mode, directly return
        return;
 8001826:	e0cb      	b.n	80019c0 <chassis_control_loop+0x244>
    }

    //calculate the max speed in four wheels, limit the total max speed
    for (i = 0; i < 4; i++)
 8001828:	2300      	movs	r3, #0
 800182a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800182e:	e030      	b.n	8001892 <chassis_control_loop+0x116>
    {
        chassis_move_control_loop->motor_chassis[i].speed_set = wheel_speed[i];
 8001830:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001834:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800183e:	440b      	add	r3, r1
 8001840:	3b20      	subs	r3, #32
 8001842:	6819      	ldr	r1, [r3, #0]
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4403      	add	r3, r0
 8001850:	3320      	adds	r3, #32
 8001852:	6019      	str	r1, [r3, #0]
        //get absolute value
        temp = fabs(chassis_move_control_loop->motor_chassis[i].speed_set);
 8001854:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	3320      	adds	r3, #32
 8001866:	edd3 7a00 	vldr	s15, [r3]
 800186a:	eef0 7ae7 	vabs.f32	s15, s15
 800186e:	edc7 7a06 	vstr	s15, [r7, #24]
        if (max_vector < temp)
 8001872:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001876:	edd7 7a06 	vldr	s15, [r7, #24]
 800187a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800187e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001882:	d501      	bpl.n	8001888 <chassis_control_loop+0x10c>
        {
            max_vector = temp;
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; i < 4; i++)
 8001888:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800188c:	3301      	adds	r3, #1
 800188e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001892:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001896:	2b03      	cmp	r3, #3
 8001898:	d9ca      	bls.n	8001830 <chassis_control_loop+0xb4>
        }
    }

    if (max_vector > MAX_WHEEL_SPEED)
 800189a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800189e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80018a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018aa:	dd2e      	ble.n	800190a <chassis_control_loop+0x18e>
    {
        vector_rate = MAX_WHEEL_SPEED / max_vector;
 80018ac:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80018b0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80018b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018b8:	edc7 7a07 	vstr	s15, [r7, #28]
        for (i = 0; i < 4; i++)
 80018bc:	2300      	movs	r3, #0
 80018be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80018c2:	e01e      	b.n	8001902 <chassis_control_loop+0x186>
        {
            chassis_move_control_loop->motor_chassis[i].speed_set *= vector_rate;
 80018c4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	3320      	adds	r3, #32
 80018d6:	ed93 7a00 	vldr	s14, [r3]
 80018da:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80018de:	edd7 7a07 	vldr	s15, [r7, #28]
 80018e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	3320      	adds	r3, #32
 80018f4:	edc3 7a00 	vstr	s15, [r3]
        for (i = 0; i < 4; i++)
 80018f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018fc:	3301      	adds	r3, #1
 80018fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001902:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001906:	2b03      	cmp	r3, #3
 8001908:	d9dc      	bls.n	80018c4 <chassis_control_loop+0x148>
        }
    }

    //calculate PID
    for (i = 0; i < 4; i++)
 800190a:	2300      	movs	r3, #0
 800190c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001910:	e02a      	b.n	8001968 <chassis_control_loop+0x1ec>
    {
        PID_calc(&chassis_move_control_loop->motor_speed_pid[i], chassis_move_control_loop->motor_chassis[i].speed, chassis_move_control_loop->motor_chassis[i].speed_set);
 8001912:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001916:	4613      	mov	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	4413      	add	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	3360      	adds	r3, #96	; 0x60
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	4413      	add	r3, r2
 8001924:	1d18      	adds	r0, r3, #4
 8001926:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	331c      	adds	r3, #28
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	3320      	adds	r3, #32
 800194e:	ed93 7a00 	vldr	s14, [r3]
 8001952:	eef0 0a47 	vmov.f32	s1, s14
 8001956:	eeb0 0a67 	vmov.f32	s0, s15
 800195a:	f003 fc4d 	bl	80051f8 <PID_calc>
    for (i = 0; i < 4; i++)
 800195e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001962:	3301      	adds	r3, #1
 8001964:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001968:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800196c:	2b03      	cmp	r3, #3
 800196e:	d9d0      	bls.n	8001912 <chassis_control_loop+0x196>
    chassis_power_control(chassis_move_control_loop);
#endif


    //Assign motor current value
    for (i = 0; i < 4; i++)
 8001970:	2300      	movs	r3, #0
 8001972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001976:	e01f      	b.n	80019b8 <chassis_control_loop+0x23c>
    {
        chassis_move_control_loop->motor_chassis[i].give_current = (int16_t)(chassis_move_control_loop->motor_speed_pid[i].out);
 8001978:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	4413      	add	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	440b      	add	r3, r1
 8001988:	3384      	adds	r3, #132	; 0x84
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001992:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001996:	ee17 3a90 	vmov	r3, s15
 800199a:	b218      	sxth	r0, r3
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	3324      	adds	r3, #36	; 0x24
 80019aa:	4602      	mov	r2, r0
 80019ac:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < 4; i++)
 80019ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019b2:	3301      	adds	r3, #1
 80019b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80019b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d9db      	bls.n	8001978 <chassis_control_loop+0x1fc>
    }
}
 80019c0:	3728      	adds	r7, #40	; 0x28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <detect_task>:
  * @brief          detect task
  * @param[in]      pvParameters: NULL
  * @retval         none
  */
void detect_task(void *pvParameters)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
    static uint32_t system_time;
    system_time = xTaskGetTickCount();
 80019d0:	f00f ff8c 	bl	80118ec <xTaskGetTickCount>
 80019d4:	4603      	mov	r3, r0
 80019d6:	4abe      	ldr	r2, [pc, #760]	; (8001cd0 <detect_task+0x308>)
 80019d8:	6013      	str	r3, [r2, #0]

    //initialize
    detect_init(system_time);
 80019da:	4bbd      	ldr	r3, [pc, #756]	; (8001cd0 <detect_task+0x308>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 fa5a 	bl	8001e98 <detect_init>
    //wait for a period
    vTaskDelay(DETECT_TASK_INIT_TIME);
 80019e4:	2039      	movs	r0, #57	; 0x39
 80019e6:	f00f fe3b 	bl	8011660 <vTaskDelay>

    while (1)
    {
        static uint8_t error_num_display = 0;
        system_time = xTaskGetTickCount();
 80019ea:	f00f ff7f 	bl	80118ec <xTaskGetTickCount>
 80019ee:	4603      	mov	r3, r0
 80019f0:	4ab7      	ldr	r2, [pc, #732]	; (8001cd0 <detect_task+0x308>)
 80019f2:	6013      	str	r3, [r2, #0]

        error_num_display = ERROR_LIST_LENGHT;
 80019f4:	4bb7      	ldr	r3, [pc, #732]	; (8001cd4 <detect_task+0x30c>)
 80019f6:	220a      	movs	r2, #10
 80019f8:	701a      	strb	r2, [r3, #0]
        error_list[ERROR_LIST_LENGHT].is_lost = 0;
 80019fa:	4ab7      	ldr	r2, [pc, #732]	; (8001cd8 <detect_task+0x310>)
 80019fc:	f892 317b 	ldrb.w	r3, [r2, #379]	; 0x17b
 8001a00:	f36f 1386 	bfc	r3, #6, #1
 8001a04:	f882 317b 	strb.w	r3, [r2, #379]	; 0x17b
        error_list[ERROR_LIST_LENGHT].error_exist = 0;
 8001a08:	4ab3      	ldr	r2, [pc, #716]	; (8001cd8 <detect_task+0x310>)
 8001a0a:	f892 317b 	ldrb.w	r3, [r2, #379]	; 0x17b
 8001a0e:	f36f 1345 	bfc	r3, #5, #1
 8001a12:	f882 317b 	strb.w	r3, [r2, #379]	; 0x17b

        for (int i = 0; i < ERROR_LIST_LENGHT; i++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	e14b      	b.n	8001cb4 <detect_task+0x2ec>
        {
            //if device is disabled, continue
            if (error_list[i].enable == 0)
 8001a1c:	49ae      	ldr	r1, [pc, #696]	; (8001cd8 <detect_task+0x310>)
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	4613      	mov	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	4413      	add	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	3310      	adds	r3, #16
 8001a2c:	78db      	ldrb	r3, [r3, #3]
 8001a2e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 8139 	beq.w	8001cac <detect_task+0x2e4>
            {
                continue;
            }

            //check if device is off-line
            if (system_time - error_list[i].new_time > error_list[i].set_offline_time)
 8001a3a:	4ba5      	ldr	r3, [pc, #660]	; (8001cd0 <detect_task+0x308>)
 8001a3c:	6819      	ldr	r1, [r3, #0]
 8001a3e:	48a6      	ldr	r0, [pc, #664]	; (8001cd8 <detect_task+0x310>)
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4613      	mov	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	4413      	add	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4403      	add	r3, r0
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	1ac9      	subs	r1, r1, r3
 8001a50:	48a1      	ldr	r0, [pc, #644]	; (8001cd8 <detect_task+0x310>)
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	4613      	mov	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4413      	add	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4403      	add	r3, r0
 8001a5e:	3310      	adds	r3, #16
 8001a60:	781a      	ldrb	r2, [r3, #0]
 8001a62:	785b      	ldrb	r3, [r3, #1]
 8001a64:	f003 030f 	and.w	r3, r3, #15
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	4299      	cmp	r1, r3
 8001a70:	d977      	bls.n	8001b62 <detect_task+0x19a>
            {
                if (error_list[i].error_exist == 0)
 8001a72:	4999      	ldr	r1, [pc, #612]	; (8001cd8 <detect_task+0x310>)
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	4613      	mov	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	3310      	adds	r3, #16
 8001a82:	78db      	ldrb	r3, [r3, #3]
 8001a84:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d124      	bne.n	8001ad8 <detect_task+0x110>
                {
                    //record error and device lost timestamp
                    error_list[i].is_lost = 1;
 8001a8e:	4992      	ldr	r1, [pc, #584]	; (8001cd8 <detect_task+0x310>)
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	4613      	mov	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	f103 0210 	add.w	r2, r3, #16
 8001aa0:	78d3      	ldrb	r3, [r2, #3]
 8001aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa6:	70d3      	strb	r3, [r2, #3]
                    error_list[i].error_exist = 1;
 8001aa8:	498b      	ldr	r1, [pc, #556]	; (8001cd8 <detect_task+0x310>)
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4613      	mov	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	f103 0210 	add.w	r2, r3, #16
 8001aba:	78d3      	ldrb	r3, [r2, #3]
 8001abc:	f043 0320 	orr.w	r3, r3, #32
 8001ac0:	70d3      	strb	r3, [r2, #3]
                    error_list[i].lost_time = system_time;
 8001ac2:	4b83      	ldr	r3, [pc, #524]	; (8001cd0 <detect_task+0x308>)
 8001ac4:	6819      	ldr	r1, [r3, #0]
 8001ac6:	4884      	ldr	r0, [pc, #528]	; (8001cd8 <detect_task+0x310>)
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	4613      	mov	r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4413      	add	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4403      	add	r3, r0
 8001ad4:	3308      	adds	r3, #8
 8001ad6:	6019      	str	r1, [r3, #0]
                }
                //check the priority, save the highest priority code
                if (error_list[i].priority > error_list[error_num_display].priority)
 8001ad8:	497f      	ldr	r1, [pc, #508]	; (8001cd8 <detect_task+0x310>)
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	4613      	mov	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	3310      	adds	r3, #16
 8001ae8:	78db      	ldrb	r3, [r3, #3]
 8001aea:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	4b78      	ldr	r3, [pc, #480]	; (8001cd4 <detect_task+0x30c>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	4978      	ldr	r1, [pc, #480]	; (8001cd8 <detect_task+0x310>)
 8001af8:	4603      	mov	r3, r0
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	4403      	add	r3, r0
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	3310      	adds	r3, #16
 8001b04:	78db      	ldrb	r3, [r3, #3]
 8001b06:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d903      	bls.n	8001b18 <detect_task+0x150>
                {
                    error_num_display = i;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	4b6f      	ldr	r3, [pc, #444]	; (8001cd4 <detect_task+0x30c>)
 8001b16:	701a      	strb	r2, [r3, #0]
                }
                

                error_list[ERROR_LIST_LENGHT].is_lost = 1;
 8001b18:	4a6f      	ldr	r2, [pc, #444]	; (8001cd8 <detect_task+0x310>)
 8001b1a:	f892 317b 	ldrb.w	r3, [r2, #379]	; 0x17b
 8001b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b22:	f882 317b 	strb.w	r3, [r2, #379]	; 0x17b
                error_list[ERROR_LIST_LENGHT].error_exist = 1;
 8001b26:	4a6c      	ldr	r2, [pc, #432]	; (8001cd8 <detect_task+0x310>)
 8001b28:	f892 317b 	ldrb.w	r3, [r2, #379]	; 0x17b
 8001b2c:	f043 0320 	orr.w	r3, r3, #32
 8001b30:	f882 317b 	strb.w	r3, [r2, #379]	; 0x17b
                //if solving function is provided
                //(i.e. solve_lost_fun != NULL)
                //run this function
                if (error_list[i].solve_lost_fun != NULL)
 8001b34:	4968      	ldr	r1, [pc, #416]	; (8001cd8 <detect_task+0x310>)
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	3318      	adds	r3, #24
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 80b1 	beq.w	8001cae <detect_task+0x2e6>
                {
                    error_list[i].solve_lost_fun();
 8001b4c:	4962      	ldr	r1, [pc, #392]	; (8001cd8 <detect_task+0x310>)
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	4613      	mov	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4413      	add	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	3318      	adds	r3, #24
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	4798      	blx	r3
 8001b60:	e0a5      	b.n	8001cae <detect_task+0x2e6>
                }
            }
            else if (system_time - error_list[i].work_time < error_list[i].set_online_time)
 8001b62:	4b5b      	ldr	r3, [pc, #364]	; (8001cd0 <detect_task+0x308>)
 8001b64:	6819      	ldr	r1, [r3, #0]
 8001b66:	485c      	ldr	r0, [pc, #368]	; (8001cd8 <detect_task+0x310>)
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4413      	add	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4403      	add	r3, r0
 8001b74:	3308      	adds	r3, #8
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	1ac9      	subs	r1, r1, r3
 8001b7a:	4857      	ldr	r0, [pc, #348]	; (8001cd8 <detect_task+0x310>)
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4413      	add	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4403      	add	r3, r0
 8001b88:	3310      	adds	r3, #16
 8001b8a:	785a      	ldrb	r2, [r3, #1]
 8001b8c:	0912      	lsrs	r2, r2, #4
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	789b      	ldrb	r3, [r3, #2]
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	4313      	orrs	r3, r2
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	4299      	cmp	r1, r3
 8001b9a:	d21a      	bcs.n	8001bd2 <detect_task+0x20a>
            {
                //device just got online, maybe it is unstable
                //only record there is error, not record it is lost
                error_list[i].is_lost = 0;
 8001b9c:	494e      	ldr	r1, [pc, #312]	; (8001cd8 <detect_task+0x310>)
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	f103 0210 	add.w	r2, r3, #16
 8001bae:	78d3      	ldrb	r3, [r2, #3]
 8001bb0:	f36f 1386 	bfc	r3, #6, #1
 8001bb4:	70d3      	strb	r3, [r2, #3]
                error_list[i].error_exist = 1;
 8001bb6:	4948      	ldr	r1, [pc, #288]	; (8001cd8 <detect_task+0x310>)
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	4413      	add	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	f103 0210 	add.w	r2, r3, #16
 8001bc8:	78d3      	ldrb	r3, [r2, #3]
 8001bca:	f043 0320 	orr.w	r3, r3, #32
 8001bce:	70d3      	strb	r3, [r2, #3]
 8001bd0:	e06d      	b.n	8001cae <detect_task+0x2e6>
            }
            else
            {
                error_list[i].is_lost = 0;
 8001bd2:	4941      	ldr	r1, [pc, #260]	; (8001cd8 <detect_task+0x310>)
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	440b      	add	r3, r1
 8001be0:	f103 0210 	add.w	r2, r3, #16
 8001be4:	78d3      	ldrb	r3, [r2, #3]
 8001be6:	f36f 1386 	bfc	r3, #6, #1
 8001bea:	70d3      	strb	r3, [r2, #3]
                //check if data error exists
                if (error_list[i].data_is_error != 0)
 8001bec:	493a      	ldr	r1, [pc, #232]	; (8001cd8 <detect_task+0x310>)
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	3310      	adds	r3, #16
 8001bfc:	78db      	ldrb	r3, [r3, #3]
 8001bfe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00d      	beq.n	8001c24 <detect_task+0x25c>
                {
                    error_list[i].error_exist = 1;
 8001c08:	4933      	ldr	r1, [pc, #204]	; (8001cd8 <detect_task+0x310>)
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	f103 0210 	add.w	r2, r3, #16
 8001c1a:	78d3      	ldrb	r3, [r2, #3]
 8001c1c:	f043 0320 	orr.w	r3, r3, #32
 8001c20:	70d3      	strb	r3, [r2, #3]
 8001c22:	e00c      	b.n	8001c3e <detect_task+0x276>
                }
                else
                {
                    error_list[i].error_exist = 0;
 8001c24:	492c      	ldr	r1, [pc, #176]	; (8001cd8 <detect_task+0x310>)
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	f103 0210 	add.w	r2, r3, #16
 8001c36:	78d3      	ldrb	r3, [r2, #3]
 8001c38:	f36f 1345 	bfc	r3, #5, #1
 8001c3c:	70d3      	strb	r3, [r2, #3]
                }

                //calculate frequency
                if (error_list[i].new_time > error_list[i].last_time)
 8001c3e:	4926      	ldr	r1, [pc, #152]	; (8001cd8 <detect_task+0x310>)
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	4613      	mov	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	6819      	ldr	r1, [r3, #0]
 8001c4e:	4822      	ldr	r0, [pc, #136]	; (8001cd8 <detect_task+0x310>)
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4613      	mov	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4413      	add	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4403      	add	r3, r0
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	4299      	cmp	r1, r3
 8001c60:	d925      	bls.n	8001cae <detect_task+0x2e6>
                {
                    error_list[i].frequency = configTICK_RATE_HZ / (float32_t)(error_list[i].new_time - error_list[i].last_time);
 8001c62:	491d      	ldr	r1, [pc, #116]	; (8001cd8 <detect_task+0x310>)
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4613      	mov	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	440b      	add	r3, r1
 8001c70:	6819      	ldr	r1, [r3, #0]
 8001c72:	4819      	ldr	r0, [pc, #100]	; (8001cd8 <detect_task+0x310>)
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	4613      	mov	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4403      	add	r3, r0
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	1acb      	subs	r3, r1, r3
 8001c84:	ee07 3a90 	vmov	s15, r3
 8001c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c8c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001cdc <detect_task+0x314>
 8001c90:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c94:	4910      	ldr	r1, [pc, #64]	; (8001cd8 <detect_task+0x310>)
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	3310      	adds	r3, #16
 8001ca4:	ee16 2a90 	vmov	r2, s13
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	e000      	b.n	8001cae <detect_task+0x2e6>
                continue;
 8001cac:	bf00      	nop
        for (int i = 0; i < ERROR_LIST_LENGHT; i++)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b09      	cmp	r3, #9
 8001cb8:	f77f aeb0 	ble.w	8001a1c <detect_task+0x54>
                }
            }
        }

        vTaskDelay(DETECT_CONTROL_TIME);
 8001cbc:	200a      	movs	r0, #10
 8001cbe:	f00f fccf 	bl	8011660 <vTaskDelay>
#if INCLUDE_uxTaskGetStackHighWaterMark
        detect_task_stack = uxTaskGetStackHighWaterMark(NULL);
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f010 f924 	bl	8011f10 <uxTaskGetStackHighWaterMark>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	4a05      	ldr	r2, [pc, #20]	; (8001ce0 <detect_task+0x318>)
 8001ccc:	6013      	str	r3, [r2, #0]
    {
 8001cce:	e68c      	b.n	80019ea <detect_task+0x22>
 8001cd0:	200002c4 	.word	0x200002c4
 8001cd4:	200002c8 	.word	0x200002c8
 8001cd8:	200050f8 	.word	0x200050f8
 8001cdc:	447a0000 	.word	0x447a0000
 8001ce0:	200050f4 	.word	0x200050f4

08001ce4 <toe_is_error>:
  * @brief          get device error status
  * @param[in]      toe: index of device
  * @retval         true (error) or false (no error)
  */
bool_t toe_is_error(uint8_t toe)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
    return (error_list[toe].error_exist == 1);
 8001cee:	79fa      	ldrb	r2, [r7, #7]
 8001cf0:	4908      	ldr	r1, [pc, #32]	; (8001d14 <toe_is_error+0x30>)
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	3310      	adds	r3, #16
 8001cfe:	78db      	ldrb	r3, [r3, #3]
 8001d00:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001d04:	b2db      	uxtb	r3, r3
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	200050f8 	.word	0x200050f8

08001d18 <detect_hook>:
  * @brief          record the timestamp
  * @param[in]      toe: index of device
  * @retval         none
  */
void detect_hook(uint8_t toe)
{
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71fb      	strb	r3, [r7, #7]
    error_list[toe].last_time = error_list[toe].new_time;
 8001d22:	79f9      	ldrb	r1, [r7, #7]
 8001d24:	79fa      	ldrb	r2, [r7, #7]
 8001d26:	4856      	ldr	r0, [pc, #344]	; (8001e80 <detect_hook+0x168>)
 8001d28:	460b      	mov	r3, r1
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	440b      	add	r3, r1
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4403      	add	r3, r0
 8001d32:	6819      	ldr	r1, [r3, #0]
 8001d34:	4852      	ldr	r0, [pc, #328]	; (8001e80 <detect_hook+0x168>)
 8001d36:	4613      	mov	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4403      	add	r3, r0
 8001d40:	6059      	str	r1, [r3, #4]
    error_list[toe].new_time = xTaskGetTickCount();
 8001d42:	79fc      	ldrb	r4, [r7, #7]
 8001d44:	f00f fdd2 	bl	80118ec <xTaskGetTickCount>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	494d      	ldr	r1, [pc, #308]	; (8001e80 <detect_hook+0x168>)
 8001d4c:	4623      	mov	r3, r4
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4423      	add	r3, r4
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	601a      	str	r2, [r3, #0]
    
    if (error_list[toe].is_lost)
 8001d58:	79fa      	ldrb	r2, [r7, #7]
 8001d5a:	4949      	ldr	r1, [pc, #292]	; (8001e80 <detect_hook+0x168>)
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4413      	add	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	3310      	adds	r3, #16
 8001d68:	78db      	ldrb	r3, [r3, #3]
 8001d6a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d01d      	beq.n	8001db0 <detect_hook+0x98>
    {
        error_list[toe].is_lost = 0;
 8001d74:	79fa      	ldrb	r2, [r7, #7]
 8001d76:	4942      	ldr	r1, [pc, #264]	; (8001e80 <detect_hook+0x168>)
 8001d78:	4613      	mov	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	f103 0210 	add.w	r2, r3, #16
 8001d86:	78d3      	ldrb	r3, [r2, #3]
 8001d88:	f36f 1386 	bfc	r3, #6, #1
 8001d8c:	70d3      	strb	r3, [r2, #3]
        error_list[toe].work_time = error_list[toe].new_time;
 8001d8e:	79f9      	ldrb	r1, [r7, #7]
 8001d90:	79fa      	ldrb	r2, [r7, #7]
 8001d92:	483b      	ldr	r0, [pc, #236]	; (8001e80 <detect_hook+0x168>)
 8001d94:	460b      	mov	r3, r1
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	440b      	add	r3, r1
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4403      	add	r3, r0
 8001d9e:	6819      	ldr	r1, [r3, #0]
 8001da0:	4837      	ldr	r0, [pc, #220]	; (8001e80 <detect_hook+0x168>)
 8001da2:	4613      	mov	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	4413      	add	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4403      	add	r3, r0
 8001dac:	3308      	adds	r3, #8
 8001dae:	6059      	str	r1, [r3, #4]
    }
    
    if (error_list[toe].data_is_error_fun != NULL)
 8001db0:	79fa      	ldrb	r2, [r7, #7]
 8001db2:	4933      	ldr	r1, [pc, #204]	; (8001e80 <detect_hook+0x168>)
 8001db4:	4613      	mov	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	3318      	adds	r3, #24
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d04a      	beq.n	8001e5c <detect_hook+0x144>
    {
        if (error_list[toe].data_is_error_fun())
 8001dc6:	79fa      	ldrb	r2, [r7, #7]
 8001dc8:	492d      	ldr	r1, [pc, #180]	; (8001e80 <detect_hook+0x168>)
 8001dca:	4613      	mov	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4413      	add	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	3318      	adds	r3, #24
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4798      	blx	r3
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d02f      	beq.n	8001e40 <detect_hook+0x128>
        {
            error_list[toe].error_exist = 1;
 8001de0:	79fa      	ldrb	r2, [r7, #7]
 8001de2:	4927      	ldr	r1, [pc, #156]	; (8001e80 <detect_hook+0x168>)
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	f103 0210 	add.w	r2, r3, #16
 8001df2:	78d3      	ldrb	r3, [r2, #3]
 8001df4:	f043 0320 	orr.w	r3, r3, #32
 8001df8:	70d3      	strb	r3, [r2, #3]
            error_list[toe].data_is_error = 1;
 8001dfa:	79fa      	ldrb	r2, [r7, #7]
 8001dfc:	4920      	ldr	r1, [pc, #128]	; (8001e80 <detect_hook+0x168>)
 8001dfe:	4613      	mov	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4413      	add	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	440b      	add	r3, r1
 8001e08:	f103 0210 	add.w	r2, r3, #16
 8001e0c:	78d3      	ldrb	r3, [r2, #3]
 8001e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e12:	70d3      	strb	r3, [r2, #3]

            if (error_list[toe].solve_data_error_fun != NULL)
 8001e14:	79fa      	ldrb	r2, [r7, #7]
 8001e16:	491a      	ldr	r1, [pc, #104]	; (8001e80 <detect_hook+0x168>)
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	3320      	adds	r3, #32
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d025      	beq.n	8001e76 <detect_hook+0x15e>
            {
                error_list[toe].solve_data_error_fun();
 8001e2a:	79fa      	ldrb	r2, [r7, #7]
 8001e2c:	4914      	ldr	r1, [pc, #80]	; (8001e80 <detect_hook+0x168>)
 8001e2e:	4613      	mov	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4413      	add	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	440b      	add	r3, r1
 8001e38:	3320      	adds	r3, #32
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4798      	blx	r3
    }
    else
    {
        error_list[toe].data_is_error = 0;
    }
}
 8001e3e:	e01a      	b.n	8001e76 <detect_hook+0x15e>
            error_list[toe].data_is_error = 0;
 8001e40:	79fa      	ldrb	r2, [r7, #7]
 8001e42:	490f      	ldr	r1, [pc, #60]	; (8001e80 <detect_hook+0x168>)
 8001e44:	4613      	mov	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	f103 0210 	add.w	r2, r3, #16
 8001e52:	78d3      	ldrb	r3, [r2, #3]
 8001e54:	f36f 13c7 	bfc	r3, #7, #1
 8001e58:	70d3      	strb	r3, [r2, #3]
}
 8001e5a:	e00c      	b.n	8001e76 <detect_hook+0x15e>
        error_list[toe].data_is_error = 0;
 8001e5c:	79fa      	ldrb	r2, [r7, #7]
 8001e5e:	4908      	ldr	r1, [pc, #32]	; (8001e80 <detect_hook+0x168>)
 8001e60:	4613      	mov	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	f103 0210 	add.w	r2, r3, #16
 8001e6e:	78d3      	ldrb	r3, [r2, #3]
 8001e70:	f36f 13c7 	bfc	r3, #7, #1
 8001e74:	70d3      	strb	r3, [r2, #3]
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd90      	pop	{r4, r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200050f8 	.word	0x200050f8

08001e84 <get_error_list_point>:
  * @brief          get error list
  * @param[in]      none
  * @retval         the pointer of error_list
  */
const error_t *get_error_list_point(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
    return error_list;
 8001e88:	4b02      	ldr	r3, [pc, #8]	; (8001e94 <get_error_list_point+0x10>)
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	200050f8 	.word	0x200050f8

08001e98 <detect_init>:
  * @brief          initialize error_list, assign offline_time, online_time, priority.
  * @param[in]      time: system time
  * @retval         none
  */
static void detect_init(uint32_t time)
{
 8001e98:	b4b0      	push	{r4, r5, r7}
 8001e9a:	b093      	sub	sp, #76	; 0x4c
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
    //{set_offline_time, set_online_time, priority}
    uint16_t set_item[ERROR_LIST_LENGHT][3] =
 8001ea0:	4b96      	ldr	r3, [pc, #600]	; (80020fc <detect_init+0x264>)
 8001ea2:	f107 0408 	add.w	r4, r7, #8
 8001ea6:	461d      	mov	r5, r3
 8001ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001eb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        {5, 5, 7},      //board mpu6500
        {40, 200, 7},   //board ist8310
        //{100, 100, 5},  //referee
    };

    for (uint8_t i = 0; i < ERROR_LIST_LENGHT; i++)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001ec2:	e110      	b.n	80020e6 <detect_init+0x24e>
    {
        error_list[i].set_offline_time = set_item[i][0];
 8001ec4:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001ec8:	4613      	mov	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4413      	add	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3b40      	subs	r3, #64	; 0x40
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8001ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	4886      	ldr	r0, [pc, #536]	; (8002100 <detect_init+0x268>)
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	440b      	add	r3, r1
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4403      	add	r3, r0
 8001ef0:	3310      	adds	r3, #16
 8001ef2:	b2d1      	uxtb	r1, r2
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	4301      	orrs	r1, r0
 8001ef8:	7019      	strb	r1, [r3, #0]
 8001efa:	0a12      	lsrs	r2, r2, #8
 8001efc:	b292      	uxth	r2, r2
 8001efe:	f002 020f 	and.w	r2, r2, #15
 8001f02:	f002 000f 	and.w	r0, r2, #15
 8001f06:	785a      	ldrb	r2, [r3, #1]
 8001f08:	f022 020f 	bic.w	r2, r2, #15
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	4602      	mov	r2, r0
 8001f10:	430a      	orrs	r2, r1
 8001f12:	705a      	strb	r2, [r3, #1]
        error_list[i].set_online_time = set_item[i][1];
 8001f14:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001f18:	4613      	mov	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001f24:	4413      	add	r3, r2
 8001f26:	3b3e      	subs	r3, #62	; 0x3e
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8001f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	4872      	ldr	r0, [pc, #456]	; (8002100 <detect_init+0x268>)
 8001f36:	460b      	mov	r3, r1
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	440b      	add	r3, r1
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4403      	add	r3, r0
 8001f40:	3310      	adds	r3, #16
 8001f42:	f002 010f 	and.w	r1, r2, #15
 8001f46:	010c      	lsls	r4, r1, #4
 8001f48:	7859      	ldrb	r1, [r3, #1]
 8001f4a:	f001 010f 	and.w	r1, r1, #15
 8001f4e:	4608      	mov	r0, r1
 8001f50:	4621      	mov	r1, r4
 8001f52:	4301      	orrs	r1, r0
 8001f54:	7059      	strb	r1, [r3, #1]
 8001f56:	0912      	lsrs	r2, r2, #4
 8001f58:	b292      	uxth	r2, r2
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	709a      	strb	r2, [r3, #2]
        error_list[i].priority = set_item[i][2];
 8001f62:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001f66:	4613      	mov	r3, r2
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001f72:	4413      	add	r3, r2
 8001f74:	3b3c      	subs	r3, #60	; 0x3c
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	b2d9      	uxtb	r1, r3
 8001f82:	485f      	ldr	r0, [pc, #380]	; (8002100 <detect_init+0x268>)
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4403      	add	r3, r0
 8001f8e:	f103 0210 	add.w	r2, r3, #16
 8001f92:	78d3      	ldrb	r3, [r2, #3]
 8001f94:	f361 0344 	bfi	r3, r1, #1, #4
 8001f98:	70d3      	strb	r3, [r2, #3]
        error_list[i].data_is_error_fun = NULL;
 8001f9a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001f9e:	4958      	ldr	r1, [pc, #352]	; (8002100 <detect_init+0x268>)
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	3318      	adds	r3, #24
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	705a      	strb	r2, [r3, #1]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	709a      	strb	r2, [r3, #2]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	70da      	strb	r2, [r3, #3]
        error_list[i].solve_lost_fun = NULL;
 8001fbc:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001fc0:	494f      	ldr	r1, [pc, #316]	; (8002100 <detect_init+0x268>)
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	3318      	adds	r3, #24
 8001fce:	2200      	movs	r2, #0
 8001fd0:	711a      	strb	r2, [r3, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	715a      	strb	r2, [r3, #5]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	719a      	strb	r2, [r3, #6]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	71da      	strb	r2, [r3, #7]
        error_list[i].solve_data_error_fun = NULL;
 8001fde:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001fe2:	4947      	ldr	r1, [pc, #284]	; (8002100 <detect_init+0x268>)
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	3320      	adds	r3, #32
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	705a      	strb	r2, [r3, #1]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	709a      	strb	r2, [r3, #2]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	70da      	strb	r2, [r3, #3]

        error_list[i].enable = 1;
 8002000:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8002004:	493e      	ldr	r1, [pc, #248]	; (8002100 <detect_init+0x268>)
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4413      	add	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	f103 0210 	add.w	r2, r3, #16
 8002014:	78d3      	ldrb	r3, [r2, #3]
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	70d3      	strb	r3, [r2, #3]
        error_list[i].error_exist = 1;
 800201c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8002020:	4937      	ldr	r1, [pc, #220]	; (8002100 <detect_init+0x268>)
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	f103 0210 	add.w	r2, r3, #16
 8002030:	78d3      	ldrb	r3, [r2, #3]
 8002032:	f043 0320 	orr.w	r3, r3, #32
 8002036:	70d3      	strb	r3, [r2, #3]
        error_list[i].is_lost = 1;
 8002038:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800203c:	4930      	ldr	r1, [pc, #192]	; (8002100 <detect_init+0x268>)
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	f103 0210 	add.w	r2, r3, #16
 800204c:	78d3      	ldrb	r3, [r2, #3]
 800204e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002052:	70d3      	strb	r3, [r2, #3]
        error_list[i].data_is_error = 1;
 8002054:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8002058:	4929      	ldr	r1, [pc, #164]	; (8002100 <detect_init+0x268>)
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	f103 0210 	add.w	r2, r3, #16
 8002068:	78d3      	ldrb	r3, [r2, #3]
 800206a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800206e:	70d3      	strb	r3, [r2, #3]
        error_list[i].frequency = 0.0f;
 8002070:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8002074:	4922      	ldr	r1, [pc, #136]	; (8002100 <detect_init+0x268>)
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	3310      	adds	r3, #16
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	605a      	str	r2, [r3, #4]
        error_list[i].new_time = time;
 8002088:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800208c:	491c      	ldr	r1, [pc, #112]	; (8002100 <detect_init+0x268>)
 800208e:	4613      	mov	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	601a      	str	r2, [r3, #0]
        error_list[i].last_time = time;
 800209c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80020a0:	4917      	ldr	r1, [pc, #92]	; (8002100 <detect_init+0x268>)
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	605a      	str	r2, [r3, #4]
        error_list[i].lost_time = time;
 80020b0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80020b4:	4912      	ldr	r1, [pc, #72]	; (8002100 <detect_init+0x268>)
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	3308      	adds	r3, #8
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	601a      	str	r2, [r3, #0]
        error_list[i].work_time = time;
 80020c6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80020ca:	490d      	ldr	r1, [pc, #52]	; (8002100 <detect_init+0x268>)
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	3308      	adds	r3, #8
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	605a      	str	r2, [r3, #4]
    for (uint8_t i = 0; i < ERROR_LIST_LENGHT; i++)
 80020dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80020e0:	3301      	adds	r3, #1
 80020e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80020e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80020ea:	2b09      	cmp	r3, #9
 80020ec:	f67f aeea 	bls.w	8001ec4 <detect_init+0x2c>

//    error_list[DBUSTOE].dataIsErrorFun = RC_data_is_error;
//    error_list[DBUSTOE].solveLostFun = slove_RC_lost;
//    error_list[DBUSTOE].solveDataErrorFun = slove_data_error;

}
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	374c      	adds	r7, #76	; 0x4c
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bcb0      	pop	{r4, r5, r7}
 80020fa:	4770      	bx	lr
 80020fc:	080147b4 	.word	0x080147b4
 8002100:	200050f8 	.word	0x200050f8

08002104 <gimbal_behaviour_mode_set>:
  *                 this function set "gimbal_behaviour" variable, and set motor mode.
  * @param[in]      gimbal_mode_set: gimbal data pointer
  * @retval         none
  */
void gimbal_behaviour_mode_set(gimbal_control_t *gimbal_mode_set)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
    if (gimbal_mode_set == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d050      	beq.n	80021b4 <gimbal_behaviour_mode_set+0xb0>
    {
        return;
    }

    //set gimbal_behaviour mode variable
    gimbal_behavour_set(gimbal_mode_set);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f8d2 	bl	80022bc <gimbal_behavour_set>

    //according to "gimbal_behaviour", set motor control mode
    if (gimbal_behaviour == GIMBAL_ZERO_FORCE)
 8002118:	4b28      	ldr	r3, [pc, #160]	; (80021bc <gimbal_behaviour_mode_set+0xb8>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d108      	bne.n	8002132 <gimbal_behaviour_mode_set+0x2e>
    {
        gimbal_mode_set->gimbal_yaw_motor.gimbal_motor_mode = GIMBAL_MOTOR_RAW;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        gimbal_mode_set->gimbal_pitch_motor.gimbal_motor_mode = GIMBAL_MOTOR_RAW;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 8002130:	e041      	b.n	80021b6 <gimbal_behaviour_mode_set+0xb2>
    }
    else if (gimbal_behaviour == GIMBAL_INIT)
 8002132:	4b22      	ldr	r3, [pc, #136]	; (80021bc <gimbal_behaviour_mode_set+0xb8>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d108      	bne.n	800214c <gimbal_behaviour_mode_set+0x48>
    {
        gimbal_mode_set->gimbal_yaw_motor.gimbal_motor_mode = GIMBAL_MOTOR_ENCONDE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2202      	movs	r2, #2
 800213e:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        gimbal_mode_set->gimbal_pitch_motor.gimbal_motor_mode = GIMBAL_MOTOR_ENCONDE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2202      	movs	r2, #2
 8002146:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 800214a:	e034      	b.n	80021b6 <gimbal_behaviour_mode_set+0xb2>
    }
    else if (gimbal_behaviour == GIMBAL_ABSOLUTE_ANGLE)
 800214c:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <gimbal_behaviour_mode_set+0xb8>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b02      	cmp	r3, #2
 8002152:	d108      	bne.n	8002166 <gimbal_behaviour_mode_set+0x62>
    {
        gimbal_mode_set->gimbal_yaw_motor.gimbal_motor_mode = GIMBAL_MOTOR_GYRO;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        gimbal_mode_set->gimbal_pitch_motor.gimbal_motor_mode = GIMBAL_MOTOR_GYRO;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 8002164:	e027      	b.n	80021b6 <gimbal_behaviour_mode_set+0xb2>
    }
    else if (gimbal_behaviour == GIMBAL_RELATIVE_ANGLE)
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <gimbal_behaviour_mode_set+0xb8>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b03      	cmp	r3, #3
 800216c:	d108      	bne.n	8002180 <gimbal_behaviour_mode_set+0x7c>
    {
        gimbal_mode_set->gimbal_yaw_motor.gimbal_motor_mode = GIMBAL_MOTOR_ENCONDE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2202      	movs	r2, #2
 8002172:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        gimbal_mode_set->gimbal_pitch_motor.gimbal_motor_mode = GIMBAL_MOTOR_ENCONDE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2202      	movs	r2, #2
 800217a:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 800217e:	e01a      	b.n	80021b6 <gimbal_behaviour_mode_set+0xb2>
    }
    else if (gimbal_behaviour == GIMBAL_MOTIONLESS)
 8002180:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <gimbal_behaviour_mode_set+0xb8>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b04      	cmp	r3, #4
 8002186:	d108      	bne.n	800219a <gimbal_behaviour_mode_set+0x96>
    {
        gimbal_mode_set->gimbal_yaw_motor.gimbal_motor_mode = GIMBAL_MOTOR_ENCONDE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        gimbal_mode_set->gimbal_pitch_motor.gimbal_motor_mode = GIMBAL_MOTOR_ENCONDE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2202      	movs	r2, #2
 8002194:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 8002198:	e00d      	b.n	80021b6 <gimbal_behaviour_mode_set+0xb2>
    }
    else if (gimbal_behaviour == GIMBAL_AI)
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <gimbal_behaviour_mode_set+0xb8>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b05      	cmp	r3, #5
 80021a0:	d109      	bne.n	80021b6 <gimbal_behaviour_mode_set+0xb2>
    {
        gimbal_mode_set->gimbal_yaw_motor.gimbal_motor_mode = GIMBAL_MOTOR_ENCONDE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2202      	movs	r2, #2
 80021a6:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        gimbal_mode_set->gimbal_pitch_motor.gimbal_motor_mode = GIMBAL_MOTOR_ENCONDE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2202      	movs	r2, #2
 80021ae:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 80021b2:	e000      	b.n	80021b6 <gimbal_behaviour_mode_set+0xb2>
        return;
 80021b4:	bf00      	nop
                }

}
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	200002c9 	.word	0x200002c9

080021c0 <gimbal_behaviour_control_set>:
  * @param[out]     add_pitch: pitch axis set increment angle, unit: rad
  * @param[in]      gimbal_mode_set: gimbal data pointer
  * @retval         none
  */
void gimbal_behaviour_control_set(float32_t *add_yaw, float32_t *add_pitch, gimbal_control_t *gimbal_control_set)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]

    if (add_yaw == NULL || add_pitch == NULL || gimbal_control_set == NULL)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d041      	beq.n	8002256 <gimbal_behaviour_control_set+0x96>
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d03e      	beq.n	8002256 <gimbal_behaviour_control_set+0x96>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d03b      	beq.n	8002256 <gimbal_behaviour_control_set+0x96>
    {
        return;
    }

    if (gimbal_behaviour == GIMBAL_ZERO_FORCE)
 80021de:	4b20      	ldr	r3, [pc, #128]	; (8002260 <gimbal_behaviour_control_set+0xa0>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d105      	bne.n	80021f2 <gimbal_behaviour_control_set+0x32>
    {
        gimbal_zero_force_control(add_yaw, add_pitch, gimbal_control_set);
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 f906 	bl	80023fc <gimbal_zero_force_control>
 80021f0:	e032      	b.n	8002258 <gimbal_behaviour_control_set+0x98>
    }
    else if (gimbal_behaviour == GIMBAL_INIT)
 80021f2:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <gimbal_behaviour_control_set+0xa0>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d105      	bne.n	8002206 <gimbal_behaviour_control_set+0x46>
    {
        gimbal_init_control(add_yaw, add_pitch, gimbal_control_set);
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68b9      	ldr	r1, [r7, #8]
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 f91a 	bl	8002438 <gimbal_init_control>
 8002204:	e028      	b.n	8002258 <gimbal_behaviour_control_set+0x98>
    }
    else if (gimbal_behaviour == GIMBAL_ABSOLUTE_ANGLE)
 8002206:	4b16      	ldr	r3, [pc, #88]	; (8002260 <gimbal_behaviour_control_set+0xa0>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d105      	bne.n	800221a <gimbal_behaviour_control_set+0x5a>
    {
        gimbal_absolute_angle_control(add_yaw, add_pitch, gimbal_control_set);
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f96e 	bl	80024f4 <gimbal_absolute_angle_control>
 8002218:	e01e      	b.n	8002258 <gimbal_behaviour_control_set+0x98>
    }
    else if (gimbal_behaviour == GIMBAL_RELATIVE_ANGLE)
 800221a:	4b11      	ldr	r3, [pc, #68]	; (8002260 <gimbal_behaviour_control_set+0xa0>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b03      	cmp	r3, #3
 8002220:	d105      	bne.n	800222e <gimbal_behaviour_control_set+0x6e>
    {
        gimbal_relative_angle_control(add_yaw, add_pitch, gimbal_control_set);
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68b9      	ldr	r1, [r7, #8]
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 fa84 	bl	8002734 <gimbal_relative_angle_control>
 800222c:	e014      	b.n	8002258 <gimbal_behaviour_control_set+0x98>
    }
    else if (gimbal_behaviour == GIMBAL_MOTIONLESS)
 800222e:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <gimbal_behaviour_control_set+0xa0>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b04      	cmp	r3, #4
 8002234:	d105      	bne.n	8002242 <gimbal_behaviour_control_set+0x82>
    {
        gimbal_motionless_control(add_yaw, add_pitch, gimbal_control_set);
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fb0a 	bl	8002854 <gimbal_motionless_control>
 8002240:	e00a      	b.n	8002258 <gimbal_behaviour_control_set+0x98>
    }
    else if (gimbal_behaviour == GIMBAL_AI)
 8002242:	4b07      	ldr	r3, [pc, #28]	; (8002260 <gimbal_behaviour_control_set+0xa0>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b05      	cmp	r3, #5
 8002248:	d106      	bne.n	8002258 <gimbal_behaviour_control_set+0x98>
    {
        gimbal_AI_control(add_yaw, add_pitch, gimbal_control_set);
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 fb1e 	bl	8002890 <gimbal_AI_control>
 8002254:	e000      	b.n	8002258 <gimbal_behaviour_control_set+0x98>
        return;
 8002256:	bf00      	nop
    }

}
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200002c9 	.word	0x200002c9

08002264 <gimbal_cmd_to_chassis_stop>:
  * @brief          in some special gimbal behavior mode, chassis needs keeping no move
  * @param[in]      none
  * @retval         1: no move 0:normal
  */
uint8_t gimbal_cmd_to_chassis_stop(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
    if (gimbal_behaviour == GIMBAL_INIT || gimbal_behaviour == GIMBAL_MOTIONLESS || gimbal_behaviour == GIMBAL_ZERO_FORCE)
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <gimbal_cmd_to_chassis_stop+0x2c>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d007      	beq.n	8002280 <gimbal_cmd_to_chassis_stop+0x1c>
 8002270:	4b07      	ldr	r3, [pc, #28]	; (8002290 <gimbal_cmd_to_chassis_stop+0x2c>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b04      	cmp	r3, #4
 8002276:	d003      	beq.n	8002280 <gimbal_cmd_to_chassis_stop+0x1c>
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <gimbal_cmd_to_chassis_stop+0x2c>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <gimbal_cmd_to_chassis_stop+0x20>
    {
        return 1;
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <gimbal_cmd_to_chassis_stop+0x22>
    }
    else
    {
        return 0;
 8002284:	2300      	movs	r3, #0
    }
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	200002c9 	.word	0x200002c9

08002294 <gimbal_cmd_to_shoot_stop>:
  * @brief          in some special gimbal behavior mode, shoot needs to be stopped
  * @param[in]      none
  * @retval         1: do not shoot 0:normal
  */
uint8_t gimbal_cmd_to_shoot_stop(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
    if (gimbal_behaviour == GIMBAL_INIT || gimbal_behaviour == GIMBAL_ZERO_FORCE)
 8002298:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <gimbal_cmd_to_shoot_stop+0x24>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d003      	beq.n	80022a8 <gimbal_cmd_to_shoot_stop+0x14>
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <gimbal_cmd_to_shoot_stop+0x24>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <gimbal_cmd_to_shoot_stop+0x18>
    {
        return 1;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <gimbal_cmd_to_shoot_stop+0x1a>
    }
    else
    {
        return 0;
 80022ac:	2300      	movs	r3, #0
    }
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	200002c9 	.word	0x200002c9

080022bc <gimbal_behavour_set>:
  * @brief          set gimbal behavior mode ("gimbal_behaviour" variable).
  * @param[in]      gimbal_mode_set: gimbal data pointer
  * @retval         none
  */
static void gimbal_behavour_set(gimbal_control_t *gimbal_mode_set)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
    if (gimbal_mode_set == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8087 	beq.w	80023da <gimbal_behavour_set+0x11e>
    {
        return;
    }

    //in initialize mode, judge if gimbal is in middle place
    if (gimbal_behaviour == GIMBAL_INIT)
 80022cc:	4b46      	ldr	r3, [pc, #280]	; (80023e8 <gimbal_behavour_set+0x12c>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d14f      	bne.n	8002374 <gimbal_behavour_set+0xb8>
    {
        static uint16_t init_time = 0;
        static uint16_t init_stop_time = 0;
        init_time++;
 80022d4:	4b45      	ldr	r3, [pc, #276]	; (80023ec <gimbal_behavour_set+0x130>)
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	3301      	adds	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	4b43      	ldr	r3, [pc, #268]	; (80023ec <gimbal_behavour_set+0x130>)
 80022de:	801a      	strh	r2, [r3, #0]
        
        if ((fabs(gimbal_mode_set->gimbal_yaw_motor.relative_angle - INIT_YAW_SET) < GIMBAL_INIT_ANGLE_ERROR &&
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 80022e6:	eef0 7ae7 	vabs.f32	s15, s15
 80022ea:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80023f0 <gimbal_behavour_set+0x134>
 80022ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f6:	d516      	bpl.n	8002326 <gimbal_behavour_set+0x6a>
             fabs(gimbal_mode_set->gimbal_pitch_motor.relative_angle - INIT_PITCH_SET) < GIMBAL_INIT_ANGLE_ERROR))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	edd3 7a8f 	vldr	s15, [r3, #572]	; 0x23c
 80022fe:	eef0 7ae7 	vabs.f32	s15, s15
        if ((fabs(gimbal_mode_set->gimbal_yaw_motor.relative_angle - INIT_YAW_SET) < GIMBAL_INIT_ANGLE_ERROR &&
 8002302:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80023f0 <gimbal_behavour_set+0x134>
 8002306:	eef4 7ac7 	vcmpe.f32	s15, s14
 800230a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230e:	d50a      	bpl.n	8002326 <gimbal_behavour_set+0x6a>
        {
            
            if (init_stop_time < GIMBAL_INIT_STOP_TIME)
 8002310:	4b38      	ldr	r3, [pc, #224]	; (80023f4 <gimbal_behavour_set+0x138>)
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	2b63      	cmp	r3, #99	; 0x63
 8002316:	d812      	bhi.n	800233e <gimbal_behavour_set+0x82>
            {
                init_stop_time++;
 8002318:	4b36      	ldr	r3, [pc, #216]	; (80023f4 <gimbal_behavour_set+0x138>)
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	3301      	adds	r3, #1
 800231e:	b29a      	uxth	r2, r3
 8002320:	4b34      	ldr	r3, [pc, #208]	; (80023f4 <gimbal_behavour_set+0x138>)
 8002322:	801a      	strh	r2, [r3, #0]
            if (init_stop_time < GIMBAL_INIT_STOP_TIME)
 8002324:	e00b      	b.n	800233e <gimbal_behavour_set+0x82>
            }
        }
        else
        {
            
            if (init_time < GIMBAL_INIT_TIME)
 8002326:	4b31      	ldr	r3, [pc, #196]	; (80023ec <gimbal_behavour_set+0x130>)
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	f241 726f 	movw	r2, #5999	; 0x176f
 800232e:	4293      	cmp	r3, r2
 8002330:	d805      	bhi.n	800233e <gimbal_behavour_set+0x82>
            {
                init_time++;
 8002332:	4b2e      	ldr	r3, [pc, #184]	; (80023ec <gimbal_behavour_set+0x130>)
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	3301      	adds	r3, #1
 8002338:	b29a      	uxth	r2, r3
 800233a:	4b2c      	ldr	r3, [pc, #176]	; (80023ec <gimbal_behavour_set+0x130>)
 800233c:	801a      	strh	r2, [r3, #0]
        }

        //exceed max initialize time / gimbal has kept in middle place for a while
        //state switch is not in up position (GIMBAL_PITCH_MIN_RELATIVE_ANGLE) during initializing / remote controller offline
        //these four conditions can cause initialization exits.
        if (init_time < GIMBAL_INIT_TIME && init_stop_time < GIMBAL_INIT_STOP_TIME &&
 800233e:	4b2b      	ldr	r3, [pc, #172]	; (80023ec <gimbal_behavour_set+0x130>)
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	f241 726f 	movw	r2, #5999	; 0x176f
 8002346:	4293      	cmp	r3, r2
 8002348:	d80e      	bhi.n	8002368 <gimbal_behavour_set+0xac>
 800234a:	4b2a      	ldr	r3, [pc, #168]	; (80023f4 <gimbal_behavour_set+0x138>)
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	2b63      	cmp	r3, #99	; 0x63
 8002350:	d80a      	bhi.n	8002368 <gimbal_behavour_set+0xac>
            !switch_is_up(gimbal_mode_set->gimbal_rc_ctrl->rc.s[GIMBAL_MODE_CHANNEL]) && !toe_is_error(DBUS_TOE))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	7a9b      	ldrb	r3, [r3, #10]
        if (init_time < GIMBAL_INIT_TIME && init_stop_time < GIMBAL_INIT_STOP_TIME &&
 8002358:	2b01      	cmp	r3, #1
 800235a:	d005      	beq.n	8002368 <gimbal_behavour_set+0xac>
            !switch_is_up(gimbal_mode_set->gimbal_rc_ctrl->rc.s[GIMBAL_MODE_CHANNEL]) && !toe_is_error(DBUS_TOE))
 800235c:	2000      	movs	r0, #0
 800235e:	f7ff fcc1 	bl	8001ce4 <toe_is_error>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d03a      	beq.n	80023de <gimbal_behavour_set+0x122>
        {
            return;
        }
        else
        {
            init_stop_time = 0;
 8002368:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <gimbal_behavour_set+0x138>)
 800236a:	2200      	movs	r2, #0
 800236c:	801a      	strh	r2, [r3, #0]
            init_time = 0;
 800236e:	4b1f      	ldr	r3, [pc, #124]	; (80023ec <gimbal_behavour_set+0x130>)
 8002370:	2200      	movs	r2, #0
 8002372:	801a      	strh	r2, [r3, #0]
        }
    }

    //remote controller switch controls gimbal behavior mode
    if (switch_is_down(gimbal_mode_set->gimbal_rc_ctrl->rc.s[GIMBAL_MODE_CHANNEL]))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	7a9b      	ldrb	r3, [r3, #10]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d103      	bne.n	8002386 <gimbal_behavour_set+0xca>
    {
        gimbal_behaviour = GIMBAL_ABSOLUTE_ANGLE;
 800237e:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <gimbal_behavour_set+0x12c>)
 8002380:	2202      	movs	r2, #2
 8002382:	701a      	strb	r2, [r3, #0]
 8002384:	e010      	b.n	80023a8 <gimbal_behavour_set+0xec>
    }
    else if (switch_is_mid(gimbal_mode_set->gimbal_rc_ctrl->rc.s[GIMBAL_MODE_CHANNEL]))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	7a9b      	ldrb	r3, [r3, #10]
 800238c:	2b03      	cmp	r3, #3
 800238e:	d103      	bne.n	8002398 <gimbal_behavour_set+0xdc>
    {
        gimbal_behaviour = GIMBAL_RELATIVE_ANGLE;
 8002390:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <gimbal_behavour_set+0x12c>)
 8002392:	2203      	movs	r2, #3
 8002394:	701a      	strb	r2, [r3, #0]
 8002396:	e007      	b.n	80023a8 <gimbal_behavour_set+0xec>
    }
    else if (switch_is_up(gimbal_mode_set->gimbal_rc_ctrl->rc.s[GIMBAL_MODE_CHANNEL]))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	7a9b      	ldrb	r3, [r3, #10]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d102      	bne.n	80023a8 <gimbal_behavour_set+0xec>
    {
        //gimbal_behaviour = GIMBAL_ZERO_FORCE;
    	//we label "ZERO_FORCE",replaced by our AI
    	gimbal_behaviour = GIMBAL_AI;
 80023a2:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <gimbal_behavour_set+0x12c>)
 80023a4:	2205      	movs	r2, #5
 80023a6:	701a      	strb	r2, [r3, #0]
    }

    if( toe_is_error(DBUS_TOE))
 80023a8:	2000      	movs	r0, #0
 80023aa:	f7ff fc9b 	bl	8001ce4 <toe_is_error>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <gimbal_behavour_set+0xfe>
    {
        gimbal_behaviour = GIMBAL_ZERO_FORCE;
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <gimbal_behavour_set+0x12c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	701a      	strb	r2, [r3, #0]

    //check whether go into initialize mode
    //if the last behavior is GIMBAL_ZERO_FORCE, when entering any other mode, gimbal will go into initialize mode
    {
        static gimbal_behaviour_e last_gimbal_behaviour = GIMBAL_ZERO_FORCE;
        if (last_gimbal_behaviour == GIMBAL_ZERO_FORCE && gimbal_behaviour != GIMBAL_ZERO_FORCE)
 80023ba:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <gimbal_behavour_set+0x13c>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <gimbal_behavour_set+0x114>
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <gimbal_behavour_set+0x12c>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <gimbal_behavour_set+0x114>
        {
            gimbal_behaviour = GIMBAL_INIT;
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <gimbal_behavour_set+0x12c>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
        }
        last_gimbal_behaviour = gimbal_behaviour;
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <gimbal_behavour_set+0x12c>)
 80023d2:	781a      	ldrb	r2, [r3, #0]
 80023d4:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <gimbal_behavour_set+0x13c>)
 80023d6:	701a      	strb	r2, [r3, #0]
 80023d8:	e002      	b.n	80023e0 <gimbal_behavour_set+0x124>
        return;
 80023da:	bf00      	nop
 80023dc:	e000      	b.n	80023e0 <gimbal_behavour_set+0x124>
            return;
 80023de:	bf00      	nop
    }



}
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	200002c9 	.word	0x200002c9
 80023ec:	200002ca 	.word	0x200002ca
 80023f0:	3dcccccd 	.word	0x3dcccccd
 80023f4:	200002cc 	.word	0x200002cc
 80023f8:	200002ce 	.word	0x200002ce

080023fc <gimbal_zero_force_control>:
  * @param[out]     pitch: pitch motor set current, it will be sent to CAN bus directly.
  * @param[in]      gimbal_control_set: gimbal data pointer
  * @retval         none
  */
static void gimbal_zero_force_control(float32_t *yaw, float32_t *pitch, gimbal_control_t *gimbal_control_set)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
    if (yaw == NULL || pitch == NULL || gimbal_control_set == NULL)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00e      	beq.n	800242c <gimbal_zero_force_control+0x30>
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00b      	beq.n	800242c <gimbal_zero_force_control+0x30>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d008      	beq.n	800242c <gimbal_zero_force_control+0x30>
    {
        return;
    }

    *yaw = 0.0f;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
    *pitch = 0.0f;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	e000      	b.n	800242e <gimbal_zero_force_control+0x32>
        return;
 800242c:	bf00      	nop
}
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <gimbal_init_control>:
  * @param[out]     pitch: pitch motor absolute angle increment, unit: rad
  * @param[in]      gimbal_control_set: gimbal data pointer
  * @retval         none
  */
static void gimbal_init_control(float32_t *yaw, float32_t *pitch, gimbal_control_t *gimbal_control_set)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
    if (yaw == NULL || pitch == NULL || gimbal_control_set == NULL)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d045      	beq.n	80024d6 <gimbal_init_control+0x9e>
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d042      	beq.n	80024d6 <gimbal_init_control+0x9e>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d03f      	beq.n	80024d6 <gimbal_init_control+0x9e>
    {
        return;
    }

    //初始化状态控制量计算
    if (fabs(INIT_PITCH_SET - gimbal_control_set->gimbal_pitch_motor.relative_angle) > GIMBAL_INIT_ANGLE_ERROR)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	edd3 7a8f 	vldr	s15, [r3, #572]	; 0x23c
 800245c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80024e4 <gimbal_init_control+0xac>
 8002460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002464:	eef0 7ae7 	vabs.f32	s15, s15
 8002468:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80024e8 <gimbal_init_control+0xb0>
 800246c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002474:	dd12      	ble.n	800249c <gimbal_init_control+0x64>
    {
        *pitch = (INIT_PITCH_SET - gimbal_control_set->gimbal_pitch_motor.relative_angle) * GIMBAL_INIT_PITCH_SPEED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	edd3 7a8f 	vldr	s15, [r3, #572]	; 0x23c
 800247c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80024e4 <gimbal_init_control+0xac>
 8002480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002484:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80024ec <gimbal_init_control+0xb4>
 8002488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	edc3 7a00 	vstr	s15, [r3]
        *yaw = 0.0f;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e01d      	b.n	80024d8 <gimbal_init_control+0xa0>
    }
    else
    {
        *pitch = (INIT_PITCH_SET - gimbal_control_set->gimbal_pitch_motor.relative_angle) * GIMBAL_INIT_PITCH_SPEED;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	edd3 7a8f 	vldr	s15, [r3, #572]	; 0x23c
 80024a2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80024e4 <gimbal_init_control+0xac>
 80024a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024aa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80024ec <gimbal_init_control+0xb4>
 80024ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	edc3 7a00 	vstr	s15, [r3]
        *yaw = (INIT_YAW_SET - gimbal_control_set->gimbal_yaw_motor.relative_angle) * GIMBAL_INIT_YAW_SPEED;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 80024be:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80024e4 <gimbal_init_control+0xac>
 80024c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80024f0 <gimbal_init_control+0xb8>
 80024ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	edc3 7a00 	vstr	s15, [r3]
 80024d4:	e000      	b.n	80024d8 <gimbal_init_control+0xa0>
        return;
 80024d6:	bf00      	nop
    }
}
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	00000000 	.word	0x00000000
 80024e8:	3dcccccd 	.word	0x3dcccccd
 80024ec:	3b83126f 	.word	0x3b83126f
 80024f0:	3ba3d70a 	.word	0x3ba3d70a

080024f4 <gimbal_absolute_angle_control>:
  * @param[out]     pitch: pitch axis absolute angle increment,unit: rad
  * @param[in]      gimbal_control_set: gimbal data pointer
  * @retval         none
  */
static void gimbal_absolute_angle_control(float32_t *yaw, float32_t *pitch, gimbal_control_t *gimbal_control_set)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
    if (yaw == NULL || pitch == NULL || gimbal_control_set == NULL)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 80f8 	beq.w	80026f8 <gimbal_absolute_angle_control+0x204>
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 80f4 	beq.w	80026f8 <gimbal_absolute_angle_control+0x204>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 80f0 	beq.w	80026f8 <gimbal_absolute_angle_control+0x204>
    }

    static int16_t yaw_channel = 0, pitch_channel = 0;

    //dead zone limit
    rc_deadband_limit(gimbal_control_set->gimbal_rc_ctrl->rc.ch[YAW_CHANNEL], yaw_channel, RC_DEADBAND);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002520:	b21b      	sxth	r3, r3
 8002522:	2b0a      	cmp	r3, #10
 8002524:	dc07      	bgt.n	8002536 <gimbal_absolute_angle_control+0x42>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800252e:	b21b      	sxth	r3, r3
 8002530:	f113 0f0a 	cmn.w	r3, #10
 8002534:	da07      	bge.n	8002546 <gimbal_absolute_angle_control+0x52>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800253e:	b21a      	sxth	r2, r3
 8002540:	4b6f      	ldr	r3, [pc, #444]	; (8002700 <gimbal_absolute_angle_control+0x20c>)
 8002542:	801a      	strh	r2, [r3, #0]
 8002544:	e002      	b.n	800254c <gimbal_absolute_angle_control+0x58>
 8002546:	4b6e      	ldr	r3, [pc, #440]	; (8002700 <gimbal_absolute_angle_control+0x20c>)
 8002548:	2200      	movs	r2, #0
 800254a:	801a      	strh	r2, [r3, #0]
    rc_deadband_limit(gimbal_control_set->gimbal_rc_ctrl->rc.ch[PITCH_CHANNEL], pitch_channel, RC_DEADBAND);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002554:	b21b      	sxth	r3, r3
 8002556:	2b0a      	cmp	r3, #10
 8002558:	dc07      	bgt.n	800256a <gimbal_absolute_angle_control+0x76>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002562:	b21b      	sxth	r3, r3
 8002564:	f113 0f0a 	cmn.w	r3, #10
 8002568:	da07      	bge.n	800257a <gimbal_absolute_angle_control+0x86>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002572:	b21a      	sxth	r2, r3
 8002574:	4b63      	ldr	r3, [pc, #396]	; (8002704 <gimbal_absolute_angle_control+0x210>)
 8002576:	801a      	strh	r2, [r3, #0]
 8002578:	e002      	b.n	8002580 <gimbal_absolute_angle_control+0x8c>
 800257a:	4b62      	ldr	r3, [pc, #392]	; (8002704 <gimbal_absolute_angle_control+0x210>)
 800257c:	2200      	movs	r2, #0
 800257e:	801a      	strh	r2, [r3, #0]

    //combine joy stick value and keyboard value
    *yaw = yaw_channel * YAW_RC_SEN - gimbal_control_set->gimbal_rc_ctrl->mouse.x * YAW_MOUSE_SEN;
 8002580:	4b5f      	ldr	r3, [pc, #380]	; (8002700 <gimbal_absolute_angle_control+0x20c>)
 8002582:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002586:	ee07 3a90 	vmov	s15, r3
 800258a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800258e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002708 <gimbal_absolute_angle_control+0x214>
 8002592:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800259e:	b21b      	sxth	r3, r3
 80025a0:	ee07 3a90 	vmov	s15, r3
 80025a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a8:	eddf 6a58 	vldr	s13, [pc, #352]	; 800270c <gimbal_absolute_angle_control+0x218>
 80025ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80025b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	edc3 7a00 	vstr	s15, [r3]
    *pitch = pitch_channel * PITCH_RC_SEN + gimbal_control_set->gimbal_rc_ctrl->mouse.y * PITCH_MOUSE_SEN;
 80025ba:	4b52      	ldr	r3, [pc, #328]	; (8002704 <gimbal_absolute_angle_control+0x210>)
 80025bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025c0:	ee07 3a90 	vmov	s15, r3
 80025c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025c8:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8002710 <gimbal_absolute_angle_control+0x21c>
 80025cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80025d8:	b21b      	sxth	r3, r3
 80025da:	ee07 3a90 	vmov	s15, r3
 80025de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025e2:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8002714 <gimbal_absolute_angle_control+0x220>
 80025e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80025ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	edc3 7a00 	vstr	s15, [r3]
    {
        static uint16_t last_turn_keyboard = 0;
        static uint8_t gimbal_turn_flag = 0;    //0->not doing turn round   1->doing turn round right now
        static float32_t gimbal_end_angle = 0.0f;

        if ((gimbal_control_set->gimbal_rc_ctrl->key.v & TURN_KEYBOARD) && !(last_turn_keyboard & TURN_KEYBOARD))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	8a9b      	ldrh	r3, [r3, #20]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002600:	2b00      	cmp	r3, #0
 8002602:	d020      	beq.n	8002646 <gimbal_absolute_angle_control+0x152>
 8002604:	4b44      	ldr	r3, [pc, #272]	; (8002718 <gimbal_absolute_angle_control+0x224>)
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800260c:	2b00      	cmp	r3, #0
 800260e:	d11a      	bne.n	8002646 <gimbal_absolute_angle_control+0x152>
        {
            if (gimbal_turn_flag == 0)
 8002610:	4b42      	ldr	r3, [pc, #264]	; (800271c <gimbal_absolute_angle_control+0x228>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d116      	bne.n	8002646 <gimbal_absolute_angle_control+0x152>
            {
                gimbal_turn_flag = 1;
 8002618:	4b40      	ldr	r3, [pc, #256]	; (800271c <gimbal_absolute_angle_control+0x228>)
 800261a:	2201      	movs	r2, #1
 800261c:	701a      	strb	r2, [r3, #0]
                //save turn round target value (angle)
                gimbal_end_angle = rad_format(gimbal_control_set->gimbal_yaw_motor.absolute_angle + PI);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 8002624:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002720 <gimbal_absolute_angle_control+0x22c>
 8002628:	ee77 7a87 	vadd.f32	s15, s15, s14
 800262c:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 8002720 <gimbal_absolute_angle_control+0x22c>
 8002630:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8002724 <gimbal_absolute_angle_control+0x230>
 8002634:	eeb0 0a67 	vmov.f32	s0, s15
 8002638:	f002 fd24 	bl	8005084 <loop_fp32_constrain>
 800263c:	eef0 7a40 	vmov.f32	s15, s0
 8002640:	4b39      	ldr	r3, [pc, #228]	; (8002728 <gimbal_absolute_angle_control+0x234>)
 8002642:	edc3 7a00 	vstr	s15, [r3]
            }
        }
        last_turn_keyboard = gimbal_control_set->gimbal_rc_ctrl->key.v ;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	8a9b      	ldrh	r3, [r3, #20]
 800264c:	b29a      	uxth	r2, r3
 800264e:	4b32      	ldr	r3, [pc, #200]	; (8002718 <gimbal_absolute_angle_control+0x224>)
 8002650:	801a      	strh	r2, [r3, #0]

        if (gimbal_turn_flag)
 8002652:	4b32      	ldr	r3, [pc, #200]	; (800271c <gimbal_absolute_angle_control+0x228>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d02b      	beq.n	80026b2 <gimbal_absolute_angle_control+0x1be>
        {
            //keep controlling to reach the target value (angle), the spinning direction is random
            if (rad_format(gimbal_end_angle - gimbal_control_set->gimbal_yaw_motor.absolute_angle) > 0.0f)
 800265a:	4b33      	ldr	r3, [pc, #204]	; (8002728 <gimbal_absolute_angle_control+0x234>)
 800265c:	ed93 7a00 	vldr	s14, [r3]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 8002666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800266a:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8002720 <gimbal_absolute_angle_control+0x22c>
 800266e:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8002724 <gimbal_absolute_angle_control+0x230>
 8002672:	eeb0 0a67 	vmov.f32	s0, s15
 8002676:	f002 fd05 	bl	8005084 <loop_fp32_constrain>
 800267a:	eef0 7a40 	vmov.f32	s15, s0
 800267e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002686:	dd0a      	ble.n	800269e <gimbal_absolute_angle_control+0x1aa>
            {
                *yaw += TURN_SPEED;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	edd3 7a00 	vldr	s15, [r3]
 800268e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800272c <gimbal_absolute_angle_control+0x238>
 8002692:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	edc3 7a00 	vstr	s15, [r3]
 800269c:	e009      	b.n	80026b2 <gimbal_absolute_angle_control+0x1be>
            }
            else
            {
                *yaw -= TURN_SPEED;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	edd3 7a00 	vldr	s15, [r3]
 80026a4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800272c <gimbal_absolute_angle_control+0x238>
 80026a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	edc3 7a00 	vstr	s15, [r3]
            }
        }
        //when it reaches target value (angle), stop turning round
        if (gimbal_turn_flag && fabs(rad_format(gimbal_end_angle - gimbal_control_set->gimbal_yaw_motor.absolute_angle)) < 0.01f)
 80026b2:	4b1a      	ldr	r3, [pc, #104]	; (800271c <gimbal_absolute_angle_control+0x228>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d01f      	beq.n	80026fa <gimbal_absolute_angle_control+0x206>
 80026ba:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <gimbal_absolute_angle_control+0x234>)
 80026bc:	ed93 7a00 	vldr	s14, [r3]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 80026c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ca:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8002720 <gimbal_absolute_angle_control+0x22c>
 80026ce:	eddf 0a15 	vldr	s1, [pc, #84]	; 8002724 <gimbal_absolute_angle_control+0x230>
 80026d2:	eeb0 0a67 	vmov.f32	s0, s15
 80026d6:	f002 fcd5 	bl	8005084 <loop_fp32_constrain>
 80026da:	eef0 7a40 	vmov.f32	s15, s0
 80026de:	eef0 7ae7 	vabs.f32	s15, s15
 80026e2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002730 <gimbal_absolute_angle_control+0x23c>
 80026e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ee:	d504      	bpl.n	80026fa <gimbal_absolute_angle_control+0x206>
        {
            gimbal_turn_flag = 0;
 80026f0:	4b0a      	ldr	r3, [pc, #40]	; (800271c <gimbal_absolute_angle_control+0x228>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	701a      	strb	r2, [r3, #0]
 80026f6:	e000      	b.n	80026fa <gimbal_absolute_angle_control+0x206>
        return;
 80026f8:	bf00      	nop
        }
    }
}
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	200002d0 	.word	0x200002d0
 8002704:	200002d2 	.word	0x200002d2
 8002708:	b6a7c5ac 	.word	0xb6a7c5ac
 800270c:	3851b717 	.word	0x3851b717
 8002710:	b6c9539c 	.word	0xb6c9539c
 8002714:	391d4952 	.word	0x391d4952
 8002718:	200002d4 	.word	0x200002d4
 800271c:	200002d6 	.word	0x200002d6
 8002720:	40490fdb 	.word	0x40490fdb
 8002724:	c0490fdb 	.word	0xc0490fdb
 8002728:	200002d8 	.word	0x200002d8
 800272c:	3d23d70a 	.word	0x3d23d70a
 8002730:	3c23d70a 	.word	0x3c23d70a

08002734 <gimbal_relative_angle_control>:
  * @param[out]     pitch: pitch axis relative angle increment,unit: rad
  * @param[in]      gimbal_control_set: gimbal data pointer
  * @retval         none
  */
static void gimbal_relative_angle_control(float32_t *yaw, float32_t *pitch, gimbal_control_t *gimbal_control_set)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
    if (yaw == NULL || pitch == NULL || gimbal_control_set == NULL)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d074      	beq.n	8002830 <gimbal_relative_angle_control+0xfc>
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d071      	beq.n	8002830 <gimbal_relative_angle_control+0xfc>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d06e      	beq.n	8002830 <gimbal_relative_angle_control+0xfc>
        return;
    }
    static int16_t yaw_channel = 0, pitch_channel = 0;

    //dead zone limit
    rc_deadband_limit(gimbal_control_set->gimbal_rc_ctrl->rc.ch[YAW_CHANNEL], yaw_channel, RC_DEADBAND);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800275a:	b21b      	sxth	r3, r3
 800275c:	2b0a      	cmp	r3, #10
 800275e:	dc07      	bgt.n	8002770 <gimbal_relative_angle_control+0x3c>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002768:	b21b      	sxth	r3, r3
 800276a:	f113 0f0a 	cmn.w	r3, #10
 800276e:	da07      	bge.n	8002780 <gimbal_relative_angle_control+0x4c>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002778:	b21a      	sxth	r2, r3
 800277a:	4b30      	ldr	r3, [pc, #192]	; (800283c <gimbal_relative_angle_control+0x108>)
 800277c:	801a      	strh	r2, [r3, #0]
 800277e:	e002      	b.n	8002786 <gimbal_relative_angle_control+0x52>
 8002780:	4b2e      	ldr	r3, [pc, #184]	; (800283c <gimbal_relative_angle_control+0x108>)
 8002782:	2200      	movs	r2, #0
 8002784:	801a      	strh	r2, [r3, #0]
    rc_deadband_limit(gimbal_control_set->gimbal_rc_ctrl->rc.ch[PITCH_CHANNEL], pitch_channel, RC_DEADBAND);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800278e:	b21b      	sxth	r3, r3
 8002790:	2b0a      	cmp	r3, #10
 8002792:	dc07      	bgt.n	80027a4 <gimbal_relative_angle_control+0x70>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800279c:	b21b      	sxth	r3, r3
 800279e:	f113 0f0a 	cmn.w	r3, #10
 80027a2:	da07      	bge.n	80027b4 <gimbal_relative_angle_control+0x80>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80027ac:	b21a      	sxth	r2, r3
 80027ae:	4b24      	ldr	r3, [pc, #144]	; (8002840 <gimbal_relative_angle_control+0x10c>)
 80027b0:	801a      	strh	r2, [r3, #0]
 80027b2:	e002      	b.n	80027ba <gimbal_relative_angle_control+0x86>
 80027b4:	4b22      	ldr	r3, [pc, #136]	; (8002840 <gimbal_relative_angle_control+0x10c>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	801a      	strh	r2, [r3, #0]

    *yaw = yaw_channel * YAW_RC_SEN - gimbal_control_set->gimbal_rc_ctrl->mouse.x * YAW_MOUSE_SEN;
 80027ba:	4b20      	ldr	r3, [pc, #128]	; (800283c <gimbal_relative_angle_control+0x108>)
 80027bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027c0:	ee07 3a90 	vmov	s15, r3
 80027c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027c8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002844 <gimbal_relative_angle_control+0x110>
 80027cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80027d8:	b21b      	sxth	r3, r3
 80027da:	ee07 3a90 	vmov	s15, r3
 80027de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027e2:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002848 <gimbal_relative_angle_control+0x114>
 80027e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80027ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	edc3 7a00 	vstr	s15, [r3]
    *pitch = pitch_channel * PITCH_RC_SEN + gimbal_control_set->gimbal_rc_ctrl->mouse.y * PITCH_MOUSE_SEN;
 80027f4:	4b12      	ldr	r3, [pc, #72]	; (8002840 <gimbal_relative_angle_control+0x10c>)
 80027f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027fa:	ee07 3a90 	vmov	s15, r3
 80027fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002802:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800284c <gimbal_relative_angle_control+0x118>
 8002806:	ee27 7a87 	vmul.f32	s14, s15, s14
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002812:	b21b      	sxth	r3, r3
 8002814:	ee07 3a90 	vmov	s15, r3
 8002818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800281c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002850 <gimbal_relative_angle_control+0x11c>
 8002820:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	edc3 7a00 	vstr	s15, [r3]
 800282e:	e000      	b.n	8002832 <gimbal_relative_angle_control+0xfe>
        return;
 8002830:	bf00      	nop


}
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	200002dc 	.word	0x200002dc
 8002840:	200002de 	.word	0x200002de
 8002844:	b6a7c5ac 	.word	0xb6a7c5ac
 8002848:	3851b717 	.word	0x3851b717
 800284c:	b6c9539c 	.word	0xb6c9539c
 8002850:	391d4952 	.word	0x391d4952

08002854 <gimbal_motionless_control>:
  * @param[out]     pitch: pitch axis relative angle increment, unit: rad
  * @param[in]      gimbal_control_set: gimbal data pointer
  * @retval         none
  */
static void gimbal_motionless_control(float32_t *yaw, float32_t *pitch, gimbal_control_t *gimbal_control_set)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
    if (yaw == NULL || pitch == NULL || gimbal_control_set == NULL)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00e      	beq.n	8002884 <gimbal_motionless_control+0x30>
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00b      	beq.n	8002884 <gimbal_motionless_control+0x30>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d008      	beq.n	8002884 <gimbal_motionless_control+0x30>
    {
        return;
    }
    *yaw = 0.0f;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
    *pitch = 0.0f;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	e000      	b.n	8002886 <gimbal_motionless_control+0x32>
        return;
 8002884:	bf00      	nop
}
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <gimbal_AI_control>:

static void gimbal_AI_control(float32_t *yaw, float32_t *pitch, gimbal_control_t *gimbal_control_set)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
    if (yaw == NULL || pitch == NULL || gimbal_control_set == NULL)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d078      	beq.n	8002994 <gimbal_AI_control+0x104>
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d075      	beq.n	8002994 <gimbal_AI_control+0x104>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d072      	beq.n	8002994 <gimbal_AI_control+0x104>
    static int16_t yaw_channel = 0, pitch_channel = 0;

    //dead zone limit


    rc_deadband_limit( frame.data.demoCmd.dx, yaw_channel, 1);
 80028ae:	4b3c      	ldr	r3, [pc, #240]	; (80029a0 <gimbal_AI_control+0x110>)
 80028b0:	f8d3 3007 	ldr.w	r3, [r3, #7]
 80028b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80028b8:	ee07 3a10 	vmov	s14, r3
 80028bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c4:	dc0b      	bgt.n	80028de <gimbal_AI_control+0x4e>
 80028c6:	4b36      	ldr	r3, [pc, #216]	; (80029a0 <gimbal_AI_control+0x110>)
 80028c8:	f8d3 3007 	ldr.w	r3, [r3, #7]
 80028cc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80028d0:	ee07 3a10 	vmov	s14, r3
 80028d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028dc:	d50c      	bpl.n	80028f8 <gimbal_AI_control+0x68>
 80028de:	4b30      	ldr	r3, [pc, #192]	; (80029a0 <gimbal_AI_control+0x110>)
 80028e0:	f8d3 3007 	ldr.w	r3, [r3, #7]
 80028e4:	ee07 3a90 	vmov	s15, r3
 80028e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028ec:	ee17 3a90 	vmov	r3, s15
 80028f0:	b21a      	sxth	r2, r3
 80028f2:	4b2c      	ldr	r3, [pc, #176]	; (80029a4 <gimbal_AI_control+0x114>)
 80028f4:	801a      	strh	r2, [r3, #0]
 80028f6:	e002      	b.n	80028fe <gimbal_AI_control+0x6e>
 80028f8:	4b2a      	ldr	r3, [pc, #168]	; (80029a4 <gimbal_AI_control+0x114>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	801a      	strh	r2, [r3, #0]
    rc_deadband_limit( frame.data.demoCmd.dy, pitch_channel, 1);
 80028fe:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <gimbal_AI_control+0x110>)
 8002900:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8002904:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002908:	ee07 3a10 	vmov	s14, r3
 800290c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002914:	dc0b      	bgt.n	800292e <gimbal_AI_control+0x9e>
 8002916:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <gimbal_AI_control+0x110>)
 8002918:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800291c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8002920:	ee07 3a10 	vmov	s14, r3
 8002924:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800292c:	d50c      	bpl.n	8002948 <gimbal_AI_control+0xb8>
 800292e:	4b1c      	ldr	r3, [pc, #112]	; (80029a0 <gimbal_AI_control+0x110>)
 8002930:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8002934:	ee07 3a90 	vmov	s15, r3
 8002938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800293c:	ee17 3a90 	vmov	r3, s15
 8002940:	b21a      	sxth	r2, r3
 8002942:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <gimbal_AI_control+0x118>)
 8002944:	801a      	strh	r2, [r3, #0]
 8002946:	e002      	b.n	800294e <gimbal_AI_control+0xbe>
 8002948:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <gimbal_AI_control+0x118>)
 800294a:	2200      	movs	r2, #0
 800294c:	801a      	strh	r2, [r3, #0]
    // AI_robotic_calculation(&	 frame.data.demoCmd.dy);
    //AI_robotic_calculation(&frame.data.demoCmd.dx);

    watch[0]=AI_X;
 800294e:	4b17      	ldr	r3, [pc, #92]	; (80029ac <gimbal_AI_control+0x11c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a17      	ldr	r2, [pc, #92]	; (80029b0 <gimbal_AI_control+0x120>)
 8002954:	6013      	str	r3, [r2, #0]
    watch[0]=AI_X;
 8002956:	4b15      	ldr	r3, [pc, #84]	; (80029ac <gimbal_AI_control+0x11c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a15      	ldr	r2, [pc, #84]	; (80029b0 <gimbal_AI_control+0x120>)
 800295c:	6013      	str	r3, [r2, #0]

    *yaw   =  -frame.data.demoCmd.dx * YAW_AI_SEN;
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <gimbal_AI_control+0x110>)
 8002960:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8002964:	ee07 3a90 	vmov	s15, r3
 8002968:	eef1 7a67 	vneg.f32	s15, s15
 800296c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80029b4 <gimbal_AI_control+0x124>
 8002970:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	edc3 7a00 	vstr	s15, [r3]
    *pitch =  frame.data.demoCmd.dy * PITCH_AI_SEN;
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <gimbal_AI_control+0x110>)
 800297c:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8002980:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80029b4 <gimbal_AI_control+0x124>
 8002984:	ee07 3a10 	vmov	s14, r3
 8002988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	edc3 7a00 	vstr	s15, [r3]
 8002992:	e000      	b.n	8002996 <gimbal_AI_control+0x106>
        return;
 8002994:	bf00      	nop
}
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	20005634 	.word	0x20005634
 80029a4:	200002e0 	.word	0x200002e0
 80029a8:	200002e2 	.word	0x200002e2
 80029ac:	2000564c 	.word	0x2000564c
 80029b0:	20005284 	.word	0x20005284
 80029b4:	3a83126f 	.word	0x3a83126f

080029b8 <gimbal_task>:
  * @brief          gimbal task, osDelay GIMBAL_CONTROL_TIME (1ms) 
  * @param[in]      pvParameters: null
  * @retval         none
  */
void gimbal_task(void *pvParameters)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
    //wait a period for gyroscope task update gyroscope values
    vTaskDelay(GIMBAL_TASK_INIT_TIME);
 80029c0:	20c9      	movs	r0, #201	; 0xc9
 80029c2:	f00e fe4d 	bl	8011660 <vTaskDelay>

    //gimbal initialize
    gimbal_init(&gimbal_control);
 80029c6:	4836      	ldr	r0, [pc, #216]	; (8002aa0 <gimbal_task+0xe8>)
 80029c8:	f000 f888 	bl	8002adc <gimbal_init>

    //shoot initialize
    shoot_init();
 80029cc:	f000 ffe4 	bl	8003998 <shoot_init>

    //keep checking whether two gimbal motors are online
    while (toe_is_error(YAW_GIMBAL_MOTOR_TOE) || toe_is_error(PITCH_GIMBAL_MOTOR_TOE))
 80029d0:	e005      	b.n	80029de <gimbal_task+0x26>
    {
        vTaskDelay(GIMBAL_CONTROL_TIME);
 80029d2:	2001      	movs	r0, #1
 80029d4:	f00e fe44 	bl	8011660 <vTaskDelay>
        gimbal_feedback_update(&gimbal_control);             //during checking, still keep updating measured data
 80029d8:	4831      	ldr	r0, [pc, #196]	; (8002aa0 <gimbal_task+0xe8>)
 80029da:	f000 f9b3 	bl	8002d44 <gimbal_feedback_update>
    while (toe_is_error(YAW_GIMBAL_MOTOR_TOE) || toe_is_error(PITCH_GIMBAL_MOTOR_TOE))
 80029de:	2005      	movs	r0, #5
 80029e0:	f7ff f980 	bl	8001ce4 <toe_is_error>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f3      	bne.n	80029d2 <gimbal_task+0x1a>
 80029ea:	2006      	movs	r0, #6
 80029ec:	f7ff f97a 	bl	8001ce4 <toe_is_error>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1ed      	bne.n	80029d2 <gimbal_task+0x1a>
    }

    while (1)
    {

        gimbal_set_mode(&gimbal_control);                    //set gimbal control mode
 80029f6:	482a      	ldr	r0, [pc, #168]	; (8002aa0 <gimbal_task+0xe8>)
 80029f8:	f000 f994 	bl	8002d24 <gimbal_set_mode>
        gimbal_mode_change_control_transit(&gimbal_control); //control data transit when gimbal mode changes
 80029fc:	4828      	ldr	r0, [pc, #160]	; (8002aa0 <gimbal_task+0xe8>)
 80029fe:	f000 fa57 	bl	8002eb0 <gimbal_mode_change_control_transit>
        gimbal_feedback_update(&gimbal_control);             //update gimbal feedback data
 8002a02:	4827      	ldr	r0, [pc, #156]	; (8002aa0 <gimbal_task+0xe8>)
 8002a04:	f000 f99e 	bl	8002d44 <gimbal_feedback_update>
        gimbal_set_control(&gimbal_control);                 //set gimbal control value
 8002a08:	4825      	ldr	r0, [pc, #148]	; (8002aa0 <gimbal_task+0xe8>)
 8002a0a:	f000 fae4 	bl	8002fd6 <gimbal_set_control>
        gimbal_control_loop(&gimbal_control);                //pid calculation for gimbal control
 8002a0e:	4824      	ldr	r0, [pc, #144]	; (8002aa0 <gimbal_task+0xe8>)
 8002a10:	f000 fc23 	bl	800325a <gimbal_control_loop>
        shoot_can_set_current = shoot_control_loop();        //shoot task control loop
 8002a14:	f001 f84e 	bl	8003ab4 <shoot_control_loop>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <gimbal_task+0xec>)
 8002a1e:	801a      	strh	r2, [r3, #0]
#if YAW_TURN
        yaw_can_set_current = -gimbal_control.gimbal_yaw_motor.given_current;
#else
        yaw_can_set_current = gimbal_control.gimbal_yaw_motor.given_current;
 8002a20:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <gimbal_task+0xe8>)
 8002a22:	f9b3 2138 	ldrsh.w	r2, [r3, #312]	; 0x138
 8002a26:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <gimbal_task+0xf0>)
 8002a28:	801a      	strh	r2, [r3, #0]
#endif

#if PITCH_TURN
        pitch_can_set_current = -gimbal_control.gimbal_pitch_motor.given_current;
#else
        pitch_can_set_current = gimbal_control.gimbal_pitch_motor.given_current;
 8002a2a:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <gimbal_task+0xe8>)
 8002a2c:	f9b3 2268 	ldrsh.w	r2, [r3, #616]	; 0x268
 8002a30:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <gimbal_task+0xf4>)
 8002a32:	801a      	strh	r2, [r3, #0]
#endif

        if (!(toe_is_error(YAW_GIMBAL_MOTOR_TOE) && toe_is_error(PITCH_GIMBAL_MOTOR_TOE) && toe_is_error(TRIGGER_MOTOR_TOE)))
 8002a34:	2005      	movs	r0, #5
 8002a36:	f7ff f955 	bl	8001ce4 <toe_is_error>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00b      	beq.n	8002a58 <gimbal_task+0xa0>
 8002a40:	2006      	movs	r0, #6
 8002a42:	f7ff f94f 	bl	8001ce4 <toe_is_error>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <gimbal_task+0xa0>
 8002a4c:	2007      	movs	r0, #7
 8002a4e:	f7ff f949 	bl	8001ce4 <toe_is_error>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d118      	bne.n	8002a8a <gimbal_task+0xd2>
        {
            if (toe_is_error(DBUS_TOE))
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f7ff f943 	bl	8001ce4 <toe_is_error>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d006      	beq.n	8002a72 <gimbal_task+0xba>
            {
                CAN_cmd_gimbal(0, 0, 0, 0);
 8002a64:	2300      	movs	r3, #0
 8002a66:	2200      	movs	r2, #0
 8002a68:	2100      	movs	r1, #0
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f7fd fe18 	bl	80006a0 <CAN_cmd_gimbal>
 8002a70:	e00b      	b.n	8002a8a <gimbal_task+0xd2>
            }
            else
            {
                CAN_cmd_gimbal(yaw_can_set_current, pitch_can_set_current, shoot_can_set_current, 0);
 8002a72:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <gimbal_task+0xf0>)
 8002a74:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <gimbal_task+0xf4>)
 8002a7a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <gimbal_task+0xec>)
 8002a80:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a84:	2300      	movs	r3, #0
 8002a86:	f7fd fe0b 	bl	80006a0 <CAN_cmd_gimbal>

#if GIMBAL_TEST_MODE
        J_scope_gimbal_test();
#endif

        vTaskDelay(GIMBAL_CONTROL_TIME);
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	f00e fde8 	bl	8011660 <vTaskDelay>

#if INCLUDE_uxTaskGetStackHighWaterMark
        gimbal_high_water = uxTaskGetStackHighWaterMark(NULL);
 8002a90:	2000      	movs	r0, #0
 8002a92:	f00f fa3d 	bl	8011f10 <uxTaskGetStackHighWaterMark>
 8002a96:	4603      	mov	r3, r0
 8002a98:	4a05      	ldr	r2, [pc, #20]	; (8002ab0 <gimbal_task+0xf8>)
 8002a9a:	6013      	str	r3, [r2, #0]
        gimbal_set_mode(&gimbal_control);                    //set gimbal control mode
 8002a9c:	e7ab      	b.n	80029f6 <gimbal_task+0x3e>
 8002a9e:	bf00      	nop
 8002aa0:	20005290 	.word	0x20005290
 8002aa4:	200002e8 	.word	0x200002e8
 8002aa8:	200002e4 	.word	0x200002e4
 8002aac:	200002e6 	.word	0x200002e6
 8002ab0:	20005518 	.word	0x20005518

08002ab4 <get_yaw_motor_point>:
  * @brief          return yaw motor data pointer
  * @param[in]      none
  * @retval         yaw motor data pointer
  */
const gimbal_motor_t *get_yaw_motor_point(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
    return &gimbal_control.gimbal_yaw_motor;
 8002ab8:	4b02      	ldr	r3, [pc, #8]	; (8002ac4 <get_yaw_motor_point+0x10>)
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	2000529c 	.word	0x2000529c

08002ac8 <get_pitch_motor_point>:
  * @brief          return pitch motor data pointer
  * @param[in]      none
  * @retval         pitch motor data pointer
  */
const gimbal_motor_t *get_pitch_motor_point(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
    return &gimbal_control.gimbal_pitch_motor;
 8002acc:	4b02      	ldr	r3, [pc, #8]	; (8002ad8 <get_pitch_motor_point+0x10>)
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	200053cc 	.word	0x200053cc

08002adc <gimbal_init>:
  *                 ->gyroscope sensor angle data pointer initialization
  * @param[out]     init: "gimbal_control" variable pointer
  * @retval         none
  */
static void gimbal_init(gimbal_control_t *init)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]

    static const float32_t Pitch_speed_pid[3] = {PITCH_SPEED_PID_KP, PITCH_SPEED_PID_KI, PITCH_SPEED_PID_KD};
    static const float32_t Yaw_speed_pid[3] = {YAW_SPEED_PID_KP, YAW_SPEED_PID_KI, YAW_SPEED_PID_KD};

    //set encoder middle point value
    init->gimbal_yaw_motor.offset_ecd = GIMBAL_YAW_MOTOR_OFFSET_ECD;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002aea:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
    init->gimbal_pitch_motor.offset_ecd = GIMBAL_PITCH_MOTOR_OFFSET_ECD;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f641 12fa 	movw	r2, #6650	; 0x19fa
 8002af4:	f8a3 2232 	strh.w	r2, [r3, #562]	; 0x232

    //set max/min relative value
    init->gimbal_yaw_motor.max_relative_angle = GIMBAL_YAW_MAX_RELATIVE_ANGLE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a80      	ldr	r2, [pc, #512]	; (8002cfc <gimbal_init+0x220>)
 8002afc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    init->gimbal_yaw_motor.min_relative_angle = GIMBAL_YAW_MIN_RELATIVE_ANGLE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a7f      	ldr	r2, [pc, #508]	; (8002d00 <gimbal_init+0x224>)
 8002b04:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    init->gimbal_pitch_motor.max_relative_angle = GIMBAL_PITCH_MAX_RELATIVE_ANGLE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a7c      	ldr	r2, [pc, #496]	; (8002cfc <gimbal_init+0x220>)
 8002b0c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
    init->gimbal_pitch_motor.min_relative_angle = GIMBAL_PITCH_MIN_RELATIVE_ANGLE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a7b      	ldr	r2, [pc, #492]	; (8002d00 <gimbal_init+0x224>)
 8002b14:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

    //get motor data pointer
    init->gimbal_yaw_motor.gimbal_motor_measure = get_yaw_gimbal_motor_measure_point();
 8002b18:	f7fd fe76 	bl	8000808 <get_yaw_gimbal_motor_measure_point>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	60da      	str	r2, [r3, #12]
    init->gimbal_pitch_motor.gimbal_motor_measure = get_pitch_gimbal_motor_measure_point();
 8002b22:	f7fd fe7b 	bl	800081c <get_pitch_gimbal_motor_measure_point>
 8002b26:	4602      	mov	r2, r0
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

    //get gyroscope sensor data pointer
    init->gimbal_INT_angle_point = get_INS_angle_point();
 8002b2e:	f7fd fe9f 	bl	8000870 <get_INS_angle_point>
 8002b32:	4602      	mov	r2, r0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	605a      	str	r2, [r3, #4]
    init->gimbal_INT_gyro_point = get_gyro_data_point();
 8002b38:	f7fd fea4 	bl	8000884 <get_gyro_data_point>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	609a      	str	r2, [r3, #8]

    //get remote controller data pointer
    init->gimbal_rc_ctrl = get_remote_control_point();
 8002b42:	f000 fd6f 	bl	8003624 <get_remote_control_point>
 8002b46:	4602      	mov	r2, r0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	601a      	str	r2, [r3, #0]

    //initialize gimbal motor mode
    init->gimbal_yaw_motor.gimbal_motor_mode = init->gimbal_yaw_motor.last_gimbal_motor_mode = GIMBAL_MOTOR_RAW;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    init->gimbal_pitch_motor.gimbal_motor_mode = init->gimbal_pitch_motor.last_gimbal_motor_mode = GIMBAL_MOTOR_RAW;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 2231 	ldrb.w	r2, [r3, #561]	; 0x231
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230

    //initialize yaw motor pid
    gimbal_PID_init(&init->gimbal_yaw_motor.gimbal_motor_absolute_angle_pid, YAW_GYRO_ABSOLUTE_PID_MAX_OUT, YAW_GYRO_ABSOLUTE_PID_MAX_IOUT, YAW_GYRO_ABSOLUTE_PID_KP, YAW_GYRO_ABSOLUTE_PID_KI, YAW_GYRO_ABSOLUTE_PID_KD);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3310      	adds	r3, #16
 8002b78:	ed9f 2a62 	vldr	s4, [pc, #392]	; 8002d04 <gimbal_init+0x228>
 8002b7c:	eddf 1a62 	vldr	s3, [pc, #392]	; 8002d08 <gimbal_init+0x22c>
 8002b80:	eeb3 1a0a 	vmov.f32	s2, #58	; 0x41d00000  26.0
 8002b84:	eddf 0a60 	vldr	s1, [pc, #384]	; 8002d08 <gimbal_init+0x22c>
 8002b88:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 fc5d 	bl	800344c <gimbal_PID_init>
    gimbal_PID_init(&init->gimbal_yaw_motor.gimbal_motor_relative_angle_pid, YAW_ENCODE_RELATIVE_PID_MAX_OUT, YAW_ENCODE_RELATIVE_PID_MAX_IOUT, YAW_ENCODE_RELATIVE_PID_KP, YAW_ENCODE_RELATIVE_PID_KI, YAW_ENCODE_RELATIVE_PID_KD);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3340      	adds	r3, #64	; 0x40
 8002b96:	ed9f 2a5c 	vldr	s4, [pc, #368]	; 8002d08 <gimbal_init+0x22c>
 8002b9a:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8002b9e:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 8002d0c <gimbal_init+0x230>
 8002ba2:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8002ba6:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8002d10 <gimbal_init+0x234>
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 fc4e 	bl	800344c <gimbal_PID_init>
    PID_init(&init->gimbal_yaw_motor.gimbal_motor_gyro_pid, PID_POSITION, Yaw_speed_pid, YAW_SPEED_PID_MAX_OUT, YAW_SPEED_PID_MAX_IOUT);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3370      	adds	r3, #112	; 0x70
 8002bb4:	eddf 0a56 	vldr	s1, [pc, #344]	; 8002d10 <gimbal_init+0x234>
 8002bb8:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8002d14 <gimbal_init+0x238>
 8002bbc:	4a56      	ldr	r2, [pc, #344]	; (8002d18 <gimbal_init+0x23c>)
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f002 fac4 	bl	800514e <PID_init>
    PID_init(&init->gimbal_yaw_motor.gimbal_motor_ecd_speed_pid, PID_POSITION, Yaw_speed_pid, YAW_SPEED_PID_MAX_OUT, YAW_SPEED_PID_MAX_IOUT);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	33b8      	adds	r3, #184	; 0xb8
 8002bca:	eddf 0a51 	vldr	s1, [pc, #324]	; 8002d10 <gimbal_init+0x234>
 8002bce:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8002d14 <gimbal_init+0x238>
 8002bd2:	4a51      	ldr	r2, [pc, #324]	; (8002d18 <gimbal_init+0x23c>)
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f002 fab9 	bl	800514e <PID_init>

    //initialize pitch motor pid
    gimbal_PID_init(&init->gimbal_pitch_motor.gimbal_motor_absolute_angle_pid, PITCH_GYRO_ABSOLUTE_PID_MAX_OUT, PITCH_GYRO_ABSOLUTE_PID_MAX_IOUT, PITCH_GYRO_ABSOLUTE_PID_KP, PITCH_GYRO_ABSOLUTE_PID_KI, PITCH_GYRO_ABSOLUTE_PID_KD);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002be2:	ed9f 2a49 	vldr	s4, [pc, #292]	; 8002d08 <gimbal_init+0x22c>
 8002be6:	eddf 1a48 	vldr	s3, [pc, #288]	; 8002d08 <gimbal_init+0x22c>
 8002bea:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
 8002bee:	eddf 0a46 	vldr	s1, [pc, #280]	; 8002d08 <gimbal_init+0x22c>
 8002bf2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fc28 	bl	800344c <gimbal_PID_init>
    gimbal_PID_init(&init->gimbal_pitch_motor.gimbal_motor_relative_angle_pid, PITCH_ENCODE_RELATIVE_PID_MAX_OUT, PITCH_ENCODE_RELATIVE_PID_MAX_IOUT, PITCH_ENCODE_RELATIVE_PID_KP, PITCH_ENCODE_RELATIVE_PID_KI, PITCH_ENCODE_RELATIVE_PID_KD);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8002c02:	ed9f 2a41 	vldr	s4, [pc, #260]	; 8002d08 <gimbal_init+0x22c>
 8002c06:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8002c0a:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8002d1c <gimbal_init+0x240>
 8002c0e:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8002c12:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8002d10 <gimbal_init+0x234>
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 fc18 	bl	800344c <gimbal_PID_init>
    PID_init(&init->gimbal_pitch_motor.gimbal_motor_gyro_pid, PID_POSITION, Pitch_speed_pid, PITCH_SPEED_PID_MAX_OUT, PITCH_SPEED_PID_MAX_IOUT);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002c22:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8002c26:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8002d14 <gimbal_init+0x238>
 8002c2a:	4a3d      	ldr	r2, [pc, #244]	; (8002d20 <gimbal_init+0x244>)
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f002 fa8d 	bl	800514e <PID_init>
    PID_init(&init->gimbal_pitch_motor.gimbal_motor_ecd_speed_pid, PID_POSITION, Pitch_speed_pid, PITCH_SPEED_PID_MAX_OUT, PITCH_SPEED_PID_MAX_IOUT);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8002c3a:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8002c3e:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8002d14 <gimbal_init+0x238>
 8002c42:	4a37      	ldr	r2, [pc, #220]	; (8002d20 <gimbal_init+0x244>)
 8002c44:	2100      	movs	r1, #0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f002 fa81 	bl	800514e <PID_init>

    //clear all PID values (exclude p i d parameters)
    gimbal_total_pid_clear(init);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3310      	adds	r3, #16
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 fcaf 	bl	80035b4 <gimbal_PID_clear>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3340      	adds	r3, #64	; 0x40
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 fcaa 	bl	80035b4 <gimbal_PID_clear>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3370      	adds	r3, #112	; 0x70
 8002c64:	4618      	mov	r0, r3
 8002c66:	f002 fc0f 	bl	8005488 <PID_clear>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fc9f 	bl	80035b4 <gimbal_PID_clear>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 fc99 	bl	80035b4 <gimbal_PID_clear>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f002 fbfd 	bl	8005488 <PID_clear>

    //update measured data
    gimbal_feedback_update(init);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f858 	bl	8002d44 <gimbal_feedback_update>

    //initialize all set values as measured data now
    init->gimbal_yaw_motor.absolute_angle_set = init->gimbal_yaw_motor.absolute_angle;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    init->gimbal_yaw_motor.relative_angle_set = init->gimbal_yaw_motor.relative_angle;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    init->gimbal_yaw_motor.motor_gyro_set = init->gimbal_yaw_motor.motor_gyro;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    init->gimbal_yaw_motor.motor_ecd_speed_set = init->gimbal_yaw_motor.motor_ecd_speed;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128


    init->gimbal_pitch_motor.absolute_angle_set = init->gimbal_pitch_motor.absolute_angle;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
    init->gimbal_pitch_motor.relative_angle_set = init->gimbal_pitch_motor.relative_angle;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    init->gimbal_pitch_motor.motor_gyro_set = init->gimbal_pitch_motor.motor_gyro;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    init->gimbal_pitch_motor.motor_ecd_speed_set = init->gimbal_pitch_motor.motor_ecd_speed;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258


}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	3fc90fdb 	.word	0x3fc90fdb
 8002d00:	bfc90fdb 	.word	0xbfc90fdb
 8002d04:	3e99999a 	.word	0x3e99999a
 8002d08:	00000000 	.word	0x00000000
 8002d0c:	443b8000 	.word	0x443b8000
 8002d10:	42c80000 	.word	0x42c80000
 8002d14:	459c4000 	.word	0x459c4000
 8002d18:	0801490c 	.word	0x0801490c
 8002d1c:	43fa0000 	.word	0x43fa0000
 8002d20:	08014918 	.word	0x08014918

08002d24 <gimbal_set_mode>:
  *                 "gimbal_behaviour_mode_set" function (in gimbal_behaviour.c/h)
  * @param[out]     gimbal_set_mode: "gimbal_control" variable pointer
  * @retval         none
  */
static void gimbal_set_mode(gimbal_control_t *set_mode)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
    if (set_mode == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <gimbal_set_mode+0x16>
    {
        return;
    }
    gimbal_behaviour_mode_set(set_mode);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff f9e6 	bl	8002104 <gimbal_behaviour_mode_set>
 8002d38:	e000      	b.n	8002d3c <gimbal_set_mode+0x18>
        return;
 8002d3a:	bf00      	nop
}
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <gimbal_feedback_update>:
  * @brief          update gimbal measured data, such as motor encoder, euler angle, motor speed
  * @param[out]     gimbal_feedback_update: "gimbal_control" variable pointer
  * @retval         none
  */
static void gimbal_feedback_update(gimbal_control_t *feedback_update)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	ed2d 8b02 	vpush	{d8}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
    if (feedback_update == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d074      	beq.n	8002e40 <gimbal_feedback_update+0xfc>
    {
        return;
    }
    //update gimbal data
    feedback_update->gimbal_pitch_motor.absolute_angle = *(feedback_update->gimbal_INT_angle_point + INS_PITCH_ADDRESS_OFFSET);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
    feedback_update->gimbal_pitch_motor.relative_angle = -motor_ecd_to_angle_change(feedback_update->gimbal_pitch_motor.gimbal_motor_measure->ecd,
                                                                                          feedback_update->gimbal_pitch_motor.offset_ecd);
    feedback_update->gimbal_pitch_motor.motor_ecd_speed = GIMBAL_MOTOR_RPM_TO_VECTOR_SEN * feedback_update->gimbal_pitch_motor.gimbal_motor_measure->speed_rpm;
#else

    feedback_update->gimbal_pitch_motor.relative_angle = motor_ecd_to_angle_change(feedback_update->gimbal_pitch_motor.gimbal_motor_measure->ecd,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002d68:	881a      	ldrh	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8b3 3232 	ldrh.w	r3, [r3, #562]	; 0x232
 8002d70:	4619      	mov	r1, r3
 8002d72:	4610      	mov	r0, r2
 8002d74:	f000 f86c 	bl	8002e50 <motor_ecd_to_angle_change>
 8002d78:	eef0 7a40 	vmov.f32	s15, s0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	edc3 7a8f 	vstr	s15, [r3, #572]	; 0x23c
                                                                                          feedback_update->gimbal_pitch_motor.offset_ecd);
    feedback_update->gimbal_pitch_motor.motor_ecd_speed = -GIMBAL_MOTOR_RPM_TO_VECTOR_SEN * feedback_update->gimbal_pitch_motor.gimbal_motor_measure->speed_rpm;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002d88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d8c:	ee07 3a90 	vmov	s15, r3
 8002d90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d94:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002e4c <gimbal_feedback_update+0x108>
 8002d98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	edc3 7a95 	vstr	s15, [r3, #596]	; 0x254
#endif

    feedback_update->gimbal_pitch_motor.motor_gyro = *(feedback_update->gimbal_INT_gyro_point + INS_GYRO_Y_ADDRESS_OFFSET);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c

    feedback_update->gimbal_yaw_motor.absolute_angle = *(feedback_update->gimbal_INT_angle_point + INS_YAW_ADDRESS_OFFSET);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
#if YAW_TURN
    feedback_update->gimbal_yaw_motor.relative_angle = -motor_ecd_to_angle_change(feedback_update->gimbal_yaw_motor.gimbal_motor_measure->ecd,
                                                                                        feedback_update->gimbal_yaw_motor.offset_ecd);
    feedback_update->gimbal_yaw_motor.motor_ecd_speed = GIMBAL_MOTOR_RPM_TO_VECTOR_SEN * feedback_update->gimbal_yaw_motor.gimbal_motor_measure->speed_rpm;
#else
    feedback_update->gimbal_yaw_motor.relative_angle = motor_ecd_to_angle_change(feedback_update->gimbal_yaw_motor.gimbal_motor_measure->ecd,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	881a      	ldrh	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4610      	mov	r0, r2
 8002dca:	f000 f841 	bl	8002e50 <motor_ecd_to_angle_change>
 8002dce:	eef0 7a40 	vmov.f32	s15, s0
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
                                                                                        feedback_update->gimbal_yaw_motor.offset_ecd);
    feedback_update->gimbal_yaw_motor.motor_ecd_speed = -GIMBAL_MOTOR_RPM_TO_VECTOR_SEN * feedback_update->gimbal_yaw_motor.gimbal_motor_measure->speed_rpm;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002de0:	ee07 3a90 	vmov	s15, r3
 8002de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002de8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002e4c <gimbal_feedback_update+0x108>
 8002dec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	edc3 7a49 	vstr	s15, [r3, #292]	; 0x124
#endif
    feedback_update->gimbal_yaw_motor.motor_gyro = arm_cos_f32(feedback_update->gimbal_pitch_motor.relative_angle) * (*(feedback_update->gimbal_INT_gyro_point + INS_GYRO_Z_ADDRESS_OFFSET))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	edd3 7a8f 	vldr	s15, [r3, #572]	; 0x23c
 8002dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8002e00:	f010 fffe 	bl	8013e00 <arm_cos_f32>
 8002e04:	eeb0 7a40 	vmov.f32	s14, s0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	3308      	adds	r3, #8
 8002e0e:	edd3 7a00 	vldr	s15, [r3]
 8002e12:	ee27 8a27 	vmul.f32	s16, s14, s15
                                                        - arm_sin_f32(feedback_update->gimbal_pitch_motor.relative_angle) * (*(feedback_update->gimbal_INT_gyro_point + INS_GYRO_X_ADDRESS_OFFSET));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	edd3 7a8f 	vldr	s15, [r3, #572]	; 0x23c
 8002e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e20:	f010 ffa0 	bl	8013d64 <arm_sin_f32>
 8002e24:	eeb0 7a40 	vmov.f32	s14, s0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	edd3 7a00 	vldr	s15, [r3]
 8002e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e34:	ee78 7a67 	vsub.f32	s15, s16, s15
    feedback_update->gimbal_yaw_motor.motor_gyro = arm_cos_f32(feedback_update->gimbal_pitch_motor.relative_angle) * (*(feedback_update->gimbal_INT_gyro_point + INS_GYRO_Z_ADDRESS_OFFSET))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	edc3 7a47 	vstr	s15, [r3, #284]	; 0x11c
 8002e3e:	e000      	b.n	8002e42 <gimbal_feedback_update+0xfe>
        return;
 8002e40:	bf00      	nop
}
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	ecbd 8b02 	vpop	{d8}
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	bdd67750 	.word	0xbdd67750

08002e50 <motor_ecd_to_angle_change>:
  * @param[in]      ecd: motor encoder value now
  * @param[in]      offset_ecd: gimbal middle encoder value
  * @retval         relative angle, unit: rad
  */
static float32_t motor_ecd_to_angle_change(uint16_t ecd, uint16_t offset_ecd)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	460a      	mov	r2, r1
 8002e5a:	80fb      	strh	r3, [r7, #6]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	80bb      	strh	r3, [r7, #4]
    int32_t relative_ecd = ecd - offset_ecd;
 8002e60:	88fa      	ldrh	r2, [r7, #6]
 8002e62:	88bb      	ldrh	r3, [r7, #4]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	60fb      	str	r3, [r7, #12]
    if (relative_ecd > GIMBAL_HALF_ECD_RANGE)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e6e:	dd04      	ble.n	8002e7a <motor_ecd_to_angle_change+0x2a>
    {
        relative_ecd -= GIMBAL_ECD_RANGE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	e007      	b.n	8002e8a <motor_ecd_to_angle_change+0x3a>
    }
    else if (relative_ecd < -GIMBAL_HALF_ECD_RANGE)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8002e80:	da03      	bge.n	8002e8a <motor_ecd_to_angle_change+0x3a>
    {
        relative_ecd += GIMBAL_ECD_RANGE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002e88:	60fb      	str	r3, [r7, #12]
    }

    return relative_ecd * MOTOR_ECD_TO_RAD;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	ee07 3a90 	vmov	s15, r3
 8002e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e94:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002eac <motor_ecd_to_angle_change+0x5c>
 8002e98:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	3a490fdb 	.word	0x3a490fdb

08002eb0 <gimbal_mode_change_control_transit>:
  *                 such as yaw_set should be yaw angle now.
  * @param[out]     gimbal_mode_change: "gimbal_control" variable pointer
  * @retval         none
  */
static void gimbal_mode_change_control_transit(gimbal_control_t *gimbal_mode_change)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
    if (gimbal_mode_change == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 8085 	beq.w	8002fca <gimbal_mode_change_control_transit+0x11a>
    {
        return;
    }
    //yaw motor data change when gimbal mode changes
    if (gimbal_mode_change->gimbal_yaw_motor.last_gimbal_motor_mode != GIMBAL_MOTOR_RAW && gimbal_mode_change->gimbal_yaw_motor.gimbal_motor_mode == GIMBAL_MOTOR_RAW)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d015      	beq.n	8002ef6 <gimbal_mode_change_control_transit+0x46>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d110      	bne.n	8002ef6 <gimbal_mode_change_control_transit+0x46>
    {
        gimbal_mode_change->gimbal_yaw_motor.raw_cmd_current = gimbal_mode_change->gimbal_yaw_motor.current_set = gimbal_mode_change->gimbal_yaw_motor.given_current;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f9b3 3138 	ldrsh.w	r3, [r3, #312]	; 0x138
 8002eda:	ee07 3a90 	vmov	s15, r3
 8002ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	edc3 7a4d 	vstr	s15, [r3, #308]	; 0x134
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 8002ef4:	e020      	b.n	8002f38 <gimbal_mode_change_control_transit+0x88>
    }
    else if (gimbal_mode_change->gimbal_yaw_motor.last_gimbal_motor_mode != GIMBAL_MOTOR_GYRO && gimbal_mode_change->gimbal_yaw_motor.gimbal_motor_mode == GIMBAL_MOTOR_GYRO)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d00b      	beq.n	8002f18 <gimbal_mode_change_control_transit+0x68>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d106      	bne.n	8002f18 <gimbal_mode_change_control_transit+0x68>
    {
        gimbal_mode_change->gimbal_yaw_motor.absolute_angle_set = gimbal_mode_change->gimbal_yaw_motor.absolute_angle;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8002f16:	e00f      	b.n	8002f38 <gimbal_mode_change_control_transit+0x88>
    }
    else if (gimbal_mode_change->gimbal_yaw_motor.last_gimbal_motor_mode != GIMBAL_MOTOR_ENCONDE && gimbal_mode_change->gimbal_yaw_motor.gimbal_motor_mode == GIMBAL_MOTOR_ENCONDE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d00a      	beq.n	8002f38 <gimbal_mode_change_control_transit+0x88>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d105      	bne.n	8002f38 <gimbal_mode_change_control_transit+0x88>
    {
        gimbal_mode_change->gimbal_yaw_motor.relative_angle_set = gimbal_mode_change->gimbal_yaw_motor.relative_angle;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    }
    gimbal_mode_change->gimbal_yaw_motor.last_gimbal_motor_mode = gimbal_mode_change->gimbal_yaw_motor.gimbal_motor_mode;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101

    //pitch motor data change when gimbal mode changes
    if (gimbal_mode_change->gimbal_pitch_motor.last_gimbal_motor_mode != GIMBAL_MOTOR_RAW && gimbal_mode_change->gimbal_pitch_motor.gimbal_motor_mode == GIMBAL_MOTOR_RAW)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3231 	ldrb.w	r3, [r3, #561]	; 0x231
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d015      	beq.n	8002f7a <gimbal_mode_change_control_transit+0xca>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d110      	bne.n	8002f7a <gimbal_mode_change_control_transit+0xca>
    {
        gimbal_mode_change->gimbal_pitch_motor.raw_cmd_current = gimbal_mode_change->gimbal_pitch_motor.current_set = gimbal_mode_change->gimbal_pitch_motor.given_current;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f9b3 3268 	ldrsh.w	r3, [r3, #616]	; 0x268
 8002f5e:	ee07 3a90 	vmov	s15, r3
 8002f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 8002f78:	e020      	b.n	8002fbc <gimbal_mode_change_control_transit+0x10c>
    }
    else if (gimbal_mode_change->gimbal_pitch_motor.last_gimbal_motor_mode != GIMBAL_MOTOR_GYRO && gimbal_mode_change->gimbal_pitch_motor.gimbal_motor_mode == GIMBAL_MOTOR_GYRO)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3231 	ldrb.w	r3, [r3, #561]	; 0x231
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d00b      	beq.n	8002f9c <gimbal_mode_change_control_transit+0xec>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d106      	bne.n	8002f9c <gimbal_mode_change_control_transit+0xec>
    {
        gimbal_mode_change->gimbal_pitch_motor.absolute_angle_set = gimbal_mode_change->gimbal_pitch_motor.absolute_angle;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
 8002f9a:	e00f      	b.n	8002fbc <gimbal_mode_change_control_transit+0x10c>
    }
    else if (gimbal_mode_change->gimbal_pitch_motor.last_gimbal_motor_mode != GIMBAL_MOTOR_ENCONDE && gimbal_mode_change->gimbal_pitch_motor.gimbal_motor_mode == GIMBAL_MOTOR_ENCONDE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3231 	ldrb.w	r3, [r3, #561]	; 0x231
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d00a      	beq.n	8002fbc <gimbal_mode_change_control_transit+0x10c>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d105      	bne.n	8002fbc <gimbal_mode_change_control_transit+0x10c>
    {
        gimbal_mode_change->gimbal_pitch_motor.relative_angle_set = gimbal_mode_change->gimbal_pitch_motor.relative_angle;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    }

    gimbal_mode_change->gimbal_pitch_motor.last_gimbal_motor_mode = gimbal_mode_change->gimbal_pitch_motor.gimbal_motor_mode;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 2230 	ldrb.w	r2, [r3, #560]	; 0x230
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
 8002fc8:	e000      	b.n	8002fcc <gimbal_mode_change_control_transit+0x11c>
        return;
 8002fca:	bf00      	nop
}
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <gimbal_set_control>:
  *                 "gimbal_behaviour_control_set" in gimbal_behaviour.c/h.
  * @param[out]     gimbal_set_control: "gimbal_control" variable pointer
  * @retval         none
  */
static void gimbal_set_control(gimbal_control_t *set_control)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
    if (set_control == NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d05e      	beq.n	80030a2 <gimbal_set_control+0xcc>
    {
        return;
    }

    float32_t add_yaw_angle = 0.0f;
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
    float32_t add_pitch_angle = 0.0f;
 8002fea:	f04f 0300 	mov.w	r3, #0
 8002fee:	60bb      	str	r3, [r7, #8]

    gimbal_behaviour_control_set(&add_yaw_angle, &add_pitch_angle, set_control);
 8002ff0:	f107 0108 	add.w	r1, r7, #8
 8002ff4:	f107 030c 	add.w	r3, r7, #12
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff f8e0 	bl	80021c0 <gimbal_behaviour_control_set>
    //yaw motor controlled according to gimbal control mode
    if (set_control->gimbal_yaw_motor.gimbal_motor_mode == GIMBAL_MOTOR_RAW)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8003006:	2b00      	cmp	r3, #0
 8003008:	d104      	bne.n	8003014 <gimbal_set_control+0x3e>
    {
        //in raw mode, yaw angle send to CAN bus as current directly
        set_control->gimbal_yaw_motor.raw_cmd_current = add_yaw_angle;
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 8003012:	e01c      	b.n	800304e <gimbal_set_control+0x78>
    }
    else if (set_control->gimbal_yaw_motor.gimbal_motor_mode == GIMBAL_MOTOR_GYRO)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800301a:	2b01      	cmp	r3, #1
 800301c:	d109      	bne.n	8003032 <gimbal_set_control+0x5c>
    {
        //in gyro mode, gimbal is controlled by gyroscope values
        gimbal_absolute_angle_limit(&set_control->gimbal_yaw_motor, add_yaw_angle);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	330c      	adds	r3, #12
 8003022:	edd7 7a03 	vldr	s15, [r7, #12]
 8003026:	eeb0 0a67 	vmov.f32	s0, s15
 800302a:	4618      	mov	r0, r3
 800302c:	f000 f83e 	bl	80030ac <gimbal_absolute_angle_limit>
 8003030:	e00d      	b.n	800304e <gimbal_set_control+0x78>
    }
    else if (set_control->gimbal_yaw_motor.gimbal_motor_mode == GIMBAL_MOTOR_ENCONDE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8003038:	2b02      	cmp	r3, #2
 800303a:	d108      	bne.n	800304e <gimbal_set_control+0x78>
    {
        //in enconde mode gimbal is controlled by encoder values
        gimbal_relative_angle_limit(&set_control->gimbal_yaw_motor, add_yaw_angle);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	330c      	adds	r3, #12
 8003040:	edd7 7a03 	vldr	s15, [r7, #12]
 8003044:	eeb0 0a67 	vmov.f32	s0, s15
 8003048:	4618      	mov	r0, r3
 800304a:	f000 f8c9 	bl	80031e0 <gimbal_relative_angle_limit>
    }

    //pitch motor controlled according to gimbal control mode
    if (set_control->gimbal_pitch_motor.gimbal_motor_mode == GIMBAL_MOTOR_RAW)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8003054:	2b00      	cmp	r3, #0
 8003056:	d104      	bne.n	8003062 <gimbal_set_control+0x8c>
    {
        //in raw mode, yaw angle send to CAN bus as current directly
        set_control->gimbal_pitch_motor.raw_cmd_current = add_pitch_angle;
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 8003060:	e020      	b.n	80030a4 <gimbal_set_control+0xce>
    }
    else if (set_control->gimbal_pitch_motor.gimbal_motor_mode == GIMBAL_MOTOR_GYRO)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8003068:	2b01      	cmp	r3, #1
 800306a:	d10a      	bne.n	8003082 <gimbal_set_control+0xac>
    {
        //in gyro mode, gimbal is controlled by gyroscope values
        gimbal_absolute_angle_limit(&set_control->gimbal_pitch_motor, add_pitch_angle);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003072:	edd7 7a02 	vldr	s15, [r7, #8]
 8003076:	eeb0 0a67 	vmov.f32	s0, s15
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f816 	bl	80030ac <gimbal_absolute_angle_limit>
 8003080:	e010      	b.n	80030a4 <gimbal_set_control+0xce>
    }
    else if (set_control->gimbal_pitch_motor.gimbal_motor_mode == GIMBAL_MOTOR_ENCONDE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8003088:	2b02      	cmp	r3, #2
 800308a:	d10b      	bne.n	80030a4 <gimbal_set_control+0xce>
    {
        //in enconde mode gimbal is controlled by encoder values
        gimbal_relative_angle_limit(&set_control->gimbal_pitch_motor, add_pitch_angle);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003092:	edd7 7a02 	vldr	s15, [r7, #8]
 8003096:	eeb0 0a67 	vmov.f32	s0, s15
 800309a:	4618      	mov	r0, r3
 800309c:	f000 f8a0 	bl	80031e0 <gimbal_relative_angle_limit>
 80030a0:	e000      	b.n	80030a4 <gimbal_set_control+0xce>
        return;
 80030a2:	bf00      	nop
    }
}
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <gimbal_absolute_angle_limit>:
  * @param[out]     gimbal_motor: yaw or pitch motor pointer
  * @param[in]      add: new added angle, unit: rad
  * @retval         none
  */
static void gimbal_absolute_angle_limit(gimbal_motor_t *gimbal_motor, float32_t add)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	ed87 0a00 	vstr	s0, [r7]
    static float32_t bias_angle;
    static float32_t angle_set;
    if (gimbal_motor == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 8084 	beq.w	80031c8 <gimbal_absolute_angle_limit+0x11c>
    {
        return;
    }

    //current angle error
    bias_angle = rad_format(gimbal_motor->absolute_angle_set - gimbal_motor->absolute_angle);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	ed93 7a43 	vldr	s14, [r3, #268]	; 0x10c
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 80030cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030d0:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 80031d0 <gimbal_absolute_angle_limit+0x124>
 80030d4:	eddf 0a3f 	vldr	s1, [pc, #252]	; 80031d4 <gimbal_absolute_angle_limit+0x128>
 80030d8:	eeb0 0a67 	vmov.f32	s0, s15
 80030dc:	f001 ffd2 	bl	8005084 <loop_fp32_constrain>
 80030e0:	eef0 7a40 	vmov.f32	s15, s0
 80030e4:	4b3c      	ldr	r3, [pc, #240]	; (80031d8 <gimbal_absolute_angle_limit+0x12c>)
 80030e6:	edc3 7a00 	vstr	s15, [r3]

    //if relative angle + angle error + added angle > max_relative angle
    if (gimbal_motor->relative_angle + bias_angle + add > gimbal_motor->max_relative_angle)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 80030f0:	4b39      	ldr	r3, [pc, #228]	; (80031d8 <gimbal_absolute_angle_limit+0x12c>)
 80030f2:	edd3 7a00 	vldr	s15, [r3]
 80030f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030fa:	edd7 7a00 	vldr	s15, [r7]
 80030fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 8003108:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800310c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003110:	dd16      	ble.n	8003140 <gimbal_absolute_angle_limit+0x94>
    {
        //if the added angle is in the direction of max mechanical angle
        if (add > 0.0f)
 8003112:	edd7 7a00 	vldr	s15, [r7]
 8003116:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800311a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800311e:	dd39      	ble.n	8003194 <gimbal_absolute_angle_limit+0xe8>
        {
            //re-calculate max added angle
            add = gimbal_motor->max_relative_angle - gimbal_motor->relative_angle - bias_angle;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 800312c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003130:	4b29      	ldr	r3, [pc, #164]	; (80031d8 <gimbal_absolute_angle_limit+0x12c>)
 8003132:	edd3 7a00 	vldr	s15, [r3]
 8003136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800313a:	edc7 7a00 	vstr	s15, [r7]
 800313e:	e029      	b.n	8003194 <gimbal_absolute_angle_limit+0xe8>
        }
    }//if relative angle + angle error + added angle < min_relative angle
    else if (gimbal_motor->relative_angle + bias_angle + add < gimbal_motor->min_relative_angle)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 8003146:	4b24      	ldr	r3, [pc, #144]	; (80031d8 <gimbal_absolute_angle_limit+0x12c>)
 8003148:	edd3 7a00 	vldr	s15, [r3]
 800314c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003150:	edd7 7a00 	vldr	s15, [r7]
 8003154:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 800315e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003166:	d515      	bpl.n	8003194 <gimbal_absolute_angle_limit+0xe8>
    {
        //if the added angle is in the direction of min mechanical angle
        if (add < 0.0f)
 8003168:	edd7 7a00 	vldr	s15, [r7]
 800316c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003174:	d50e      	bpl.n	8003194 <gimbal_absolute_angle_limit+0xe8>
        {
            //re-calculate max added angle
            add = gimbal_motor->min_relative_angle - gimbal_motor->relative_angle - bias_angle;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8003182:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003186:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <gimbal_absolute_angle_limit+0x12c>)
 8003188:	edd3 7a00 	vldr	s15, [r3]
 800318c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003190:	edc7 7a00 	vstr	s15, [r7]
        }
    }
    angle_set = gimbal_motor->absolute_angle_set;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800319a:	4a10      	ldr	r2, [pc, #64]	; (80031dc <gimbal_absolute_angle_limit+0x130>)
 800319c:	6013      	str	r3, [r2, #0]
    gimbal_motor->absolute_angle_set = rad_format(angle_set + add);
 800319e:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <gimbal_absolute_angle_limit+0x130>)
 80031a0:	ed93 7a00 	vldr	s14, [r3]
 80031a4:	edd7 7a00 	vldr	s15, [r7]
 80031a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ac:	ed9f 1a08 	vldr	s2, [pc, #32]	; 80031d0 <gimbal_absolute_angle_limit+0x124>
 80031b0:	eddf 0a08 	vldr	s1, [pc, #32]	; 80031d4 <gimbal_absolute_angle_limit+0x128>
 80031b4:	eeb0 0a67 	vmov.f32	s0, s15
 80031b8:	f001 ff64 	bl	8005084 <loop_fp32_constrain>
 80031bc:	eef0 7a40 	vmov.f32	s15, s0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
 80031c6:	e000      	b.n	80031ca <gimbal_absolute_angle_limit+0x11e>
        return;
 80031c8:	bf00      	nop
}
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40490fdb 	.word	0x40490fdb
 80031d4:	c0490fdb 	.word	0xc0490fdb
 80031d8:	200002ec 	.word	0x200002ec
 80031dc:	200002f0 	.word	0x200002f0

080031e0 <gimbal_relative_angle_limit>:
  * @param[out]     gimbal_motor: yaw or pitch motor pointer
  * @param[in]      add: new added angle, unit: rad
  * @retval         none
  */
static void gimbal_relative_angle_limit(gimbal_motor_t *gimbal_motor, float32_t add)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	ed87 0a00 	vstr	s0, [r7]
    if (gimbal_motor == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d02d      	beq.n	800324e <gimbal_relative_angle_limit+0x6e>
    {
        return;
    }

    gimbal_motor->relative_angle_set += add;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	ed93 7a41 	vldr	s14, [r3, #260]	; 0x104
 80031f8:	edd7 7a00 	vldr	s15, [r7]
 80031fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	edc3 7a41 	vstr	s15, [r3, #260]	; 0x104

    //if the new set relative angle > max relative angle
    if (gimbal_motor->relative_angle_set > gimbal_motor->max_relative_angle)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	ed93 7a41 	vldr	s14, [r3, #260]	; 0x104
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 8003212:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321a:	dd06      	ble.n	800322a <gimbal_relative_angle_limit+0x4a>
    {
        gimbal_motor->relative_angle_set = gimbal_motor->max_relative_angle;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8003228:	e012      	b.n	8003250 <gimbal_relative_angle_limit+0x70>
    }
    //if the new set relative angle < min relative angle
    else if (gimbal_motor->relative_angle_set < gimbal_motor->min_relative_angle)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	ed93 7a41 	vldr	s14, [r3, #260]	; 0x104
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 8003236:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800323a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323e:	d507      	bpl.n	8003250 <gimbal_relative_angle_limit+0x70>
    {
        gimbal_motor->relative_angle_set = gimbal_motor->min_relative_angle;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 800324c:	e000      	b.n	8003250 <gimbal_relative_angle_limit+0x70>
        return;
 800324e:	bf00      	nop
    }
}
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <gimbal_control_loop>:
  *                 motor current will be sent to motor through CAN bus.
  * @param[out]     gimbal_control_loop: "gimbal_control" variable pointer
  * @retval         none
  */
static void gimbal_control_loop(gimbal_control_t *control_loop)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
    if (control_loop == NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d043      	beq.n	80032f0 <gimbal_control_loop+0x96>
    {
        return;
    }
    
    if (control_loop->gimbal_yaw_motor.gimbal_motor_mode == GIMBAL_MOTOR_RAW)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d105      	bne.n	800327e <gimbal_control_loop+0x24>
    {
        gimbal_motor_raw_angle_control(&control_loop->gimbal_yaw_motor);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	330c      	adds	r3, #12
 8003276:	4618      	mov	r0, r3
 8003278:	f000 f8c9 	bl	800340e <gimbal_motor_raw_angle_control>
 800327c:	e014      	b.n	80032a8 <gimbal_control_loop+0x4e>
    }
    else if (control_loop->gimbal_yaw_motor.gimbal_motor_mode == GIMBAL_MOTOR_GYRO)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8003284:	2b01      	cmp	r3, #1
 8003286:	d105      	bne.n	8003294 <gimbal_control_loop+0x3a>
    {
        gimbal_motor_absolute_angle_control(&control_loop->gimbal_yaw_motor);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	330c      	adds	r3, #12
 800328c:	4618      	mov	r0, r3
 800328e:	f000 f833 	bl	80032f8 <gimbal_motor_absolute_angle_control>
 8003292:	e009      	b.n	80032a8 <gimbal_control_loop+0x4e>
    }
    else if (control_loop->gimbal_yaw_motor.gimbal_motor_mode == GIMBAL_MOTOR_ENCONDE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800329a:	2b02      	cmp	r3, #2
 800329c:	d104      	bne.n	80032a8 <gimbal_control_loop+0x4e>
    {
        gimbal_motor_relative_angle_control(&control_loop->gimbal_yaw_motor);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	330c      	adds	r3, #12
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 f86d 	bl	8003382 <gimbal_motor_relative_angle_control>
    }

    if (control_loop->gimbal_pitch_motor.gimbal_motor_mode == GIMBAL_MOTOR_RAW)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <gimbal_control_loop+0x66>
    {
        gimbal_motor_raw_angle_control(&control_loop->gimbal_pitch_motor);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 f8a8 	bl	800340e <gimbal_motor_raw_angle_control>
 80032be:	e018      	b.n	80032f2 <gimbal_control_loop+0x98>
    }
    else if (control_loop->gimbal_pitch_motor.gimbal_motor_mode == GIMBAL_MOTOR_GYRO)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d106      	bne.n	80032d8 <gimbal_control_loop+0x7e>
    {
        gimbal_motor_absolute_angle_control(&control_loop->gimbal_pitch_motor);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 f811 	bl	80032f8 <gimbal_motor_absolute_angle_control>
 80032d6:	e00c      	b.n	80032f2 <gimbal_control_loop+0x98>
    }
    else if (control_loop->gimbal_pitch_motor.gimbal_motor_mode == GIMBAL_MOTOR_ENCONDE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d107      	bne.n	80032f2 <gimbal_control_loop+0x98>
    {
        gimbal_motor_relative_angle_control(&control_loop->gimbal_pitch_motor);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 f84a 	bl	8003382 <gimbal_motor_relative_angle_control>
 80032ee:	e000      	b.n	80032f2 <gimbal_control_loop+0x98>
        return;
 80032f0:	bf00      	nop
    }
}
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <gimbal_motor_absolute_angle_control>:
  *                 use euler angle calculated by gyroscope sensor to control.
  * @param[out]     gimbal_motor: yaw or pitch motor pointer
  * @retval         none
  */
static void gimbal_motor_absolute_angle_control(gimbal_motor_t *gimbal_motor)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
    if (gimbal_motor == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d039      	beq.n	800337a <gimbal_motor_absolute_angle_control+0x82>
    {
        return;
    }

    //angle and rotation speed series pid control
    gimbal_motor->motor_gyro_set = gimbal_PID_calc(&gimbal_motor->gimbal_motor_absolute_angle_pid, gimbal_motor->absolute_angle, gimbal_motor->absolute_angle_set, gimbal_motor->motor_gyro);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	1d1a      	adds	r2, r3, #4
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	ed93 7a43 	vldr	s14, [r3, #268]	; 0x10c
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	edd3 6a44 	vldr	s13, [r3, #272]	; 0x110
 800331c:	eeb0 1a66 	vmov.f32	s2, s13
 8003320:	eef0 0a47 	vmov.f32	s1, s14
 8003324:	eeb0 0a67 	vmov.f32	s0, s15
 8003328:	4610      	mov	r0, r2
 800332a:	f000 f8bf 	bl	80034ac <gimbal_PID_calc>
 800332e:	eef0 7a40 	vmov.f32	s15, s0
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	edc3 7a45 	vstr	s15, [r3, #276]	; 0x114
    gimbal_motor->current_set = PID_calc(&gimbal_motor->gimbal_motor_gyro_pid, gimbal_motor->motor_gyro, gimbal_motor->motor_gyro_set);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	edd3 7a44 	vldr	s15, [r3, #272]	; 0x110
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	ed93 7a45 	vldr	s14, [r3, #276]	; 0x114
 800334a:	eef0 0a47 	vmov.f32	s1, s14
 800334e:	eeb0 0a67 	vmov.f32	s0, s15
 8003352:	4610      	mov	r0, r2
 8003354:	f001 ff50 	bl	80051f8 <PID_calc>
 8003358:	eef0 7a40 	vmov.f32	s15, s0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	edc3 7a4a 	vstr	s15, [r3, #296]	; 0x128

    //assign control value
    gimbal_motor->given_current = (int16_t)(gimbal_motor->current_set);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	edd3 7a4a 	vldr	s15, [r3, #296]	; 0x128
 8003368:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800336c:	ee17 3a90 	vmov	r3, s15
 8003370:	b21a      	sxth	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
 8003378:	e000      	b.n	800337c <gimbal_motor_absolute_angle_control+0x84>
        return;
 800337a:	bf00      	nop
}
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <gimbal_motor_relative_angle_control>:
  *                 use the encoder relative angle to control.
  * @param[out]     gimbal_motor: yaw or pitch motor pointer
  * @retval         none
  */
static void gimbal_motor_relative_angle_control(gimbal_motor_t *gimbal_motor)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
    if (gimbal_motor == NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d03a      	beq.n	8003406 <gimbal_motor_relative_angle_control+0x84>
    {
        return;
    }

    //angle and rotation speed series pid control
    gimbal_motor->motor_ecd_speed_set = gimbal_PID_calc(&gimbal_motor->gimbal_motor_relative_angle_pid, gimbal_motor->relative_angle, gimbal_motor->relative_angle_set, gimbal_motor->motor_ecd_speed);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	ed93 7a41 	vldr	s14, [r3, #260]	; 0x104
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	edd3 6a46 	vldr	s13, [r3, #280]	; 0x118
 80033a8:	eeb0 1a66 	vmov.f32	s2, s13
 80033ac:	eef0 0a47 	vmov.f32	s1, s14
 80033b0:	eeb0 0a67 	vmov.f32	s0, s15
 80033b4:	4610      	mov	r0, r2
 80033b6:	f000 f879 	bl	80034ac <gimbal_PID_calc>
 80033ba:	eef0 7a40 	vmov.f32	s15, s0
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	edc3 7a47 	vstr	s15, [r3, #284]	; 0x11c
    gimbal_motor->current_set = PID_calc(&gimbal_motor->gimbal_motor_ecd_speed_pid, gimbal_motor->motor_ecd_speed, gimbal_motor->motor_ecd_speed_set);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	edd3 7a46 	vldr	s15, [r3, #280]	; 0x118
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 80033d6:	eef0 0a47 	vmov.f32	s1, s14
 80033da:	eeb0 0a67 	vmov.f32	s0, s15
 80033de:	4610      	mov	r0, r2
 80033e0:	f001 ff0a 	bl	80051f8 <PID_calc>
 80033e4:	eef0 7a40 	vmov.f32	s15, s0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	edc3 7a4a 	vstr	s15, [r3, #296]	; 0x128

    //assign control value
    gimbal_motor->given_current = (int16_t)(gimbal_motor->current_set);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	edd3 7a4a 	vldr	s15, [r3, #296]	; 0x128
 80033f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033f8:	ee17 3a90 	vmov	r3, s15
 80033fc:	b21a      	sxth	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
 8003404:	e000      	b.n	8003408 <gimbal_motor_relative_angle_control+0x86>
        return;
 8003406:	bf00      	nop
}
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <gimbal_motor_raw_angle_control>:
  *                 current is sent to CAN bus directly.
  * @param[out]     gimbal_motor: yaw or pitch motor pointer
  * @retval         none
  */
static void gimbal_motor_raw_angle_control(gimbal_motor_t *gimbal_motor)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
    if (gimbal_motor == NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d011      	beq.n	8003440 <gimbal_motor_raw_angle_control+0x32>
    {
        return;
    }
    gimbal_motor->current_set = gimbal_motor->raw_cmd_current;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    gimbal_motor->given_current = (int16_t)(gimbal_motor->current_set);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	edd3 7a4a 	vldr	s15, [r3, #296]	; 0x128
 800342e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003432:	ee17 3a90 	vmov	r3, s15
 8003436:	b21a      	sxth	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
 800343e:	e000      	b.n	8003442 <gimbal_motor_raw_angle_control+0x34>
        return;
 8003440:	bf00      	nop
}
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <gimbal_PID_init>:
  *                 ->gyroscope sensor angle pointer initialization.
  * @param[out]     gimbal_init: "gimbal_control" variable pointer
  * @retval         none
  */
static void gimbal_PID_init(gimbal_PID_t *pid, float32_t maxout, float32_t max_iout, float32_t kp, float32_t ki, float32_t kd)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6178      	str	r0, [r7, #20]
 8003454:	ed87 0a04 	vstr	s0, [r7, #16]
 8003458:	edc7 0a03 	vstr	s1, [r7, #12]
 800345c:	ed87 1a02 	vstr	s2, [r7, #8]
 8003460:	edc7 1a01 	vstr	s3, [r7, #4]
 8003464:	ed87 2a00 	vstr	s4, [r7]
    if (pid == NULL)
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d017      	beq.n	800349e <gimbal_PID_init+0x52>
    {
        return;
    }
    pid->kp = kp;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	601a      	str	r2, [r3, #0]
    pid->ki = ki;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	605a      	str	r2, [r3, #4]
    pid->kd = kd;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	609a      	str	r2, [r3, #8]

    pid->err = 0.0f;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	615a      	str	r2, [r3, #20]
    pid->get = 0.0f;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	611a      	str	r2, [r3, #16]

    pid->max_iout = max_iout;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	61da      	str	r2, [r3, #28]
    pid->max_out = maxout;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	619a      	str	r2, [r3, #24]
 800349c:	e000      	b.n	80034a0 <gimbal_PID_init+0x54>
        return;
 800349e:	bf00      	nop
}
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
	...

080034ac <gimbal_PID_calc>:
  * @param[in]      set: angle set-point value
  * @param[in]      error_delta: rotation speed
  * @retval         pid output
  */
static float32_t gimbal_PID_calc(gimbal_PID_t *pid, float32_t get, float32_t set, float32_t error_delta)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80034b8:	edc7 0a01 	vstr	s1, [r7, #4]
 80034bc:	ed87 1a00 	vstr	s2, [r7]
    float32_t err;
    if (pid == NULL)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d102      	bne.n	80034cc <gimbal_PID_calc+0x20>
    {
        return 0.0f;
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	e067      	b.n	800359c <gimbal_PID_calc+0xf0>
    }
    pid->get = get;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	611a      	str	r2, [r3, #16]
    pid->set = set;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	60da      	str	r2, [r3, #12]

    err = set - get;
 80034d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80034dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80034e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034e4:	edc7 7a05 	vstr	s15, [r7, #20]
    pid->err = rad_format(err);
 80034e8:	ed9f 1a30 	vldr	s2, [pc, #192]	; 80035ac <gimbal_PID_calc+0x100>
 80034ec:	eddf 0a30 	vldr	s1, [pc, #192]	; 80035b0 <gimbal_PID_calc+0x104>
 80034f0:	ed97 0a05 	vldr	s0, [r7, #20]
 80034f4:	f001 fdc6 	bl	8005084 <loop_fp32_constrain>
 80034f8:	eef0 7a40 	vmov.f32	s15, s0
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	edc3 7a05 	vstr	s15, [r3, #20]
    pid->Pout = pid->kp * pid->err;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	ed93 7a00 	vldr	s14, [r3]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	edd3 7a05 	vldr	s15, [r3, #20]
 800350e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	edc3 7a08 	vstr	s15, [r3, #32]
    pid->Iout += pid->ki * pid->err;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	edd3 6a01 	vldr	s13, [r3, #4]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	edd3 7a05 	vldr	s15, [r3, #20]
 800352a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800352e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    pid->Dout = pid->kd * error_delta;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	ed93 7a02 	vldr	s14, [r3, #8]
 800353e:	edd7 7a00 	vldr	s15, [r7]
 8003542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    abs_limit(&pid->Iout, pid->max_iout);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	edd3 7a07 	vldr	s15, [r3, #28]
 8003558:	eeb0 0a67 	vmov.f32	s0, s15
 800355c:	4610      	mov	r0, r2
 800355e:	f001 fd3a 	bl	8004fd6 <abs_limit>
    pid->out = pid->Pout + pid->Iout + pid->Dout;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	ed93 7a08 	vldr	s14, [r3, #32]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800356e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    abs_limit(&pid->out, pid->max_out);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	edd3 7a06 	vldr	s15, [r3, #24]
 800358e:	eeb0 0a67 	vmov.f32	s0, s15
 8003592:	4610      	mov	r0, r2
 8003594:	f001 fd1f 	bl	8004fd6 <abs_limit>
    return pid->out;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359c:	ee07 3a90 	vmov	s15, r3
}
 80035a0:	eeb0 0a67 	vmov.f32	s0, s15
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40490fdb 	.word	0x40490fdb
 80035b0:	c0490fdb 	.word	0xc0490fdb

080035b4 <gimbal_PID_clear>:
  * @brief          clear gimbal PID data, clear "pid.out" and "pid.iout".
  * @param[out]     gimbal_pid_clear: "gimbal_PID_t" variable pointer
  * @retval         none
  */
static void gimbal_PID_clear(gimbal_PID_t *gimbal_pid_clear)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
    if (gimbal_pid_clear == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d01c      	beq.n	80035fc <gimbal_PID_clear+0x48>
    {
        return;
    }
    gimbal_pid_clear->err = gimbal_pid_clear->set = gimbal_pid_clear->get = 0.0f;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	611a      	str	r2, [r3, #16]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	60da      	str	r2, [r3, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	615a      	str	r2, [r3, #20]
    gimbal_pid_clear->out = gimbal_pid_clear->Pout = gimbal_pid_clear->Iout = gimbal_pid_clear->Dout = 0.0f;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	629a      	str	r2, [r3, #40]	; 0x28
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	625a      	str	r2, [r3, #36]	; 0x24
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	621a      	str	r2, [r3, #32]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1a      	ldr	r2, [r3, #32]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80035fa:	e000      	b.n	80035fe <gimbal_PID_clear+0x4a>
        return;
 80035fc:	bf00      	nop
}
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <remote_control_init>:
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
    RC_Init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 800360c:	2224      	movs	r2, #36	; 0x24
 800360e:	4903      	ldr	r1, [pc, #12]	; (800361c <remote_control_init+0x14>)
 8003610:	4803      	ldr	r0, [pc, #12]	; (8003620 <remote_control_init+0x18>)
 8003612:	f000 fff9 	bl	8004608 <RC_Init>
}
 8003616:	bf00      	nop
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20000318 	.word	0x20000318
 8003620:	200002f4 	.word	0x200002f4

08003624 <get_remote_control_point>:
  * @param[in]      none
  * @retval         remote control data pointer
  */

const RC_ctrl_t *get_remote_control_point(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 8003628:	4b02      	ldr	r3, [pc, #8]	; (8003634 <get_remote_control_point+0x10>)
}
 800362a:	4618      	mov	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	2000551c 	.word	0x2000551c

08003638 <USART1_IRQHandler>:
    RC_restart(SBUS_RX_BUF_NUM);
}

//serial port interrupt function
void USART1_IRQHandler(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
    if(huart1.Instance->SR & UART_FLAG_RXNE)//received data
 800363e:	4b47      	ldr	r3, [pc, #284]	; (800375c <USART1_IRQHandler+0x124>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00b      	beq.n	8003664 <USART1_IRQHandler+0x2c>
    {
        __HAL_UART_CLEAR_PEFLAG(&huart1);
 800364c:	2300      	movs	r3, #0
 800364e:	607b      	str	r3, [r7, #4]
 8003650:	4b42      	ldr	r3, [pc, #264]	; (800375c <USART1_IRQHandler+0x124>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	607b      	str	r3, [r7, #4]
 8003658:	4b40      	ldr	r3, [pc, #256]	; (800375c <USART1_IRQHandler+0x124>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	607b      	str	r3, [r7, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
#endif
            }
        }
    }

}
 8003662:	e076      	b.n	8003752 <USART1_IRQHandler+0x11a>
    else if(USART1->SR & UART_FLAG_IDLE)
 8003664:	4b3e      	ldr	r3, [pc, #248]	; (8003760 <USART1_IRQHandler+0x128>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b00      	cmp	r3, #0
 800366e:	d070      	beq.n	8003752 <USART1_IRQHandler+0x11a>
        __HAL_UART_CLEAR_PEFLAG(&huart1);
 8003670:	2300      	movs	r3, #0
 8003672:	603b      	str	r3, [r7, #0]
 8003674:	4b39      	ldr	r3, [pc, #228]	; (800375c <USART1_IRQHandler+0x124>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	603b      	str	r3, [r7, #0]
 800367c:	4b37      	ldr	r3, [pc, #220]	; (800375c <USART1_IRQHandler+0x124>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	603b      	str	r3, [r7, #0]
 8003684:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart1_rx.Instance->CR & DMA_SxCR_CT) == RESET)
 8003686:	4b37      	ldr	r3, [pc, #220]	; (8003764 <USART1_IRQHandler+0x12c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d130      	bne.n	80036f6 <USART1_IRQHandler+0xbe>
            __HAL_DMA_DISABLE(&hdma_usart1_rx);
 8003694:	4b33      	ldr	r3, [pc, #204]	; (8003764 <USART1_IRQHandler+0x12c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	4b32      	ldr	r3, [pc, #200]	; (8003764 <USART1_IRQHandler+0x12c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0201 	bic.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart1_rx.Instance->NDTR;
 80036a4:	4b2f      	ldr	r3, [pc, #188]	; (8003764 <USART1_IRQHandler+0x12c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	4b2d      	ldr	r3, [pc, #180]	; (8003768 <USART1_IRQHandler+0x130>)
 80036b4:	801a      	strh	r2, [r3, #0]
            hdma_usart1_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 80036b6:	4b2b      	ldr	r3, [pc, #172]	; (8003764 <USART1_IRQHandler+0x12c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2224      	movs	r2, #36	; 0x24
 80036bc:	605a      	str	r2, [r3, #4]
            hdma_usart1_rx.Instance->CR |= DMA_SxCR_CT;
 80036be:	4b29      	ldr	r3, [pc, #164]	; (8003764 <USART1_IRQHandler+0x12c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	4b27      	ldr	r3, [pc, #156]	; (8003764 <USART1_IRQHandler+0x12c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80036cc:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart1_rx);
 80036ce:	4b25      	ldr	r3, [pc, #148]	; (8003764 <USART1_IRQHandler+0x12c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	4b23      	ldr	r3, [pc, #140]	; (8003764 <USART1_IRQHandler+0x12c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f042 0201 	orr.w	r2, r2, #1
 80036dc:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 80036de:	4b22      	ldr	r3, [pc, #136]	; (8003768 <USART1_IRQHandler+0x130>)
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	2b12      	cmp	r3, #18
 80036e4:	d135      	bne.n	8003752 <USART1_IRQHandler+0x11a>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 80036e6:	4921      	ldr	r1, [pc, #132]	; (800376c <USART1_IRQHandler+0x134>)
 80036e8:	4821      	ldr	r0, [pc, #132]	; (8003770 <USART1_IRQHandler+0x138>)
 80036ea:	f000 f847 	bl	800377c <sbus_to_rc>
                detect_hook(DBUS_TOE);
 80036ee:	2000      	movs	r0, #0
 80036f0:	f7fe fb12 	bl	8001d18 <detect_hook>
}
 80036f4:	e02d      	b.n	8003752 <USART1_IRQHandler+0x11a>
            __HAL_DMA_DISABLE(&hdma_usart1_rx);
 80036f6:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <USART1_IRQHandler+0x12c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4b19      	ldr	r3, [pc, #100]	; (8003764 <USART1_IRQHandler+0x12c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0201 	bic.w	r2, r2, #1
 8003704:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart1_rx.Instance->NDTR;
 8003706:	4b17      	ldr	r3, [pc, #92]	; (8003764 <USART1_IRQHandler+0x12c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	b29b      	uxth	r3, r3
 800370e:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8003712:	b29a      	uxth	r2, r3
 8003714:	4b14      	ldr	r3, [pc, #80]	; (8003768 <USART1_IRQHandler+0x130>)
 8003716:	801a      	strh	r2, [r3, #0]
            hdma_usart1_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8003718:	4b12      	ldr	r3, [pc, #72]	; (8003764 <USART1_IRQHandler+0x12c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2224      	movs	r2, #36	; 0x24
 800371e:	605a      	str	r2, [r3, #4]
            DMA2_Stream2->CR &= ~(DMA_SxCR_CT);
 8003720:	4b14      	ldr	r3, [pc, #80]	; (8003774 <USART1_IRQHandler+0x13c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a13      	ldr	r2, [pc, #76]	; (8003774 <USART1_IRQHandler+0x13c>)
 8003726:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800372a:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart1_rx);
 800372c:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <USART1_IRQHandler+0x12c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <USART1_IRQHandler+0x12c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 800373c:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <USART1_IRQHandler+0x130>)
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	2b12      	cmp	r3, #18
 8003742:	d106      	bne.n	8003752 <USART1_IRQHandler+0x11a>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 8003744:	4909      	ldr	r1, [pc, #36]	; (800376c <USART1_IRQHandler+0x134>)
 8003746:	480c      	ldr	r0, [pc, #48]	; (8003778 <USART1_IRQHandler+0x140>)
 8003748:	f000 f818 	bl	800377c <sbus_to_rc>
                detect_hook(DBUS_TOE);
 800374c:	2000      	movs	r0, #0
 800374e:	f7fe fae3 	bl	8001d18 <detect_hook>
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20005ac0 	.word	0x20005ac0
 8003760:	40011000 	.word	0x40011000
 8003764:	20005a00 	.word	0x20005a00
 8003768:	2000033c 	.word	0x2000033c
 800376c:	2000551c 	.word	0x2000551c
 8003770:	200002f4 	.word	0x200002f4
 8003774:	40026440 	.word	0x40026440
 8003778:	20000318 	.word	0x20000318

0800377c <sbus_to_rc>:
  * @param[in]      sbus_buf: raw data pointer
  * @param[out]     rc_ctrl: remote control data struct pointer
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 80ff 	beq.w	800398c <sbus_to_rc+0x210>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 80fb 	beq.w	800398c <sbus_to_rc+0x210>
    {
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	b2db      	uxtb	r3, r3
 800379c:	b21a      	sxth	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3301      	adds	r3, #1
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	021b      	lsls	r3, r3, #8
 80037a8:	b21b      	sxth	r3, r3
 80037aa:	4313      	orrs	r3, r2
 80037ac:	b21b      	sxth	r3, r3
 80037ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037b2:	b21a      	sxth	r2, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3301      	adds	r3, #1
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	08db      	lsrs	r3, r3, #3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	b21a      	sxth	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3302      	adds	r3, #2
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	015b      	lsls	r3, r3, #5
 80037d0:	b21b      	sxth	r3, r3
 80037d2:	4313      	orrs	r3, r2
 80037d4:	b21b      	sxth	r3, r3
 80037d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037da:	b21a      	sxth	r2, r3
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3302      	adds	r3, #2
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	099b      	lsrs	r3, r3, #6
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	b21a      	sxth	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3303      	adds	r3, #3
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	b21b      	sxth	r3, r3
 80037fa:	4313      	orrs	r3, r2
 80037fc:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3304      	adds	r3, #4
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8003808:	b21b      	sxth	r3, r3
 800380a:	4313      	orrs	r3, r2
 800380c:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 800380e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003812:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3304      	adds	r3, #4
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	b2db      	uxtb	r3, r3
 8003820:	085b      	lsrs	r3, r3, #1
 8003822:	b2db      	uxtb	r3, r3
 8003824:	b21a      	sxth	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3305      	adds	r3, #5
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	b2db      	uxtb	r3, r3
 800382e:	01db      	lsls	r3, r3, #7
 8003830:	b21b      	sxth	r3, r3
 8003832:	4313      	orrs	r3, r2
 8003834:	b21b      	sxth	r3, r3
 8003836:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800383a:	b21a      	sxth	r2, r3
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  	    //!< Switch left
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3305      	adds	r3, #5
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	b2db      	uxtb	r3, r3
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	b2db      	uxtb	r3, r3
 800384c:	f003 0303 	and.w	r3, r3, #3
 8003850:	b2da      	uxtb	r2, r3
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                  //!< Switch right
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3305      	adds	r3, #5
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	b2db      	uxtb	r3, r3
 800385e:	091b      	lsrs	r3, r3, #4
 8003860:	b2db      	uxtb	r3, r3
 8003862:	109b      	asrs	r3, r3, #2
 8003864:	b2db      	uxtb	r3, r3
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	b2da      	uxtb	r2, r3
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3306      	adds	r3, #6
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	b2db      	uxtb	r3, r3
 8003878:	b21a      	sxth	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3307      	adds	r3, #7
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	b2db      	uxtb	r3, r3
 8003882:	021b      	lsls	r3, r3, #8
 8003884:	b21b      	sxth	r3, r3
 8003886:	4313      	orrs	r3, r2
 8003888:	b21a      	sxth	r2, r3
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3308      	adds	r3, #8
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	b21a      	sxth	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3309      	adds	r3, #9
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	021b      	lsls	r3, r3, #8
 80038a2:	b21b      	sxth	r3, r3
 80038a4:	4313      	orrs	r3, r2
 80038a6:	b21a      	sxth	r2, r3
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	330a      	adds	r3, #10
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	b21a      	sxth	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	330b      	adds	r3, #11
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	021b      	lsls	r3, r3, #8
 80038c0:	b21b      	sxth	r3, r3
 80038c2:	4313      	orrs	r3, r2
 80038c4:	b21a      	sxth	r2, r3
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Press ?
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	7b1b      	ldrb	r3, [r3, #12]
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Press ?
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	7b5b      	ldrb	r3, [r3, #13]
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	330e      	adds	r3, #14
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	b21a      	sxth	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	330f      	adds	r3, #15
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	021b      	lsls	r3, r3, #8
 80038f2:	b21b      	sxth	r3, r3
 80038f4:	4313      	orrs	r3, r2
 80038f6:	b21b      	sxth	r3, r3
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //!< Channel 4
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3310      	adds	r3, #16
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	b21a      	sxth	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3311      	adds	r3, #17
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	b2db      	uxtb	r3, r3
 8003910:	021b      	lsls	r3, r3, #8
 8003912:	b21b      	sxth	r3, r3
 8003914:	4313      	orrs	r3, r2
 8003916:	b21a      	sxth	r2, r3
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003922:	b21b      	sxth	r3, r3
 8003924:	b29b      	uxth	r3, r3
 8003926:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800392a:	b29b      	uxth	r3, r3
 800392c:	b21a      	sxth	r2, r3
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003938:	b21b      	sxth	r3, r3
 800393a:	b29b      	uxth	r3, r3
 800393c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003940:	b29b      	uxth	r3, r3
 8003942:	b21a      	sxth	r2, r3
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800394e:	b21b      	sxth	r3, r3
 8003950:	b29b      	uxth	r3, r3
 8003952:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003956:	b29b      	uxth	r3, r3
 8003958:	b21a      	sxth	r2, r3
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003964:	b21b      	sxth	r3, r3
 8003966:	b29b      	uxth	r3, r3
 8003968:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800396c:	b29b      	uxth	r3, r3
 800396e:	b21a      	sxth	r2, r3
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800397a:	b21b      	sxth	r3, r3
 800397c:	b29b      	uxth	r3, r3
 800397e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003982:	b29b      	uxth	r3, r3
 8003984:	b21a      	sxth	r2, r3
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	811a      	strh	r2, [r3, #8]
 800398a:	e000      	b.n	800398e <sbus_to_rc+0x212>
        return;
 800398c:	bf00      	nop
}
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <shoot_init>:
  *                 ->motor data pointer
  * @param[in]      void
  * @retval         none
  */
void shoot_init(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
    //friction motors initialization
    fric_motor_init();
 800399c:	f000 f878 	bl	8003a90 <fric_motor_init>

    static const float32_t Trigger_speed_pid[3] = {TRIGGER_ANGLE_PID_KP, TRIGGER_ANGLE_PID_KI, TRIGGER_ANGLE_PID_KD};
    shoot_control.shoot_mode = SHOOT_STOP;
 80039a0:	4b30      	ldr	r3, [pc, #192]	; (8003a64 <shoot_init+0xcc>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	701a      	strb	r2, [r3, #0]
    //remote controller data pointer
    shoot_control.shoot_rc = get_remote_control_point();
 80039a6:	f7ff fe3d 	bl	8003624 <get_remote_control_point>
 80039aa:	4603      	mov	r3, r0
 80039ac:	4a2d      	ldr	r2, [pc, #180]	; (8003a64 <shoot_init+0xcc>)
 80039ae:	6053      	str	r3, [r2, #4]
    //motor feedback data pointer
    shoot_control.shoot_motor_measure = get_trigger_motor_measure_point();
 80039b0:	f7fc ff3e 	bl	8000830 <get_trigger_motor_measure_point>
 80039b4:	4603      	mov	r3, r0
 80039b6:	4a2b      	ldr	r2, [pc, #172]	; (8003a64 <shoot_init+0xcc>)
 80039b8:	6093      	str	r3, [r2, #8]
    //initialize PID
    PID_init(&shoot_control.trigger_motor_pid, PID_POSITION, Trigger_speed_pid, TRIGGER_READY_PID_MAX_OUT, TRIGGER_READY_PID_MAX_IOUT);
 80039ba:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8003a68 <shoot_init+0xd0>
 80039be:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8003a6c <shoot_init+0xd4>
 80039c2:	4a2b      	ldr	r2, [pc, #172]	; (8003a70 <shoot_init+0xd8>)
 80039c4:	2100      	movs	r1, #0
 80039c6:	482b      	ldr	r0, [pc, #172]	; (8003a74 <shoot_init+0xdc>)
 80039c8:	f001 fbc1 	bl	800514e <PID_init>
    //update data
    shoot_feedback_update();
 80039cc:	f000 fa60 	bl	8003e90 <shoot_feedback_update>
    ramp_init(&shoot_control.fric1_ramp, SHOOT_CONTROL_TIME * 0.001f, FRIC_DOWN, FRIC_OFF);
 80039d0:	ed9f 1a29 	vldr	s2, [pc, #164]	; 8003a78 <shoot_init+0xe0>
 80039d4:	eddf 0a29 	vldr	s1, [pc, #164]	; 8003a7c <shoot_init+0xe4>
 80039d8:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8003a80 <shoot_init+0xe8>
 80039dc:	4829      	ldr	r0, [pc, #164]	; (8003a84 <shoot_init+0xec>)
 80039de:	f001 fa21 	bl	8004e24 <ramp_init>
    ramp_init(&shoot_control.fric2_ramp, SHOOT_CONTROL_TIME * 0.001f, FRIC_DOWN, FRIC_OFF);
 80039e2:	ed9f 1a25 	vldr	s2, [pc, #148]	; 8003a78 <shoot_init+0xe0>
 80039e6:	eddf 0a25 	vldr	s1, [pc, #148]	; 8003a7c <shoot_init+0xe4>
 80039ea:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8003a80 <shoot_init+0xe8>
 80039ee:	4826      	ldr	r0, [pc, #152]	; (8003a88 <shoot_init+0xf0>)
 80039f0:	f001 fa18 	bl	8004e24 <ramp_init>
    shoot_control.fric_pwm1 = FRIC_OFF;
 80039f4:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <shoot_init+0xcc>)
 80039f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039fa:	841a      	strh	r2, [r3, #32]
    shoot_control.fric_pwm2 = FRIC_OFF;
 80039fc:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <shoot_init+0xcc>)
 80039fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a02:	86da      	strh	r2, [r3, #54]	; 0x36
    shoot_control.ecd_count = 0;
 8003a04:	4b17      	ldr	r3, [pc, #92]	; (8003a64 <shoot_init+0xcc>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
    shoot_control.angle = shoot_control.shoot_motor_measure->ecd * MOTOR_ECD_TO_ANGLE;
 8003a0c:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <shoot_init+0xcc>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	ee07 3a90 	vmov	s15, r3
 8003a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a1a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003a8c <shoot_init+0xf4>
 8003a1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a22:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <shoot_init+0xcc>)
 8003a24:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
    shoot_control.given_current = 0;
 8003a28:	4b0e      	ldr	r3, [pc, #56]	; (8003a64 <shoot_init+0xcc>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
    shoot_control.move_flag = 0;
 8003a30:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <shoot_init+0xcc>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
    shoot_control.set_angle = shoot_control.angle;
 8003a38:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <shoot_init+0xcc>)
 8003a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a3e:	4a09      	ldr	r2, [pc, #36]	; (8003a64 <shoot_init+0xcc>)
 8003a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    shoot_control.speed = 0.0f;
 8003a44:	4b07      	ldr	r3, [pc, #28]	; (8003a64 <shoot_init+0xcc>)
 8003a46:	f04f 0200 	mov.w	r2, #0
 8003a4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    shoot_control.speed_set = 0.0f;
 8003a4e:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <shoot_init+0xcc>)
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    shoot_control.key_time = 0;
 8003a58:	4b02      	ldr	r3, [pc, #8]	; (8003a64 <shoot_init+0xcc>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
}
 8003a60:	bf00      	nop
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	2000553c 	.word	0x2000553c
 8003a68:	45dac000 	.word	0x45dac000
 8003a6c:	461c4000 	.word	0x461c4000
 8003a70:	08014924 	.word	0x08014924
 8003a74:	20005574 	.word	0x20005574
 8003a78:	447a0000 	.word	0x447a0000
 8003a7c:	44bb8000 	.word	0x44bb8000
 8003a80:	3a83126f 	.word	0x3a83126f
 8003a84:	20005548 	.word	0x20005548
 8003a88:	2000555e 	.word	0x2000555e
 8003a8c:	37b2b8c2 	.word	0x37b2b8c2

08003a90 <fric_motor_init>:
  * @brief          initialize two friction motors.
  * @param[in]      void
  * @retval         void
  */
static void fric_motor_init(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
    //set max speed
    fric1_on(FRIC_UP);
 8003a94:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003a98:	f000 fd7a 	bl	8004590 <fric1_on>
    fric2_on(FRIC_UP);
 8003a9c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003aa0:	f000 fd88 	bl	80045b4 <fric2_on>
    osDelay(1000);
 8003aa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003aa8:	f00c f840 	bl	800fb2c <osDelay>
    //set min speed (stop)
    fric_off();
 8003aac:	f000 fd5c 	bl	8004568 <fric_off>
}
 8003ab0:	bf00      	nop
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <shoot_control_loop>:
  * @brief          shoot loop control
  * @param[in]      void
  * @retval         CAN control value
  */
int16_t shoot_control_loop(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0

    shoot_set_mode();        //set shoot control mode
 8003ab8:	f000 f8de 	bl	8003c78 <shoot_set_mode>
    shoot_feedback_update(); //update data
 8003abc:	f000 f9e8 	bl	8003e90 <shoot_feedback_update>


    if (shoot_control.shoot_mode == SHOOT_STOP)
 8003ac0:	4b62      	ldr	r3, [pc, #392]	; (8003c4c <shoot_control_loop+0x198>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d105      	bne.n	8003ad4 <shoot_control_loop+0x20>
    {
        //set push bullet motor speed
        shoot_control.speed_set = 0.0f;
 8003ac8:	4b60      	ldr	r3, [pc, #384]	; (8003c4c <shoot_control_loop+0x198>)
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003ad2:	e055      	b.n	8003b80 <shoot_control_loop+0xcc>
    }
    else if (shoot_control.shoot_mode == SHOOT_READY_FRIC)
 8003ad4:	4b5d      	ldr	r3, [pc, #372]	; (8003c4c <shoot_control_loop+0x198>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d105      	bne.n	8003ae8 <shoot_control_loop+0x34>
    {
        //set push bullet motor speed
        shoot_control.speed_set = 0.0f;
 8003adc:	4b5b      	ldr	r3, [pc, #364]	; (8003c4c <shoot_control_loop+0x198>)
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003ae6:	e04b      	b.n	8003b80 <shoot_control_loop+0xcc>
    }
    else if(shoot_control.shoot_mode ==SHOOT_READY_BULLET)
 8003ae8:	4b58      	ldr	r3, [pc, #352]	; (8003c4c <shoot_control_loop+0x198>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d11c      	bne.n	8003b2a <shoot_control_loop+0x76>
    {
        if(shoot_control.key == SWITCH_TRIGGER_OFF)
 8003af0:	4b56      	ldr	r3, [pc, #344]	; (8003c4c <shoot_control_loop+0x198>)
 8003af2:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d106      	bne.n	8003b08 <shoot_control_loop+0x54>
        {
            //set push bullet motor's pushing speed, and enable bullet stuck handler
            shoot_control.trigger_speed_set = READY_TRIGGER_SPEED;
 8003afa:	4b54      	ldr	r3, [pc, #336]	; (8003c4c <shoot_control_loop+0x198>)
 8003afc:	4a54      	ldr	r2, [pc, #336]	; (8003c50 <shoot_control_loop+0x19c>)
 8003afe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            trigger_motor_turn_back();
 8003b02:	f000 faf7 	bl	80040f4 <trigger_motor_turn_back>
 8003b06:	e009      	b.n	8003b1c <shoot_control_loop+0x68>
        }
        else
        {
            shoot_control.trigger_speed_set = 0.0f;
 8003b08:	4b50      	ldr	r3, [pc, #320]	; (8003c4c <shoot_control_loop+0x198>)
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            shoot_control.speed_set = 0.0f;
 8003b12:	4b4e      	ldr	r3, [pc, #312]	; (8003c4c <shoot_control_loop+0x198>)
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        }
        shoot_control.trigger_motor_pid.max_out = TRIGGER_READY_PID_MAX_OUT;
 8003b1c:	4b4b      	ldr	r3, [pc, #300]	; (8003c4c <shoot_control_loop+0x198>)
 8003b1e:	4a4d      	ldr	r2, [pc, #308]	; (8003c54 <shoot_control_loop+0x1a0>)
 8003b20:	649a      	str	r2, [r3, #72]	; 0x48
        shoot_control.trigger_motor_pid.max_iout = TRIGGER_READY_PID_MAX_IOUT;
 8003b22:	4b4a      	ldr	r3, [pc, #296]	; (8003c4c <shoot_control_loop+0x198>)
 8003b24:	4a4c      	ldr	r2, [pc, #304]	; (8003c58 <shoot_control_loop+0x1a4>)
 8003b26:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b28:	e02a      	b.n	8003b80 <shoot_control_loop+0xcc>
    }
    else if (shoot_control.shoot_mode == SHOOT_READY)
 8003b2a:	4b48      	ldr	r3, [pc, #288]	; (8003c4c <shoot_control_loop+0x198>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d105      	bne.n	8003b3e <shoot_control_loop+0x8a>
    {
        //set push bullet motor speed
        shoot_control.speed_set = 0.0f;
 8003b32:	4b46      	ldr	r3, [pc, #280]	; (8003c4c <shoot_control_loop+0x198>)
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003b3c:	e020      	b.n	8003b80 <shoot_control_loop+0xcc>
    }
    else if (shoot_control.shoot_mode == SHOOT_BULLET)
 8003b3e:	4b43      	ldr	r3, [pc, #268]	; (8003c4c <shoot_control_loop+0x198>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d108      	bne.n	8003b58 <shoot_control_loop+0xa4>
    {
        shoot_control.trigger_motor_pid.max_out = TRIGGER_BULLET_PID_MAX_OUT;
 8003b46:	4b41      	ldr	r3, [pc, #260]	; (8003c4c <shoot_control_loop+0x198>)
 8003b48:	4a42      	ldr	r2, [pc, #264]	; (8003c54 <shoot_control_loop+0x1a0>)
 8003b4a:	649a      	str	r2, [r3, #72]	; 0x48
        shoot_control.trigger_motor_pid.max_iout = TRIGGER_BULLET_PID_MAX_IOUT;
 8003b4c:	4b3f      	ldr	r3, [pc, #252]	; (8003c4c <shoot_control_loop+0x198>)
 8003b4e:	4a43      	ldr	r2, [pc, #268]	; (8003c5c <shoot_control_loop+0x1a8>)
 8003b50:	64da      	str	r2, [r3, #76]	; 0x4c
        shoot_bullet_control();
 8003b52:	f000 fb27 	bl	80041a4 <shoot_bullet_control>
 8003b56:	e013      	b.n	8003b80 <shoot_control_loop+0xcc>
    }
    else if (shoot_control.shoot_mode == SHOOT_CONTINUE_BULLET)
 8003b58:	4b3c      	ldr	r3, [pc, #240]	; (8003c4c <shoot_control_loop+0x198>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2b05      	cmp	r3, #5
 8003b5e:	d106      	bne.n	8003b6e <shoot_control_loop+0xba>
    {
        //set push bullet motor's pushing speed, and enable bullet stuck handler
        shoot_control.trigger_speed_set = CONTINUE_TRIGGER_SPEED;
 8003b60:	4b3a      	ldr	r3, [pc, #232]	; (8003c4c <shoot_control_loop+0x198>)
 8003b62:	4a3f      	ldr	r2, [pc, #252]	; (8003c60 <shoot_control_loop+0x1ac>)
 8003b64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        trigger_motor_turn_back();
 8003b68:	f000 fac4 	bl	80040f4 <trigger_motor_turn_back>
 8003b6c:	e008      	b.n	8003b80 <shoot_control_loop+0xcc>
    }
    else if(shoot_control.shoot_mode == SHOOT_DONE)
 8003b6e:	4b37      	ldr	r3, [pc, #220]	; (8003c4c <shoot_control_loop+0x198>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b06      	cmp	r3, #6
 8003b74:	d104      	bne.n	8003b80 <shoot_control_loop+0xcc>
    {
        shoot_control.speed_set = 0.0f;
 8003b76:	4b35      	ldr	r3, [pc, #212]	; (8003c4c <shoot_control_loop+0x198>)
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    if(shoot_control.shoot_mode == SHOOT_STOP)
 8003b80:	4b32      	ldr	r3, [pc, #200]	; (8003c4c <shoot_control_loop+0x198>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d110      	bne.n	8003baa <shoot_control_loop+0xf6>
    {
        shoot_laser_off();
 8003b88:	f000 fd32 	bl	80045f0 <laser_off>
        shoot_control.given_current = 0;
 8003b8c:	4b2f      	ldr	r3, [pc, #188]	; (8003c4c <shoot_control_loop+0x198>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

        //friction motor need a ramp filter to start. It cannot be turned to max speed directly or motor may not work.
        ramp_calc(&shoot_control.fric1_ramp, -SHOOT_FRIC_PWM_ADD_VALUE);
 8003b94:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8003c64 <shoot_control_loop+0x1b0>
 8003b98:	4833      	ldr	r0, [pc, #204]	; (8003c68 <shoot_control_loop+0x1b4>)
 8003b9a:	f001 f964 	bl	8004e66 <ramp_calc>
        ramp_calc(&shoot_control.fric2_ramp, -SHOOT_FRIC_PWM_ADD_VALUE);
 8003b9e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8003c64 <shoot_control_loop+0x1b0>
 8003ba2:	4832      	ldr	r0, [pc, #200]	; (8003c6c <shoot_control_loop+0x1b8>)
 8003ba4:	f001 f95f 	bl	8004e66 <ramp_calc>
 8003ba8:	e02b      	b.n	8003c02 <shoot_control_loop+0x14e>
    }
    else
    {
        shoot_laser_on(); //enable laser
 8003baa:	f000 fd15 	bl	80045d8 <laser_on>
        //calculate push bullet motor pid
        PID_calc(&shoot_control.trigger_motor_pid, shoot_control.speed, shoot_control.speed_set);
 8003bae:	4b27      	ldr	r3, [pc, #156]	; (8003c4c <shoot_control_loop+0x198>)
 8003bb0:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003bb4:	4b25      	ldr	r3, [pc, #148]	; (8003c4c <shoot_control_loop+0x198>)
 8003bb6:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8003bba:	eef0 0a47 	vmov.f32	s1, s14
 8003bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc2:	482b      	ldr	r0, [pc, #172]	; (8003c70 <shoot_control_loop+0x1bc>)
 8003bc4:	f001 fb18 	bl	80051f8 <PID_calc>
        shoot_control.given_current = (int16_t)(shoot_control.trigger_motor_pid.out);
 8003bc8:	4b20      	ldr	r3, [pc, #128]	; (8003c4c <shoot_control_loop+0x198>)
 8003bca:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003bce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bd2:	ee17 3a90 	vmov	r3, s15
 8003bd6:	b21a      	sxth	r2, r3
 8003bd8:	4b1c      	ldr	r3, [pc, #112]	; (8003c4c <shoot_control_loop+0x198>)
 8003bda:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
        if(shoot_control.shoot_mode < SHOOT_READY_BULLET)
 8003bde:	4b1b      	ldr	r3, [pc, #108]	; (8003c4c <shoot_control_loop+0x198>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d803      	bhi.n	8003bee <shoot_control_loop+0x13a>
        {
            shoot_control.given_current = 0;
 8003be6:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <shoot_control_loop+0x198>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
        }
        //friction motor need a ramp filter to start. It cannot be turned to max speed directly or motor may not work.
        ramp_calc(&shoot_control.fric1_ramp, SHOOT_FRIC_PWM_ADD_VALUE);
 8003bee:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8003c74 <shoot_control_loop+0x1c0>
 8003bf2:	481d      	ldr	r0, [pc, #116]	; (8003c68 <shoot_control_loop+0x1b4>)
 8003bf4:	f001 f937 	bl	8004e66 <ramp_calc>
        ramp_calc(&shoot_control.fric2_ramp, SHOOT_FRIC_PWM_ADD_VALUE);
 8003bf8:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8003c74 <shoot_control_loop+0x1c0>
 8003bfc:	481b      	ldr	r0, [pc, #108]	; (8003c6c <shoot_control_loop+0x1b8>)
 8003bfe:	f001 f932 	bl	8004e66 <ramp_calc>

    }

    shoot_control.fric_pwm1 = (uint16_t)(shoot_control.fric1_ramp.out);
 8003c02:	4b12      	ldr	r3, [pc, #72]	; (8003c4c <shoot_control_loop+0x198>)
 8003c04:	edd3 7a04 	vldr	s15, [r3, #16]
 8003c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c0c:	ee17 3a90 	vmov	r3, s15
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	4b0e      	ldr	r3, [pc, #56]	; (8003c4c <shoot_control_loop+0x198>)
 8003c14:	841a      	strh	r2, [r3, #32]
    shoot_control.fric_pwm2 = (uint16_t)(shoot_control.fric2_ramp.out);
 8003c16:	4b0d      	ldr	r3, [pc, #52]	; (8003c4c <shoot_control_loop+0x198>)
 8003c18:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 8003c1c:	ee07 3a90 	vmov	s15, r3
 8003c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c24:	ee17 3a90 	vmov	r3, s15
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <shoot_control_loop+0x198>)
 8003c2c:	86da      	strh	r2, [r3, #54]	; 0x36
    shoot_fric1_on(shoot_control.fric_pwm1);
 8003c2e:	4b07      	ldr	r3, [pc, #28]	; (8003c4c <shoot_control_loop+0x198>)
 8003c30:	8c1b      	ldrh	r3, [r3, #32]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 fcac 	bl	8004590 <fric1_on>
    shoot_fric2_on(shoot_control.fric_pwm2);
 8003c38:	4b04      	ldr	r3, [pc, #16]	; (8003c4c <shoot_control_loop+0x198>)
 8003c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 fcb9 	bl	80045b4 <fric2_on>
    return shoot_control.given_current;
 8003c42:	4b02      	ldr	r3, [pc, #8]	; (8003c4c <shoot_control_loop+0x198>)
 8003c44:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	2000553c 	.word	0x2000553c
 8003c50:	40a00000 	.word	0x40a00000
 8003c54:	461c4000 	.word	0x461c4000
 8003c58:	45dac000 	.word	0x45dac000
 8003c5c:	460ca000 	.word	0x460ca000
 8003c60:	41700000 	.word	0x41700000
 8003c64:	c2c80000 	.word	0xc2c80000
 8003c68:	20005548 	.word	0x20005548
 8003c6c:	2000555e 	.word	0x2000555e
 8003c70:	20005574 	.word	0x20005574
 8003c74:	42c80000 	.word	0x42c80000

08003c78 <shoot_set_mode>:
  *                 remote controller switch kept down -> keep shooting (used to clean bullet in 3 minutes preparation time)
  * @param[in]      void
  * @retval         void
  */
static void shoot_set_mode(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
    static int8_t last_s = RC_SW_UP;    //last switch position

    //switch push up check, push up once -> friction motor turned on, again -> friction motor turned turn off
    if ((switch_is_up(shoot_control.shoot_rc->rc.s[SHOOT_RC_MODE_CHANNEL]) && !switch_is_up(last_s) && shoot_control.shoot_mode == SHOOT_STOP))
 8003c7c:	4b82      	ldr	r3, [pc, #520]	; (8003e88 <shoot_set_mode+0x210>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	7adb      	ldrb	r3, [r3, #11]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d10c      	bne.n	8003ca0 <shoot_set_mode+0x28>
 8003c86:	4b81      	ldr	r3, [pc, #516]	; (8003e8c <shoot_set_mode+0x214>)
 8003c88:	f993 3000 	ldrsb.w	r3, [r3]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d007      	beq.n	8003ca0 <shoot_set_mode+0x28>
 8003c90:	4b7d      	ldr	r3, [pc, #500]	; (8003e88 <shoot_set_mode+0x210>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d103      	bne.n	8003ca0 <shoot_set_mode+0x28>
    {
        shoot_control.shoot_mode = SHOOT_READY_FRIC;
 8003c98:	4b7b      	ldr	r3, [pc, #492]	; (8003e88 <shoot_set_mode+0x210>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	e010      	b.n	8003cc2 <shoot_set_mode+0x4a>
    }
    else if ((switch_is_up(shoot_control.shoot_rc->rc.s[SHOOT_RC_MODE_CHANNEL]) && !switch_is_up(last_s) && shoot_control.shoot_mode != SHOOT_STOP))
 8003ca0:	4b79      	ldr	r3, [pc, #484]	; (8003e88 <shoot_set_mode+0x210>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	7adb      	ldrb	r3, [r3, #11]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d10b      	bne.n	8003cc2 <shoot_set_mode+0x4a>
 8003caa:	4b78      	ldr	r3, [pc, #480]	; (8003e8c <shoot_set_mode+0x214>)
 8003cac:	f993 3000 	ldrsb.w	r3, [r3]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d006      	beq.n	8003cc2 <shoot_set_mode+0x4a>
 8003cb4:	4b74      	ldr	r3, [pc, #464]	; (8003e88 <shoot_set_mode+0x210>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <shoot_set_mode+0x4a>
    {
        shoot_control.shoot_mode = SHOOT_STOP;
 8003cbc:	4b72      	ldr	r3, [pc, #456]	; (8003e88 <shoot_set_mode+0x210>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	701a      	strb	r2, [r3, #0]
    }

    //switch in middle, friction motors can be turned on by keyboard
    if (switch_is_mid(shoot_control.shoot_rc->rc.s[SHOOT_RC_MODE_CHANNEL]) && (shoot_control.shoot_rc->key.v & SHOOT_ON_KEYBOARD) && shoot_control.shoot_mode == SHOOT_STOP)
 8003cc2:	4b71      	ldr	r3, [pc, #452]	; (8003e88 <shoot_set_mode+0x210>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	7adb      	ldrb	r3, [r3, #11]
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d10f      	bne.n	8003cec <shoot_set_mode+0x74>
 8003ccc:	4b6e      	ldr	r3, [pc, #440]	; (8003e88 <shoot_set_mode+0x210>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	8a9b      	ldrh	r3, [r3, #20]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d007      	beq.n	8003cec <shoot_set_mode+0x74>
 8003cdc:	4b6a      	ldr	r3, [pc, #424]	; (8003e88 <shoot_set_mode+0x210>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d103      	bne.n	8003cec <shoot_set_mode+0x74>
    {
        shoot_control.shoot_mode = SHOOT_READY_FRIC;
 8003ce4:	4b68      	ldr	r3, [pc, #416]	; (8003e88 <shoot_set_mode+0x210>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	e013      	b.n	8003d14 <shoot_set_mode+0x9c>
    }
    //switch in middle, friction motors can be turned off by keyboard
    else if (switch_is_mid(shoot_control.shoot_rc->rc.s[SHOOT_RC_MODE_CHANNEL]) && (shoot_control.shoot_rc->key.v & SHOOT_OFF_KEYBOARD) && shoot_control.shoot_mode != SHOOT_STOP)
 8003cec:	4b66      	ldr	r3, [pc, #408]	; (8003e88 <shoot_set_mode+0x210>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	7adb      	ldrb	r3, [r3, #11]
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d10e      	bne.n	8003d14 <shoot_set_mode+0x9c>
 8003cf6:	4b64      	ldr	r3, [pc, #400]	; (8003e88 <shoot_set_mode+0x210>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	8a9b      	ldrh	r3, [r3, #20]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d006      	beq.n	8003d14 <shoot_set_mode+0x9c>
 8003d06:	4b60      	ldr	r3, [pc, #384]	; (8003e88 <shoot_set_mode+0x210>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <shoot_set_mode+0x9c>
    {
        shoot_control.shoot_mode = SHOOT_STOP;
 8003d0e:	4b5e      	ldr	r3, [pc, #376]	; (8003e88 <shoot_set_mode+0x210>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	701a      	strb	r2, [r3, #0]
    }

    if(shoot_control.shoot_mode == SHOOT_READY_FRIC && shoot_control.fric1_ramp.out == shoot_control.fric1_ramp.max_value && shoot_control.fric2_ramp.out == shoot_control.fric2_ramp.max_value)
 8003d14:	4b5c      	ldr	r3, [pc, #368]	; (8003e88 <shoot_set_mode+0x210>)
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d11f      	bne.n	8003d5c <shoot_set_mode+0xe4>
 8003d1c:	4b5a      	ldr	r3, [pc, #360]	; (8003e88 <shoot_set_mode+0x210>)
 8003d1e:	ed93 7a04 	vldr	s14, [r3, #16]
 8003d22:	4b59      	ldr	r3, [pc, #356]	; (8003e88 <shoot_set_mode+0x210>)
 8003d24:	edd3 7a06 	vldr	s15, [r3, #24]
 8003d28:	eeb4 7a67 	vcmp.f32	s14, s15
 8003d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d30:	d114      	bne.n	8003d5c <shoot_set_mode+0xe4>
 8003d32:	4b55      	ldr	r3, [pc, #340]	; (8003e88 <shoot_set_mode+0x210>)
 8003d34:	f8d3 2026 	ldr.w	r2, [r3, #38]	; 0x26
 8003d38:	4613      	mov	r3, r2
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	4b52      	ldr	r3, [pc, #328]	; (8003e88 <shoot_set_mode+0x210>)
 8003d3e:	f8d3 302e 	ldr.w	r3, [r3, #46]	; 0x2e
 8003d42:	ee07 2a90 	vmov	s15, r2
 8003d46:	ee07 3a10 	vmov	s14, r3
 8003d4a:	eef4 7a47 	vcmp.f32	s15, s14
 8003d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d52:	d103      	bne.n	8003d5c <shoot_set_mode+0xe4>
    {
        shoot_control.shoot_mode = SHOOT_READY_BULLET;
 8003d54:	4b4c      	ldr	r3, [pc, #304]	; (8003e88 <shoot_set_mode+0x210>)
 8003d56:	2202      	movs	r2, #2
 8003d58:	701a      	strb	r2, [r3, #0]
 8003d5a:	e064      	b.n	8003e26 <shoot_set_mode+0x1ae>
    }
    else if(shoot_control.shoot_mode == SHOOT_READY_BULLET && shoot_control.key == SWITCH_TRIGGER_ON)
 8003d5c:	4b4a      	ldr	r3, [pc, #296]	; (8003e88 <shoot_set_mode+0x210>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d108      	bne.n	8003d76 <shoot_set_mode+0xfe>
 8003d64:	4b48      	ldr	r3, [pc, #288]	; (8003e88 <shoot_set_mode+0x210>)
 8003d66:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d103      	bne.n	8003d76 <shoot_set_mode+0xfe>
    {
        shoot_control.shoot_mode = SHOOT_READY;
 8003d6e:	4b46      	ldr	r3, [pc, #280]	; (8003e88 <shoot_set_mode+0x210>)
 8003d70:	2203      	movs	r2, #3
 8003d72:	701a      	strb	r2, [r3, #0]
 8003d74:	e057      	b.n	8003e26 <shoot_set_mode+0x1ae>
    }
    else if(shoot_control.shoot_mode == SHOOT_READY && shoot_control.key == SWITCH_TRIGGER_OFF)
 8003d76:	4b44      	ldr	r3, [pc, #272]	; (8003e88 <shoot_set_mode+0x210>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	d108      	bne.n	8003d90 <shoot_set_mode+0x118>
 8003d7e:	4b42      	ldr	r3, [pc, #264]	; (8003e88 <shoot_set_mode+0x210>)
 8003d80:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d103      	bne.n	8003d90 <shoot_set_mode+0x118>
    {
        shoot_control.shoot_mode = SHOOT_READY_BULLET;
 8003d88:	4b3f      	ldr	r3, [pc, #252]	; (8003e88 <shoot_set_mode+0x210>)
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	701a      	strb	r2, [r3, #0]
 8003d8e:	e04a      	b.n	8003e26 <shoot_set_mode+0x1ae>
    }
    else if(shoot_control.shoot_mode == SHOOT_READY)
 8003d90:	4b3d      	ldr	r3, [pc, #244]	; (8003e88 <shoot_set_mode+0x210>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d121      	bne.n	8003ddc <shoot_set_mode+0x164>
    {
        //switch pushed down once or mouse click once (left or right), comes to shoot bullet mode
        if ((switch_is_down(shoot_control.shoot_rc->rc.s[SHOOT_RC_MODE_CHANNEL]) && !switch_is_down(last_s)) || (shoot_control.press_l && shoot_control.last_press_l == 0) || (shoot_control.press_r && shoot_control.last_press_r == 0))
 8003d98:	4b3b      	ldr	r3, [pc, #236]	; (8003e88 <shoot_set_mode+0x210>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	7adb      	ldrb	r3, [r3, #11]
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d104      	bne.n	8003dac <shoot_set_mode+0x134>
 8003da2:	4b3a      	ldr	r3, [pc, #232]	; (8003e8c <shoot_set_mode+0x214>)
 8003da4:	f993 3000 	ldrsb.w	r3, [r3]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d113      	bne.n	8003dd4 <shoot_set_mode+0x15c>
 8003dac:	4b36      	ldr	r3, [pc, #216]	; (8003e88 <shoot_set_mode+0x210>)
 8003dae:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d004      	beq.n	8003dc0 <shoot_set_mode+0x148>
 8003db6:	4b34      	ldr	r3, [pc, #208]	; (8003e88 <shoot_set_mode+0x210>)
 8003db8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d009      	beq.n	8003dd4 <shoot_set_mode+0x15c>
 8003dc0:	4b31      	ldr	r3, [pc, #196]	; (8003e88 <shoot_set_mode+0x210>)
 8003dc2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d02d      	beq.n	8003e26 <shoot_set_mode+0x1ae>
 8003dca:	4b2f      	ldr	r3, [pc, #188]	; (8003e88 <shoot_set_mode+0x210>)
 8003dcc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d128      	bne.n	8003e26 <shoot_set_mode+0x1ae>
        {
            shoot_control.shoot_mode = SHOOT_BULLET;
 8003dd4:	4b2c      	ldr	r3, [pc, #176]	; (8003e88 <shoot_set_mode+0x210>)
 8003dd6:	2204      	movs	r2, #4
 8003dd8:	701a      	strb	r2, [r3, #0]
 8003dda:	e024      	b.n	8003e26 <shoot_set_mode+0x1ae>
        }
    }
    else if(shoot_control.shoot_mode == SHOOT_DONE)
 8003ddc:	4b2a      	ldr	r3, [pc, #168]	; (8003e88 <shoot_set_mode+0x210>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b06      	cmp	r3, #6
 8003de2:	d120      	bne.n	8003e26 <shoot_set_mode+0x1ae>
    {
        if(shoot_control.key == SWITCH_TRIGGER_OFF)
 8003de4:	4b28      	ldr	r3, [pc, #160]	; (8003e88 <shoot_set_mode+0x210>)
 8003de6:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d114      	bne.n	8003e18 <shoot_set_mode+0x1a0>
        {
            shoot_control.key_time++;
 8003dee:	4b26      	ldr	r3, [pc, #152]	; (8003e88 <shoot_set_mode+0x210>)
 8003df0:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8003df4:	3301      	adds	r3, #1
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	4b23      	ldr	r3, [pc, #140]	; (8003e88 <shoot_set_mode+0x210>)
 8003dfa:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
            if(shoot_control.key_time > SHOOT_DONE_KEY_OFF_TIME)
 8003dfe:	4b22      	ldr	r3, [pc, #136]	; (8003e88 <shoot_set_mode+0x210>)
 8003e00:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8003e04:	2b0f      	cmp	r3, #15
 8003e06:	d90e      	bls.n	8003e26 <shoot_set_mode+0x1ae>
            {
                shoot_control.key_time = 0;
 8003e08:	4b1f      	ldr	r3, [pc, #124]	; (8003e88 <shoot_set_mode+0x210>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                shoot_control.shoot_mode = SHOOT_READY_BULLET;
 8003e10:	4b1d      	ldr	r3, [pc, #116]	; (8003e88 <shoot_set_mode+0x210>)
 8003e12:	2202      	movs	r2, #2
 8003e14:	701a      	strb	r2, [r3, #0]
 8003e16:	e006      	b.n	8003e26 <shoot_set_mode+0x1ae>
            }
        }
        else
        {
            shoot_control.key_time = 0;
 8003e18:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <shoot_set_mode+0x210>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
            shoot_control.shoot_mode = SHOOT_BULLET;
 8003e20:	4b19      	ldr	r3, [pc, #100]	; (8003e88 <shoot_set_mode+0x210>)
 8003e22:	2204      	movs	r2, #4
 8003e24:	701a      	strb	r2, [r3, #0]
        }
    }
    


    if(shoot_control.shoot_mode > SHOOT_READY_FRIC)
 8003e26:	4b18      	ldr	r3, [pc, #96]	; (8003e88 <shoot_set_mode+0x210>)
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d91c      	bls.n	8003e68 <shoot_set_mode+0x1f0>
    {
        //mouse pressed down continuously -> come to continuously shoot mode
        if ((shoot_control.press_l_time == PRESS_LONG_TIME) || (shoot_control.press_r_time == PRESS_LONG_TIME) || (shoot_control.rc_s_time == RC_S_LONG_TIME))
 8003e2e:	4b16      	ldr	r3, [pc, #88]	; (8003e88 <shoot_set_mode+0x210>)
 8003e30:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8003e34:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003e38:	d00b      	beq.n	8003e52 <shoot_set_mode+0x1da>
 8003e3a:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <shoot_set_mode+0x210>)
 8003e3c:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8003e40:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003e44:	d005      	beq.n	8003e52 <shoot_set_mode+0x1da>
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <shoot_set_mode+0x210>)
 8003e48:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8003e4c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003e50:	d103      	bne.n	8003e5a <shoot_set_mode+0x1e2>
        {
            shoot_control.shoot_mode = SHOOT_CONTINUE_BULLET;
 8003e52:	4b0d      	ldr	r3, [pc, #52]	; (8003e88 <shoot_set_mode+0x210>)
 8003e54:	2205      	movs	r2, #5
 8003e56:	701a      	strb	r2, [r3, #0]
 8003e58:	e006      	b.n	8003e68 <shoot_set_mode+0x1f0>
        }
        else if(shoot_control.shoot_mode == SHOOT_CONTINUE_BULLET)
 8003e5a:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <shoot_set_mode+0x210>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2b05      	cmp	r3, #5
 8003e60:	d102      	bne.n	8003e68 <shoot_set_mode+0x1f0>
        {
            shoot_control.shoot_mode =SHOOT_READY_BULLET;
 8003e62:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <shoot_set_mode+0x210>)
 8003e64:	2202      	movs	r2, #2
 8003e66:	701a      	strb	r2, [r3, #0]
        }
    }
#endif

    //in some special gimbal behavior mode, shoot needs to be stopped
    if (gimbal_cmd_to_shoot_stop())
 8003e68:	f7fe fa14 	bl	8002294 <gimbal_cmd_to_shoot_stop>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <shoot_set_mode+0x200>
    {
        shoot_control.shoot_mode = SHOOT_STOP;
 8003e72:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <shoot_set_mode+0x210>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	701a      	strb	r2, [r3, #0]
    }

    last_s = shoot_control.shoot_rc->rc.s[SHOOT_RC_MODE_CHANNEL];
 8003e78:	4b03      	ldr	r3, [pc, #12]	; (8003e88 <shoot_set_mode+0x210>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	7adb      	ldrb	r3, [r3, #11]
 8003e7e:	b25a      	sxtb	r2, r3
 8003e80:	4b02      	ldr	r3, [pc, #8]	; (8003e8c <shoot_set_mode+0x214>)
 8003e82:	701a      	strb	r2, [r3, #0]
}
 8003e84:	bf00      	nop
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	2000553c 	.word	0x2000553c
 8003e8c:	20000004 	.word	0x20000004

08003e90 <shoot_feedback_update>:
  * @brief          update shoot related data
  * @param[in]      void
  * @retval         void
  */
static void shoot_feedback_update(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
    static float32_t speed_fliter_3 = 0.0f;
    //filter parameters
    static const float32_t fliter_num[3] = {1.725709860247969f, -0.75594777109163436f, 0.030237910843665373f};

    //second-order low-pass filter
    speed_fliter_1 = speed_fliter_2;
 8003e94:	4b8c      	ldr	r3, [pc, #560]	; (80040c8 <shoot_feedback_update+0x238>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a8c      	ldr	r2, [pc, #560]	; (80040cc <shoot_feedback_update+0x23c>)
 8003e9a:	6013      	str	r3, [r2, #0]
    speed_fliter_2 = speed_fliter_3;
 8003e9c:	4b8c      	ldr	r3, [pc, #560]	; (80040d0 <shoot_feedback_update+0x240>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a89      	ldr	r2, [pc, #548]	; (80040c8 <shoot_feedback_update+0x238>)
 8003ea2:	6013      	str	r3, [r2, #0]
    speed_fliter_3 = speed_fliter_2 * fliter_num[0] + speed_fliter_1 * fliter_num[1] + (shoot_control.shoot_motor_measure->speed_rpm * MOTOR_RPM_TO_SPEED) * fliter_num[2];
 8003ea4:	4b8b      	ldr	r3, [pc, #556]	; (80040d4 <shoot_feedback_update+0x244>)
 8003ea6:	ed93 7a00 	vldr	s14, [r3]
 8003eaa:	4b87      	ldr	r3, [pc, #540]	; (80040c8 <shoot_feedback_update+0x238>)
 8003eac:	edd3 7a00 	vldr	s15, [r3]
 8003eb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003eb4:	4b87      	ldr	r3, [pc, #540]	; (80040d4 <shoot_feedback_update+0x244>)
 8003eb6:	edd3 6a01 	vldr	s13, [r3, #4]
 8003eba:	4b84      	ldr	r3, [pc, #528]	; (80040cc <shoot_feedback_update+0x23c>)
 8003ebc:	edd3 7a00 	vldr	s15, [r3]
 8003ec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ec4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ec8:	4b83      	ldr	r3, [pc, #524]	; (80040d8 <shoot_feedback_update+0x248>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003ed0:	ee07 3a90 	vmov	s15, r3
 8003ed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ed8:	eddf 6a80 	vldr	s13, [pc, #512]	; 80040dc <shoot_feedback_update+0x24c>
 8003edc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003ee0:	4b7c      	ldr	r3, [pc, #496]	; (80040d4 <shoot_feedback_update+0x244>)
 8003ee2:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ee6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eee:	4b78      	ldr	r3, [pc, #480]	; (80040d0 <shoot_feedback_update+0x240>)
 8003ef0:	edc3 7a00 	vstr	s15, [r3]
    shoot_control.speed = speed_fliter_3;
 8003ef4:	4b76      	ldr	r3, [pc, #472]	; (80040d0 <shoot_feedback_update+0x240>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a77      	ldr	r2, [pc, #476]	; (80040d8 <shoot_feedback_update+0x248>)
 8003efa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

    //motor lap count reset.
    //because motor turns 36 laps, output axle turns 1 lap
    //here we convert motor data into output axle data, in order to control output axle angle
    if (shoot_control.shoot_motor_measure->ecd - shoot_control.shoot_motor_measure->last_ecd > SHOOT_PUSH_HALF_ECD_RANGE)
 8003efe:	4b76      	ldr	r3, [pc, #472]	; (80040d8 <shoot_feedback_update+0x248>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	4b74      	ldr	r3, [pc, #464]	; (80040d8 <shoot_feedback_update+0x248>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f14:	dd0a      	ble.n	8003f2c <shoot_feedback_update+0x9c>
    {
        shoot_control.ecd_count--;
 8003f16:	4b70      	ldr	r3, [pc, #448]	; (80040d8 <shoot_feedback_update+0x248>)
 8003f18:	f993 3096 	ldrsb.w	r3, [r3, #150]	; 0x96
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	b25a      	sxtb	r2, r3
 8003f24:	4b6c      	ldr	r3, [pc, #432]	; (80040d8 <shoot_feedback_update+0x248>)
 8003f26:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
 8003f2a:	e015      	b.n	8003f58 <shoot_feedback_update+0xc8>
    }
    else if (shoot_control.shoot_motor_measure->ecd - shoot_control.shoot_motor_measure->last_ecd < -SHOOT_PUSH_HALF_ECD_RANGE)
 8003f2c:	4b6a      	ldr	r3, [pc, #424]	; (80040d8 <shoot_feedback_update+0x248>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	4b68      	ldr	r3, [pc, #416]	; (80040d8 <shoot_feedback_update+0x248>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8003f42:	da09      	bge.n	8003f58 <shoot_feedback_update+0xc8>
    {
        shoot_control.ecd_count++;
 8003f44:	4b64      	ldr	r3, [pc, #400]	; (80040d8 <shoot_feedback_update+0x248>)
 8003f46:	f993 3096 	ldrsb.w	r3, [r3, #150]	; 0x96
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	b25a      	sxtb	r2, r3
 8003f52:	4b61      	ldr	r3, [pc, #388]	; (80040d8 <shoot_feedback_update+0x248>)
 8003f54:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
    }

    if (shoot_control.ecd_count == FULL_COUNT)
 8003f58:	4b5f      	ldr	r3, [pc, #380]	; (80040d8 <shoot_feedback_update+0x248>)
 8003f5a:	f993 3096 	ldrsb.w	r3, [r3, #150]	; 0x96
 8003f5e:	2b12      	cmp	r3, #18
 8003f60:	d104      	bne.n	8003f6c <shoot_feedback_update+0xdc>
    {
        shoot_control.ecd_count = -(FULL_COUNT - 1);
 8003f62:	4b5d      	ldr	r3, [pc, #372]	; (80040d8 <shoot_feedback_update+0x248>)
 8003f64:	22ef      	movs	r2, #239	; 0xef
 8003f66:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
 8003f6a:	e009      	b.n	8003f80 <shoot_feedback_update+0xf0>
    }
    else if (shoot_control.ecd_count == -FULL_COUNT)
 8003f6c:	4b5a      	ldr	r3, [pc, #360]	; (80040d8 <shoot_feedback_update+0x248>)
 8003f6e:	f993 3096 	ldrsb.w	r3, [r3, #150]	; 0x96
 8003f72:	f113 0f12 	cmn.w	r3, #18
 8003f76:	d103      	bne.n	8003f80 <shoot_feedback_update+0xf0>
    {
        shoot_control.ecd_count = FULL_COUNT - 1;
 8003f78:	4b57      	ldr	r3, [pc, #348]	; (80040d8 <shoot_feedback_update+0x248>)
 8003f7a:	2211      	movs	r2, #17
 8003f7c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
    }

    //calculate output axle angle
    shoot_control.angle = (shoot_control.ecd_count * SHOOT_PUSH_ECD_RANGE + shoot_control.shoot_motor_measure->ecd) * MOTOR_ECD_TO_ANGLE;
 8003f80:	4b55      	ldr	r3, [pc, #340]	; (80040d8 <shoot_feedback_update+0x248>)
 8003f82:	f993 3096 	ldrsb.w	r3, [r3, #150]	; 0x96
 8003f86:	035b      	lsls	r3, r3, #13
 8003f88:	4a53      	ldr	r2, [pc, #332]	; (80040d8 <shoot_feedback_update+0x248>)
 8003f8a:	6892      	ldr	r2, [r2, #8]
 8003f8c:	8812      	ldrh	r2, [r2, #0]
 8003f8e:	4413      	add	r3, r2
 8003f90:	ee07 3a90 	vmov	s15, r3
 8003f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f98:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80040e0 <shoot_feedback_update+0x250>
 8003f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fa0:	4b4d      	ldr	r3, [pc, #308]	; (80040d8 <shoot_feedback_update+0x248>)
 8003fa2:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
    //macro switch
    shoot_control.key = BUTTEN_TRIG_PIN;
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	484e      	ldr	r0, [pc, #312]	; (80040e4 <shoot_feedback_update+0x254>)
 8003faa:	f004 fb67 	bl	800867c <HAL_GPIO_ReadPin>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4b49      	ldr	r3, [pc, #292]	; (80040d8 <shoot_feedback_update+0x248>)
 8003fb4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    //mouse button
    shoot_control.last_press_l = shoot_control.press_l;
 8003fb8:	4b47      	ldr	r3, [pc, #284]	; (80040d8 <shoot_feedback_update+0x248>)
 8003fba:	f893 2097 	ldrb.w	r2, [r3, #151]	; 0x97
 8003fbe:	4b46      	ldr	r3, [pc, #280]	; (80040d8 <shoot_feedback_update+0x248>)
 8003fc0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
    shoot_control.last_press_r = shoot_control.press_r;
 8003fc4:	4b44      	ldr	r3, [pc, #272]	; (80040d8 <shoot_feedback_update+0x248>)
 8003fc6:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8003fca:	4b43      	ldr	r3, [pc, #268]	; (80040d8 <shoot_feedback_update+0x248>)
 8003fcc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    shoot_control.press_l = shoot_control.shoot_rc->mouse.press_l;
 8003fd0:	4b41      	ldr	r3, [pc, #260]	; (80040d8 <shoot_feedback_update+0x248>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	7c9a      	ldrb	r2, [r3, #18]
 8003fd6:	4b40      	ldr	r3, [pc, #256]	; (80040d8 <shoot_feedback_update+0x248>)
 8003fd8:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
    shoot_control.press_r = shoot_control.shoot_rc->mouse.press_r;
 8003fdc:	4b3e      	ldr	r3, [pc, #248]	; (80040d8 <shoot_feedback_update+0x248>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	7cda      	ldrb	r2, [r3, #19]
 8003fe2:	4b3d      	ldr	r3, [pc, #244]	; (80040d8 <shoot_feedback_update+0x248>)
 8003fe4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    //mouse button held time count
    if (shoot_control.press_l)
 8003fe8:	4b3b      	ldr	r3, [pc, #236]	; (80040d8 <shoot_feedback_update+0x248>)
 8003fea:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00e      	beq.n	8004010 <shoot_feedback_update+0x180>
    {
        if (shoot_control.press_l_time < PRESS_LONG_TIME)
 8003ff2:	4b39      	ldr	r3, [pc, #228]	; (80040d8 <shoot_feedback_update+0x248>)
 8003ff4:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8003ff8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003ffc:	d20c      	bcs.n	8004018 <shoot_feedback_update+0x188>
        {
            shoot_control.press_l_time++;
 8003ffe:	4b36      	ldr	r3, [pc, #216]	; (80040d8 <shoot_feedback_update+0x248>)
 8004000:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8004004:	3301      	adds	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	4b33      	ldr	r3, [pc, #204]	; (80040d8 <shoot_feedback_update+0x248>)
 800400a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 800400e:	e003      	b.n	8004018 <shoot_feedback_update+0x188>
        }
    }
    else
    {
        shoot_control.press_l_time = 0;
 8004010:	4b31      	ldr	r3, [pc, #196]	; (80040d8 <shoot_feedback_update+0x248>)
 8004012:	2200      	movs	r2, #0
 8004014:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    }

    if (shoot_control.press_r)
 8004018:	4b2f      	ldr	r3, [pc, #188]	; (80040d8 <shoot_feedback_update+0x248>)
 800401a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00e      	beq.n	8004040 <shoot_feedback_update+0x1b0>
    {
        if (shoot_control.press_r_time < PRESS_LONG_TIME)
 8004022:	4b2d      	ldr	r3, [pc, #180]	; (80040d8 <shoot_feedback_update+0x248>)
 8004024:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8004028:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800402c:	d20c      	bcs.n	8004048 <shoot_feedback_update+0x1b8>
        {
            shoot_control.press_r_time++;
 800402e:	4b2a      	ldr	r3, [pc, #168]	; (80040d8 <shoot_feedback_update+0x248>)
 8004030:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8004034:	3301      	adds	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	4b27      	ldr	r3, [pc, #156]	; (80040d8 <shoot_feedback_update+0x248>)
 800403a:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 800403e:	e003      	b.n	8004048 <shoot_feedback_update+0x1b8>
        }
    }
    else
    {
        shoot_control.press_r_time = 0;
 8004040:	4b25      	ldr	r3, [pc, #148]	; (80040d8 <shoot_feedback_update+0x248>)
 8004042:	2200      	movs	r2, #0
 8004044:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
    }

    //remote controller switch held at down position time count
    if (shoot_control.shoot_mode != SHOOT_STOP && switch_is_down(shoot_control.shoot_rc->rc.s[SHOOT_RC_MODE_CHANNEL]))
 8004048:	4b23      	ldr	r3, [pc, #140]	; (80040d8 <shoot_feedback_update+0x248>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d013      	beq.n	8004078 <shoot_feedback_update+0x1e8>
 8004050:	4b21      	ldr	r3, [pc, #132]	; (80040d8 <shoot_feedback_update+0x248>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	7adb      	ldrb	r3, [r3, #11]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d10e      	bne.n	8004078 <shoot_feedback_update+0x1e8>
    {

        if (shoot_control.rc_s_time < RC_S_LONG_TIME)
 800405a:	4b1f      	ldr	r3, [pc, #124]	; (80040d8 <shoot_feedback_update+0x248>)
 800405c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8004060:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004064:	d20c      	bcs.n	8004080 <shoot_feedback_update+0x1f0>
        {
            shoot_control.rc_s_time++;
 8004066:	4b1c      	ldr	r3, [pc, #112]	; (80040d8 <shoot_feedback_update+0x248>)
 8004068:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800406c:	3301      	adds	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	4b19      	ldr	r3, [pc, #100]	; (80040d8 <shoot_feedback_update+0x248>)
 8004072:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        if (shoot_control.rc_s_time < RC_S_LONG_TIME)
 8004076:	e003      	b.n	8004080 <shoot_feedback_update+0x1f0>
        }
    }
    else
    {
        shoot_control.rc_s_time = 0;
 8004078:	4b17      	ldr	r3, [pc, #92]	; (80040d8 <shoot_feedback_update+0x248>)
 800407a:	2200      	movs	r2, #0
 800407c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    }

    //mouse right button pressed down -> speed up friction motors
    //left button -> slow shoot         right button -> fast shoot
    static uint16_t up_time = 0;
    if (shoot_control.press_r)
 8004080:	4b15      	ldr	r3, [pc, #84]	; (80040d8 <shoot_feedback_update+0x248>)
 8004082:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <shoot_feedback_update+0x200>
    {
        up_time = UP_ADD_TIME;
 800408a:	4b17      	ldr	r3, [pc, #92]	; (80040e8 <shoot_feedback_update+0x258>)
 800408c:	2250      	movs	r2, #80	; 0x50
 800408e:	801a      	strh	r2, [r3, #0]
    }

    if (up_time > 0)
 8004090:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <shoot_feedback_update+0x258>)
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00d      	beq.n	80040b4 <shoot_feedback_update+0x224>
    {
        shoot_control.fric1_ramp.max_value = FRIC_UP;
 8004098:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <shoot_feedback_update+0x248>)
 800409a:	4a14      	ldr	r2, [pc, #80]	; (80040ec <shoot_feedback_update+0x25c>)
 800409c:	619a      	str	r2, [r3, #24]
        shoot_control.fric2_ramp.max_value = FRIC_UP;
 800409e:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <shoot_feedback_update+0x248>)
 80040a0:	4a12      	ldr	r2, [pc, #72]	; (80040ec <shoot_feedback_update+0x25c>)
 80040a2:	f8c3 202e 	str.w	r2, [r3, #46]	; 0x2e
        up_time--;
 80040a6:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <shoot_feedback_update+0x258>)
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	4b0e      	ldr	r3, [pc, #56]	; (80040e8 <shoot_feedback_update+0x258>)
 80040b0:	801a      	strh	r2, [r3, #0]
        shoot_control.fric1_ramp.max_value = FRIC_DOWN;
        shoot_control.fric2_ramp.max_value = FRIC_DOWN;
    }


}
 80040b2:	e006      	b.n	80040c2 <shoot_feedback_update+0x232>
        shoot_control.fric1_ramp.max_value = FRIC_DOWN;
 80040b4:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <shoot_feedback_update+0x248>)
 80040b6:	4a0e      	ldr	r2, [pc, #56]	; (80040f0 <shoot_feedback_update+0x260>)
 80040b8:	619a      	str	r2, [r3, #24]
        shoot_control.fric2_ramp.max_value = FRIC_DOWN;
 80040ba:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <shoot_feedback_update+0x248>)
 80040bc:	4a0c      	ldr	r2, [pc, #48]	; (80040f0 <shoot_feedback_update+0x260>)
 80040be:	f8c3 202e 	str.w	r2, [r3, #46]	; 0x2e
}
 80040c2:	bf00      	nop
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	20000340 	.word	0x20000340
 80040cc:	20000344 	.word	0x20000344
 80040d0:	20000348 	.word	0x20000348
 80040d4:	08014930 	.word	0x08014930
 80040d8:	2000553c 	.word	0x2000553c
 80040dc:	3b3ea2f1 	.word	0x3b3ea2f1
 80040e0:	37b2b8c2 	.word	0x37b2b8c2
 80040e4:	40020400 	.word	0x40020400
 80040e8:	2000034c 	.word	0x2000034c
 80040ec:	44fa0000 	.word	0x44fa0000
 80040f0:	44bb8000 	.word	0x44bb8000

080040f4 <trigger_motor_turn_back>:
  * @brief          push bullet motor inverse to handle bullet stuck
  * @param[in]      void
  * @retval         void
  */
static void trigger_motor_turn_back(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
    if( shoot_control.block_time < BLOCK_TIME)
 80040f8:	4b29      	ldr	r3, [pc, #164]	; (80041a0 <trigger_motor_turn_back+0xac>)
 80040fa:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 80040fe:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004102:	d206      	bcs.n	8004112 <trigger_motor_turn_back+0x1e>
    {
        shoot_control.speed_set = shoot_control.trigger_speed_set;
 8004104:	4b26      	ldr	r3, [pc, #152]	; (80041a0 <trigger_motor_turn_back+0xac>)
 8004106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800410a:	4a25      	ldr	r2, [pc, #148]	; (80041a0 <trigger_motor_turn_back+0xac>)
 800410c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004110:	e007      	b.n	8004122 <trigger_motor_turn_back+0x2e>
    }
    else
    {
        shoot_control.speed_set = -shoot_control.trigger_speed_set;
 8004112:	4b23      	ldr	r3, [pc, #140]	; (80041a0 <trigger_motor_turn_back+0xac>)
 8004114:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8004118:	eef1 7a67 	vneg.f32	s15, s15
 800411c:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <trigger_motor_turn_back+0xac>)
 800411e:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
    }

    if(fabs(shoot_control.speed) < BLOCK_TRIGGER_SPEED && shoot_control.block_time < BLOCK_TIME)
 8004122:	4b1f      	ldr	r3, [pc, #124]	; (80041a0 <trigger_motor_turn_back+0xac>)
 8004124:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004128:	eef0 7ae7 	vabs.f32	s15, s15
 800412c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004130:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004138:	d512      	bpl.n	8004160 <trigger_motor_turn_back+0x6c>
 800413a:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <trigger_motor_turn_back+0xac>)
 800413c:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8004140:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004144:	d20c      	bcs.n	8004160 <trigger_motor_turn_back+0x6c>
    {
        shoot_control.block_time++;
 8004146:	4b16      	ldr	r3, [pc, #88]	; (80041a0 <trigger_motor_turn_back+0xac>)
 8004148:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 800414c:	3301      	adds	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	4b13      	ldr	r3, [pc, #76]	; (80041a0 <trigger_motor_turn_back+0xac>)
 8004152:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
        shoot_control.reverse_time = 0;
 8004156:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <trigger_motor_turn_back+0xac>)
 8004158:	2200      	movs	r2, #0
 800415a:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 800415e:	e019      	b.n	8004194 <trigger_motor_turn_back+0xa0>
    }
    else if (shoot_control.block_time == BLOCK_TIME && shoot_control.reverse_time < REVERSE_TIME)
 8004160:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <trigger_motor_turn_back+0xac>)
 8004162:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8004166:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800416a:	d10e      	bne.n	800418a <trigger_motor_turn_back+0x96>
 800416c:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <trigger_motor_turn_back+0xac>)
 800416e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8004172:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004176:	d208      	bcs.n	800418a <trigger_motor_turn_back+0x96>
    {
        shoot_control.reverse_time++;
 8004178:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <trigger_motor_turn_back+0xac>)
 800417a:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800417e:	3301      	adds	r3, #1
 8004180:	b29a      	uxth	r2, r3
 8004182:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <trigger_motor_turn_back+0xac>)
 8004184:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8004188:	e004      	b.n	8004194 <trigger_motor_turn_back+0xa0>
    }
    else
    {
        shoot_control.block_time = 0;
 800418a:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <trigger_motor_turn_back+0xac>)
 800418c:	2200      	movs	r2, #0
 800418e:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
    }
}
 8004192:	bf00      	nop
 8004194:	bf00      	nop
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	2000553c 	.word	0x2000553c

080041a4 <shoot_bullet_control>:
  * @brief          shoot control. Control push bullet motor angle and complete one shoot
  * @param[in]      void
  * @retval         void
  */
static void shoot_bullet_control(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0

    //push bullet motor turn 1/10pi angle each time
    if (shoot_control.move_flag == 0)
 80041a8:	4b25      	ldr	r3, [pc, #148]	; (8004240 <shoot_bullet_control+0x9c>)
 80041aa:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d117      	bne.n	80041e2 <shoot_bullet_control+0x3e>
    {
        shoot_control.set_angle = rad_format(shoot_control.angle + PI_TEN);
 80041b2:	4b23      	ldr	r3, [pc, #140]	; (8004240 <shoot_bullet_control+0x9c>)
 80041b4:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80041b8:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004244 <shoot_bullet_control+0xa0>
 80041bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041c0:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8004248 <shoot_bullet_control+0xa4>
 80041c4:	eddf 0a21 	vldr	s1, [pc, #132]	; 800424c <shoot_bullet_control+0xa8>
 80041c8:	eeb0 0a67 	vmov.f32	s0, s15
 80041cc:	f000 ff5a 	bl	8005084 <loop_fp32_constrain>
 80041d0:	eef0 7a40 	vmov.f32	s15, s0
 80041d4:	4b1a      	ldr	r3, [pc, #104]	; (8004240 <shoot_bullet_control+0x9c>)
 80041d6:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
        shoot_control.move_flag = 1;
 80041da:	4b19      	ldr	r3, [pc, #100]	; (8004240 <shoot_bullet_control+0x9c>)
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
    }
    if(shoot_control.key == SWITCH_TRIGGER_OFF)
 80041e2:	4b17      	ldr	r3, [pc, #92]	; (8004240 <shoot_bullet_control+0x9c>)
 80041e4:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d102      	bne.n	80041f2 <shoot_bullet_control+0x4e>
    {
        shoot_control.shoot_mode = SHOOT_DONE;
 80041ec:	4b14      	ldr	r3, [pc, #80]	; (8004240 <shoot_bullet_control+0x9c>)
 80041ee:	2206      	movs	r2, #6
 80041f0:	701a      	strb	r2, [r3, #0]
    }
    //check if motor has reached target angle
    if (rad_format(shoot_control.set_angle - shoot_control.angle) > 0.05f)
 80041f2:	4b13      	ldr	r3, [pc, #76]	; (8004240 <shoot_bullet_control+0x9c>)
 80041f4:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80041f8:	4b11      	ldr	r3, [pc, #68]	; (8004240 <shoot_bullet_control+0x9c>)
 80041fa:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80041fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004202:	ed9f 1a11 	vldr	s2, [pc, #68]	; 8004248 <shoot_bullet_control+0xa4>
 8004206:	eddf 0a11 	vldr	s1, [pc, #68]	; 800424c <shoot_bullet_control+0xa8>
 800420a:	eeb0 0a67 	vmov.f32	s0, s15
 800420e:	f000 ff39 	bl	8005084 <loop_fp32_constrain>
 8004212:	eef0 7a40 	vmov.f32	s15, s0
 8004216:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004250 <shoot_bullet_control+0xac>
 800421a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800421e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004222:	dd06      	ble.n	8004232 <shoot_bullet_control+0x8e>
    {
        //if it hasn't reached, keep setting motor speed
        shoot_control.trigger_speed_set = TRIGGER_SPEED;
 8004224:	4b06      	ldr	r3, [pc, #24]	; (8004240 <shoot_bullet_control+0x9c>)
 8004226:	4a0b      	ldr	r2, [pc, #44]	; (8004254 <shoot_bullet_control+0xb0>)
 8004228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        trigger_motor_turn_back();
 800422c:	f7ff ff62 	bl	80040f4 <trigger_motor_turn_back>
    }
    else
    {
        shoot_control.move_flag = 0;
    }
}
 8004230:	e003      	b.n	800423a <shoot_bullet_control+0x96>
        shoot_control.move_flag = 0;
 8004232:	4b03      	ldr	r3, [pc, #12]	; (8004240 <shoot_bullet_control+0x9c>)
 8004234:	2200      	movs	r2, #0
 8004236:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
}
 800423a:	bf00      	nop
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	2000553c 	.word	0x2000553c
 8004244:	3ea0c49c 	.word	0x3ea0c49c
 8004248:	40490fdb 	.word	0x40490fdb
 800424c:	c0490fdb 	.word	0xc0490fdb
 8004250:	3d4ccccd 	.word	0x3d4ccccd
 8004254:	41200000 	.word	0x41200000

08004258 <usb_task>:
};



void usb_task(void *argument)
{
 8004258:	b5b0      	push	{r4, r5, r7, lr}
 800425a:	b08a      	sub	sp, #40	; 0x28
 800425c:	af02      	add	r7, sp, #8
 800425e:	6078      	str	r0, [r7, #4]
    //MX_USB_DEVICE_Init();
	DBGSerialMutexHandle = osMutexNew(&DBGSerialMutex_attributes);
 8004260:	4893      	ldr	r0, [pc, #588]	; (80044b0 <usb_task+0x258>)
 8004262:	f00b fc7e 	bl	800fb62 <osMutexNew>
 8004266:	4603      	mov	r3, r0
 8004268:	4a92      	ldr	r2, [pc, #584]	; (80044b4 <usb_task+0x25c>)
 800426a:	6013      	str	r3, [r2, #0]
	usart6RxBinarySemaphoreHandle = osSemaphoreNew(1, 1, &usart6RxBinarySemaphore_attributes);
 800426c:	4a92      	ldr	r2, [pc, #584]	; (80044b8 <usb_task+0x260>)
 800426e:	2101      	movs	r1, #1
 8004270:	2001      	movs	r0, #1
 8004272:	f00b fd84 	bl	800fd7e <osSemaphoreNew>
 8004276:	4603      	mov	r3, r0
 8004278:	4a90      	ldr	r2, [pc, #576]	; (80044bc <usb_task+0x264>)
 800427a:	6013      	str	r3, [r2, #0]
	RB_Init(&cmdBuffer, 512);
 800427c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004280:	488f      	ldr	r0, [pc, #572]	; (80044c0 <usb_task+0x268>)
 8004282:	f000 fdb3 	bl	8004dec <RB_Init>
	IO_Buffer_Init(&uart6RxBuffer, 512, usart6RxBinarySemaphoreHandle);
 8004286:	4b8d      	ldr	r3, [pc, #564]	; (80044bc <usb_task+0x264>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004290:	488c      	ldr	r0, [pc, #560]	; (80044c4 <usb_task+0x26c>)
 8004292:	f000 fa15 	bl	80046c0 <IO_Buffer_Init>

    error_list_usb_local = get_error_list_point();
 8004296:	f7fd fdf5 	bl	8001e84 <get_error_list_point>
 800429a:	4603      	mov	r3, r0
 800429c:	4a8a      	ldr	r2, [pc, #552]	; (80044c8 <usb_task+0x270>)
 800429e:	6013      	str	r3, [r2, #0]
     uint32_t res, res16;

     size_t recv_state_pos = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	61fb      	str	r3, [r7, #28]

     __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 80042a4:	4b89      	ldr	r3, [pc, #548]	; (80044cc <usb_task+0x274>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	4b88      	ldr	r3, [pc, #544]	; (80044cc <usb_task+0x274>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0210 	orr.w	r2, r2, #16
 80042b2:	60da      	str	r2, [r3, #12]
     HAL_UART_Receive_DMA(&huart6, uart6RxBuffer.buffer, uart6RxBuffer.size);
 80042b4:	4b83      	ldr	r3, [pc, #524]	; (80044c4 <usb_task+0x26c>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	4a82      	ldr	r2, [pc, #520]	; (80044c4 <usb_task+0x26c>)
 80042ba:	6892      	ldr	r2, [r2, #8]
 80042bc:	b292      	uxth	r2, r2
 80042be:	4619      	mov	r1, r3
 80042c0:	4882      	ldr	r0, [pc, #520]	; (80044cc <usb_task+0x274>)
 80042c2:	f007 fca6 	bl	800bc12 <HAL_UART_Receive_DMA>
     //initiate USB
     MX_USB_DEVICE_Init();
 80042c6:	f00f f809 	bl	80132dc <MX_USB_DEVICE_Init>

    while(1)
    {
    	IO_Buffer_Acquire(&uart6RxBuffer);
 80042ca:	487e      	ldr	r0, [pc, #504]	; (80044c4 <usb_task+0x26c>)
 80042cc:	f000 fa28 	bl	8004720 <IO_Buffer_Acquire>

    	    dbgprintf("\nbufferlen=%d\n",uart6RxBuffer.len);
 80042d0:	4b7c      	ldr	r3, [pc, #496]	; (80044c4 <usb_task+0x26c>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	4619      	mov	r1, r3
 80042d6:	487e      	ldr	r0, [pc, #504]	; (80044d0 <usb_task+0x278>)
 80042d8:	f000 fcf4 	bl	8004cc4 <dbgprintf>
    	    dbgbuf(uart6RxBuffer.buffer, uart6RxBuffer.len);
 80042dc:	4b79      	ldr	r3, [pc, #484]	; (80044c4 <usb_task+0x26c>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	4a78      	ldr	r2, [pc, #480]	; (80044c4 <usb_task+0x26c>)
 80042e2:	68d2      	ldr	r2, [r2, #12]
 80042e4:	4611      	mov	r1, r2
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fd56 	bl	8004d98 <dbgbuf>
    	    size_t i = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	61bb      	str	r3, [r7, #24]
    	    while (i < uart6RxBuffer.len)
 80042f0:	e0ca      	b.n	8004488 <usb_task+0x230>
    	    {
    	      uint8_t ch = uart6RxBuffer.buffer[i];
 80042f2:	4b74      	ldr	r3, [pc, #464]	; (80044c4 <usb_task+0x26c>)
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	4413      	add	r3, r2
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	75fb      	strb	r3, [r7, #23]
    	      switch (recv_state)
 80042fe:	4b75      	ldr	r3, [pc, #468]	; (80044d4 <usb_task+0x27c>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	2b06      	cmp	r3, #6
 8004304:	f200 80bd 	bhi.w	8004482 <usb_task+0x22a>
 8004308:	a201      	add	r2, pc, #4	; (adr r2, 8004310 <usb_task+0xb8>)
 800430a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430e:	bf00      	nop
 8004310:	0800432d 	.word	0x0800432d
 8004314:	08004347 	.word	0x08004347
 8004318:	0800436b 	.word	0x0800436b
 800431c:	0800437d 	.word	0x0800437d
 8004320:	080043b1 	.word	0x080043b1
 8004324:	080043d3 	.word	0x080043d3
 8004328:	080043fb 	.word	0x080043fb
    	      {
    	      case SOF:
    	    	if (ch == 0x05)
 800432c:	7dfb      	ldrb	r3, [r7, #23]
 800432e:	2b05      	cmp	r3, #5
 8004330:	f040 809e 	bne.w	8004470 <usb_task+0x218>
    	    	{
    	    	  frame.SOF = ch;
 8004334:	4a68      	ldr	r2, [pc, #416]	; (80044d8 <usb_task+0x280>)
 8004336:	7dfb      	ldrb	r3, [r7, #23]
 8004338:	7013      	strb	r3, [r2, #0]
    	    	  recv_state_pos = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
    	    	  recv_state = DLEN;
 800433e:	4b65      	ldr	r3, [pc, #404]	; (80044d4 <usb_task+0x27c>)
 8004340:	2201      	movs	r2, #1
 8004342:	701a      	strb	r2, [r3, #0]
    	    	}
    	    	break;
 8004344:	e094      	b.n	8004470 <usb_task+0x218>
    	      case DLEN:
    	    	*(((uint8_t *)&(frame.data_length))+recv_state_pos) = ch;
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	4a64      	ldr	r2, [pc, #400]	; (80044dc <usb_task+0x284>)
 800434a:	4413      	add	r3, r2
 800434c:	7dfa      	ldrb	r2, [r7, #23]
 800434e:	701a      	strb	r2, [r3, #0]
    	    	recv_state_pos++;
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	3301      	adds	r3, #1
 8004354:	61fb      	str	r3, [r7, #28]
    	    	if (recv_state_pos >=2)
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	2b01      	cmp	r3, #1
 800435a:	f240 808b 	bls.w	8004474 <usb_task+0x21c>
    	    	{
    	    	  recv_state_pos = 0;
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]
    	    	  recv_state = SEQ;
 8004362:	4b5c      	ldr	r3, [pc, #368]	; (80044d4 <usb_task+0x27c>)
 8004364:	2202      	movs	r2, #2
 8004366:	701a      	strb	r2, [r3, #0]
    	    	}
    	    	break;
 8004368:	e084      	b.n	8004474 <usb_task+0x21c>
    	      case SEQ:
    	    	frame.sequence = ch;
 800436a:	4a5b      	ldr	r2, [pc, #364]	; (80044d8 <usb_task+0x280>)
 800436c:	7dfb      	ldrb	r3, [r7, #23]
 800436e:	70d3      	strb	r3, [r2, #3]
    	    	recv_state_pos = 0;
 8004370:	2300      	movs	r3, #0
 8004372:	61fb      	str	r3, [r7, #28]
    	    	recv_state = CRC8;
 8004374:	4b57      	ldr	r3, [pc, #348]	; (80044d4 <usb_task+0x27c>)
 8004376:	2203      	movs	r2, #3
 8004378:	701a      	strb	r2, [r3, #0]
    	    	break;
 800437a:	e082      	b.n	8004482 <usb_task+0x22a>
    	      case CRC8:
    	    	frame.CRC8 = ch;
 800437c:	4a56      	ldr	r2, [pc, #344]	; (80044d8 <usb_task+0x280>)
 800437e:	7dfb      	ldrb	r3, [r7, #23]
 8004380:	7113      	strb	r3, [r2, #4]
    	    	crc8compute((void *)&frame.SOF, 5, &res);
 8004382:	f107 0310 	add.w	r3, r7, #16
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	f04f 0205 	mov.w	r2, #5
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	4851      	ldr	r0, [pc, #324]	; (80044d8 <usb_task+0x280>)
 8004392:	f000 fc1d 	bl	8004bd0 <crc8compute>
    	    	recv_state_pos = 0;
 8004396:	2300      	movs	r3, #0
 8004398:	61fb      	str	r3, [r7, #28]
    	    	if (res == 0)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d103      	bne.n	80043a8 <usb_task+0x150>
    	    	{
    	          recv_state = CMD;
 80043a0:	4b4c      	ldr	r3, [pc, #304]	; (80044d4 <usb_task+0x27c>)
 80043a2:	2204      	movs	r2, #4
 80043a4:	701a      	strb	r2, [r3, #0]
    	    	}
    	    	else
    	    	{
    	          recv_state = SOF;
    	    	}
    	      	break;
 80043a6:	e06c      	b.n	8004482 <usb_task+0x22a>
    	          recv_state = SOF;
 80043a8:	4b4a      	ldr	r3, [pc, #296]	; (80044d4 <usb_task+0x27c>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	701a      	strb	r2, [r3, #0]
    	      	break;
 80043ae:	e068      	b.n	8004482 <usb_task+0x22a>
    	      case CMD:
    	      	*(((uint8_t *)&(frame.cmd_id))+recv_state_pos) = ch;
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	4a4b      	ldr	r2, [pc, #300]	; (80044e0 <usb_task+0x288>)
 80043b4:	4413      	add	r3, r2
 80043b6:	7dfa      	ldrb	r2, [r7, #23]
 80043b8:	701a      	strb	r2, [r3, #0]
    	      	recv_state_pos++;
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	3301      	adds	r3, #1
 80043be:	61fb      	str	r3, [r7, #28]
    	      	if (recv_state_pos >=2)
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d958      	bls.n	8004478 <usb_task+0x220>
    	      	{
    	      	  recv_state_pos = 0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61fb      	str	r3, [r7, #28]
    	      	  recv_state = DATA;
 80043ca:	4b42      	ldr	r3, [pc, #264]	; (80044d4 <usb_task+0x27c>)
 80043cc:	2205      	movs	r2, #5
 80043ce:	701a      	strb	r2, [r3, #0]
    	      	}
    	    	break;
 80043d0:	e052      	b.n	8004478 <usb_task+0x220>
    	      case DATA:
    	        *(((uint8_t *)&(frame.data))+recv_state_pos) = ch;
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	4a43      	ldr	r2, [pc, #268]	; (80044e4 <usb_task+0x28c>)
 80043d6:	4413      	add	r3, r2
 80043d8:	7dfa      	ldrb	r2, [r7, #23]
 80043da:	701a      	strb	r2, [r3, #0]
    	        recv_state_pos++;
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	3301      	adds	r3, #1
 80043e0:	61fb      	str	r3, [r7, #28]
    	        if (recv_state_pos >= frame.data_length)
 80043e2:	4b3d      	ldr	r3, [pc, #244]	; (80044d8 <usb_task+0x280>)
 80043e4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	461a      	mov	r2, r3
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d344      	bcc.n	800447c <usb_task+0x224>
    	        {
    	//          recv_state_pos = 0;
    	          recv_state = CRC16;
 80043f2:	4b38      	ldr	r3, [pc, #224]	; (80044d4 <usb_task+0x27c>)
 80043f4:	2206      	movs	r2, #6
 80043f6:	701a      	strb	r2, [r3, #0]
    	        }
    	    	break;
 80043f8:	e040      	b.n	800447c <usb_task+0x224>
    	      case CRC16:
    	//        *(((uint8_t *)&(frame.CRC16))+recv_state_pos) = ch;
    	    	*(((uint8_t *)&(frame.data))+recv_state_pos) = ch;
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	4a39      	ldr	r2, [pc, #228]	; (80044e4 <usb_task+0x28c>)
 80043fe:	4413      	add	r3, r2
 8004400:	7dfa      	ldrb	r2, [r7, #23]
 8004402:	701a      	strb	r2, [r3, #0]
    	        recv_state_pos++;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	3301      	adds	r3, #1
 8004408:	61fb      	str	r3, [r7, #28]
    	        if (recv_state_pos >= frame.data_length + 2)
 800440a:	4b33      	ldr	r3, [pc, #204]	; (80044d8 <usb_task+0x280>)
 800440c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004410:	b29b      	uxth	r3, r3
 8004412:	3302      	adds	r3, #2
 8004414:	461a      	mov	r2, r3
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	4293      	cmp	r3, r2
 800441a:	d331      	bcc.n	8004480 <usb_task+0x228>
    	        {
    	          crc16compute((void *)&frame, (uint64_t)9+(uint64_t)frame.data_length, &res16);
 800441c:	4b2e      	ldr	r3, [pc, #184]	; (80044d8 <usb_task+0x280>)
 800441e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004422:	b29b      	uxth	r3, r3
 8004424:	b29a      	uxth	r2, r3
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	f112 0409 	adds.w	r4, r2, #9
 800442e:	f143 0500 	adc.w	r5, r3, #0
 8004432:	f107 030c 	add.w	r3, r7, #12
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	4622      	mov	r2, r4
 800443a:	462b      	mov	r3, r5
 800443c:	4826      	ldr	r0, [pc, #152]	; (80044d8 <usb_task+0x280>)
 800443e:	f000 fbdd 	bl	8004bfc <crc16compute>
    	          recv_state_pos = 0;
 8004442:	2300      	movs	r3, #0
 8004444:	61fb      	str	r3, [r7, #28]
    	          if (res16 == 0)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10d      	bne.n	8004468 <usb_task+0x210>
    	          {
    	            // TODO: Process function goes here
    	        	//dbgprintf("\ndx = %.1f, dy = %.1f\n", frame.data.demoCmd.dx, frame.data.demoCmd.dy);
    	        	// Assign value to X and Y after receiving.

    	        	 AI_X=frame.data.demoCmd.dx;
 800444c:	4b22      	ldr	r3, [pc, #136]	; (80044d8 <usb_task+0x280>)
 800444e:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8004452:	4a25      	ldr	r2, [pc, #148]	; (80044e8 <usb_task+0x290>)
 8004454:	6013      	str	r3, [r2, #0]
    	        	 AI_Y=frame.data.demoCmd.dy;
 8004456:	4b20      	ldr	r3, [pc, #128]	; (80044d8 <usb_task+0x280>)
 8004458:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800445c:	4a23      	ldr	r2, [pc, #140]	; (80044ec <usb_task+0x294>)
 800445e:	6013      	str	r3, [r2, #0]
    	        	 AI_t=0;
 8004460:	4b23      	ldr	r3, [pc, #140]	; (80044f0 <usb_task+0x298>)
 8004462:	f04f 0200 	mov.w	r2, #0
 8004466:	601a      	str	r2, [r3, #0]

    	          }
    	          recv_state = SOF;
 8004468:	4b1a      	ldr	r3, [pc, #104]	; (80044d4 <usb_task+0x27c>)
 800446a:	2200      	movs	r2, #0
 800446c:	701a      	strb	r2, [r3, #0]
    	        }
    	    	break;
 800446e:	e007      	b.n	8004480 <usb_task+0x228>
    	    	break;
 8004470:	bf00      	nop
 8004472:	e006      	b.n	8004482 <usb_task+0x22a>
    	    	break;
 8004474:	bf00      	nop
 8004476:	e004      	b.n	8004482 <usb_task+0x22a>
    	    	break;
 8004478:	bf00      	nop
 800447a:	e002      	b.n	8004482 <usb_task+0x22a>
    	    	break;
 800447c:	bf00      	nop
 800447e:	e000      	b.n	8004482 <usb_task+0x22a>
    	    	break;
 8004480:	bf00      	nop
    	      }

    	      i++;
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	3301      	adds	r3, #1
 8004486:	61bb      	str	r3, [r7, #24]
    	    while (i < uart6RxBuffer.len)
 8004488:	4b0e      	ldr	r3, [pc, #56]	; (80044c4 <usb_task+0x26c>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	429a      	cmp	r2, r3
 8004490:	f4ff af2f 	bcc.w	80042f2 <usb_task+0x9a>
    	    }

    	    HAL_UART_Receive_DMA(&huart6, uart6RxBuffer.buffer, uart6RxBuffer.size);
 8004494:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <usb_task+0x26c>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	4a0a      	ldr	r2, [pc, #40]	; (80044c4 <usb_task+0x26c>)
 800449a:	6892      	ldr	r2, [r2, #8]
 800449c:	b292      	uxth	r2, r2
 800449e:	4619      	mov	r1, r3
 80044a0:	480a      	ldr	r0, [pc, #40]	; (80044cc <usb_task+0x274>)
 80044a2:	f007 fbb6 	bl	800bc12 <HAL_UART_Receive_DMA>
//    	HAL_UART_Transmit(&huart6,TxData,10,0xffff);
        osDelay(1);
 80044a6:	2001      	movs	r0, #1
 80044a8:	f00b fb40 	bl	800fb2c <osDelay>
    {
 80044ac:	e70d      	b.n	80042ca <usb_task+0x72>
 80044ae:	bf00      	nop
 80044b0:	0801493c 	.word	0x0801493c
 80044b4:	2000562c 	.word	0x2000562c
 80044b8:	0801494c 	.word	0x0801494c
 80044bc:	20005648 	.word	0x20005648
 80044c0:	20005610 	.word	0x20005610
 80044c4:	200055f4 	.word	0x200055f4
 80044c8:	20005628 	.word	0x20005628
 80044cc:	20005ba8 	.word	0x20005ba8
 80044d0:	08014844 	.word	0x08014844
 80044d4:	2000034e 	.word	0x2000034e
 80044d8:	20005634 	.word	0x20005634
 80044dc:	20005635 	.word	0x20005635
 80044e0:	20005639 	.word	0x20005639
 80044e4:	2000563b 	.word	0x2000563b
 80044e8:	2000564c 	.word	0x2000564c
 80044ec:	20005630 	.word	0x20005630
 80044f0:	2000528c 	.word	0x2000528c

080044f4 <can_filter_init>:
  * @brief		initialize CAN1 and CAN2 (to active receiving)
  * @param		none
  * @retval		none
  */
void can_filter_init(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08a      	sub	sp, #40	; 0x28
 80044f8:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 80044fa:	2301      	movs	r3, #1
 80044fc:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 80044fe:	2300      	movs	r3, #0
 8004500:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8004502:	2301      	movs	r3, #1
 8004504:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 8004506:	2300      	movs	r3, #0
 8004508:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 800450a:	2300      	movs	r3, #0
 800450c:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 800450e:	2300      	movs	r3, #0
 8004510:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 8004512:	2300      	movs	r3, #0
 8004514:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 8004516:	2300      	movs	r3, #0
 8004518:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 800451a:	2300      	movs	r3, #0
 800451c:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 800451e:	463b      	mov	r3, r7
 8004520:	4619      	mov	r1, r3
 8004522:	480f      	ldr	r0, [pc, #60]	; (8004560 <can_filter_init+0x6c>)
 8004524:	f002 fcb4 	bl	8006e90 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 8004528:	480d      	ldr	r0, [pc, #52]	; (8004560 <can_filter_init+0x6c>)
 800452a:	f002 fd91 	bl	8007050 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800452e:	2102      	movs	r1, #2
 8004530:	480b      	ldr	r0, [pc, #44]	; (8004560 <can_filter_init+0x6c>)
 8004532:	f002 ffbe 	bl	80074b2 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 8004536:	230e      	movs	r3, #14
 8004538:	627b      	str	r3, [r7, #36]	; 0x24
    can_filter_st.FilterBank = 14;
 800453a:	230e      	movs	r3, #14
 800453c:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 800453e:	463b      	mov	r3, r7
 8004540:	4619      	mov	r1, r3
 8004542:	4808      	ldr	r0, [pc, #32]	; (8004564 <can_filter_init+0x70>)
 8004544:	f002 fca4 	bl	8006e90 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 8004548:	4806      	ldr	r0, [pc, #24]	; (8004564 <can_filter_init+0x70>)
 800454a:	f002 fd81 	bl	8007050 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 800454e:	2102      	movs	r1, #2
 8004550:	4804      	ldr	r0, [pc, #16]	; (8004564 <can_filter_init+0x70>)
 8004552:	f002 ffae 	bl	80074b2 <HAL_CAN_ActivateNotification>
}
 8004556:	bf00      	nop
 8004558:	3728      	adds	r7, #40	; 0x28
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	200056c8 	.word	0x200056c8
 8004564:	200056a0 	.word	0x200056a0

08004568 <fric_off>:
  * @brief          stop both two friction motors
  * @param          none
  * @retval         none
  */
void fric_off(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
    __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, FRIC_OFF);
 800456c:	4b07      	ldr	r3, [pc, #28]	; (800458c <fric_off+0x24>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004574:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, FRIC_OFF);
 8004576:	4b05      	ldr	r3, [pc, #20]	; (800458c <fric_off+0x24>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800457e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004580:	bf00      	nop
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	200057c4 	.word	0x200057c4

08004590 <fric1_on>:
  *                         ->FRIC_DOWN     slow speed
  *                         ->FRIC_OFF      stop
  * @retval         none
  */
void fric1_on(uint16_t cmd)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, cmd);
 800459a:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <fric1_on+0x20>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	88fa      	ldrh	r2, [r7, #6]
 80045a0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	200057c4 	.word	0x200057c4

080045b4 <fric2_on>:
  *                         ->FRIC_DOWN     slow speed
  *                         ->FRIC_OFF      stop
  * @retval         none
  */
void fric2_on(uint16_t cmd)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	4603      	mov	r3, r0
 80045bc:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, cmd);
 80045be:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <fric2_on+0x20>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	88fa      	ldrh	r2, [r7, #6]
 80045c4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	200057c4 	.word	0x200057c4

080045d8 <laser_on>:

#include "bsp_laser.h"
#include "main.h"

void laser_on(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LASER_GPIO_Port, LASER_Pin, GPIO_PIN_SET);
 80045dc:	2201      	movs	r2, #1
 80045de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045e2:	4802      	ldr	r0, [pc, #8]	; (80045ec <laser_on+0x14>)
 80045e4:	f004 f862 	bl	80086ac <HAL_GPIO_WritePin>
}
 80045e8:	bf00      	nop
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40021800 	.word	0x40021800

080045f0 <laser_off>:

void laser_off(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LASER_GPIO_Port, LASER_Pin, GPIO_PIN_RESET);
 80045f4:	2200      	movs	r2, #0
 80045f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045fa:	4802      	ldr	r0, [pc, #8]	; (8004604 <laser_off+0x14>)
 80045fc:	f004 f856 	bl	80086ac <HAL_GPIO_WritePin>
}
 8004600:	bf00      	nop
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40021800 	.word	0x40021800

08004608 <RC_Init>:
  * @param[in]      rx2_buf: memory buffer 2
  * @param[in]      dma_buf_num: data length
  * @retval         none
  */
void RC_Init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	4613      	mov	r3, r2
 8004614:	80fb      	strh	r3, [r7, #6]

    //enable the DMA transfer for the receiver request
    SET_BIT(huart1.Instance->CR3, USART_CR3_DMAR);
 8004616:	4b27      	ldr	r3, [pc, #156]	; (80046b4 <RC_Init+0xac>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695a      	ldr	r2, [r3, #20]
 800461c:	4b25      	ldr	r3, [pc, #148]	; (80046b4 <RC_Init+0xac>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004624:	615a      	str	r2, [r3, #20]

    //enable idle interrupt
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8004626:	4b23      	ldr	r3, [pc, #140]	; (80046b4 <RC_Init+0xac>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	4b21      	ldr	r3, [pc, #132]	; (80046b4 <RC_Init+0xac>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f042 0210 	orr.w	r2, r2, #16
 8004634:	60da      	str	r2, [r3, #12]

    //disable DMA
    __HAL_DMA_DISABLE(&hdma_usart1_rx);
 8004636:	4b20      	ldr	r3, [pc, #128]	; (80046b8 <RC_Init+0xb0>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	4b1e      	ldr	r3, [pc, #120]	; (80046b8 <RC_Init+0xb0>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0201 	bic.w	r2, r2, #1
 8004644:	601a      	str	r2, [r3, #0]
    while(hdma_usart1_rx.Instance->CR & DMA_SxCR_EN)
 8004646:	e007      	b.n	8004658 <RC_Init+0x50>
    {
        __HAL_DMA_DISABLE(&hdma_usart1_rx);
 8004648:	4b1b      	ldr	r3, [pc, #108]	; (80046b8 <RC_Init+0xb0>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	4b1a      	ldr	r3, [pc, #104]	; (80046b8 <RC_Init+0xb0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0201 	bic.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]
    while(hdma_usart1_rx.Instance->CR & DMA_SxCR_EN)
 8004658:	4b17      	ldr	r3, [pc, #92]	; (80046b8 <RC_Init+0xb0>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f0      	bne.n	8004648 <RC_Init+0x40>
    }

    hdma_usart1_rx.Instance->PAR = (uint32_t) & (USART1->DR);
 8004666:	4b14      	ldr	r3, [pc, #80]	; (80046b8 <RC_Init+0xb0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a14      	ldr	r2, [pc, #80]	; (80046bc <RC_Init+0xb4>)
 800466c:	609a      	str	r2, [r3, #8]
    //memory buffer 1
    hdma_usart1_rx.Instance->M0AR = (uint32_t)(rx1_buf);
 800466e:	4b12      	ldr	r3, [pc, #72]	; (80046b8 <RC_Init+0xb0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	60da      	str	r2, [r3, #12]
    //memory buffer 2
    hdma_usart1_rx.Instance->M1AR = (uint32_t)(rx2_buf);
 8004676:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <RC_Init+0xb0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	611a      	str	r2, [r3, #16]
    //data length
    hdma_usart1_rx.Instance->NDTR = dma_buf_num;
 800467e:	4b0e      	ldr	r3, [pc, #56]	; (80046b8 <RC_Init+0xb0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	88fa      	ldrh	r2, [r7, #6]
 8004684:	605a      	str	r2, [r3, #4]
    //enable double memory buffer
    SET_BIT(hdma_usart1_rx.Instance->CR, DMA_SxCR_DBM);
 8004686:	4b0c      	ldr	r3, [pc, #48]	; (80046b8 <RC_Init+0xb0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <RC_Init+0xb0>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004694:	601a      	str	r2, [r3, #0]

    //enable DMA
    __HAL_DMA_ENABLE(&hdma_usart1_rx);
 8004696:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <RC_Init+0xb0>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <RC_Init+0xb0>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f042 0201 	orr.w	r2, r2, #1
 80046a4:	601a      	str	r2, [r3, #0]
}
 80046a6:	bf00      	nop
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	20005ac0 	.word	0x20005ac0
 80046b8:	20005a00 	.word	0x20005a00
 80046bc:	40011004 	.word	0x40011004

080046c0 <IO_Buffer_Init>:

#include <stdlib.h>
#include <string.h>

void IO_Buffer_Init(IO_BufferTypeDef *buf, size_t size, osSemaphoreId sem)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  memset(buf, 0, sizeof(IO_BufferTypeDef));
 80046cc:	2214      	movs	r2, #20
 80046ce:	2100      	movs	r1, #0
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f00f fc21 	bl	8013f18 <memset>

  buf->external=false;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	701a      	strb	r2, [r3, #0]
  buf->buffer = malloc(size);
 80046dc:	68b8      	ldr	r0, [r7, #8]
 80046de:	f00f fbfd 	bl	8013edc <malloc>
 80046e2:	4603      	mov	r3, r0
 80046e4:	461a      	mov	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	605a      	str	r2, [r3, #4]
  buf->size = size;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	609a      	str	r2, [r3, #8]
  buf->len = 0;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	60da      	str	r2, [r3, #12]
  buf->sem = sem;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	611a      	str	r2, [r3, #16]

  // clear semaphore
  if (buf->sem != NULL)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d009      	beq.n	8004718 <IO_Buffer_Init+0x58>
  {
    while (osSemaphoreAcquire(buf->sem, 0) == osOK)
 8004704:	bf00      	nop
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2100      	movs	r1, #0
 800470c:	4618      	mov	r0, r3
 800470e:	f00b fbbf 	bl	800fe90 <osSemaphoreAcquire>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0f6      	beq.n	8004706 <IO_Buffer_Init+0x46>
    {
      ;
    }
  }
}
 8004718:	bf00      	nop
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <IO_Buffer_Acquire>:
  }
  buf->buffer=NULL;
}

osStatus IO_Buffer_Acquire(IO_BufferTypeDef *buf)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  if (buf == NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d102      	bne.n	8004734 <IO_Buffer_Acquire+0x14>
  {
    return osErrorOS;
 800472e:	f04f 33ff 	mov.w	r3, #4294967295
 8004732:	e00d      	b.n	8004750 <IO_Buffer_Acquire+0x30>
  }

  if (buf->sem != NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d008      	beq.n	800474e <IO_Buffer_Acquire+0x2e>
  {
    return osSemaphoreAcquire(buf->sem, osWaitForever);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	f04f 31ff 	mov.w	r1, #4294967295
 8004744:	4618      	mov	r0, r3
 8004746:	f00b fba3 	bl	800fe90 <osSemaphoreAcquire>
 800474a:	4603      	mov	r3, r0
 800474c:	e000      	b.n	8004750 <IO_Buffer_Acquire+0x30>
  }

  return osOK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <IO_Buffer_Release>:

osStatus IO_Buffer_Release(IO_BufferTypeDef *buf)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  if (buf == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d102      	bne.n	800476c <IO_Buffer_Release+0x14>
  {
    return osErrorOS;
 8004766:	f04f 33ff 	mov.w	r3, #4294967295
 800476a:	e00b      	b.n	8004784 <IO_Buffer_Release+0x2c>
  }

  if (buf->sem != NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d006      	beq.n	8004782 <IO_Buffer_Release+0x2a>
  {
    return osSemaphoreRelease(buf->sem);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	4618      	mov	r0, r3
 800477a:	f00b fbdb 	bl	800ff34 <osSemaphoreRelease>
 800477e:	4603      	mov	r3, r0
 8004780:	e000      	b.n	8004784 <IO_Buffer_Release+0x2c>
  }

  return osOK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <_ZN11probability3CRCC1Emhmmbb>:
namespace probability
{
	class CRC
	{
	public:
		CRC(uint32_t polynomial, uint8_t width, uint32_t initial_xor, uint32_t final_xor, bool reflect_data, bool reflect_remainder) :
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	4613      	mov	r3, r2
 800479a:	71fb      	strb	r3, [r7, #7]
			polynomial(polynomial),
			width(width),
			initial_xor(initial_xor),
			final_xor(final_xor),
			_reflect_data(reflect_data),
			_reflect_remainder(reflect_remainder)
 800479c:	4a0e      	ldr	r2, [pc, #56]	; (80047d8 <_ZN11probability3CRCC1Emhmmbb+0x4c>)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	605a      	str	r2, [r3, #4]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	79fa      	ldrb	r2, [r7, #7]
 80047ac:	721a      	strb	r2, [r3, #8]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	60da      	str	r2, [r3, #12]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	611a      	str	r2, [r3, #16]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	7f3a      	ldrb	r2, [r7, #28]
 80047be:	751a      	strb	r2, [r3, #20]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80047c6:	755a      	strb	r2, [r3, #21]
		{
			;
		}
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4618      	mov	r0, r3
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	08014964 	.word	0x08014964

080047dc <_ZN11probability3CRCD1Ev>:

		virtual ~CRC() { ; }
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	4a04      	ldr	r2, [pc, #16]	; (80047f8 <_ZN11probability3CRCD1Ev+0x1c>)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4618      	mov	r0, r3
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	08014964 	.word	0x08014964

080047fc <_ZN11probability3CRCD0Ev>:
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff ffe9 	bl	80047dc <_ZN11probability3CRCD1Ev>
 800480a:	2118      	movs	r1, #24
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f00f fb37 	bl	8013e80 <_ZdlPvj>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4618      	mov	r0, r3
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <_ZNK11probability3CRC7computeEPKvyPm>:

		const int32_t compute(const void* buffer, const uint64_t size, uint32_t* const crc) const
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af02      	add	r7, sp, #8
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	e9c7 2300 	strd	r2, r3, [r7]
		{
			if (crc == nullptr) { return 1; }
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <_ZNK11probability3CRC7computeEPKvyPm+0x18>
 8004830:	2301      	movs	r3, #1
 8004832:	e025      	b.n	8004880 <_ZNK11probability3CRC7computeEPKvyPm+0x64>

			int32_t status = 0;
 8004834:	2300      	movs	r3, #0
 8004836:	617b      	str	r3, [r7, #20]

			status = compute_partial_start(crc);
 8004838:	6a39      	ldr	r1, [r7, #32]
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 f8dd 	bl	80049fa <_ZNK11probability3CRC21compute_partial_startEPm>
 8004840:	6178      	str	r0, [r7, #20]
			if (0 != status) { return status; }
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <_ZNK11probability3CRC7computeEPKvyPm+0x30>
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	e019      	b.n	8004880 <_ZNK11probability3CRC7computeEPKvyPm+0x64>

			status = compute_partial(buffer, size, crc);
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004854:	68b9      	ldr	r1, [r7, #8]
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 f816 	bl	8004888 <_ZNK11probability3CRC15compute_partialEPKvyPm>
 800485c:	6178      	str	r0, [r7, #20]
			if (0 != status) { return status; }
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <_ZNK11probability3CRC7computeEPKvyPm+0x4c>
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	e00b      	b.n	8004880 <_ZNK11probability3CRC7computeEPKvyPm+0x64>

			status = compute_partial_stop(crc);
 8004868:	6a39      	ldr	r1, [r7, #32]
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 f8da 	bl	8004a24 <_ZNK11probability3CRC20compute_partial_stopEPm>
 8004870:	6178      	str	r0, [r7, #20]
			if (0 != status) { *crc = 0; }
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <_ZNK11probability3CRC7computeEPKvyPm+0x62>
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]

			return status;
 800487e:	697b      	ldr	r3, [r7, #20]
		}
 8004880:	4618      	mov	r0, r3
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <_ZNK11probability3CRC15compute_partialEPKvyPm>:

		const int32_t compute_partial(const void* buffer, const uint64_t size, uint32_t* const crc) const
 8004888:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800488c:	b08e      	sub	sp, #56	; 0x38
 800488e:	af00      	add	r7, sp, #0
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	e9c7 2300 	strd	r2, r3, [r7]
		{
			if (crc == nullptr) { return 1; }
 8004898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <_ZNK11probability3CRC15compute_partialEPKvyPm+0x1a>
 800489e:	2301      	movs	r3, #1
 80048a0:	e0a6      	b.n	80049f0 <_ZNK11probability3CRC15compute_partialEPKvyPm+0x168>

			const uint8_t* data = static_cast<const uint8_t*>(buffer);
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	613b      	str	r3, [r7, #16]
			uint32_t _crc = *crc;
 80048a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	637b      	str	r3, [r7, #52]	; 0x34

			if (width < 8)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	7a1b      	ldrb	r3, [r3, #8]
 80048b0:	2b07      	cmp	r3, #7
 80048b2:	d84d      	bhi.n	8004950 <_ZNK11probability3CRC15compute_partialEPKvyPm+0xc8>
			{
				uint8_t data_byte;
				for (uint64_t byte = 0; byte < size; byte++)
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80048c0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80048c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048c8:	4299      	cmp	r1, r3
 80048ca:	bf08      	it	eq
 80048cc:	4290      	cmpeq	r0, r2
 80048ce:	f080 8086 	bcs.w	80049de <_ZNK11probability3CRC15compute_partialEPKvyPm+0x156>
				{
					data_byte = reflect_data(data[byte]);
 80048d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4413      	add	r3, r2
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	4619      	mov	r1, r3
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f945 	bl	8004b6c <_ZNK11probability3CRC12reflect_dataEm>
 80048e2:	4603      	mov	r3, r0
 80048e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					for (uint8_t bit = 8; bit > 0; bit--)
 80048e8:	2308      	movs	r3, #8
 80048ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80048ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d023      	beq.n	800493e <_ZNK11probability3CRC15compute_partialEPKvyPm+0xb6>
					{
						_crc = _crc << 1;
 80048f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	637b      	str	r3, [r7, #52]	; 0x34
						if ((data_byte ^ _crc) & get_top_bit())
 80048fc:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8004900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004902:	ea82 0403 	eor.w	r4, r2, r3
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f8bb 	bl	8004a82 <_ZNK11probability3CRC11get_top_bitEv>
 800490c:	4603      	mov	r3, r0
 800490e:	4023      	ands	r3, r4
 8004910:	2b00      	cmp	r3, #0
 8004912:	bf14      	ite	ne
 8004914:	2301      	movne	r3, #1
 8004916:	2300      	moveq	r3, #0
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d004      	beq.n	8004928 <_ZNK11probability3CRC15compute_partialEPKvyPm+0xa0>
						{
							_crc ^= polynomial;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004924:	4053      	eors	r3, r2
 8004926:	637b      	str	r3, [r7, #52]	; 0x34
						}
						data_byte = data_byte << 1;
 8004928:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					for (uint8_t bit = 8; bit > 0; bit--)
 8004932:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004936:	3b01      	subs	r3, #1
 8004938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800493c:	e7d7      	b.n	80048ee <_ZNK11probability3CRC15compute_partialEPKvyPm+0x66>
				for (uint64_t byte = 0; byte < size; byte++)
 800493e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004942:	f112 0801 	adds.w	r8, r2, #1
 8004946:	f143 0900 	adc.w	r9, r3, #0
 800494a:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
 800494e:	e7b7      	b.n	80048c0 <_ZNK11probability3CRC15compute_partialEPKvyPm+0x38>
					}
				}
			}
			else
			{
				for (uint64_t byte = 0; byte < size; byte++)
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800495c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004964:	4299      	cmp	r1, r3
 8004966:	bf08      	it	eq
 8004968:	4290      	cmpeq	r0, r2
 800496a:	d238      	bcs.n	80049de <_ZNK11probability3CRC15compute_partialEPKvyPm+0x156>
				{
					_crc ^= (reflect_data(data[byte]) << (width - 8));
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4413      	add	r3, r2
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	4619      	mov	r1, r3
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 f8f8 	bl	8004b6c <_ZNK11probability3CRC12reflect_dataEm>
 800497c:	4602      	mov	r2, r0
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	7a1b      	ldrb	r3, [r3, #8]
 8004982:	3b08      	subs	r3, #8
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800498a:	4053      	eors	r3, r2
 800498c:	637b      	str	r3, [r7, #52]	; 0x34

					for (uint8_t bit = 8; bit > 0; bit--)
 800498e:	2308      	movs	r3, #8
 8004990:	75fb      	strb	r3, [r7, #23]
 8004992:	7dfb      	ldrb	r3, [r7, #23]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d01a      	beq.n	80049ce <_ZNK11probability3CRC15compute_partialEPKvyPm+0x146>
					{
						if (_crc & get_top_bit())
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 f872 	bl	8004a82 <_ZNK11probability3CRC11get_top_bitEv>
 800499e:	4602      	mov	r2, r0
 80049a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a2:	4013      	ands	r3, r2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	bf14      	ite	ne
 80049a8:	2301      	movne	r3, #1
 80049aa:	2300      	moveq	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d006      	beq.n	80049c0 <_ZNK11probability3CRC15compute_partialEPKvyPm+0x138>
						{
							_crc = (_crc << 1) ^ polynomial;
 80049b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b4:	005a      	lsls	r2, r3, #1
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	4053      	eors	r3, r2
 80049bc:	637b      	str	r3, [r7, #52]	; 0x34
 80049be:	e002      	b.n	80049c6 <_ZNK11probability3CRC15compute_partialEPKvyPm+0x13e>
						}
						else
						{
							_crc = (_crc << 1);
 80049c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	637b      	str	r3, [r7, #52]	; 0x34
					for (uint8_t bit = 8; bit > 0; bit--)
 80049c6:	7dfb      	ldrb	r3, [r7, #23]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	75fb      	strb	r3, [r7, #23]
 80049cc:	e7e1      	b.n	8004992 <_ZNK11probability3CRC15compute_partialEPKvyPm+0x10a>
				for (uint64_t byte = 0; byte < size; byte++)
 80049ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049d2:	1c54      	adds	r4, r2, #1
 80049d4:	f143 0500 	adc.w	r5, r3, #0
 80049d8:	e9c7 4506 	strd	r4, r5, [r7, #24]
 80049dc:	e7be      	b.n	800495c <_ZNK11probability3CRC15compute_partialEPKvyPm+0xd4>
						}
					}
				}
			}

			*crc = _crc & get_crc_mask();
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 f865 	bl	8004aae <_ZNK11probability3CRC12get_crc_maskEv>
 80049e4:	4602      	mov	r2, r0
 80049e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e8:	401a      	ands	r2, r3
 80049ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ec:	601a      	str	r2, [r3, #0]

			return 0;
 80049ee:	2300      	movs	r3, #0
		}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3738      	adds	r7, #56	; 0x38
 80049f4:	46bd      	mov	sp, r7
 80049f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080049fa <_ZNK11probability3CRC21compute_partial_startEPm>:

		const int32_t compute_partial_start(uint32_t* const crc) const
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	6039      	str	r1, [r7, #0]
		{
			if (crc == nullptr) { return 1; }
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <_ZNK11probability3CRC21compute_partial_startEPm+0x14>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e004      	b.n	8004a18 <_ZNK11probability3CRC21compute_partial_startEPm+0x1e>

			*crc = initial_xor;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	601a      	str	r2, [r3, #0]
			return 0;
 8004a16:	2300      	movs	r3, #0
		}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <_ZNK11probability3CRC20compute_partial_stopEPm>:

		const int32_t compute_partial_stop(uint32_t* const crc) const
 8004a24:	b590      	push	{r4, r7, lr}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
		{
			if (crc == nullptr) { return 1; }
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <_ZNK11probability3CRC20compute_partial_stopEPm+0x14>
 8004a34:	2301      	movs	r3, #1
 8004a36:	e020      	b.n	8004a7a <_ZNK11probability3CRC20compute_partial_stopEPm+0x56>

			uint32_t _crc = *crc;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	60fb      	str	r3, [r7, #12]
			if (width < 8)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	7a1b      	ldrb	r3, [r3, #8]
 8004a42:	2b07      	cmp	r3, #7
 8004a44:	d807      	bhi.n	8004a56 <_ZNK11probability3CRC20compute_partial_stopEPm+0x32>
			{
				_crc = (uint32_t)(_crc << (8 - width));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	7a1b      	ldrb	r3, [r3, #8]
 8004a4a:	f1c3 0308 	rsb	r3, r3, #8
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	60fb      	str	r3, [r7, #12]
			}

			*crc = (reflect_remainder(_crc) ^ final_xor) & get_crc_mask();
 8004a56:	68f9      	ldr	r1, [r7, #12]
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f84e 	bl	8004afa <_ZNK11probability3CRC17reflect_remainderEm>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	ea82 0403 	eor.w	r4, r2, r3
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f820 	bl	8004aae <_ZNK11probability3CRC12get_crc_maskEv>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	ea04 0203 	and.w	r2, r4, r3
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	601a      	str	r2, [r3, #0]

			return 0;
 8004a78:	2300      	movs	r3, #0
		}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd90      	pop	{r4, r7, pc}

08004a82 <_ZNK11probability3CRC11get_top_bitEv>:
		const uint32_t initial_xor;
		const uint32_t final_xor;
		const bool _reflect_data;
		const bool _reflect_remainder;

		const uint32_t get_top_bit() const
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
		{
			return ((width < 8) ? (1u << 7) : (uint32_t)(1ul << (width - 1)));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	7a1b      	ldrb	r3, [r3, #8]
 8004a8e:	2b07      	cmp	r3, #7
 8004a90:	d906      	bls.n	8004aa0 <_ZNK11probability3CRC11get_top_bitEv+0x1e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	7a1b      	ldrb	r3, [r3, #8]
 8004a96:	3b01      	subs	r3, #1
 8004a98:	2201      	movs	r2, #1
 8004a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9e:	e000      	b.n	8004aa2 <_ZNK11probability3CRC11get_top_bitEv+0x20>
 8004aa0:	2380      	movs	r3, #128	; 0x80
		}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <_ZNK11probability3CRC12get_crc_maskEv>:

		const uint32_t get_crc_mask() const
 8004aae:	b4f0      	push	{r4, r5, r6, r7}
 8004ab0:	b082      	sub	sp, #8
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
		{
			return ((width < 8) ? ((1u << 8) - 1) : (uint32_t)((uint64_t)(1ull << width) - 1));
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	7a09      	ldrb	r1, [r1, #8]
 8004aba:	2907      	cmp	r1, #7
 8004abc:	d917      	bls.n	8004aee <_ZNK11probability3CRC12get_crc_maskEv+0x40>
 8004abe:	6879      	ldr	r1, [r7, #4]
 8004ac0:	7a09      	ldrb	r1, [r1, #8]
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	f04f 0001 	mov.w	r0, #1
 8004ac8:	f04f 0100 	mov.w	r1, #0
 8004acc:	f1a4 0620 	sub.w	r6, r4, #32
 8004ad0:	f1c4 0520 	rsb	r5, r4, #32
 8004ad4:	fa01 f304 	lsl.w	r3, r1, r4
 8004ad8:	fa00 f606 	lsl.w	r6, r0, r6
 8004adc:	4333      	orrs	r3, r6
 8004ade:	fa20 f505 	lsr.w	r5, r0, r5
 8004ae2:	432b      	orrs	r3, r5
 8004ae4:	fa00 f204 	lsl.w	r2, r0, r4
 8004ae8:	4613      	mov	r3, r2
 8004aea:	3b01      	subs	r3, #1
 8004aec:	e000      	b.n	8004af0 <_ZNK11probability3CRC12get_crc_maskEv+0x42>
 8004aee:	23ff      	movs	r3, #255	; 0xff
		}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bcf0      	pop	{r4, r5, r6, r7}
 8004af8:	4770      	bx	lr

08004afa <_ZNK11probability3CRC17reflect_remainderEm>:

		const uint32_t reflect_remainder(const uint32_t data) const
 8004afa:	b480      	push	{r7}
 8004afc:	b087      	sub	sp, #28
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	6039      	str	r1, [r7, #0]
		{
			if (_reflect_remainder)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	7d5b      	ldrb	r3, [r3, #21]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d028      	beq.n	8004b5e <_ZNK11probability3CRC17reflect_remainderEm+0x64>
			{
				uint32_t reflection = 0x0;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]
				uint32_t _data = data;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	613b      	str	r3, [r7, #16]
				const uint8_t nbits = (width < 8) ? 8 : width;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	7a1b      	ldrb	r3, [r3, #8]
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	bf38      	it	cc
 8004b1c:	2308      	movcc	r3, #8
 8004b1e:	73bb      	strb	r3, [r7, #14]

				for (uint8_t bit = 0; bit < nbits; bit++)
 8004b20:	2300      	movs	r3, #0
 8004b22:	73fb      	strb	r3, [r7, #15]
 8004b24:	7bfa      	ldrb	r2, [r7, #15]
 8004b26:	7bbb      	ldrb	r3, [r7, #14]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d216      	bcs.n	8004b5a <_ZNK11probability3CRC17reflect_remainderEm+0x60>
				{
					if (_data & 0x01)
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <_ZNK11probability3CRC17reflect_remainderEm+0x52>
					{
						reflection |= (1 << ((nbits - 1) - bit));
 8004b36:	7bbb      	ldrb	r3, [r7, #14]
 8004b38:	1e5a      	subs	r2, r3, #1
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2201      	movs	r2, #1
 8004b40:	fa02 f303 	lsl.w	r3, r2, r3
 8004b44:	461a      	mov	r2, r3
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]
					}
					_data = (_data >> 1);
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	085b      	lsrs	r3, r3, #1
 8004b50:	613b      	str	r3, [r7, #16]
				for (uint8_t bit = 0; bit < nbits; bit++)
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
 8004b54:	3301      	adds	r3, #1
 8004b56:	73fb      	strb	r3, [r7, #15]
 8004b58:	e7e4      	b.n	8004b24 <_ZNK11probability3CRC17reflect_remainderEm+0x2a>
				}

				return reflection;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	e000      	b.n	8004b60 <_ZNK11probability3CRC17reflect_remainderEm+0x66>
			}
			else
			{
				return data;
 8004b5e:	683b      	ldr	r3, [r7, #0]
			}
		}
 8004b60:	4618      	mov	r0, r3
 8004b62:	371c      	adds	r7, #28
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <_ZNK11probability3CRC12reflect_dataEm>:

		const uint32_t reflect_data(const uint32_t data) const
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
		{
			if (_reflect_data)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	7d1b      	ldrb	r3, [r3, #20]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d020      	beq.n	8004bc0 <_ZNK11probability3CRC12reflect_dataEm+0x54>
			{
				uint32_t reflection = 0x0;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	617b      	str	r3, [r7, #20]
				uint32_t _data = data;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	613b      	str	r3, [r7, #16]

				for (uint8_t bit = 0; bit < 8; bit++)
 8004b86:	2300      	movs	r3, #0
 8004b88:	73fb      	strb	r3, [r7, #15]
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
 8004b8c:	2b07      	cmp	r3, #7
 8004b8e:	d815      	bhi.n	8004bbc <_ZNK11probability3CRC12reflect_dataEm+0x50>
				{
					if (_data & 0x01)
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d009      	beq.n	8004bae <_ZNK11probability3CRC12reflect_dataEm+0x42>
					{
						reflection |= (1 << (7 - bit));
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
 8004b9c:	f1c3 0307 	rsb	r3, r3, #7
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	617b      	str	r3, [r7, #20]
					}
					_data = (_data >> 1);
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	085b      	lsrs	r3, r3, #1
 8004bb2:	613b      	str	r3, [r7, #16]
				for (uint8_t bit = 0; bit < 8; bit++)
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	73fb      	strb	r3, [r7, #15]
 8004bba:	e7e6      	b.n	8004b8a <_ZNK11probability3CRC12reflect_dataEm+0x1e>
				}

				return reflection;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	e000      	b.n	8004bc2 <_ZNK11probability3CRC12reflect_dataEm+0x56>
			}
			else
			{
				return data;
 8004bc0:	683b      	ldr	r3, [r7, #0]
			}
		}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	371c      	adds	r7, #28
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
	...

08004bd0 <crc8compute>:

probability::CRC crc8(0x31, 8, 0xFF, 0x00, true, true);
probability::CRC crc16(0x1021, 16, 0xFFFF, 0x0000, true, true);

int32_t crc8compute(const void *buffer, const uint64_t size,
		uint32_t *const crc) {
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af02      	add	r7, sp, #8
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	e9c7 2300 	strd	r2, r3, [r7]
	return crc8.compute(buffer, size, crc);
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004be4:	68f9      	ldr	r1, [r7, #12]
 8004be6:	4804      	ldr	r0, [pc, #16]	; (8004bf8 <crc8compute+0x28>)
 8004be8:	f7ff fe18 	bl	800481c <_ZNK11probability3CRC7computeEPKvyPm>
 8004bec:	4603      	mov	r3, r0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20000350 	.word	0x20000350

08004bfc <crc16compute>:

int32_t crc16compute(const void *buffer, const uint64_t size,
		uint32_t *const crc) {
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af02      	add	r7, sp, #8
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	e9c7 2300 	strd	r2, r3, [r7]
	return crc16.compute(buffer, size, crc);
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c10:	68f9      	ldr	r1, [r7, #12]
 8004c12:	4804      	ldr	r0, [pc, #16]	; (8004c24 <crc16compute+0x28>)
 8004c14:	f7ff fe02 	bl	800481c <_ZNK11probability3CRC7computeEPKvyPm>
 8004c18:	4603      	mov	r3, r0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20000368 	.word	0x20000368

08004c28 <_Z41__static_initialization_and_destruction_0ii>:
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af04      	add	r7, sp, #16
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d11e      	bne.n	8004c76 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d119      	bne.n	8004c76 <_Z41__static_initialization_and_destruction_0ii+0x4e>
probability::CRC crc8(0x31, 8, 0xFF, 0x00, true, true);
 8004c42:	2301      	movs	r3, #1
 8004c44:	9302      	str	r3, [sp, #8]
 8004c46:	2301      	movs	r3, #1
 8004c48:	9301      	str	r3, [sp, #4]
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	23ff      	movs	r3, #255	; 0xff
 8004c50:	2208      	movs	r2, #8
 8004c52:	2131      	movs	r1, #49	; 0x31
 8004c54:	4811      	ldr	r0, [pc, #68]	; (8004c9c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004c56:	f7ff fd99 	bl	800478c <_ZN11probability3CRCC1Emhmmbb>
probability::CRC crc16(0x1021, 16, 0xFFFF, 0x0000, true, true);
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	9302      	str	r3, [sp, #8]
 8004c5e:	2301      	movs	r3, #1
 8004c60:	9301      	str	r3, [sp, #4]
 8004c62:	2300      	movs	r3, #0
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c6a:	2210      	movs	r2, #16
 8004c6c:	f241 0121 	movw	r1, #4129	; 0x1021
 8004c70:	480b      	ldr	r0, [pc, #44]	; (8004ca0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004c72:	f7ff fd8b 	bl	800478c <_ZN11probability3CRCC1Emhmmbb>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10a      	bne.n	8004c92 <_Z41__static_initialization_and_destruction_0ii+0x6a>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d105      	bne.n	8004c92 <_Z41__static_initialization_and_destruction_0ii+0x6a>
 8004c86:	4806      	ldr	r0, [pc, #24]	; (8004ca0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004c88:	f7ff fda8 	bl	80047dc <_ZN11probability3CRCD1Ev>
probability::CRC crc8(0x31, 8, 0xFF, 0x00, true, true);
 8004c8c:	4803      	ldr	r0, [pc, #12]	; (8004c9c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004c8e:	f7ff fda5 	bl	80047dc <_ZN11probability3CRCD1Ev>
}
 8004c92:	bf00      	nop
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20000350 	.word	0x20000350
 8004ca0:	20000368 	.word	0x20000368

08004ca4 <_GLOBAL__sub_I_crc8>:
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004cac:	2001      	movs	r0, #1
 8004cae:	f7ff ffbb 	bl	8004c28 <_Z41__static_initialization_and_destruction_0ii>
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <_GLOBAL__sub_D_crc8>:
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	f7ff ffb3 	bl	8004c28 <_Z41__static_initialization_and_destruction_0ii>
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <dbgprintf>:

extern osMutexId DBGSerialMutexHandle;
extern UART_HandleTypeDef huart8;

int dbgprintf(const char *format, ...)
{
 8004cc4:	b40f      	push	{r0, r1, r2, r3}
 8004cc6:	b5b0      	push	{r4, r5, r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	466b      	mov	r3, sp
 8004cce:	461d      	mov	r5, r3
  va_list _args;
  va_start(_args, format);
 8004cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cd4:	607b      	str	r3, [r7, #4]
  va_list args;
  va_copy(args, _args);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	603b      	str	r3, [r7, #0]
  char buf[vsnprintf(NULL, 0, format, _args) + 1];
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a3a      	ldr	r2, [r7, #32]
 8004cde:	2100      	movs	r1, #0
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	f00f fa07 	bl	80140f4 <vsniprintf>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	1c5c      	adds	r4, r3, #1
 8004cea:	1e63      	subs	r3, r4, #1
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	4623      	mov	r3, r4
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f04f 0100 	mov.w	r1, #0
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	00cb      	lsls	r3, r1, #3
 8004d00:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004d04:	00c2      	lsls	r2, r0, #3
 8004d06:	4623      	mov	r3, r4
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f04f 0100 	mov.w	r1, #0
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	00cb      	lsls	r3, r1, #3
 8004d18:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004d1c:	00c2      	lsls	r2, r0, #3
 8004d1e:	4623      	mov	r3, r4
 8004d20:	3307      	adds	r3, #7
 8004d22:	08db      	lsrs	r3, r3, #3
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	ebad 0d03 	sub.w	sp, sp, r3
 8004d2a:	466b      	mov	r3, sp
 8004d2c:	3300      	adds	r3, #0
 8004d2e:	60bb      	str	r3, [r7, #8]
  va_end(_args);

  vsnprintf(buf, sizeof(buf), format, args);
 8004d30:	68b8      	ldr	r0, [r7, #8]
 8004d32:	4621      	mov	r1, r4
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	6a3a      	ldr	r2, [r7, #32]
 8004d38:	f00f f9dc 	bl	80140f4 <vsniprintf>
  va_end(args);

  if (osMutexAcquire(DBGSerialMutexHandle, osWaitForever) == osOK)
 8004d3c:	4b14      	ldr	r3, [pc, #80]	; (8004d90 <dbgprintf+0xcc>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f04f 31ff 	mov.w	r1, #4294967295
 8004d44:	4618      	mov	r0, r3
 8004d46:	f00a ff92 	bl	800fc6e <osMutexAcquire>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d111      	bne.n	8004d74 <dbgprintf+0xb0>
  {
    HAL_UART_Transmit(&huart8, (uint8_t*) buf, strlen(buf), 0xFFFF);
 8004d50:	68bc      	ldr	r4, [r7, #8]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fb fa4b 	bl	80001f0 <strlen>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d62:	4621      	mov	r1, r4
 8004d64:	480b      	ldr	r0, [pc, #44]	; (8004d94 <dbgprintf+0xd0>)
 8004d66:	f006 fec2 	bl	800baee <HAL_UART_Transmit>
    osMutexRelease(DBGSerialMutexHandle);
 8004d6a:	4b09      	ldr	r3, [pc, #36]	; (8004d90 <dbgprintf+0xcc>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f00a ffc8 	bl	800fd04 <osMutexRelease>
  }

  return strlen(buf);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fb fa3a 	bl	80001f0 <strlen>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	46ad      	mov	sp, r5
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8004d8a:	b004      	add	sp, #16
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	2000562c 	.word	0x2000562c
 8004d94:	20005b64 	.word	0x20005b64

08004d98 <dbgbuf>:

HAL_StatusTypeDef dbgbuf(const uint8_t *buf, const size_t len)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef res = HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	73fb      	strb	r3, [r7, #15]
  if (osMutexAcquire(DBGSerialMutexHandle, osWaitForever) == osOK)
 8004da6:	4b0f      	ldr	r3, [pc, #60]	; (8004de4 <dbgbuf+0x4c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f04f 31ff 	mov.w	r1, #4294967295
 8004dae:	4618      	mov	r0, r3
 8004db0:	f00a ff5d 	bl	800fc6e <osMutexAcquire>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10e      	bne.n	8004dd8 <dbgbuf+0x40>
  {
    res = HAL_UART_Transmit(&huart8, (uint8_t*) buf, len, 0xFFFF);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	4808      	ldr	r0, [pc, #32]	; (8004de8 <dbgbuf+0x50>)
 8004dc6:	f006 fe92 	bl	800baee <HAL_UART_Transmit>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	73fb      	strb	r3, [r7, #15]
    osMutexRelease(DBGSerialMutexHandle);
 8004dce:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <dbgbuf+0x4c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f00a ff96 	bl	800fd04 <osMutexRelease>
  }

  return res;
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	2000562c 	.word	0x2000562c
 8004de8:	20005b64 	.word	0x20005b64

08004dec <RB_Init>:

#include <stdlib.h>
#include "cmsis_os.h"

void RB_Init(RingBuffer *rb, size_t size)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  rb->external = false;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	701a      	strb	r2, [r3, #0]
  rb->buffer = malloc(size);
 8004dfc:	6838      	ldr	r0, [r7, #0]
 8004dfe:	f00f f86d 	bl	8013edc <malloc>
 8004e02:	4603      	mov	r3, r0
 8004e04:	461a      	mov	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	605a      	str	r2, [r3, #4]
  rb->head = 0;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	609a      	str	r2, [r3, #8]
  rb->tail = 0;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	60da      	str	r2, [r3, #12]
  rb->size = size;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	611a      	str	r2, [r3, #16]
}
 8004e1c:	bf00      	nop
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <ramp_init>:
  * @param[in]      max: maximum value
  * @param[in]      min: minimum value
  * @retval         none
  */
void ramp_init(ramp_function_source_t *ramp_source_type, float32_t frame_period, float32_t max, float32_t min)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004e30:	edc7 0a01 	vstr	s1, [r7, #4]
 8004e34:	ed87 1a00 	vstr	s2, [r7]
    ramp_source_type->frame_period = frame_period;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	611a      	str	r2, [r3, #16]
    ramp_source_type->max_value = max;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	60da      	str	r2, [r3, #12]
    ramp_source_type->min_value = min;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	609a      	str	r2, [r3, #8]
    ramp_source_type->input = 0.0f;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]
    ramp_source_type->out = 0.0f;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	605a      	str	r2, [r3, #4]
}
 8004e5a:	bf00      	nop
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <ramp_calc>:
  * @param[in]      ramp_source_type: ramp function struct pointer
  * @param[in]      input: input value
  * @retval         none
  */
void ramp_calc(ramp_function_source_t *ramp_source_type, float32_t input)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	ed87 0a00 	vstr	s0, [r7]
    ramp_source_type->input = input;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	601a      	str	r2, [r3, #0]
    ramp_source_type->out += ramp_source_type->input * ramp_source_type->frame_period;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	461a      	mov	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6819      	ldr	r1, [r3, #0]
 8004e84:	460b      	mov	r3, r1
 8004e86:	4619      	mov	r1, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	ee07 1a90 	vmov	s15, r1
 8004e90:	ee07 3a10 	vmov	s14, r3
 8004e94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e98:	ee07 2a10 	vmov	s14, r2
 8004e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	ee17 2a90 	vmov	r2, s15
 8004ea6:	605a      	str	r2, [r3, #4]
    if (ramp_source_type->out > ramp_source_type->max_value)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	461a      	mov	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	ee07 2a90 	vmov	s15, r2
 8004eb8:	ee07 3a10 	vmov	s14, r3
 8004ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec4:	dd06      	ble.n	8004ed4 <ramp_calc+0x6e>
    {
        ramp_source_type->out = ramp_source_type->max_value;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	461a      	mov	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	605a      	str	r2, [r3, #4]
    }
    else if (ramp_source_type->out < ramp_source_type->min_value)
    {
        ramp_source_type->out = ramp_source_type->min_value;
    }
}
 8004ed2:	e015      	b.n	8004f00 <ramp_calc+0x9a>
    else if (ramp_source_type->out < ramp_source_type->min_value)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	461a      	mov	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	ee07 2a90 	vmov	s15, r2
 8004ee4:	ee07 3a10 	vmov	s14, r3
 8004ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef0:	d400      	bmi.n	8004ef4 <ramp_calc+0x8e>
}
 8004ef2:	e005      	b.n	8004f00 <ramp_calc+0x9a>
        ramp_source_type->out = ramp_source_type->min_value;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	461a      	mov	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	605a      	str	r2, [r3, #4]
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <first_order_filter_init>:
  * @param[in]      frame_period: time interval, unit: s
  * @param[in]      num: filter parameter
  * @retval         none
  */
void first_order_filter_init(first_order_filter_type_t *first_order_filter_type, float32_t frame_period, const float32_t num[1])
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	ed87 0a02 	vstr	s0, [r7, #8]
 8004f18:	6079      	str	r1, [r7, #4]
    first_order_filter_type->frame_period = frame_period;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	60da      	str	r2, [r3, #12]
    first_order_filter_type->num[0] = num[0];
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	609a      	str	r2, [r3, #8]
    first_order_filter_type->input = 0.0f;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]
    first_order_filter_type->out = 0.0f;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f04f 0200 	mov.w	r2, #0
 8004f36:	605a      	str	r2, [r3, #4]
}
 8004f38:	bf00      	nop
 8004f3a:	3714      	adds	r7, #20
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <first_order_filter_cali>:
  * @param[in]      first_order_filter_type: first-order low-pass filter struct pointer
  * @param[in]      input: input value
  * @retval         none
  */
void first_order_filter_cali(first_order_filter_type_t *first_order_filter_type, float32_t input)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	ed87 0a00 	vstr	s0, [r7]
    first_order_filter_type->input = input;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	601a      	str	r2, [r3, #0]
    first_order_filter_type->out =
        first_order_filter_type->num[0] / (first_order_filter_type->num[0] + first_order_filter_type->frame_period) * first_order_filter_type->out + first_order_filter_type->frame_period / (first_order_filter_type->num[0] + first_order_filter_type->frame_period) * first_order_filter_type->input;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6899      	ldr	r1, [r3, #8]
 8004f62:	460b      	mov	r3, r1
 8004f64:	4619      	mov	r1, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	ee07 1a90 	vmov	s15, r1
 8004f6e:	ee07 3a10 	vmov	s14, r3
 8004f72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f76:	ee07 2a90 	vmov	s15, r2
 8004f7a:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	ee07 3a10 	vmov	s14, r3
 8004f86:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68da      	ldr	r2, [r3, #12]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	461a      	mov	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6899      	ldr	r1, [r3, #8]
 8004f96:	460b      	mov	r3, r1
 8004f98:	4619      	mov	r1, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	ee07 1a90 	vmov	s15, r1
 8004fa2:	ee06 3a90 	vmov	s13, r3
 8004fa6:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8004faa:	ee07 2a90 	vmov	s15, r2
 8004fae:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	ee06 3a90 	vmov	s13, r3
 8004fba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
    first_order_filter_type->out =
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	ee17 2a90 	vmov	r2, s15
 8004fc8:	605a      	str	r2, [r3, #4]
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <abs_limit>:

//absolute limit
void abs_limit(float32_t *num, float32_t Limit)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	ed87 0a00 	vstr	s0, [r7]
    if (*num > Limit)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	edd3 7a00 	vldr	s15, [r3]
 8004fe8:	ed97 7a00 	vldr	s14, [r7]
 8004fec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ff4:	d503      	bpl.n	8004ffe <abs_limit+0x28>
    {
        *num = Limit;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	601a      	str	r2, [r3, #0]
    }
    else if (*num < -Limit)
    {
        *num = -Limit;
    }
}
 8004ffc:	e013      	b.n	8005026 <abs_limit+0x50>
    else if (*num < -Limit)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	ed93 7a00 	vldr	s14, [r3]
 8005004:	edd7 7a00 	vldr	s15, [r7]
 8005008:	eef1 7a67 	vneg.f32	s15, s15
 800500c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005014:	d400      	bmi.n	8005018 <abs_limit+0x42>
}
 8005016:	e006      	b.n	8005026 <abs_limit+0x50>
        *num = -Limit;
 8005018:	edd7 7a00 	vldr	s15, [r7]
 800501c:	eef1 7a67 	vneg.f32	s15, s15
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	edc3 7a00 	vstr	s15, [r3]
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <fp32_constrain>:
    return Value;
}

//constrain (float32_t version)
float32_t fp32_constrain(float32_t Value, float32_t minValue, float32_t maxValue)
{
 8005032:	b480      	push	{r7}
 8005034:	b085      	sub	sp, #20
 8005036:	af00      	add	r7, sp, #0
 8005038:	ed87 0a03 	vstr	s0, [r7, #12]
 800503c:	edc7 0a02 	vstr	s1, [r7, #8]
 8005040:	ed87 1a01 	vstr	s2, [r7, #4]
    if (Value < minValue)
 8005044:	ed97 7a03 	vldr	s14, [r7, #12]
 8005048:	edd7 7a02 	vldr	s15, [r7, #8]
 800504c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005054:	d501      	bpl.n	800505a <fp32_constrain+0x28>
        return minValue;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	e00b      	b.n	8005072 <fp32_constrain+0x40>
    else if (Value > maxValue)
 800505a:	ed97 7a03 	vldr	s14, [r7, #12]
 800505e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005062:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800506a:	dd01      	ble.n	8005070 <fp32_constrain+0x3e>
        return maxValue;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	e000      	b.n	8005072 <fp32_constrain+0x40>
    else
        return Value;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	ee07 3a90 	vmov	s15, r3
}
 8005076:	eeb0 0a67 	vmov.f32	s0, s15
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <loop_fp32_constrain>:
        return Value;
}

//loop constrain (float32_t version)
float32_t loop_fp32_constrain(float32_t Input, float32_t minValue, float32_t maxValue)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	ed87 0a03 	vstr	s0, [r7, #12]
 800508e:	edc7 0a02 	vstr	s1, [r7, #8]
 8005092:	ed87 1a01 	vstr	s2, [r7, #4]
    if (maxValue < minValue)
 8005096:	ed97 7a01 	vldr	s14, [r7, #4]
 800509a:	edd7 7a02 	vldr	s15, [r7, #8]
 800509e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a6:	d501      	bpl.n	80050ac <loop_fp32_constrain+0x28>
    {
        return Input;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	e047      	b.n	800513c <loop_fp32_constrain+0xb8>
    }

    if (Input > maxValue)
 80050ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80050b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80050b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050bc:	dd1a      	ble.n	80050f4 <loop_fp32_constrain+0x70>
    {
    	float32_t len = maxValue - minValue;
 80050be:	ed97 7a01 	vldr	s14, [r7, #4]
 80050c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80050c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050ca:	edc7 7a04 	vstr	s15, [r7, #16]
        while (Input > maxValue)
 80050ce:	e007      	b.n	80050e0 <loop_fp32_constrain+0x5c>
        {
            Input -= len;
 80050d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80050d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80050d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050dc:	edc7 7a03 	vstr	s15, [r7, #12]
        while (Input > maxValue)
 80050e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80050e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80050e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050f0:	dcee      	bgt.n	80050d0 <loop_fp32_constrain+0x4c>
 80050f2:	e022      	b.n	800513a <loop_fp32_constrain+0xb6>
        }
    }
    else if (Input < minValue)
 80050f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80050f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80050fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005104:	d519      	bpl.n	800513a <loop_fp32_constrain+0xb6>
    {
    	float32_t len = maxValue - minValue;
 8005106:	ed97 7a01 	vldr	s14, [r7, #4]
 800510a:	edd7 7a02 	vldr	s15, [r7, #8]
 800510e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005112:	edc7 7a05 	vstr	s15, [r7, #20]
        while (Input < minValue)
 8005116:	e007      	b.n	8005128 <loop_fp32_constrain+0xa4>
        {
            Input += len;
 8005118:	ed97 7a03 	vldr	s14, [r7, #12]
 800511c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005124:	edc7 7a03 	vstr	s15, [r7, #12]
        while (Input < minValue)
 8005128:	ed97 7a03 	vldr	s14, [r7, #12]
 800512c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005130:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005138:	d4ee      	bmi.n	8005118 <loop_fp32_constrain+0x94>
        }
    }
    return Input;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	ee07 3a90 	vmov	s15, r3
}
 8005140:	eeb0 0a67 	vmov.f32	s0, s15
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <PID_init>:
  * @param[in]      max_out: pid max output
  * @param[in]      max_iout: pid max integration output
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float32_t PID[3], float32_t max_out, float32_t max_iout)
{
 800514e:	b480      	push	{r7}
 8005150:	b087      	sub	sp, #28
 8005152:	af00      	add	r7, sp, #0
 8005154:	6178      	str	r0, [r7, #20]
 8005156:	460b      	mov	r3, r1
 8005158:	60fa      	str	r2, [r7, #12]
 800515a:	ed87 0a02 	vstr	s0, [r7, #8]
 800515e:	edc7 0a01 	vstr	s1, [r7, #4]
 8005162:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d040      	beq.n	80051ec <PID_init+0x9e>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d03d      	beq.n	80051ec <PID_init+0x9e>
    {
        return;
    }
    pid->mode = mode;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	7cfa      	ldrb	r2, [r7, #19]
 8005174:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	689a      	ldr	r2, [r3, #8]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	639a      	str	r2, [r3, #56]	; 0x38
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	635a      	str	r2, [r3, #52]	; 0x34
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	631a      	str	r2, [r3, #48]	; 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	621a      	str	r2, [r3, #32]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	6a1a      	ldr	r2, [r3, #32]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	629a      	str	r2, [r3, #40]	; 0x28
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	625a      	str	r2, [r3, #36]	; 0x24
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	645a      	str	r2, [r3, #68]	; 0x44
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	641a      	str	r2, [r3, #64]	; 0x40
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80051ea:	e000      	b.n	80051ee <PID_init+0xa0>
        return;
 80051ec:	bf00      	nop
}
 80051ee:	371c      	adds	r7, #28
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <PID_calc>:
  * @param[in]      ref: feedback data 
  * @param[in]      set: setting value
  * @retval         pid output
  */
float32_t PID_calc(pid_type_def *pid, float32_t ref, float32_t set)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	ed87 0a02 	vstr	s0, [r7, #8]
 8005204:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d102      	bne.n	8005214 <PID_calc+0x1c>
    {
        return 0.0f;
 800520e:	f04f 0300 	mov.w	r3, #0
 8005212:	e130      	b.n	8005476 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	645a      	str	r2, [r3, #68]	; 0x44
    pid->error[1] = pid->error[0];
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	641a      	str	r2, [r3, #64]	; 0x40
    pid->set = set;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8005230:	ed97 7a01 	vldr	s14, [r7, #4]
 8005234:	edd7 7a02 	vldr	s15, [r7, #8]
 8005238:	ee77 7a67 	vsub.f32	s15, s14, s15
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    if (pid->mode == PID_POSITION)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	f040 8095 	bne.w	8005376 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	ed93 7a01 	vldr	s14, [r3, #4]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        pid->Iout += pid->Ki * pid->error[0];
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	edd3 6a02 	vldr	s13, [r3, #8]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005274:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	639a      	str	r2, [r3, #56]	; 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	635a      	str	r2, [r3, #52]	; 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800529e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	ed93 7a03 	vldr	s14, [r3, #12]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80052b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	edd3 7a05 	vldr	s15, [r3, #20]
 80052ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d2:	dd04      	ble.n	80052de <PID_calc+0xe6>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	695a      	ldr	r2, [r3, #20]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	629a      	str	r2, [r3, #40]	; 0x28
 80052dc:	e014      	b.n	8005308 <PID_calc+0x110>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80052ea:	eef1 7a67 	vneg.f32	s15, s15
 80052ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052f6:	d507      	bpl.n	8005308 <PID_calc+0x110>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80052fe:	eef1 7a67 	vneg.f32	s15, s15
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005314:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800531e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	ed93 7a08 	vldr	s14, [r3, #32]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	edd3 7a04 	vldr	s15, [r3, #16]
 8005334:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800533c:	dd04      	ble.n	8005348 <PID_calc+0x150>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	691a      	ldr	r2, [r3, #16]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	621a      	str	r2, [r3, #32]
 8005346:	e094      	b.n	8005472 <PID_calc+0x27a>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	ed93 7a08 	vldr	s14, [r3, #32]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	edd3 7a04 	vldr	s15, [r3, #16]
 8005354:	eef1 7a67 	vneg.f32	s15, s15
 8005358:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800535c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005360:	f140 8087 	bpl.w	8005472 <PID_calc+0x27a>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	edd3 7a04 	vldr	s15, [r3, #16]
 800536a:	eef1 7a67 	vneg.f32	s15, s15
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	edc3 7a08 	vstr	s15, [r3, #32]
 8005374:	e07d      	b.n	8005472 <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d179      	bne.n	8005472 <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	ed93 7a01 	vldr	s14, [r3, #4]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005390:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        pid->Iout = pid->Ki * pid->error[0];
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	ed93 7a02 	vldr	s14, [r3, #8]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80053aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	639a      	str	r2, [r3, #56]	; 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	635a      	str	r2, [r3, #52]	; 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80053d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80053d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80053de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	ed93 7a03 	vldr	s14, [r3, #12]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80053f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	ed93 7a08 	vldr	s14, [r3, #32]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005410:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800541a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800541e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	ed93 7a08 	vldr	s14, [r3, #32]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	edd3 7a04 	vldr	s15, [r3, #16]
 8005434:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800543c:	dd04      	ble.n	8005448 <PID_calc+0x250>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	691a      	ldr	r2, [r3, #16]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	621a      	str	r2, [r3, #32]
 8005446:	e014      	b.n	8005472 <PID_calc+0x27a>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	ed93 7a08 	vldr	s14, [r3, #32]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	edd3 7a04 	vldr	s15, [r3, #16]
 8005454:	eef1 7a67 	vneg.f32	s15, s15
 8005458:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800545c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005460:	d507      	bpl.n	8005472 <PID_calc+0x27a>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	edd3 7a04 	vldr	s15, [r3, #16]
 8005468:	eef1 7a67 	vneg.f32	s15, s15
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	ee07 3a90 	vmov	s15, r3
}
 800547a:	eeb0 0a67 	vmov.f32	s0, s15
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <PID_clear>:
  * @brief          clear pid output
  * @param[out]     pid: PID struct data pointer
  * @retval         none
  */
void PID_clear(pid_type_def *pid)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
    if (pid == NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d030      	beq.n	80054f8 <PID_clear+0x70>
    {
        return;
    }

    pid->error[0] = pid->error[1] = pid->error[2] = 0.0f;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f04f 0200 	mov.w	r2, #0
 800549c:	645a      	str	r2, [r3, #68]	; 0x44
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	641a      	str	r2, [r3, #64]	; 0x40
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	63da      	str	r2, [r3, #60]	; 0x3c
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	639a      	str	r2, [r3, #56]	; 0x38
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	635a      	str	r2, [r3, #52]	; 0x34
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	631a      	str	r2, [r3, #48]	; 0x30
    pid->out = pid->Pout = pid->Iout = pid->Dout = 0.0f;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	629a      	str	r2, [r3, #40]	; 0x28
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	625a      	str	r2, [r3, #36]	; 0x24
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	621a      	str	r2, [r3, #32]
    pid->fdb = pid->set = 0.0f;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	619a      	str	r2, [r3, #24]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699a      	ldr	r2, [r3, #24]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	61da      	str	r2, [r3, #28]
 80054f6:	e000      	b.n	80054fa <PID_clear+0x72>
        return;
 80054f8:	bf00      	nop
}
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8005508:	4b17      	ldr	r3, [pc, #92]	; (8005568 <MX_CAN1_Init+0x64>)
 800550a:	4a18      	ldr	r2, [pc, #96]	; (800556c <MX_CAN1_Init+0x68>)
 800550c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800550e:	4b16      	ldr	r3, [pc, #88]	; (8005568 <MX_CAN1_Init+0x64>)
 8005510:	2203      	movs	r2, #3
 8005512:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8005514:	4b14      	ldr	r3, [pc, #80]	; (8005568 <MX_CAN1_Init+0x64>)
 8005516:	2200      	movs	r2, #0
 8005518:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800551a:	4b13      	ldr	r3, [pc, #76]	; (8005568 <MX_CAN1_Init+0x64>)
 800551c:	2200      	movs	r2, #0
 800551e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8005520:	4b11      	ldr	r3, [pc, #68]	; (8005568 <MX_CAN1_Init+0x64>)
 8005522:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8005526:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8005528:	4b0f      	ldr	r3, [pc, #60]	; (8005568 <MX_CAN1_Init+0x64>)
 800552a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800552e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8005530:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <MX_CAN1_Init+0x64>)
 8005532:	2200      	movs	r2, #0
 8005534:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8005536:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <MX_CAN1_Init+0x64>)
 8005538:	2201      	movs	r2, #1
 800553a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800553c:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <MX_CAN1_Init+0x64>)
 800553e:	2200      	movs	r2, #0
 8005540:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8005542:	4b09      	ldr	r3, [pc, #36]	; (8005568 <MX_CAN1_Init+0x64>)
 8005544:	2200      	movs	r2, #0
 8005546:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8005548:	4b07      	ldr	r3, [pc, #28]	; (8005568 <MX_CAN1_Init+0x64>)
 800554a:	2200      	movs	r2, #0
 800554c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800554e:	4b06      	ldr	r3, [pc, #24]	; (8005568 <MX_CAN1_Init+0x64>)
 8005550:	2200      	movs	r2, #0
 8005552:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8005554:	4804      	ldr	r0, [pc, #16]	; (8005568 <MX_CAN1_Init+0x64>)
 8005556:	f001 fb9f 	bl	8006c98 <HAL_CAN_Init>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8005560:	f000 fb64 	bl	8005c2c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8005564:	bf00      	nop
 8005566:	bd80      	pop	{r7, pc}
 8005568:	200056c8 	.word	0x200056c8
 800556c:	40006400 	.word	0x40006400

08005570 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8005574:	4b17      	ldr	r3, [pc, #92]	; (80055d4 <MX_CAN2_Init+0x64>)
 8005576:	4a18      	ldr	r2, [pc, #96]	; (80055d8 <MX_CAN2_Init+0x68>)
 8005578:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 800557a:	4b16      	ldr	r3, [pc, #88]	; (80055d4 <MX_CAN2_Init+0x64>)
 800557c:	2203      	movs	r2, #3
 800557e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8005580:	4b14      	ldr	r3, [pc, #80]	; (80055d4 <MX_CAN2_Init+0x64>)
 8005582:	2200      	movs	r2, #0
 8005584:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8005586:	4b13      	ldr	r3, [pc, #76]	; (80055d4 <MX_CAN2_Init+0x64>)
 8005588:	2200      	movs	r2, #0
 800558a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 800558c:	4b11      	ldr	r3, [pc, #68]	; (80055d4 <MX_CAN2_Init+0x64>)
 800558e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8005592:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8005594:	4b0f      	ldr	r3, [pc, #60]	; (80055d4 <MX_CAN2_Init+0x64>)
 8005596:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800559a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800559c:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <MX_CAN2_Init+0x64>)
 800559e:	2200      	movs	r2, #0
 80055a0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 80055a2:	4b0c      	ldr	r3, [pc, #48]	; (80055d4 <MX_CAN2_Init+0x64>)
 80055a4:	2201      	movs	r2, #1
 80055a6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80055a8:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <MX_CAN2_Init+0x64>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80055ae:	4b09      	ldr	r3, [pc, #36]	; (80055d4 <MX_CAN2_Init+0x64>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80055b4:	4b07      	ldr	r3, [pc, #28]	; (80055d4 <MX_CAN2_Init+0x64>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80055ba:	4b06      	ldr	r3, [pc, #24]	; (80055d4 <MX_CAN2_Init+0x64>)
 80055bc:	2200      	movs	r2, #0
 80055be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80055c0:	4804      	ldr	r0, [pc, #16]	; (80055d4 <MX_CAN2_Init+0x64>)
 80055c2:	f001 fb69 	bl	8006c98 <HAL_CAN_Init>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80055cc:	f000 fb2e 	bl	8005c2c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80055d0:	bf00      	nop
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	200056a0 	.word	0x200056a0
 80055d8:	40006800 	.word	0x40006800

080055dc <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b08c      	sub	sp, #48	; 0x30
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055e4:	f107 031c 	add.w	r3, r7, #28
 80055e8:	2200      	movs	r2, #0
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	605a      	str	r2, [r3, #4]
 80055ee:	609a      	str	r2, [r3, #8]
 80055f0:	60da      	str	r2, [r3, #12]
 80055f2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a52      	ldr	r2, [pc, #328]	; (8005744 <HAL_CAN_MspInit+0x168>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d145      	bne.n	800568a <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80055fe:	4b52      	ldr	r3, [pc, #328]	; (8005748 <HAL_CAN_MspInit+0x16c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3301      	adds	r3, #1
 8005604:	4a50      	ldr	r2, [pc, #320]	; (8005748 <HAL_CAN_MspInit+0x16c>)
 8005606:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8005608:	4b4f      	ldr	r3, [pc, #316]	; (8005748 <HAL_CAN_MspInit+0x16c>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d10d      	bne.n	800562c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8005610:	2300      	movs	r3, #0
 8005612:	61bb      	str	r3, [r7, #24]
 8005614:	4b4d      	ldr	r3, [pc, #308]	; (800574c <HAL_CAN_MspInit+0x170>)
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	4a4c      	ldr	r2, [pc, #304]	; (800574c <HAL_CAN_MspInit+0x170>)
 800561a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800561e:	6413      	str	r3, [r2, #64]	; 0x40
 8005620:	4b4a      	ldr	r3, [pc, #296]	; (800574c <HAL_CAN_MspInit+0x170>)
 8005622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005628:	61bb      	str	r3, [r7, #24]
 800562a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800562c:	2300      	movs	r3, #0
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	4b46      	ldr	r3, [pc, #280]	; (800574c <HAL_CAN_MspInit+0x170>)
 8005632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005634:	4a45      	ldr	r2, [pc, #276]	; (800574c <HAL_CAN_MspInit+0x170>)
 8005636:	f043 0308 	orr.w	r3, r3, #8
 800563a:	6313      	str	r3, [r2, #48]	; 0x30
 800563c:	4b43      	ldr	r3, [pc, #268]	; (800574c <HAL_CAN_MspInit+0x170>)
 800563e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005640:	f003 0308 	and.w	r3, r3, #8
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005648:	2303      	movs	r3, #3
 800564a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800564c:	2302      	movs	r3, #2
 800564e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005650:	2300      	movs	r3, #0
 8005652:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005654:	2303      	movs	r3, #3
 8005656:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005658:	2309      	movs	r3, #9
 800565a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800565c:	f107 031c 	add.w	r3, r7, #28
 8005660:	4619      	mov	r1, r3
 8005662:	483b      	ldr	r0, [pc, #236]	; (8005750 <HAL_CAN_MspInit+0x174>)
 8005664:	f002 fe5e 	bl	8008324 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8005668:	2200      	movs	r2, #0
 800566a:	2105      	movs	r1, #5
 800566c:	2013      	movs	r0, #19
 800566e:	f002 fa2d 	bl	8007acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8005672:	2013      	movs	r0, #19
 8005674:	f002 fa46 	bl	8007b04 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8005678:	2200      	movs	r2, #0
 800567a:	2105      	movs	r1, #5
 800567c:	2014      	movs	r0, #20
 800567e:	f002 fa25 	bl	8007acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8005682:	2014      	movs	r0, #20
 8005684:	f002 fa3e 	bl	8007b04 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8005688:	e058      	b.n	800573c <HAL_CAN_MspInit+0x160>
  else if(canHandle->Instance==CAN2)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a31      	ldr	r2, [pc, #196]	; (8005754 <HAL_CAN_MspInit+0x178>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d153      	bne.n	800573c <HAL_CAN_MspInit+0x160>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8005694:	2300      	movs	r3, #0
 8005696:	613b      	str	r3, [r7, #16]
 8005698:	4b2c      	ldr	r3, [pc, #176]	; (800574c <HAL_CAN_MspInit+0x170>)
 800569a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569c:	4a2b      	ldr	r2, [pc, #172]	; (800574c <HAL_CAN_MspInit+0x170>)
 800569e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056a2:	6413      	str	r3, [r2, #64]	; 0x40
 80056a4:	4b29      	ldr	r3, [pc, #164]	; (800574c <HAL_CAN_MspInit+0x170>)
 80056a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056ac:	613b      	str	r3, [r7, #16]
 80056ae:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80056b0:	4b25      	ldr	r3, [pc, #148]	; (8005748 <HAL_CAN_MspInit+0x16c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3301      	adds	r3, #1
 80056b6:	4a24      	ldr	r2, [pc, #144]	; (8005748 <HAL_CAN_MspInit+0x16c>)
 80056b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80056ba:	4b23      	ldr	r3, [pc, #140]	; (8005748 <HAL_CAN_MspInit+0x16c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d10d      	bne.n	80056de <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80056c2:	2300      	movs	r3, #0
 80056c4:	60fb      	str	r3, [r7, #12]
 80056c6:	4b21      	ldr	r3, [pc, #132]	; (800574c <HAL_CAN_MspInit+0x170>)
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	4a20      	ldr	r2, [pc, #128]	; (800574c <HAL_CAN_MspInit+0x170>)
 80056cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80056d0:	6413      	str	r3, [r2, #64]	; 0x40
 80056d2:	4b1e      	ldr	r3, [pc, #120]	; (800574c <HAL_CAN_MspInit+0x170>)
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056de:	2300      	movs	r3, #0
 80056e0:	60bb      	str	r3, [r7, #8]
 80056e2:	4b1a      	ldr	r3, [pc, #104]	; (800574c <HAL_CAN_MspInit+0x170>)
 80056e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e6:	4a19      	ldr	r2, [pc, #100]	; (800574c <HAL_CAN_MspInit+0x170>)
 80056e8:	f043 0302 	orr.w	r3, r3, #2
 80056ec:	6313      	str	r3, [r2, #48]	; 0x30
 80056ee:	4b17      	ldr	r3, [pc, #92]	; (800574c <HAL_CAN_MspInit+0x170>)
 80056f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	60bb      	str	r3, [r7, #8]
 80056f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80056fa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80056fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005700:	2302      	movs	r3, #2
 8005702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005704:	2300      	movs	r3, #0
 8005706:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005708:	2303      	movs	r3, #3
 800570a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800570c:	2309      	movs	r3, #9
 800570e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005710:	f107 031c 	add.w	r3, r7, #28
 8005714:	4619      	mov	r1, r3
 8005716:	4810      	ldr	r0, [pc, #64]	; (8005758 <HAL_CAN_MspInit+0x17c>)
 8005718:	f002 fe04 	bl	8008324 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 800571c:	2200      	movs	r2, #0
 800571e:	2105      	movs	r1, #5
 8005720:	203f      	movs	r0, #63	; 0x3f
 8005722:	f002 f9d3 	bl	8007acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8005726:	203f      	movs	r0, #63	; 0x3f
 8005728:	f002 f9ec 	bl	8007b04 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 800572c:	2200      	movs	r2, #0
 800572e:	2105      	movs	r1, #5
 8005730:	2040      	movs	r0, #64	; 0x40
 8005732:	f002 f9cb 	bl	8007acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8005736:	2040      	movs	r0, #64	; 0x40
 8005738:	f002 f9e4 	bl	8007b04 <HAL_NVIC_EnableIRQ>
}
 800573c:	bf00      	nop
 800573e:	3730      	adds	r7, #48	; 0x30
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40006400 	.word	0x40006400
 8005748:	20000380 	.word	0x20000380
 800574c:	40023800 	.word	0x40023800
 8005750:	40020c00 	.word	0x40020c00
 8005754:	40006800 	.word	0x40006800
 8005758:	40020400 	.word	0x40020400

0800575c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005762:	2300      	movs	r3, #0
 8005764:	607b      	str	r3, [r7, #4]
 8005766:	4b27      	ldr	r3, [pc, #156]	; (8005804 <MX_DMA_Init+0xa8>)
 8005768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576a:	4a26      	ldr	r2, [pc, #152]	; (8005804 <MX_DMA_Init+0xa8>)
 800576c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005770:	6313      	str	r3, [r2, #48]	; 0x30
 8005772:	4b24      	ldr	r3, [pc, #144]	; (8005804 <MX_DMA_Init+0xa8>)
 8005774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800577a:	607b      	str	r3, [r7, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800577e:	2300      	movs	r3, #0
 8005780:	603b      	str	r3, [r7, #0]
 8005782:	4b20      	ldr	r3, [pc, #128]	; (8005804 <MX_DMA_Init+0xa8>)
 8005784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005786:	4a1f      	ldr	r2, [pc, #124]	; (8005804 <MX_DMA_Init+0xa8>)
 8005788:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800578c:	6313      	str	r3, [r2, #48]	; 0x30
 800578e:	4b1d      	ldr	r3, [pc, #116]	; (8005804 <MX_DMA_Init+0xa8>)
 8005790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005792:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005796:	603b      	str	r3, [r7, #0]
 8005798:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800579a:	2200      	movs	r2, #0
 800579c:	2105      	movs	r1, #5
 800579e:	200b      	movs	r0, #11
 80057a0:	f002 f994 	bl	8007acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80057a4:	200b      	movs	r0, #11
 80057a6:	f002 f9ad 	bl	8007b04 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80057aa:	2200      	movs	r2, #0
 80057ac:	2105      	movs	r1, #5
 80057ae:	200e      	movs	r0, #14
 80057b0:	f002 f98c 	bl	8007acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80057b4:	200e      	movs	r0, #14
 80057b6:	f002 f9a5 	bl	8007b04 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80057ba:	2200      	movs	r2, #0
 80057bc:	2105      	movs	r1, #5
 80057be:	2011      	movs	r0, #17
 80057c0:	f002 f984 	bl	8007acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80057c4:	2011      	movs	r0, #17
 80057c6:	f002 f99d 	bl	8007b04 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80057ca:	2200      	movs	r2, #0
 80057cc:	2105      	movs	r1, #5
 80057ce:	2039      	movs	r0, #57	; 0x39
 80057d0:	f002 f97c 	bl	8007acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80057d4:	2039      	movs	r0, #57	; 0x39
 80057d6:	f002 f995 	bl	8007b04 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80057da:	2200      	movs	r2, #0
 80057dc:	2105      	movs	r1, #5
 80057de:	203a      	movs	r0, #58	; 0x3a
 80057e0:	f002 f974 	bl	8007acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80057e4:	203a      	movs	r0, #58	; 0x3a
 80057e6:	f002 f98d 	bl	8007b04 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80057ea:	2200      	movs	r2, #0
 80057ec:	2105      	movs	r1, #5
 80057ee:	2045      	movs	r0, #69	; 0x45
 80057f0:	f002 f96c 	bl	8007acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80057f4:	2045      	movs	r0, #69	; 0x45
 80057f6:	f002 f985 	bl	8007b04 <HAL_NVIC_EnableIRQ>

}
 80057fa:	bf00      	nop
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40023800 	.word	0x40023800

08005808 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of USBTask */
  USBTaskHandle = osThreadNew(usb_task, NULL, &USBTask_attributes);
 800580c:	4a14      	ldr	r2, [pc, #80]	; (8005860 <MX_FREERTOS_Init+0x58>)
 800580e:	2100      	movs	r1, #0
 8005810:	4814      	ldr	r0, [pc, #80]	; (8005864 <MX_FREERTOS_Init+0x5c>)
 8005812:	f00a f8f9 	bl	800fa08 <osThreadNew>
 8005816:	4603      	mov	r3, r0
 8005818:	4a13      	ldr	r2, [pc, #76]	; (8005868 <MX_FREERTOS_Init+0x60>)
 800581a:	6013      	str	r3, [r2, #0]

  /* creation of ChassisTask */
  ChassisTaskHandle = osThreadNew(chassis_task, NULL, &ChassisTask_attributes);
 800581c:	4a13      	ldr	r2, [pc, #76]	; (800586c <MX_FREERTOS_Init+0x64>)
 800581e:	2100      	movs	r1, #0
 8005820:	4813      	ldr	r0, [pc, #76]	; (8005870 <MX_FREERTOS_Init+0x68>)
 8005822:	f00a f8f1 	bl	800fa08 <osThreadNew>
 8005826:	4603      	mov	r3, r0
 8005828:	4a12      	ldr	r2, [pc, #72]	; (8005874 <MX_FREERTOS_Init+0x6c>)
 800582a:	6013      	str	r3, [r2, #0]

  /* creation of GimbalTask */
  GimbalTaskHandle = osThreadNew(gimbal_task, NULL, &GimbalTask_attributes);
 800582c:	4a12      	ldr	r2, [pc, #72]	; (8005878 <MX_FREERTOS_Init+0x70>)
 800582e:	2100      	movs	r1, #0
 8005830:	4812      	ldr	r0, [pc, #72]	; (800587c <MX_FREERTOS_Init+0x74>)
 8005832:	f00a f8e9 	bl	800fa08 <osThreadNew>
 8005836:	4603      	mov	r3, r0
 8005838:	4a11      	ldr	r2, [pc, #68]	; (8005880 <MX_FREERTOS_Init+0x78>)
 800583a:	6013      	str	r3, [r2, #0]

  /* creation of IMUTask */
  IMUTaskHandle = osThreadNew(INS_task1, NULL, &IMUTask_attributes);
 800583c:	4a11      	ldr	r2, [pc, #68]	; (8005884 <MX_FREERTOS_Init+0x7c>)
 800583e:	2100      	movs	r1, #0
 8005840:	4811      	ldr	r0, [pc, #68]	; (8005888 <MX_FREERTOS_Init+0x80>)
 8005842:	f00a f8e1 	bl	800fa08 <osThreadNew>
 8005846:	4603      	mov	r3, r0
 8005848:	4a10      	ldr	r2, [pc, #64]	; (800588c <MX_FREERTOS_Init+0x84>)
 800584a:	6013      	str	r3, [r2, #0]

  /* creation of DetectTask */
  DetectTaskHandle = osThreadNew(detect_task, NULL, &DetectTask_attributes);
 800584c:	4a10      	ldr	r2, [pc, #64]	; (8005890 <MX_FREERTOS_Init+0x88>)
 800584e:	2100      	movs	r1, #0
 8005850:	4810      	ldr	r0, [pc, #64]	; (8005894 <MX_FREERTOS_Init+0x8c>)
 8005852:	f00a f8d9 	bl	800fa08 <osThreadNew>
 8005856:	4603      	mov	r3, r0
 8005858:	4a0f      	ldr	r2, [pc, #60]	; (8005898 <MX_FREERTOS_Init+0x90>)
 800585a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800585c:	bf00      	nop
 800585e:	bd80      	pop	{r7, pc}
 8005860:	0801496c 	.word	0x0801496c
 8005864:	08004259 	.word	0x08004259
 8005868:	200056f0 	.word	0x200056f0
 800586c:	08014990 	.word	0x08014990
 8005870:	08000d81 	.word	0x08000d81
 8005874:	200056f8 	.word	0x200056f8
 8005878:	080149b4 	.word	0x080149b4
 800587c:	080029b9 	.word	0x080029b9
 8005880:	20005700 	.word	0x20005700
 8005884:	080149d8 	.word	0x080149d8
 8005888:	0800589d 	.word	0x0800589d
 800588c:	200056f4 	.word	0x200056f4
 8005890:	080149fc 	.word	0x080149fc
 8005894:	080019c9 	.word	0x080019c9
 8005898:	200056fc 	.word	0x200056fc

0800589c <INS_task1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_INS_task1 */
__weak void INS_task1(void *argument)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN INS_task1 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80058a4:	2001      	movs	r0, #1
 80058a6:	f00a f941 	bl	800fb2c <osDelay>
 80058aa:	e7fb      	b.n	80058a4 <INS_task1+0x8>

080058ac <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PE13   ------> S_TIM1_CH3
*/
void MX_GPIO_Init(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b08e      	sub	sp, #56	; 0x38
 80058b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058b6:	2200      	movs	r2, #0
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	605a      	str	r2, [r3, #4]
 80058bc:	609a      	str	r2, [r3, #8]
 80058be:	60da      	str	r2, [r3, #12]
 80058c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80058c2:	2300      	movs	r3, #0
 80058c4:	623b      	str	r3, [r7, #32]
 80058c6:	4b73      	ldr	r3, [pc, #460]	; (8005a94 <MX_GPIO_Init+0x1e8>)
 80058c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ca:	4a72      	ldr	r2, [pc, #456]	; (8005a94 <MX_GPIO_Init+0x1e8>)
 80058cc:	f043 0310 	orr.w	r3, r3, #16
 80058d0:	6313      	str	r3, [r2, #48]	; 0x30
 80058d2:	4b70      	ldr	r3, [pc, #448]	; (8005a94 <MX_GPIO_Init+0x1e8>)
 80058d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d6:	f003 0310 	and.w	r3, r3, #16
 80058da:	623b      	str	r3, [r7, #32]
 80058dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80058de:	2300      	movs	r3, #0
 80058e0:	61fb      	str	r3, [r7, #28]
 80058e2:	4b6c      	ldr	r3, [pc, #432]	; (8005a94 <MX_GPIO_Init+0x1e8>)
 80058e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e6:	4a6b      	ldr	r2, [pc, #428]	; (8005a94 <MX_GPIO_Init+0x1e8>)
 80058e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ec:	6313      	str	r3, [r2, #48]	; 0x30
 80058ee:	4b69      	ldr	r3, [pc, #420]	; (8005a94 <MX_GPIO_Init+0x1e8>)
 80058f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f6:	61fb      	str	r3, [r7, #28]
 80058f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80058fa:	2300      	movs	r3, #0
 80058fc:	61bb      	str	r3, [r7, #24]
 80058fe:	4b65      	ldr	r3, [pc, #404]	; (8005a94 <MX_GPIO_Init+0x1e8>)
 8005900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005902:	4a64      	ldr	r2, [pc, #400]	; (8005a94 <MX_GPIO_Init+0x1e8>)
 8005904:	f043 0301 	orr.w	r3, r3, #1
 8005908:	6313      	str	r3, [r2, #48]	; 0x30
 800590a:	4b62      	ldr	r3, [pc, #392]	; (8005a94 <MX_GPIO_Init+0x1e8>)
 800590c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	61bb      	str	r3, [r7, #24]
 8005914:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]
 800591a:	4b5e      	ldr	r3, [pc, #376]	; (8005a94 <MX_GPIO_Init+0x1e8>)
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	4a5d      	ldr	r2, [pc, #372]	; (8005a94 <MX_GPIO_Init+0x1e8>)
 8005920:	f043 0302 	orr.w	r3, r3, #2
 8005924:	6313      	str	r3, [r2, #48]	; 0x30
 8005926:	4b5b      	ldr	r3, [pc, #364]	; (8005a94 <MX_GPIO_Init+0x1e8>)
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005932:	2300      	movs	r3, #0
 8005934:	613b      	str	r3, [r7, #16]
 8005936:	4b57      	ldr	r3, [pc, #348]	; (8005a94 <MX_GPIO_Init+0x1e8>)
 8005938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593a:	4a56      	ldr	r2, [pc, #344]	; (8005a94 <MX_GPIO_Init+0x1e8>)
 800593c:	f043 0308 	orr.w	r3, r3, #8
 8005940:	6313      	str	r3, [r2, #48]	; 0x30
 8005942:	4b54      	ldr	r3, [pc, #336]	; (8005a94 <MX_GPIO_Init+0x1e8>)
 8005944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005946:	f003 0308 	and.w	r3, r3, #8
 800594a:	613b      	str	r3, [r7, #16]
 800594c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	4b50      	ldr	r3, [pc, #320]	; (8005a94 <MX_GPIO_Init+0x1e8>)
 8005954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005956:	4a4f      	ldr	r2, [pc, #316]	; (8005a94 <MX_GPIO_Init+0x1e8>)
 8005958:	f043 0304 	orr.w	r3, r3, #4
 800595c:	6313      	str	r3, [r2, #48]	; 0x30
 800595e:	4b4d      	ldr	r3, [pc, #308]	; (8005a94 <MX_GPIO_Init+0x1e8>)
 8005960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005962:	f003 0304 	and.w	r3, r3, #4
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800596a:	2300      	movs	r3, #0
 800596c:	60bb      	str	r3, [r7, #8]
 800596e:	4b49      	ldr	r3, [pc, #292]	; (8005a94 <MX_GPIO_Init+0x1e8>)
 8005970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005972:	4a48      	ldr	r2, [pc, #288]	; (8005a94 <MX_GPIO_Init+0x1e8>)
 8005974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005978:	6313      	str	r3, [r2, #48]	; 0x30
 800597a:	4b46      	ldr	r3, [pc, #280]	; (8005a94 <MX_GPIO_Init+0x1e8>)
 800597c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005982:	60bb      	str	r3, [r7, #8]
 8005984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005986:	2300      	movs	r3, #0
 8005988:	607b      	str	r3, [r7, #4]
 800598a:	4b42      	ldr	r3, [pc, #264]	; (8005a94 <MX_GPIO_Init+0x1e8>)
 800598c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598e:	4a41      	ldr	r2, [pc, #260]	; (8005a94 <MX_GPIO_Init+0x1e8>)
 8005990:	f043 0320 	orr.w	r3, r3, #32
 8005994:	6313      	str	r3, [r2, #48]	; 0x30
 8005996:	4b3f      	ldr	r3, [pc, #252]	; (8005a94 <MX_GPIO_Init+0x1e8>)
 8005998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599a:	f003 0320 	and.w	r3, r3, #32
 800599e:	607b      	str	r3, [r7, #4]
 80059a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LASER_GPIO_Port, LASER_Pin, GPIO_PIN_RESET);
 80059a2:	2200      	movs	r2, #0
 80059a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80059a8:	483b      	ldr	r0, [pc, #236]	; (8005a98 <MX_GPIO_Init+0x1ec>)
 80059aa:	f002 fe7f 	bl	80086ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin, GPIO_PIN_SET);
 80059ae:	2201      	movs	r2, #1
 80059b0:	213c      	movs	r1, #60	; 0x3c
 80059b2:	483a      	ldr	r0, [pc, #232]	; (8005a9c <MX_GPIO_Init+0x1f0>)
 80059b4:	f002 fe7a 	bl	80086ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_G8_Pin|LED_G7_Pin|LED_G6_Pin|LED_G5_Pin
 80059b8:	2201      	movs	r2, #1
 80059ba:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80059be:	4836      	ldr	r0, [pc, #216]	; (8005a98 <MX_GPIO_Init+0x1ec>)
 80059c0:	f002 fe74 	bl	80086ac <HAL_GPIO_WritePin>
                          |LED_G4_Pin|LED_G3_Pin|LED_G2_Pin|LED_G1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MPU_SPI_NSS_Pin|LED_G_Pin, GPIO_PIN_SET);
 80059c4:	2201      	movs	r2, #1
 80059c6:	f244 0140 	movw	r1, #16448	; 0x4040
 80059ca:	4835      	ldr	r0, [pc, #212]	; (8005aa0 <MX_GPIO_Init+0x1f4>)
 80059cc:	f002 fe6e 	bl	80086ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 80059d0:	2201      	movs	r2, #1
 80059d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80059d6:	4833      	ldr	r0, [pc, #204]	; (8005aa4 <MX_GPIO_Init+0x1f8>)
 80059d8:	f002 fe68 	bl	80086ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = LASER_Pin|LED_G8_Pin|LED_G7_Pin|LED_G6_Pin
 80059dc:	f242 13fe 	movw	r3, #8702	; 0x21fe
 80059e0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED_G5_Pin|LED_G4_Pin|LED_G3_Pin|LED_G2_Pin
                          |LED_G1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059e2:	2301      	movs	r3, #1
 80059e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059e6:	2301      	movs	r3, #1
 80059e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059ea:	2303      	movs	r3, #3
 80059ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80059ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059f2:	4619      	mov	r1, r3
 80059f4:	4828      	ldr	r0, [pc, #160]	; (8005a98 <MX_GPIO_Init+0x1ec>)
 80059f6:	f002 fc95 	bl	8008324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin;
 80059fa:	233c      	movs	r3, #60	; 0x3c
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059fe:	2301      	movs	r3, #1
 8005a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a02:	2301      	movs	r3, #1
 8005a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a06:	2300      	movs	r3, #0
 8005a08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a0e:	4619      	mov	r1, r3
 8005a10:	4822      	ldr	r0, [pc, #136]	; (8005a9c <MX_GPIO_Init+0x1f0>)
 8005a12:	f002 fc87 	bl	8008324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = MPU_SPI_NSS_Pin|LED_G_Pin;
 8005a16:	f244 0340 	movw	r3, #16448	; 0x4040
 8005a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a20:	2301      	movs	r3, #1
 8005a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a24:	2303      	movs	r3, #3
 8005a26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	481c      	ldr	r0, [pc, #112]	; (8005aa0 <MX_GPIO_Init+0x1f4>)
 8005a30:	f002 fc78 	bl	8008324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005a34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a42:	2300      	movs	r3, #0
 8005a44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005a46:	2301      	movs	r3, #1
 8005a48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a4e:	4619      	mov	r1, r3
 8005a50:	4814      	ldr	r0, [pc, #80]	; (8005aa4 <MX_GPIO_Init+0x1f8>)
 8005a52:	f002 fc67 	bl	8008324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 8005a56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a60:	2301      	movs	r3, #1
 8005a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a64:	2303      	movs	r3, #3
 8005a66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8005a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	480d      	ldr	r0, [pc, #52]	; (8005aa4 <MX_GPIO_Init+0x1f8>)
 8005a70:	f002 fc58 	bl	8008324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_TRIG_Pin;
 8005a74:	2301      	movs	r3, #1
 8005a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON_TRIG_GPIO_Port, &GPIO_InitStruct);
 8005a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a84:	4619      	mov	r1, r3
 8005a86:	4808      	ldr	r0, [pc, #32]	; (8005aa8 <MX_GPIO_Init+0x1fc>)
 8005a88:	f002 fc4c 	bl	8008324 <HAL_GPIO_Init>

}
 8005a8c:	bf00      	nop
 8005a8e:	3738      	adds	r7, #56	; 0x38
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	40023800 	.word	0x40023800
 8005a98:	40021800 	.word	0x40021800
 8005a9c:	40021c00 	.word	0x40021c00
 8005aa0:	40021400 	.word	0x40021400
 8005aa4:	40021000 	.word	0x40021000
 8005aa8:	40020400 	.word	0x40020400

08005aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005ab0:	f001 f88c 	bl	8006bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005ab4:	f000 f826 	bl	8005b04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005ab8:	f7ff fef8 	bl	80058ac <MX_GPIO_Init>
  MX_DMA_Init();
 8005abc:	f7ff fe4e 	bl	800575c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8005ac0:	f000 fd9c 	bl	80065fc <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8005ac4:	f7ff fd1e 	bl	8005504 <MX_CAN1_Init>
  MX_CAN2_Init();
 8005ac8:	f7ff fd52 	bl	8005570 <MX_CAN2_Init>
  MX_USART3_UART_Init();
 8005acc:	f000 fdc2 	bl	8006654 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8005ad0:	f000 f8b2 	bl	8005c38 <MX_RTC_Init>
  MX_TIM12_Init();
 8005ad4:	f000 fc0a 	bl	80062ec <MX_TIM12_Init>
  MX_TIM4_Init();
 8005ad8:	f000 fb16 	bl	8006108 <MX_TIM4_Init>
  MX_SPI5_Init();
 8005adc:	f000 f8e8 	bl	8005cb0 <MX_SPI5_Init>
  MX_USART6_UART_Init();
 8005ae0:	f000 fde2 	bl	80066a8 <MX_USART6_UART_Init>
  MX_UART8_Init();
 8005ae4:	f000 fd60 	bl	80065a8 <MX_UART8_Init>
  MX_TIM5_Init();
 8005ae8:	f000 fb90 	bl	800620c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 8005aec:	f7fe fd02 	bl	80044f4 <can_filter_init>
  remote_control_init();
 8005af0:	f7fd fd8a 	bl	8003608 <remote_control_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8005af4:	f009 ff3e 	bl	800f974 <osKernelInitialize>
  MX_FREERTOS_Init();
 8005af8:	f7ff fe86 	bl	8005808 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8005afc:	f009 ff5e 	bl	800f9bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005b00:	e7fe      	b.n	8005b00 <main+0x54>
	...

08005b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b0a0      	sub	sp, #128	; 0x80
 8005b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b0a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005b0e:	2230      	movs	r2, #48	; 0x30
 8005b10:	2100      	movs	r1, #0
 8005b12:	4618      	mov	r0, r3
 8005b14:	f00e fa00 	bl	8013f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005b18:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	605a      	str	r2, [r3, #4]
 8005b22:	609a      	str	r2, [r3, #8]
 8005b24:	60da      	str	r2, [r3, #12]
 8005b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005b28:	f107 030c 	add.w	r3, r7, #12
 8005b2c:	2230      	movs	r2, #48	; 0x30
 8005b2e:	2100      	movs	r1, #0
 8005b30:	4618      	mov	r0, r3
 8005b32:	f00e f9f1 	bl	8013f18 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b36:	2300      	movs	r3, #0
 8005b38:	60bb      	str	r3, [r7, #8]
 8005b3a:	4b31      	ldr	r3, [pc, #196]	; (8005c00 <SystemClock_Config+0xfc>)
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	4a30      	ldr	r2, [pc, #192]	; (8005c00 <SystemClock_Config+0xfc>)
 8005b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b44:	6413      	str	r3, [r2, #64]	; 0x40
 8005b46:	4b2e      	ldr	r3, [pc, #184]	; (8005c00 <SystemClock_Config+0xfc>)
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b4e:	60bb      	str	r3, [r7, #8]
 8005b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b52:	2300      	movs	r3, #0
 8005b54:	607b      	str	r3, [r7, #4]
 8005b56:	4b2b      	ldr	r3, [pc, #172]	; (8005c04 <SystemClock_Config+0x100>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a2a      	ldr	r2, [pc, #168]	; (8005c04 <SystemClock_Config+0x100>)
 8005b5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	4b28      	ldr	r3, [pc, #160]	; (8005c04 <SystemClock_Config+0x100>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b6a:	607b      	str	r3, [r7, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8005b6e:	2309      	movs	r3, #9
 8005b70:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005b72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b76:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005b80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b84:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8005b86:	2306      	movs	r3, #6
 8005b88:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005b8a:	23a8      	movs	r3, #168	; 0xa8
 8005b8c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005b8e:	2302      	movs	r3, #2
 8005b90:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005b92:	2307      	movs	r3, #7
 8005b94:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f003 ff22 	bl	80099e4 <HAL_RCC_OscConfig>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8005ba6:	f000 f841 	bl	8005c2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005baa:	230f      	movs	r3, #15
 8005bac:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005bae:	2302      	movs	r3, #2
 8005bb0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005bb6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005bba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bc0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005bc2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005bc6:	2105      	movs	r1, #5
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f004 f983 	bl	8009ed4 <HAL_RCC_ClockConfig>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d001      	beq.n	8005bd8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8005bd4:	f000 f82a 	bl	8005c2c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005bd8:	2320      	movs	r3, #32
 8005bda:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005bdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005be0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005be2:	f107 030c 	add.w	r3, r7, #12
 8005be6:	4618      	mov	r0, r3
 8005be8:	f004 fb76 	bl	800a2d8 <HAL_RCCEx_PeriphCLKConfig>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8005bf2:	f000 f81b 	bl	8005c2c <Error_Handler>
  }
}
 8005bf6:	bf00      	nop
 8005bf8:	3780      	adds	r7, #128	; 0x80
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40023800 	.word	0x40023800
 8005c04:	40007000 	.word	0x40007000

08005c08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a04      	ldr	r2, [pc, #16]	; (8005c28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d101      	bne.n	8005c1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005c1a:	f000 fff9 	bl	8006c10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005c1e:	bf00      	nop
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	40000400 	.word	0x40000400

08005c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005c30:	b672      	cpsid	i
}
 8005c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005c34:	e7fe      	b.n	8005c34 <Error_Handler+0x8>
	...

08005c38 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005c3c:	4b0f      	ldr	r3, [pc, #60]	; (8005c7c <MX_RTC_Init+0x44>)
 8005c3e:	4a10      	ldr	r2, [pc, #64]	; (8005c80 <MX_RTC_Init+0x48>)
 8005c40:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005c42:	4b0e      	ldr	r3, [pc, #56]	; (8005c7c <MX_RTC_Init+0x44>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 124;
 8005c48:	4b0c      	ldr	r3, [pc, #48]	; (8005c7c <MX_RTC_Init+0x44>)
 8005c4a:	227c      	movs	r2, #124	; 0x7c
 8005c4c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 3199;
 8005c4e:	4b0b      	ldr	r3, [pc, #44]	; (8005c7c <MX_RTC_Init+0x44>)
 8005c50:	f640 427f 	movw	r2, #3199	; 0xc7f
 8005c54:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005c56:	4b09      	ldr	r3, [pc, #36]	; (8005c7c <MX_RTC_Init+0x44>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005c5c:	4b07      	ldr	r3, [pc, #28]	; (8005c7c <MX_RTC_Init+0x44>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005c62:	4b06      	ldr	r3, [pc, #24]	; (8005c7c <MX_RTC_Init+0x44>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005c68:	4804      	ldr	r0, [pc, #16]	; (8005c7c <MX_RTC_Init+0x44>)
 8005c6a:	f004 fcf3 	bl	800a654 <HAL_RTC_Init>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8005c74:	f7ff ffda 	bl	8005c2c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005c78:	bf00      	nop
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20005704 	.word	0x20005704
 8005c80:	40002800 	.word	0x40002800

08005c84 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a05      	ldr	r2, [pc, #20]	; (8005ca8 <HAL_RTC_MspInit+0x24>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d102      	bne.n	8005c9c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005c96:	4b05      	ldr	r3, [pc, #20]	; (8005cac <HAL_RTC_MspInit+0x28>)
 8005c98:	2201      	movs	r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	40002800 	.word	0x40002800
 8005cac:	42470e3c 	.word	0x42470e3c

08005cb0 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8005cb4:	4b17      	ldr	r3, [pc, #92]	; (8005d14 <MX_SPI5_Init+0x64>)
 8005cb6:	4a18      	ldr	r2, [pc, #96]	; (8005d18 <MX_SPI5_Init+0x68>)
 8005cb8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8005cba:	4b16      	ldr	r3, [pc, #88]	; (8005d14 <MX_SPI5_Init+0x64>)
 8005cbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005cc0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8005cc2:	4b14      	ldr	r3, [pc, #80]	; (8005d14 <MX_SPI5_Init+0x64>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8005cc8:	4b12      	ldr	r3, [pc, #72]	; (8005d14 <MX_SPI5_Init+0x64>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cce:	4b11      	ldr	r3, [pc, #68]	; (8005d14 <MX_SPI5_Init+0x64>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005cd4:	4b0f      	ldr	r3, [pc, #60]	; (8005d14 <MX_SPI5_Init+0x64>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8005cda:	4b0e      	ldr	r3, [pc, #56]	; (8005d14 <MX_SPI5_Init+0x64>)
 8005cdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ce0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8005ce2:	4b0c      	ldr	r3, [pc, #48]	; (8005d14 <MX_SPI5_Init+0x64>)
 8005ce4:	2230      	movs	r2, #48	; 0x30
 8005ce6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005ce8:	4b0a      	ldr	r3, [pc, #40]	; (8005d14 <MX_SPI5_Init+0x64>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8005cee:	4b09      	ldr	r3, [pc, #36]	; (8005d14 <MX_SPI5_Init+0x64>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cf4:	4b07      	ldr	r3, [pc, #28]	; (8005d14 <MX_SPI5_Init+0x64>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8005cfa:	4b06      	ldr	r3, [pc, #24]	; (8005d14 <MX_SPI5_Init+0x64>)
 8005cfc:	220a      	movs	r2, #10
 8005cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8005d00:	4804      	ldr	r0, [pc, #16]	; (8005d14 <MX_SPI5_Init+0x64>)
 8005d02:	f004 fd8c 	bl	800a81e <HAL_SPI_Init>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d001      	beq.n	8005d10 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8005d0c:	f7ff ff8e 	bl	8005c2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8005d10:	bf00      	nop
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	20005724 	.word	0x20005724
 8005d18:	40015000 	.word	0x40015000

08005d1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08a      	sub	sp, #40	; 0x28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d24:	f107 0314 	add.w	r3, r7, #20
 8005d28:	2200      	movs	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	605a      	str	r2, [r3, #4]
 8005d2e:	609a      	str	r2, [r3, #8]
 8005d30:	60da      	str	r2, [r3, #12]
 8005d32:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a19      	ldr	r2, [pc, #100]	; (8005da0 <HAL_SPI_MspInit+0x84>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d12c      	bne.n	8005d98 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8005d3e:	2300      	movs	r3, #0
 8005d40:	613b      	str	r3, [r7, #16]
 8005d42:	4b18      	ldr	r3, [pc, #96]	; (8005da4 <HAL_SPI_MspInit+0x88>)
 8005d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d46:	4a17      	ldr	r2, [pc, #92]	; (8005da4 <HAL_SPI_MspInit+0x88>)
 8005d48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8005d4e:	4b15      	ldr	r3, [pc, #84]	; (8005da4 <HAL_SPI_MspInit+0x88>)
 8005d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d56:	613b      	str	r3, [r7, #16]
 8005d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	4b11      	ldr	r3, [pc, #68]	; (8005da4 <HAL_SPI_MspInit+0x88>)
 8005d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d62:	4a10      	ldr	r2, [pc, #64]	; (8005da4 <HAL_SPI_MspInit+0x88>)
 8005d64:	f043 0320 	orr.w	r3, r3, #32
 8005d68:	6313      	str	r3, [r2, #48]	; 0x30
 8005d6a:	4b0e      	ldr	r3, [pc, #56]	; (8005da4 <HAL_SPI_MspInit+0x88>)
 8005d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6e:	f003 0320 	and.w	r3, r3, #32
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8005d76:	f44f 7360 	mov.w	r3, #896	; 0x380
 8005d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d80:	2300      	movs	r3, #0
 8005d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d84:	2303      	movs	r3, #3
 8005d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8005d88:	2305      	movs	r3, #5
 8005d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005d8c:	f107 0314 	add.w	r3, r7, #20
 8005d90:	4619      	mov	r1, r3
 8005d92:	4805      	ldr	r0, [pc, #20]	; (8005da8 <HAL_SPI_MspInit+0x8c>)
 8005d94:	f002 fac6 	bl	8008324 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8005d98:	bf00      	nop
 8005d9a:	3728      	adds	r7, #40	; 0x28
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	40015000 	.word	0x40015000
 8005da4:	40023800 	.word	0x40023800
 8005da8:	40021400 	.word	0x40021400

08005dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005db2:	2300      	movs	r3, #0
 8005db4:	607b      	str	r3, [r7, #4]
 8005db6:	4b12      	ldr	r3, [pc, #72]	; (8005e00 <HAL_MspInit+0x54>)
 8005db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dba:	4a11      	ldr	r2, [pc, #68]	; (8005e00 <HAL_MspInit+0x54>)
 8005dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8005dc2:	4b0f      	ldr	r3, [pc, #60]	; (8005e00 <HAL_MspInit+0x54>)
 8005dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dca:	607b      	str	r3, [r7, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005dce:	2300      	movs	r3, #0
 8005dd0:	603b      	str	r3, [r7, #0]
 8005dd2:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <HAL_MspInit+0x54>)
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd6:	4a0a      	ldr	r2, [pc, #40]	; (8005e00 <HAL_MspInit+0x54>)
 8005dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8005dde:	4b08      	ldr	r3, [pc, #32]	; (8005e00 <HAL_MspInit+0x54>)
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de6:	603b      	str	r3, [r7, #0]
 8005de8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005dea:	2200      	movs	r2, #0
 8005dec:	210f      	movs	r1, #15
 8005dee:	f06f 0001 	mvn.w	r0, #1
 8005df2:	f001 fe6b 	bl	8007acc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005df6:	bf00      	nop
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	40023800 	.word	0x40023800

08005e04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b08c      	sub	sp, #48	; 0x30
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005e10:	2300      	movs	r3, #0
 8005e12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8005e14:	2200      	movs	r2, #0
 8005e16:	6879      	ldr	r1, [r7, #4]
 8005e18:	201d      	movs	r0, #29
 8005e1a:	f001 fe57 	bl	8007acc <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005e1e:	201d      	movs	r0, #29
 8005e20:	f001 fe70 	bl	8007b04 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8005e24:	2300      	movs	r3, #0
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	4b1f      	ldr	r3, [pc, #124]	; (8005ea8 <HAL_InitTick+0xa4>)
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2c:	4a1e      	ldr	r2, [pc, #120]	; (8005ea8 <HAL_InitTick+0xa4>)
 8005e2e:	f043 0302 	orr.w	r3, r3, #2
 8005e32:	6413      	str	r3, [r2, #64]	; 0x40
 8005e34:	4b1c      	ldr	r3, [pc, #112]	; (8005ea8 <HAL_InitTick+0xa4>)
 8005e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005e40:	f107 0210 	add.w	r2, r7, #16
 8005e44:	f107 0314 	add.w	r3, r7, #20
 8005e48:	4611      	mov	r1, r2
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f004 fa12 	bl	800a274 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005e50:	f004 f9e8 	bl	800a224 <HAL_RCC_GetPCLK1Freq>
 8005e54:	4603      	mov	r3, r0
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5c:	4a13      	ldr	r2, [pc, #76]	; (8005eac <HAL_InitTick+0xa8>)
 8005e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e62:	0c9b      	lsrs	r3, r3, #18
 8005e64:	3b01      	subs	r3, #1
 8005e66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8005e68:	4b11      	ldr	r3, [pc, #68]	; (8005eb0 <HAL_InitTick+0xac>)
 8005e6a:	4a12      	ldr	r2, [pc, #72]	; (8005eb4 <HAL_InitTick+0xb0>)
 8005e6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8005e6e:	4b10      	ldr	r3, [pc, #64]	; (8005eb0 <HAL_InitTick+0xac>)
 8005e70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005e74:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8005e76:	4a0e      	ldr	r2, [pc, #56]	; (8005eb0 <HAL_InitTick+0xac>)
 8005e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8005e7c:	4b0c      	ldr	r3, [pc, #48]	; (8005eb0 <HAL_InitTick+0xac>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e82:	4b0b      	ldr	r3, [pc, #44]	; (8005eb0 <HAL_InitTick+0xac>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8005e88:	4809      	ldr	r0, [pc, #36]	; (8005eb0 <HAL_InitTick+0xac>)
 8005e8a:	f004 fd51 	bl	800a930 <HAL_TIM_Base_Init>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d104      	bne.n	8005e9e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8005e94:	4806      	ldr	r0, [pc, #24]	; (8005eb0 <HAL_InitTick+0xac>)
 8005e96:	f004 fe03 	bl	800aaa0 <HAL_TIM_Base_Start_IT>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	e000      	b.n	8005ea0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3730      	adds	r7, #48	; 0x30
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	40023800 	.word	0x40023800
 8005eac:	431bde83 	.word	0x431bde83
 8005eb0:	2000577c 	.word	0x2000577c
 8005eb4:	40000400 	.word	0x40000400

08005eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005ebc:	e7fe      	b.n	8005ebc <NMI_Handler+0x4>

08005ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ec2:	e7fe      	b.n	8005ec2 <HardFault_Handler+0x4>

08005ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ec8:	e7fe      	b.n	8005ec8 <MemManage_Handler+0x4>

08005eca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ece:	e7fe      	b.n	8005ece <BusFault_Handler+0x4>

08005ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ed4:	e7fe      	b.n	8005ed4 <UsageFault_Handler+0x4>

08005ed6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005eda:	bf00      	nop
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8005ee8:	4802      	ldr	r0, [pc, #8]	; (8005ef4 <DMA1_Stream0_IRQHandler+0x10>)
 8005eea:	f001 ffb1 	bl	8007e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005eee:	bf00      	nop
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20005b04 	.word	0x20005b04

08005ef8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005efc:	4802      	ldr	r0, [pc, #8]	; (8005f08 <DMA1_Stream3_IRQHandler+0x10>)
 8005efe:	f001 ffa7 	bl	8007e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005f02:	bf00      	nop
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20005940 	.word	0x20005940

08005f0c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8005f10:	4802      	ldr	r0, [pc, #8]	; (8005f1c <DMA1_Stream6_IRQHandler+0x10>)
 8005f12:	f001 ff9d 	bl	8007e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005f16:	bf00      	nop
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20005a60 	.word	0x20005a60

08005f20 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005f24:	4802      	ldr	r0, [pc, #8]	; (8005f30 <CAN1_TX_IRQHandler+0x10>)
 8005f26:	f001 faea 	bl	80074fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8005f2a:	bf00      	nop
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	200056c8 	.word	0x200056c8

08005f34 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005f38:	4802      	ldr	r0, [pc, #8]	; (8005f44 <CAN1_RX0_IRQHandler+0x10>)
 8005f3a:	f001 fae0 	bl	80074fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8005f3e:	bf00      	nop
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	200056c8 	.word	0x200056c8

08005f48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005f4c:	4802      	ldr	r0, [pc, #8]	; (8005f58 <TIM3_IRQHandler+0x10>)
 8005f4e:	f004 ff2f 	bl	800adb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005f52:	bf00      	nop
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	2000577c 	.word	0x2000577c

08005f5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005f60:	4802      	ldr	r0, [pc, #8]	; (8005f6c <USART3_IRQHandler+0x10>)
 8005f62:	f005 fee1 	bl	800bd28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005f66:	bf00      	nop
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	200058fc 	.word	0x200058fc

08005f70 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8005f74:	4802      	ldr	r0, [pc, #8]	; (8005f80 <DMA2_Stream1_IRQHandler+0x10>)
 8005f76:	f001 ff6b 	bl	8007e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8005f7a:	bf00      	nop
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	2000589c 	.word	0x2000589c

08005f84 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005f88:	4802      	ldr	r0, [pc, #8]	; (8005f94 <DMA2_Stream2_IRQHandler+0x10>)
 8005f8a:	f001 ff61 	bl	8007e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005f8e:	bf00      	nop
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	20005a00 	.word	0x20005a00

08005f98 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8005f9c:	4802      	ldr	r0, [pc, #8]	; (8005fa8 <CAN2_TX_IRQHandler+0x10>)
 8005f9e:	f001 faae 	bl	80074fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8005fa2:	bf00      	nop
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	200056a0 	.word	0x200056a0

08005fac <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8005fb0:	4802      	ldr	r0, [pc, #8]	; (8005fbc <CAN2_RX0_IRQHandler+0x10>)
 8005fb2:	f001 faa4 	bl	80074fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8005fb6:	bf00      	nop
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	200056a0 	.word	0x200056a0

08005fc0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005fc4:	4802      	ldr	r0, [pc, #8]	; (8005fd0 <OTG_FS_IRQHandler+0x10>)
 8005fc6:	f002 fcda 	bl	800897e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005fca:	bf00      	nop
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	20007100 	.word	0x20007100

08005fd4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8005fd8:	4802      	ldr	r0, [pc, #8]	; (8005fe4 <DMA2_Stream6_IRQHandler+0x10>)
 8005fda:	f001 ff39 	bl	8007e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005fde:	bf00      	nop
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	200059a0 	.word	0x200059a0

08005fe8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	  if (__HAL_UART_GET_FLAG(&huart6,UART_FLAG_IDLE) != RESET)
 8005fee:	4b18      	ldr	r3, [pc, #96]	; (8006050 <USART6_IRQHandler+0x68>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0310 	and.w	r3, r3, #16
 8005ff8:	2b10      	cmp	r3, #16
 8005ffa:	d122      	bne.n	8006042 <USART6_IRQHandler+0x5a>
	  {
	    __HAL_UART_CLEAR_IDLEFLAG(&huart6);
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	603b      	str	r3, [r7, #0]
 8006000:	4b13      	ldr	r3, [pc, #76]	; (8006050 <USART6_IRQHandler+0x68>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	603b      	str	r3, [r7, #0]
 8006008:	4b11      	ldr	r3, [pc, #68]	; (8006050 <USART6_IRQHandler+0x68>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	603b      	str	r3, [r7, #0]
 8006010:	683b      	ldr	r3, [r7, #0]
	    __attribute__((unused))  uint32_t _SR = huart6.Instance->SR;
 8006012:	4b0f      	ldr	r3, [pc, #60]	; (8006050 <USART6_IRQHandler+0x68>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	60fb      	str	r3, [r7, #12]
	    __attribute__((unused))  uint32_t _DR = huart6.Instance->DR;
 800601a:	4b0d      	ldr	r3, [pc, #52]	; (8006050 <USART6_IRQHandler+0x68>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	60bb      	str	r3, [r7, #8]
	    HAL_UART_DMAStop(&huart6);
 8006022:	480b      	ldr	r0, [pc, #44]	; (8006050 <USART6_IRQHandler+0x68>)
 8006024:	f005 fe25 	bl	800bc72 <HAL_UART_DMAStop>
	    uint32_t _NDTR = hdma_usart6_rx.Instance->NDTR;
 8006028:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <USART6_IRQHandler+0x6c>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	607b      	str	r3, [r7, #4]

	    uart6RxBuffer.len = uart6RxBuffer.size - _NDTR;
 8006030:	4b09      	ldr	r3, [pc, #36]	; (8006058 <USART6_IRQHandler+0x70>)
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	4a07      	ldr	r2, [pc, #28]	; (8006058 <USART6_IRQHandler+0x70>)
 800603a:	60d3      	str	r3, [r2, #12]

	    IO_Buffer_Release(&uart6RxBuffer);
 800603c:	4806      	ldr	r0, [pc, #24]	; (8006058 <USART6_IRQHandler+0x70>)
 800603e:	f7fe fb8b 	bl	8004758 <IO_Buffer_Release>
	  }
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8006042:	4803      	ldr	r0, [pc, #12]	; (8006050 <USART6_IRQHandler+0x68>)
 8006044:	f005 fe70 	bl	800bd28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8006048:	bf00      	nop
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	20005ba8 	.word	0x20005ba8
 8006054:	2000589c 	.word	0x2000589c
 8006058:	200055f4 	.word	0x200055f4

0800605c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8006060:	4802      	ldr	r0, [pc, #8]	; (800606c <UART8_IRQHandler+0x10>)
 8006062:	f005 fe61 	bl	800bd28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8006066:	bf00      	nop
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	20005b64 	.word	0x20005b64

08006070 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006078:	4a14      	ldr	r2, [pc, #80]	; (80060cc <_sbrk+0x5c>)
 800607a:	4b15      	ldr	r3, [pc, #84]	; (80060d0 <_sbrk+0x60>)
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006084:	4b13      	ldr	r3, [pc, #76]	; (80060d4 <_sbrk+0x64>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d102      	bne.n	8006092 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800608c:	4b11      	ldr	r3, [pc, #68]	; (80060d4 <_sbrk+0x64>)
 800608e:	4a12      	ldr	r2, [pc, #72]	; (80060d8 <_sbrk+0x68>)
 8006090:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006092:	4b10      	ldr	r3, [pc, #64]	; (80060d4 <_sbrk+0x64>)
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4413      	add	r3, r2
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	429a      	cmp	r2, r3
 800609e:	d207      	bcs.n	80060b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80060a0:	f00d fef2 	bl	8013e88 <__errno>
 80060a4:	4603      	mov	r3, r0
 80060a6:	220c      	movs	r2, #12
 80060a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80060aa:	f04f 33ff 	mov.w	r3, #4294967295
 80060ae:	e009      	b.n	80060c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80060b0:	4b08      	ldr	r3, [pc, #32]	; (80060d4 <_sbrk+0x64>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80060b6:	4b07      	ldr	r3, [pc, #28]	; (80060d4 <_sbrk+0x64>)
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4413      	add	r3, r2
 80060be:	4a05      	ldr	r2, [pc, #20]	; (80060d4 <_sbrk+0x64>)
 80060c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80060c2:	68fb      	ldr	r3, [r7, #12]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	20030000 	.word	0x20030000
 80060d0:	00002000 	.word	0x00002000
 80060d4:	20000384 	.word	0x20000384
 80060d8:	20007518 	.word	0x20007518

080060dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80060dc:	b480      	push	{r7}
 80060de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80060e0:	4b08      	ldr	r3, [pc, #32]	; (8006104 <SystemInit+0x28>)
 80060e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e6:	4a07      	ldr	r2, [pc, #28]	; (8006104 <SystemInit+0x28>)
 80060e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80060ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80060f0:	4b04      	ldr	r3, [pc, #16]	; (8006104 <SystemInit+0x28>)
 80060f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80060f6:	609a      	str	r2, [r3, #8]
#endif
}
 80060f8:	bf00      	nop
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	e000ed00 	.word	0xe000ed00

08006108 <MX_TIM4_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim12;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b08e      	sub	sp, #56	; 0x38
 800610c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800610e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006112:	2200      	movs	r2, #0
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	605a      	str	r2, [r3, #4]
 8006118:	609a      	str	r2, [r3, #8]
 800611a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800611c:	f107 0320 	add.w	r3, r7, #32
 8006120:	2200      	movs	r2, #0
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006126:	1d3b      	adds	r3, r7, #4
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	605a      	str	r2, [r3, #4]
 800612e:	609a      	str	r2, [r3, #8]
 8006130:	60da      	str	r2, [r3, #12]
 8006132:	611a      	str	r2, [r3, #16]
 8006134:	615a      	str	r2, [r3, #20]
 8006136:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006138:	4b32      	ldr	r3, [pc, #200]	; (8006204 <MX_TIM4_Init+0xfc>)
 800613a:	4a33      	ldr	r2, [pc, #204]	; (8006208 <MX_TIM4_Init+0x100>)
 800613c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800613e:	4b31      	ldr	r3, [pc, #196]	; (8006204 <MX_TIM4_Init+0xfc>)
 8006140:	2253      	movs	r2, #83	; 0x53
 8006142:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006144:	4b2f      	ldr	r3, [pc, #188]	; (8006204 <MX_TIM4_Init+0xfc>)
 8006146:	2200      	movs	r2, #0
 8006148:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 800614a:	4b2e      	ldr	r3, [pc, #184]	; (8006204 <MX_TIM4_Init+0xfc>)
 800614c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8006150:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006152:	4b2c      	ldr	r3, [pc, #176]	; (8006204 <MX_TIM4_Init+0xfc>)
 8006154:	2200      	movs	r2, #0
 8006156:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006158:	4b2a      	ldr	r3, [pc, #168]	; (8006204 <MX_TIM4_Init+0xfc>)
 800615a:	2200      	movs	r2, #0
 800615c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800615e:	4829      	ldr	r0, [pc, #164]	; (8006204 <MX_TIM4_Init+0xfc>)
 8006160:	f004 fbe6 	bl	800a930 <HAL_TIM_Base_Init>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800616a:	f7ff fd5f 	bl	8005c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800616e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006172:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8006174:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006178:	4619      	mov	r1, r3
 800617a:	4822      	ldr	r0, [pc, #136]	; (8006204 <MX_TIM4_Init+0xfc>)
 800617c:	f004 ffde 	bl	800b13c <HAL_TIM_ConfigClockSource>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d001      	beq.n	800618a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8006186:	f7ff fd51 	bl	8005c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800618a:	481e      	ldr	r0, [pc, #120]	; (8006204 <MX_TIM4_Init+0xfc>)
 800618c:	f004 fcf8 	bl	800ab80 <HAL_TIM_PWM_Init>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8006196:	f7ff fd49 	bl	8005c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800619a:	2300      	movs	r3, #0
 800619c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800619e:	2300      	movs	r3, #0
 80061a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80061a2:	f107 0320 	add.w	r3, r7, #32
 80061a6:	4619      	mov	r1, r3
 80061a8:	4816      	ldr	r0, [pc, #88]	; (8006204 <MX_TIM4_Init+0xfc>)
 80061aa:	f005 fbc3 	bl	800b934 <HAL_TIMEx_MasterConfigSynchronization>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80061b4:	f7ff fd3a 	bl	8005c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80061b8:	2360      	movs	r3, #96	; 0x60
 80061ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80061bc:	2300      	movs	r3, #0
 80061be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80061c0:	2300      	movs	r3, #0
 80061c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80061c4:	2300      	movs	r3, #0
 80061c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80061c8:	1d3b      	adds	r3, r7, #4
 80061ca:	2200      	movs	r2, #0
 80061cc:	4619      	mov	r1, r3
 80061ce:	480d      	ldr	r0, [pc, #52]	; (8006204 <MX_TIM4_Init+0xfc>)
 80061d0:	f004 fef6 	bl	800afc0 <HAL_TIM_PWM_ConfigChannel>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80061da:	f7ff fd27 	bl	8005c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80061de:	1d3b      	adds	r3, r7, #4
 80061e0:	2204      	movs	r2, #4
 80061e2:	4619      	mov	r1, r3
 80061e4:	4807      	ldr	r0, [pc, #28]	; (8006204 <MX_TIM4_Init+0xfc>)
 80061e6:	f004 feeb 	bl	800afc0 <HAL_TIM_PWM_ConfigChannel>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80061f0:	f7ff fd1c 	bl	8005c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80061f4:	4803      	ldr	r0, [pc, #12]	; (8006204 <MX_TIM4_Init+0xfc>)
 80061f6:	f000 f937 	bl	8006468 <HAL_TIM_MspPostInit>

}
 80061fa:	bf00      	nop
 80061fc:	3738      	adds	r7, #56	; 0x38
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	200057c4 	.word	0x200057c4
 8006208:	40000800 	.word	0x40000800

0800620c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b08a      	sub	sp, #40	; 0x28
 8006210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006212:	f107 0320 	add.w	r3, r7, #32
 8006216:	2200      	movs	r2, #0
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800621c:	1d3b      	adds	r3, r7, #4
 800621e:	2200      	movs	r2, #0
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	605a      	str	r2, [r3, #4]
 8006224:	609a      	str	r2, [r3, #8]
 8006226:	60da      	str	r2, [r3, #12]
 8006228:	611a      	str	r2, [r3, #16]
 800622a:	615a      	str	r2, [r3, #20]
 800622c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800622e:	4b2d      	ldr	r3, [pc, #180]	; (80062e4 <MX_TIM5_Init+0xd8>)
 8006230:	4a2d      	ldr	r2, [pc, #180]	; (80062e8 <MX_TIM5_Init+0xdc>)
 8006232:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8006234:	4b2b      	ldr	r3, [pc, #172]	; (80062e4 <MX_TIM5_Init+0xd8>)
 8006236:	2200      	movs	r2, #0
 8006238:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800623a:	4b2a      	ldr	r3, [pc, #168]	; (80062e4 <MX_TIM5_Init+0xd8>)
 800623c:	2200      	movs	r2, #0
 800623e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8006240:	4b28      	ldr	r3, [pc, #160]	; (80062e4 <MX_TIM5_Init+0xd8>)
 8006242:	f04f 32ff 	mov.w	r2, #4294967295
 8006246:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006248:	4b26      	ldr	r3, [pc, #152]	; (80062e4 <MX_TIM5_Init+0xd8>)
 800624a:	2200      	movs	r2, #0
 800624c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800624e:	4b25      	ldr	r3, [pc, #148]	; (80062e4 <MX_TIM5_Init+0xd8>)
 8006250:	2200      	movs	r2, #0
 8006252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8006254:	4823      	ldr	r0, [pc, #140]	; (80062e4 <MX_TIM5_Init+0xd8>)
 8006256:	f004 fc93 	bl	800ab80 <HAL_TIM_PWM_Init>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8006260:	f7ff fce4 	bl	8005c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006264:	2300      	movs	r3, #0
 8006266:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006268:	2300      	movs	r3, #0
 800626a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800626c:	f107 0320 	add.w	r3, r7, #32
 8006270:	4619      	mov	r1, r3
 8006272:	481c      	ldr	r0, [pc, #112]	; (80062e4 <MX_TIM5_Init+0xd8>)
 8006274:	f005 fb5e 	bl	800b934 <HAL_TIMEx_MasterConfigSynchronization>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800627e:	f7ff fcd5 	bl	8005c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006282:	2360      	movs	r3, #96	; 0x60
 8006284:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006286:	2300      	movs	r3, #0
 8006288:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800628a:	2300      	movs	r3, #0
 800628c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800628e:	2300      	movs	r3, #0
 8006290:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006292:	1d3b      	adds	r3, r7, #4
 8006294:	2200      	movs	r2, #0
 8006296:	4619      	mov	r1, r3
 8006298:	4812      	ldr	r0, [pc, #72]	; (80062e4 <MX_TIM5_Init+0xd8>)
 800629a:	f004 fe91 	bl	800afc0 <HAL_TIM_PWM_ConfigChannel>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80062a4:	f7ff fcc2 	bl	8005c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80062a8:	1d3b      	adds	r3, r7, #4
 80062aa:	2204      	movs	r2, #4
 80062ac:	4619      	mov	r1, r3
 80062ae:	480d      	ldr	r0, [pc, #52]	; (80062e4 <MX_TIM5_Init+0xd8>)
 80062b0:	f004 fe86 	bl	800afc0 <HAL_TIM_PWM_ConfigChannel>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80062ba:	f7ff fcb7 	bl	8005c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80062be:	1d3b      	adds	r3, r7, #4
 80062c0:	2208      	movs	r2, #8
 80062c2:	4619      	mov	r1, r3
 80062c4:	4807      	ldr	r0, [pc, #28]	; (80062e4 <MX_TIM5_Init+0xd8>)
 80062c6:	f004 fe7b 	bl	800afc0 <HAL_TIM_PWM_ConfigChannel>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d001      	beq.n	80062d4 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 80062d0:	f7ff fcac 	bl	8005c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80062d4:	4803      	ldr	r0, [pc, #12]	; (80062e4 <MX_TIM5_Init+0xd8>)
 80062d6:	f000 f8c7 	bl	8006468 <HAL_TIM_MspPostInit>

}
 80062da:	bf00      	nop
 80062dc:	3728      	adds	r7, #40	; 0x28
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	2000580c 	.word	0x2000580c
 80062e8:	40000c00 	.word	0x40000c00

080062ec <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08c      	sub	sp, #48	; 0x30
 80062f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80062f2:	f107 0320 	add.w	r3, r7, #32
 80062f6:	2200      	movs	r2, #0
 80062f8:	601a      	str	r2, [r3, #0]
 80062fa:	605a      	str	r2, [r3, #4]
 80062fc:	609a      	str	r2, [r3, #8]
 80062fe:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006300:	1d3b      	adds	r3, r7, #4
 8006302:	2200      	movs	r2, #0
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	605a      	str	r2, [r3, #4]
 8006308:	609a      	str	r2, [r3, #8]
 800630a:	60da      	str	r2, [r3, #12]
 800630c:	611a      	str	r2, [r3, #16]
 800630e:	615a      	str	r2, [r3, #20]
 8006310:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8006312:	4b26      	ldr	r3, [pc, #152]	; (80063ac <MX_TIM12_Init+0xc0>)
 8006314:	4a26      	ldr	r2, [pc, #152]	; (80063b0 <MX_TIM12_Init+0xc4>)
 8006316:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1281;
 8006318:	4b24      	ldr	r3, [pc, #144]	; (80063ac <MX_TIM12_Init+0xc0>)
 800631a:	f240 5201 	movw	r2, #1281	; 0x501
 800631e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006320:	4b22      	ldr	r3, [pc, #136]	; (80063ac <MX_TIM12_Init+0xc0>)
 8006322:	2200      	movs	r2, #0
 8006324:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 31111;
 8006326:	4b21      	ldr	r3, [pc, #132]	; (80063ac <MX_TIM12_Init+0xc0>)
 8006328:	f647 1287 	movw	r2, #31111	; 0x7987
 800632c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800632e:	4b1f      	ldr	r3, [pc, #124]	; (80063ac <MX_TIM12_Init+0xc0>)
 8006330:	2200      	movs	r2, #0
 8006332:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006334:	4b1d      	ldr	r3, [pc, #116]	; (80063ac <MX_TIM12_Init+0xc0>)
 8006336:	2200      	movs	r2, #0
 8006338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800633a:	481c      	ldr	r0, [pc, #112]	; (80063ac <MX_TIM12_Init+0xc0>)
 800633c:	f004 faf8 	bl	800a930 <HAL_TIM_Base_Init>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8006346:	f7ff fc71 	bl	8005c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800634a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800634e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8006350:	f107 0320 	add.w	r3, r7, #32
 8006354:	4619      	mov	r1, r3
 8006356:	4815      	ldr	r0, [pc, #84]	; (80063ac <MX_TIM12_Init+0xc0>)
 8006358:	f004 fef0 	bl	800b13c <HAL_TIM_ConfigClockSource>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 8006362:	f7ff fc63 	bl	8005c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8006366:	4811      	ldr	r0, [pc, #68]	; (80063ac <MX_TIM12_Init+0xc0>)
 8006368:	f004 fc0a 	bl	800ab80 <HAL_TIM_PWM_Init>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8006372:	f7ff fc5b 	bl	8005c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006376:	2360      	movs	r3, #96	; 0x60
 8006378:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800637a:	2300      	movs	r3, #0
 800637c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800637e:	2300      	movs	r3, #0
 8006380:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006382:	2300      	movs	r3, #0
 8006384:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006386:	1d3b      	adds	r3, r7, #4
 8006388:	2200      	movs	r2, #0
 800638a:	4619      	mov	r1, r3
 800638c:	4807      	ldr	r0, [pc, #28]	; (80063ac <MX_TIM12_Init+0xc0>)
 800638e:	f004 fe17 	bl	800afc0 <HAL_TIM_PWM_ConfigChannel>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d001      	beq.n	800639c <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8006398:	f7ff fc48 	bl	8005c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800639c:	4803      	ldr	r0, [pc, #12]	; (80063ac <MX_TIM12_Init+0xc0>)
 800639e:	f000 f863 	bl	8006468 <HAL_TIM_MspPostInit>

}
 80063a2:	bf00      	nop
 80063a4:	3730      	adds	r7, #48	; 0x30
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20005854 	.word	0x20005854
 80063b0:	40001800 	.word	0x40001800

080063b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a15      	ldr	r2, [pc, #84]	; (8006418 <HAL_TIM_Base_MspInit+0x64>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d10e      	bne.n	80063e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80063c6:	2300      	movs	r3, #0
 80063c8:	60fb      	str	r3, [r7, #12]
 80063ca:	4b14      	ldr	r3, [pc, #80]	; (800641c <HAL_TIM_Base_MspInit+0x68>)
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	4a13      	ldr	r2, [pc, #76]	; (800641c <HAL_TIM_Base_MspInit+0x68>)
 80063d0:	f043 0304 	orr.w	r3, r3, #4
 80063d4:	6413      	str	r3, [r2, #64]	; 0x40
 80063d6:	4b11      	ldr	r3, [pc, #68]	; (800641c <HAL_TIM_Base_MspInit+0x68>)
 80063d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063da:	f003 0304 	and.w	r3, r3, #4
 80063de:	60fb      	str	r3, [r7, #12]
 80063e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80063e2:	e012      	b.n	800640a <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM12)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a0d      	ldr	r2, [pc, #52]	; (8006420 <HAL_TIM_Base_MspInit+0x6c>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d10d      	bne.n	800640a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80063ee:	2300      	movs	r3, #0
 80063f0:	60bb      	str	r3, [r7, #8]
 80063f2:	4b0a      	ldr	r3, [pc, #40]	; (800641c <HAL_TIM_Base_MspInit+0x68>)
 80063f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f6:	4a09      	ldr	r2, [pc, #36]	; (800641c <HAL_TIM_Base_MspInit+0x68>)
 80063f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063fc:	6413      	str	r3, [r2, #64]	; 0x40
 80063fe:	4b07      	ldr	r3, [pc, #28]	; (800641c <HAL_TIM_Base_MspInit+0x68>)
 8006400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006406:	60bb      	str	r3, [r7, #8]
 8006408:	68bb      	ldr	r3, [r7, #8]
}
 800640a:	bf00      	nop
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40000800 	.word	0x40000800
 800641c:	40023800 	.word	0x40023800
 8006420:	40001800 	.word	0x40001800

08006424 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a0b      	ldr	r2, [pc, #44]	; (8006460 <HAL_TIM_PWM_MspInit+0x3c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d10d      	bne.n	8006452 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006436:	2300      	movs	r3, #0
 8006438:	60fb      	str	r3, [r7, #12]
 800643a:	4b0a      	ldr	r3, [pc, #40]	; (8006464 <HAL_TIM_PWM_MspInit+0x40>)
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	4a09      	ldr	r2, [pc, #36]	; (8006464 <HAL_TIM_PWM_MspInit+0x40>)
 8006440:	f043 0308 	orr.w	r3, r3, #8
 8006444:	6413      	str	r3, [r2, #64]	; 0x40
 8006446:	4b07      	ldr	r3, [pc, #28]	; (8006464 <HAL_TIM_PWM_MspInit+0x40>)
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	f003 0308 	and.w	r3, r3, #8
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8006452:	bf00      	nop
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	40000c00 	.word	0x40000c00
 8006464:	40023800 	.word	0x40023800

08006468 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b08a      	sub	sp, #40	; 0x28
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006470:	f107 0314 	add.w	r3, r7, #20
 8006474:	2200      	movs	r2, #0
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	605a      	str	r2, [r3, #4]
 800647a:	609a      	str	r2, [r3, #8]
 800647c:	60da      	str	r2, [r3, #12]
 800647e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a3f      	ldr	r2, [pc, #252]	; (8006584 <HAL_TIM_MspPostInit+0x11c>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d12a      	bne.n	80064e0 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800648a:	2300      	movs	r3, #0
 800648c:	613b      	str	r3, [r7, #16]
 800648e:	4b3e      	ldr	r3, [pc, #248]	; (8006588 <HAL_TIM_MspPostInit+0x120>)
 8006490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006492:	4a3d      	ldr	r2, [pc, #244]	; (8006588 <HAL_TIM_MspPostInit+0x120>)
 8006494:	f043 0308 	orr.w	r3, r3, #8
 8006498:	6313      	str	r3, [r2, #48]	; 0x30
 800649a:	4b3b      	ldr	r3, [pc, #236]	; (8006588 <HAL_TIM_MspPostInit+0x120>)
 800649c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649e:	f003 0308 	and.w	r3, r3, #8
 80064a2:	613b      	str	r3, [r7, #16]
 80064a4:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 80064a6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80064aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064ac:	2302      	movs	r3, #2
 80064ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b0:	2300      	movs	r3, #0
 80064b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064b4:	2300      	movs	r3, #0
 80064b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80064b8:	2302      	movs	r3, #2
 80064ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064bc:	f107 0314 	add.w	r3, r7, #20
 80064c0:	4619      	mov	r1, r3
 80064c2:	4832      	ldr	r0, [pc, #200]	; (800658c <HAL_TIM_MspPostInit+0x124>)
 80064c4:	f001 ff2e 	bl	8008324 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspPostInit 1 */
    HAL_TIM_Base_Start(&htim4);
 80064c8:	4831      	ldr	r0, [pc, #196]	; (8006590 <HAL_TIM_MspPostInit+0x128>)
 80064ca:	f004 fa81 	bl	800a9d0 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80064ce:	2100      	movs	r1, #0
 80064d0:	482f      	ldr	r0, [pc, #188]	; (8006590 <HAL_TIM_MspPostInit+0x128>)
 80064d2:	f004 fba5 	bl	800ac20 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80064d6:	2104      	movs	r1, #4
 80064d8:	482d      	ldr	r0, [pc, #180]	; (8006590 <HAL_TIM_MspPostInit+0x128>)
 80064da:	f004 fba1 	bl	800ac20 <HAL_TIM_PWM_Start>
    HAL_TIM_Base_Start(&htim12);
    HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80064de:	e04d      	b.n	800657c <HAL_TIM_MspPostInit+0x114>
  else if(timHandle->Instance==TIM5)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a2b      	ldr	r2, [pc, #172]	; (8006594 <HAL_TIM_MspPostInit+0x12c>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d11e      	bne.n	8006528 <HAL_TIM_MspPostInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064ea:	2300      	movs	r3, #0
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	4b26      	ldr	r3, [pc, #152]	; (8006588 <HAL_TIM_MspPostInit+0x120>)
 80064f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f2:	4a25      	ldr	r2, [pc, #148]	; (8006588 <HAL_TIM_MspPostInit+0x120>)
 80064f4:	f043 0301 	orr.w	r3, r3, #1
 80064f8:	6313      	str	r3, [r2, #48]	; 0x30
 80064fa:	4b23      	ldr	r3, [pc, #140]	; (8006588 <HAL_TIM_MspPostInit+0x120>)
 80064fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2;
 8006506:	2307      	movs	r3, #7
 8006508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800650a:	2302      	movs	r3, #2
 800650c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800650e:	2300      	movs	r3, #0
 8006510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006512:	2300      	movs	r3, #0
 8006514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006516:	2302      	movs	r3, #2
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800651a:	f107 0314 	add.w	r3, r7, #20
 800651e:	4619      	mov	r1, r3
 8006520:	481d      	ldr	r0, [pc, #116]	; (8006598 <HAL_TIM_MspPostInit+0x130>)
 8006522:	f001 feff 	bl	8008324 <HAL_GPIO_Init>
}
 8006526:	e029      	b.n	800657c <HAL_TIM_MspPostInit+0x114>
  else if(timHandle->Instance==TIM12)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a1b      	ldr	r2, [pc, #108]	; (800659c <HAL_TIM_MspPostInit+0x134>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d124      	bne.n	800657c <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006532:	2300      	movs	r3, #0
 8006534:	60bb      	str	r3, [r7, #8]
 8006536:	4b14      	ldr	r3, [pc, #80]	; (8006588 <HAL_TIM_MspPostInit+0x120>)
 8006538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653a:	4a13      	ldr	r2, [pc, #76]	; (8006588 <HAL_TIM_MspPostInit+0x120>)
 800653c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006540:	6313      	str	r3, [r2, #48]	; 0x30
 8006542:	4b11      	ldr	r3, [pc, #68]	; (8006588 <HAL_TIM_MspPostInit+0x120>)
 8006544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654a:	60bb      	str	r3, [r7, #8]
 800654c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800654e:	2340      	movs	r3, #64	; 0x40
 8006550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006552:	2302      	movs	r3, #2
 8006554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006556:	2301      	movs	r3, #1
 8006558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800655a:	2303      	movs	r3, #3
 800655c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800655e:	2309      	movs	r3, #9
 8006560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8006562:	f107 0314 	add.w	r3, r7, #20
 8006566:	4619      	mov	r1, r3
 8006568:	480d      	ldr	r0, [pc, #52]	; (80065a0 <HAL_TIM_MspPostInit+0x138>)
 800656a:	f001 fedb 	bl	8008324 <HAL_GPIO_Init>
    HAL_TIM_Base_Start(&htim12);
 800656e:	480d      	ldr	r0, [pc, #52]	; (80065a4 <HAL_TIM_MspPostInit+0x13c>)
 8006570:	f004 fa2e 	bl	800a9d0 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8006574:	2100      	movs	r1, #0
 8006576:	480b      	ldr	r0, [pc, #44]	; (80065a4 <HAL_TIM_MspPostInit+0x13c>)
 8006578:	f004 fb52 	bl	800ac20 <HAL_TIM_PWM_Start>
}
 800657c:	bf00      	nop
 800657e:	3728      	adds	r7, #40	; 0x28
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	40000800 	.word	0x40000800
 8006588:	40023800 	.word	0x40023800
 800658c:	40020c00 	.word	0x40020c00
 8006590:	200057c4 	.word	0x200057c4
 8006594:	40000c00 	.word	0x40000c00
 8006598:	40020000 	.word	0x40020000
 800659c:	40001800 	.word	0x40001800
 80065a0:	40021c00 	.word	0x40021c00
 80065a4:	20005854 	.word	0x20005854

080065a8 <MX_UART8_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART8 init function */
void MX_UART8_Init(void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80065ac:	4b11      	ldr	r3, [pc, #68]	; (80065f4 <MX_UART8_Init+0x4c>)
 80065ae:	4a12      	ldr	r2, [pc, #72]	; (80065f8 <MX_UART8_Init+0x50>)
 80065b0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80065b2:	4b10      	ldr	r3, [pc, #64]	; (80065f4 <MX_UART8_Init+0x4c>)
 80065b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80065b8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80065ba:	4b0e      	ldr	r3, [pc, #56]	; (80065f4 <MX_UART8_Init+0x4c>)
 80065bc:	2200      	movs	r2, #0
 80065be:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80065c0:	4b0c      	ldr	r3, [pc, #48]	; (80065f4 <MX_UART8_Init+0x4c>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80065c6:	4b0b      	ldr	r3, [pc, #44]	; (80065f4 <MX_UART8_Init+0x4c>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80065cc:	4b09      	ldr	r3, [pc, #36]	; (80065f4 <MX_UART8_Init+0x4c>)
 80065ce:	220c      	movs	r2, #12
 80065d0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80065d2:	4b08      	ldr	r3, [pc, #32]	; (80065f4 <MX_UART8_Init+0x4c>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80065d8:	4b06      	ldr	r3, [pc, #24]	; (80065f4 <MX_UART8_Init+0x4c>)
 80065da:	2200      	movs	r2, #0
 80065dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80065de:	4805      	ldr	r0, [pc, #20]	; (80065f4 <MX_UART8_Init+0x4c>)
 80065e0:	f005 fa38 	bl	800ba54 <HAL_UART_Init>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80065ea:	f7ff fb1f 	bl	8005c2c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80065ee:	bf00      	nop
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	20005b64 	.word	0x20005b64
 80065f8:	40007c00 	.word	0x40007c00

080065fc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006600:	4b11      	ldr	r3, [pc, #68]	; (8006648 <MX_USART1_UART_Init+0x4c>)
 8006602:	4a12      	ldr	r2, [pc, #72]	; (800664c <MX_USART1_UART_Init+0x50>)
 8006604:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8006606:	4b10      	ldr	r3, [pc, #64]	; (8006648 <MX_USART1_UART_Init+0x4c>)
 8006608:	4a11      	ldr	r2, [pc, #68]	; (8006650 <MX_USART1_UART_Init+0x54>)
 800660a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800660c:	4b0e      	ldr	r3, [pc, #56]	; (8006648 <MX_USART1_UART_Init+0x4c>)
 800660e:	2200      	movs	r2, #0
 8006610:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006612:	4b0d      	ldr	r3, [pc, #52]	; (8006648 <MX_USART1_UART_Init+0x4c>)
 8006614:	2200      	movs	r2, #0
 8006616:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8006618:	4b0b      	ldr	r3, [pc, #44]	; (8006648 <MX_USART1_UART_Init+0x4c>)
 800661a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800661e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006620:	4b09      	ldr	r3, [pc, #36]	; (8006648 <MX_USART1_UART_Init+0x4c>)
 8006622:	220c      	movs	r2, #12
 8006624:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006626:	4b08      	ldr	r3, [pc, #32]	; (8006648 <MX_USART1_UART_Init+0x4c>)
 8006628:	2200      	movs	r2, #0
 800662a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800662c:	4b06      	ldr	r3, [pc, #24]	; (8006648 <MX_USART1_UART_Init+0x4c>)
 800662e:	2200      	movs	r2, #0
 8006630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006632:	4805      	ldr	r0, [pc, #20]	; (8006648 <MX_USART1_UART_Init+0x4c>)
 8006634:	f005 fa0e 	bl	800ba54 <HAL_UART_Init>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800663e:	f7ff faf5 	bl	8005c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006642:	bf00      	nop
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	20005ac0 	.word	0x20005ac0
 800664c:	40011000 	.word	0x40011000
 8006650:	000186a0 	.word	0x000186a0

08006654 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006658:	4b11      	ldr	r3, [pc, #68]	; (80066a0 <MX_USART3_UART_Init+0x4c>)
 800665a:	4a12      	ldr	r2, [pc, #72]	; (80066a4 <MX_USART3_UART_Init+0x50>)
 800665c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800665e:	4b10      	ldr	r3, [pc, #64]	; (80066a0 <MX_USART3_UART_Init+0x4c>)
 8006660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006664:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006666:	4b0e      	ldr	r3, [pc, #56]	; (80066a0 <MX_USART3_UART_Init+0x4c>)
 8006668:	2200      	movs	r2, #0
 800666a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800666c:	4b0c      	ldr	r3, [pc, #48]	; (80066a0 <MX_USART3_UART_Init+0x4c>)
 800666e:	2200      	movs	r2, #0
 8006670:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006672:	4b0b      	ldr	r3, [pc, #44]	; (80066a0 <MX_USART3_UART_Init+0x4c>)
 8006674:	2200      	movs	r2, #0
 8006676:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006678:	4b09      	ldr	r3, [pc, #36]	; (80066a0 <MX_USART3_UART_Init+0x4c>)
 800667a:	220c      	movs	r2, #12
 800667c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800667e:	4b08      	ldr	r3, [pc, #32]	; (80066a0 <MX_USART3_UART_Init+0x4c>)
 8006680:	2200      	movs	r2, #0
 8006682:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006684:	4b06      	ldr	r3, [pc, #24]	; (80066a0 <MX_USART3_UART_Init+0x4c>)
 8006686:	2200      	movs	r2, #0
 8006688:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800668a:	4805      	ldr	r0, [pc, #20]	; (80066a0 <MX_USART3_UART_Init+0x4c>)
 800668c:	f005 f9e2 	bl	800ba54 <HAL_UART_Init>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8006696:	f7ff fac9 	bl	8005c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800669a:	bf00      	nop
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	200058fc 	.word	0x200058fc
 80066a4:	40004800 	.word	0x40004800

080066a8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80066ac:	4b11      	ldr	r3, [pc, #68]	; (80066f4 <MX_USART6_UART_Init+0x4c>)
 80066ae:	4a12      	ldr	r2, [pc, #72]	; (80066f8 <MX_USART6_UART_Init+0x50>)
 80066b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80066b2:	4b10      	ldr	r3, [pc, #64]	; (80066f4 <MX_USART6_UART_Init+0x4c>)
 80066b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80066b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80066ba:	4b0e      	ldr	r3, [pc, #56]	; (80066f4 <MX_USART6_UART_Init+0x4c>)
 80066bc:	2200      	movs	r2, #0
 80066be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80066c0:	4b0c      	ldr	r3, [pc, #48]	; (80066f4 <MX_USART6_UART_Init+0x4c>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80066c6:	4b0b      	ldr	r3, [pc, #44]	; (80066f4 <MX_USART6_UART_Init+0x4c>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80066cc:	4b09      	ldr	r3, [pc, #36]	; (80066f4 <MX_USART6_UART_Init+0x4c>)
 80066ce:	220c      	movs	r2, #12
 80066d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80066d2:	4b08      	ldr	r3, [pc, #32]	; (80066f4 <MX_USART6_UART_Init+0x4c>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80066d8:	4b06      	ldr	r3, [pc, #24]	; (80066f4 <MX_USART6_UART_Init+0x4c>)
 80066da:	2200      	movs	r2, #0
 80066dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80066de:	4805      	ldr	r0, [pc, #20]	; (80066f4 <MX_USART6_UART_Init+0x4c>)
 80066e0:	f005 f9b8 	bl	800ba54 <HAL_UART_Init>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80066ea:	f7ff fa9f 	bl	8005c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80066ee:	bf00      	nop
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	20005ba8 	.word	0x20005ba8
 80066f8:	40011400 	.word	0x40011400

080066fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b090      	sub	sp, #64	; 0x40
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006704:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006708:	2200      	movs	r2, #0
 800670a:	601a      	str	r2, [r3, #0]
 800670c:	605a      	str	r2, [r3, #4]
 800670e:	609a      	str	r2, [r3, #8]
 8006710:	60da      	str	r2, [r3, #12]
 8006712:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a7e      	ldr	r2, [pc, #504]	; (8006914 <HAL_UART_MspInit+0x218>)
 800671a:	4293      	cmp	r3, r2
 800671c:	f040 8091 	bne.w	8006842 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8006720:	2300      	movs	r3, #0
 8006722:	62bb      	str	r3, [r7, #40]	; 0x28
 8006724:	4b7c      	ldr	r3, [pc, #496]	; (8006918 <HAL_UART_MspInit+0x21c>)
 8006726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006728:	4a7b      	ldr	r2, [pc, #492]	; (8006918 <HAL_UART_MspInit+0x21c>)
 800672a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800672e:	6413      	str	r3, [r2, #64]	; 0x40
 8006730:	4b79      	ldr	r3, [pc, #484]	; (8006918 <HAL_UART_MspInit+0x21c>)
 8006732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006734:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006738:	62bb      	str	r3, [r7, #40]	; 0x28
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800673c:	2300      	movs	r3, #0
 800673e:	627b      	str	r3, [r7, #36]	; 0x24
 8006740:	4b75      	ldr	r3, [pc, #468]	; (8006918 <HAL_UART_MspInit+0x21c>)
 8006742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006744:	4a74      	ldr	r2, [pc, #464]	; (8006918 <HAL_UART_MspInit+0x21c>)
 8006746:	f043 0310 	orr.w	r3, r3, #16
 800674a:	6313      	str	r3, [r2, #48]	; 0x30
 800674c:	4b72      	ldr	r3, [pc, #456]	; (8006918 <HAL_UART_MspInit+0x21c>)
 800674e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006750:	f003 0310 	and.w	r3, r3, #16
 8006754:	627b      	str	r3, [r7, #36]	; 0x24
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8006758:	2303      	movs	r3, #3
 800675a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800675c:	2302      	movs	r3, #2
 800675e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006760:	2301      	movs	r3, #1
 8006762:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006764:	2303      	movs	r3, #3
 8006766:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8006768:	2308      	movs	r3, #8
 800676a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800676c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006770:	4619      	mov	r1, r3
 8006772:	486a      	ldr	r0, [pc, #424]	; (800691c <HAL_UART_MspInit+0x220>)
 8006774:	f001 fdd6 	bl	8008324 <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_TX Init */
    hdma_uart8_tx.Instance = DMA1_Stream0;
 8006778:	4b69      	ldr	r3, [pc, #420]	; (8006920 <HAL_UART_MspInit+0x224>)
 800677a:	4a6a      	ldr	r2, [pc, #424]	; (8006924 <HAL_UART_MspInit+0x228>)
 800677c:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Channel = DMA_CHANNEL_5;
 800677e:	4b68      	ldr	r3, [pc, #416]	; (8006920 <HAL_UART_MspInit+0x224>)
 8006780:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8006784:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006786:	4b66      	ldr	r3, [pc, #408]	; (8006920 <HAL_UART_MspInit+0x224>)
 8006788:	2240      	movs	r2, #64	; 0x40
 800678a:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800678c:	4b64      	ldr	r3, [pc, #400]	; (8006920 <HAL_UART_MspInit+0x224>)
 800678e:	2200      	movs	r2, #0
 8006790:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006792:	4b63      	ldr	r3, [pc, #396]	; (8006920 <HAL_UART_MspInit+0x224>)
 8006794:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006798:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800679a:	4b61      	ldr	r3, [pc, #388]	; (8006920 <HAL_UART_MspInit+0x224>)
 800679c:	2200      	movs	r2, #0
 800679e:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80067a0:	4b5f      	ldr	r3, [pc, #380]	; (8006920 <HAL_UART_MspInit+0x224>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 80067a6:	4b5e      	ldr	r3, [pc, #376]	; (8006920 <HAL_UART_MspInit+0x224>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 80067ac:	4b5c      	ldr	r3, [pc, #368]	; (8006920 <HAL_UART_MspInit+0x224>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067b2:	4b5b      	ldr	r3, [pc, #364]	; (8006920 <HAL_UART_MspInit+0x224>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 80067b8:	4859      	ldr	r0, [pc, #356]	; (8006920 <HAL_UART_MspInit+0x224>)
 80067ba:	f001 f9b1 	bl	8007b20 <HAL_DMA_Init>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80067c4:	f7ff fa32 	bl	8005c2c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart8_tx);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a55      	ldr	r2, [pc, #340]	; (8006920 <HAL_UART_MspInit+0x224>)
 80067cc:	635a      	str	r2, [r3, #52]	; 0x34
 80067ce:	4a54      	ldr	r2, [pc, #336]	; (8006920 <HAL_UART_MspInit+0x224>)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream6;
 80067d4:	4b54      	ldr	r3, [pc, #336]	; (8006928 <HAL_UART_MspInit+0x22c>)
 80067d6:	4a55      	ldr	r2, [pc, #340]	; (800692c <HAL_UART_MspInit+0x230>)
 80067d8:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 80067da:	4b53      	ldr	r3, [pc, #332]	; (8006928 <HAL_UART_MspInit+0x22c>)
 80067dc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80067e0:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80067e2:	4b51      	ldr	r3, [pc, #324]	; (8006928 <HAL_UART_MspInit+0x22c>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80067e8:	4b4f      	ldr	r3, [pc, #316]	; (8006928 <HAL_UART_MspInit+0x22c>)
 80067ea:	2200      	movs	r2, #0
 80067ec:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 80067ee:	4b4e      	ldr	r3, [pc, #312]	; (8006928 <HAL_UART_MspInit+0x22c>)
 80067f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067f4:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80067f6:	4b4c      	ldr	r3, [pc, #304]	; (8006928 <HAL_UART_MspInit+0x22c>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80067fc:	4b4a      	ldr	r3, [pc, #296]	; (8006928 <HAL_UART_MspInit+0x22c>)
 80067fe:	2200      	movs	r2, #0
 8006800:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8006802:	4b49      	ldr	r3, [pc, #292]	; (8006928 <HAL_UART_MspInit+0x22c>)
 8006804:	2200      	movs	r2, #0
 8006806:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006808:	4b47      	ldr	r3, [pc, #284]	; (8006928 <HAL_UART_MspInit+0x22c>)
 800680a:	2200      	movs	r2, #0
 800680c:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800680e:	4b46      	ldr	r3, [pc, #280]	; (8006928 <HAL_UART_MspInit+0x22c>)
 8006810:	2200      	movs	r2, #0
 8006812:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8006814:	4844      	ldr	r0, [pc, #272]	; (8006928 <HAL_UART_MspInit+0x22c>)
 8006816:	f001 f983 	bl	8007b20 <HAL_DMA_Init>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8006820:	f7ff fa04 	bl	8005c2c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a40      	ldr	r2, [pc, #256]	; (8006928 <HAL_UART_MspInit+0x22c>)
 8006828:	639a      	str	r2, [r3, #56]	; 0x38
 800682a:	4a3f      	ldr	r2, [pc, #252]	; (8006928 <HAL_UART_MspInit+0x22c>)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8006830:	2200      	movs	r2, #0
 8006832:	2105      	movs	r1, #5
 8006834:	2053      	movs	r0, #83	; 0x53
 8006836:	f001 f949 	bl	8007acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800683a:	2053      	movs	r0, #83	; 0x53
 800683c:	f001 f962 	bl	8007b04 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8006840:	e17f      	b.n	8006b42 <HAL_UART_MspInit+0x446>
  else if(uartHandle->Instance==USART1)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a3a      	ldr	r2, [pc, #232]	; (8006930 <HAL_UART_MspInit+0x234>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d179      	bne.n	8006940 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART1_CLK_ENABLE();
 800684c:	2300      	movs	r3, #0
 800684e:	623b      	str	r3, [r7, #32]
 8006850:	4b31      	ldr	r3, [pc, #196]	; (8006918 <HAL_UART_MspInit+0x21c>)
 8006852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006854:	4a30      	ldr	r2, [pc, #192]	; (8006918 <HAL_UART_MspInit+0x21c>)
 8006856:	f043 0310 	orr.w	r3, r3, #16
 800685a:	6453      	str	r3, [r2, #68]	; 0x44
 800685c:	4b2e      	ldr	r3, [pc, #184]	; (8006918 <HAL_UART_MspInit+0x21c>)
 800685e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006860:	f003 0310 	and.w	r3, r3, #16
 8006864:	623b      	str	r3, [r7, #32]
 8006866:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006868:	2300      	movs	r3, #0
 800686a:	61fb      	str	r3, [r7, #28]
 800686c:	4b2a      	ldr	r3, [pc, #168]	; (8006918 <HAL_UART_MspInit+0x21c>)
 800686e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006870:	4a29      	ldr	r2, [pc, #164]	; (8006918 <HAL_UART_MspInit+0x21c>)
 8006872:	f043 0302 	orr.w	r3, r3, #2
 8006876:	6313      	str	r3, [r2, #48]	; 0x30
 8006878:	4b27      	ldr	r3, [pc, #156]	; (8006918 <HAL_UART_MspInit+0x21c>)
 800687a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	61fb      	str	r3, [r7, #28]
 8006882:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8006884:	23c0      	movs	r3, #192	; 0xc0
 8006886:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006888:	2302      	movs	r3, #2
 800688a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800688c:	2300      	movs	r3, #0
 800688e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006890:	2303      	movs	r3, #3
 8006892:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006894:	2307      	movs	r3, #7
 8006896:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800689c:	4619      	mov	r1, r3
 800689e:	4825      	ldr	r0, [pc, #148]	; (8006934 <HAL_UART_MspInit+0x238>)
 80068a0:	f001 fd40 	bl	8008324 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80068a4:	4b24      	ldr	r3, [pc, #144]	; (8006938 <HAL_UART_MspInit+0x23c>)
 80068a6:	4a25      	ldr	r2, [pc, #148]	; (800693c <HAL_UART_MspInit+0x240>)
 80068a8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80068aa:	4b23      	ldr	r3, [pc, #140]	; (8006938 <HAL_UART_MspInit+0x23c>)
 80068ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80068b0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80068b2:	4b21      	ldr	r3, [pc, #132]	; (8006938 <HAL_UART_MspInit+0x23c>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80068b8:	4b1f      	ldr	r3, [pc, #124]	; (8006938 <HAL_UART_MspInit+0x23c>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80068be:	4b1e      	ldr	r3, [pc, #120]	; (8006938 <HAL_UART_MspInit+0x23c>)
 80068c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068c4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80068c6:	4b1c      	ldr	r3, [pc, #112]	; (8006938 <HAL_UART_MspInit+0x23c>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80068cc:	4b1a      	ldr	r3, [pc, #104]	; (8006938 <HAL_UART_MspInit+0x23c>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80068d2:	4b19      	ldr	r3, [pc, #100]	; (8006938 <HAL_UART_MspInit+0x23c>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80068d8:	4b17      	ldr	r3, [pc, #92]	; (8006938 <HAL_UART_MspInit+0x23c>)
 80068da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80068de:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80068e0:	4b15      	ldr	r3, [pc, #84]	; (8006938 <HAL_UART_MspInit+0x23c>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80068e6:	4814      	ldr	r0, [pc, #80]	; (8006938 <HAL_UART_MspInit+0x23c>)
 80068e8:	f001 f91a 	bl	8007b20 <HAL_DMA_Init>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 80068f2:	f7ff f99b 	bl	8005c2c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a0f      	ldr	r2, [pc, #60]	; (8006938 <HAL_UART_MspInit+0x23c>)
 80068fa:	639a      	str	r2, [r3, #56]	; 0x38
 80068fc:	4a0e      	ldr	r2, [pc, #56]	; (8006938 <HAL_UART_MspInit+0x23c>)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8006902:	2200      	movs	r2, #0
 8006904:	2105      	movs	r1, #5
 8006906:	2025      	movs	r0, #37	; 0x25
 8006908:	f001 f8e0 	bl	8007acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800690c:	2025      	movs	r0, #37	; 0x25
 800690e:	f001 f8f9 	bl	8007b04 <HAL_NVIC_EnableIRQ>
}
 8006912:	e116      	b.n	8006b42 <HAL_UART_MspInit+0x446>
 8006914:	40007c00 	.word	0x40007c00
 8006918:	40023800 	.word	0x40023800
 800691c:	40021000 	.word	0x40021000
 8006920:	20005b04 	.word	0x20005b04
 8006924:	40026010 	.word	0x40026010
 8006928:	20005a60 	.word	0x20005a60
 800692c:	400260a0 	.word	0x400260a0
 8006930:	40011000 	.word	0x40011000
 8006934:	40020400 	.word	0x40020400
 8006938:	20005a00 	.word	0x20005a00
 800693c:	40026440 	.word	0x40026440
  else if(uartHandle->Instance==USART3)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a81      	ldr	r2, [pc, #516]	; (8006b4c <HAL_UART_MspInit+0x450>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d164      	bne.n	8006a14 <HAL_UART_MspInit+0x318>
    __HAL_RCC_USART3_CLK_ENABLE();
 800694a:	2300      	movs	r3, #0
 800694c:	61bb      	str	r3, [r7, #24]
 800694e:	4b80      	ldr	r3, [pc, #512]	; (8006b50 <HAL_UART_MspInit+0x454>)
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	4a7f      	ldr	r2, [pc, #508]	; (8006b50 <HAL_UART_MspInit+0x454>)
 8006954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006958:	6413      	str	r3, [r2, #64]	; 0x40
 800695a:	4b7d      	ldr	r3, [pc, #500]	; (8006b50 <HAL_UART_MspInit+0x454>)
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006962:	61bb      	str	r3, [r7, #24]
 8006964:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006966:	2300      	movs	r3, #0
 8006968:	617b      	str	r3, [r7, #20]
 800696a:	4b79      	ldr	r3, [pc, #484]	; (8006b50 <HAL_UART_MspInit+0x454>)
 800696c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696e:	4a78      	ldr	r2, [pc, #480]	; (8006b50 <HAL_UART_MspInit+0x454>)
 8006970:	f043 0304 	orr.w	r3, r3, #4
 8006974:	6313      	str	r3, [r2, #48]	; 0x30
 8006976:	4b76      	ldr	r3, [pc, #472]	; (8006b50 <HAL_UART_MspInit+0x454>)
 8006978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697a:	f003 0304 	and.w	r3, r3, #4
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8006982:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006986:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006988:	2302      	movs	r3, #2
 800698a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800698c:	2300      	movs	r3, #0
 800698e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006990:	2303      	movs	r3, #3
 8006992:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006994:	2307      	movs	r3, #7
 8006996:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006998:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800699c:	4619      	mov	r1, r3
 800699e:	486d      	ldr	r0, [pc, #436]	; (8006b54 <HAL_UART_MspInit+0x458>)
 80069a0:	f001 fcc0 	bl	8008324 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80069a4:	4b6c      	ldr	r3, [pc, #432]	; (8006b58 <HAL_UART_MspInit+0x45c>)
 80069a6:	4a6d      	ldr	r2, [pc, #436]	; (8006b5c <HAL_UART_MspInit+0x460>)
 80069a8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80069aa:	4b6b      	ldr	r3, [pc, #428]	; (8006b58 <HAL_UART_MspInit+0x45c>)
 80069ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80069b0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80069b2:	4b69      	ldr	r3, [pc, #420]	; (8006b58 <HAL_UART_MspInit+0x45c>)
 80069b4:	2240      	movs	r2, #64	; 0x40
 80069b6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80069b8:	4b67      	ldr	r3, [pc, #412]	; (8006b58 <HAL_UART_MspInit+0x45c>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80069be:	4b66      	ldr	r3, [pc, #408]	; (8006b58 <HAL_UART_MspInit+0x45c>)
 80069c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069c4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80069c6:	4b64      	ldr	r3, [pc, #400]	; (8006b58 <HAL_UART_MspInit+0x45c>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80069cc:	4b62      	ldr	r3, [pc, #392]	; (8006b58 <HAL_UART_MspInit+0x45c>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80069d2:	4b61      	ldr	r3, [pc, #388]	; (8006b58 <HAL_UART_MspInit+0x45c>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80069d8:	4b5f      	ldr	r3, [pc, #380]	; (8006b58 <HAL_UART_MspInit+0x45c>)
 80069da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80069de:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80069e0:	4b5d      	ldr	r3, [pc, #372]	; (8006b58 <HAL_UART_MspInit+0x45c>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80069e6:	485c      	ldr	r0, [pc, #368]	; (8006b58 <HAL_UART_MspInit+0x45c>)
 80069e8:	f001 f89a 	bl	8007b20 <HAL_DMA_Init>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <HAL_UART_MspInit+0x2fa>
      Error_Handler();
 80069f2:	f7ff f91b 	bl	8005c2c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a57      	ldr	r2, [pc, #348]	; (8006b58 <HAL_UART_MspInit+0x45c>)
 80069fa:	635a      	str	r2, [r3, #52]	; 0x34
 80069fc:	4a56      	ldr	r2, [pc, #344]	; (8006b58 <HAL_UART_MspInit+0x45c>)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006a02:	2200      	movs	r2, #0
 8006a04:	2105      	movs	r1, #5
 8006a06:	2027      	movs	r0, #39	; 0x27
 8006a08:	f001 f860 	bl	8007acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006a0c:	2027      	movs	r0, #39	; 0x27
 8006a0e:	f001 f879 	bl	8007b04 <HAL_NVIC_EnableIRQ>
}
 8006a12:	e096      	b.n	8006b42 <HAL_UART_MspInit+0x446>
  else if(uartHandle->Instance==USART6)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a51      	ldr	r2, [pc, #324]	; (8006b60 <HAL_UART_MspInit+0x464>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	f040 8091 	bne.w	8006b42 <HAL_UART_MspInit+0x446>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006a20:	2300      	movs	r3, #0
 8006a22:	613b      	str	r3, [r7, #16]
 8006a24:	4b4a      	ldr	r3, [pc, #296]	; (8006b50 <HAL_UART_MspInit+0x454>)
 8006a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a28:	4a49      	ldr	r2, [pc, #292]	; (8006b50 <HAL_UART_MspInit+0x454>)
 8006a2a:	f043 0320 	orr.w	r3, r3, #32
 8006a2e:	6453      	str	r3, [r2, #68]	; 0x44
 8006a30:	4b47      	ldr	r3, [pc, #284]	; (8006b50 <HAL_UART_MspInit+0x454>)
 8006a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a34:	f003 0320 	and.w	r3, r3, #32
 8006a38:	613b      	str	r3, [r7, #16]
 8006a3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	4b43      	ldr	r3, [pc, #268]	; (8006b50 <HAL_UART_MspInit+0x454>)
 8006a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a44:	4a42      	ldr	r2, [pc, #264]	; (8006b50 <HAL_UART_MspInit+0x454>)
 8006a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8006a4c:	4b40      	ldr	r3, [pc, #256]	; (8006b50 <HAL_UART_MspInit+0x454>)
 8006a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a54:	60fb      	str	r3, [r7, #12]
 8006a56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8006a58:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8006a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a5e:	2302      	movs	r3, #2
 8006a60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a62:	2300      	movs	r3, #0
 8006a64:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a66:	2303      	movs	r3, #3
 8006a68:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006a6a:	2308      	movs	r3, #8
 8006a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006a6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a72:	4619      	mov	r1, r3
 8006a74:	483b      	ldr	r0, [pc, #236]	; (8006b64 <HAL_UART_MspInit+0x468>)
 8006a76:	f001 fc55 	bl	8008324 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8006a7a:	4b3b      	ldr	r3, [pc, #236]	; (8006b68 <HAL_UART_MspInit+0x46c>)
 8006a7c:	4a3b      	ldr	r2, [pc, #236]	; (8006b6c <HAL_UART_MspInit+0x470>)
 8006a7e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8006a80:	4b39      	ldr	r3, [pc, #228]	; (8006b68 <HAL_UART_MspInit+0x46c>)
 8006a82:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8006a86:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a88:	4b37      	ldr	r3, [pc, #220]	; (8006b68 <HAL_UART_MspInit+0x46c>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a8e:	4b36      	ldr	r3, [pc, #216]	; (8006b68 <HAL_UART_MspInit+0x46c>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006a94:	4b34      	ldr	r3, [pc, #208]	; (8006b68 <HAL_UART_MspInit+0x46c>)
 8006a96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a9a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a9c:	4b32      	ldr	r3, [pc, #200]	; (8006b68 <HAL_UART_MspInit+0x46c>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006aa2:	4b31      	ldr	r3, [pc, #196]	; (8006b68 <HAL_UART_MspInit+0x46c>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8006aa8:	4b2f      	ldr	r3, [pc, #188]	; (8006b68 <HAL_UART_MspInit+0x46c>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006aae:	4b2e      	ldr	r3, [pc, #184]	; (8006b68 <HAL_UART_MspInit+0x46c>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006ab4:	4b2c      	ldr	r3, [pc, #176]	; (8006b68 <HAL_UART_MspInit+0x46c>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006aba:	482b      	ldr	r0, [pc, #172]	; (8006b68 <HAL_UART_MspInit+0x46c>)
 8006abc:	f001 f830 	bl	8007b20 <HAL_DMA_Init>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d001      	beq.n	8006aca <HAL_UART_MspInit+0x3ce>
      Error_Handler();
 8006ac6:	f7ff f8b1 	bl	8005c2c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a26      	ldr	r2, [pc, #152]	; (8006b68 <HAL_UART_MspInit+0x46c>)
 8006ace:	639a      	str	r2, [r3, #56]	; 0x38
 8006ad0:	4a25      	ldr	r2, [pc, #148]	; (8006b68 <HAL_UART_MspInit+0x46c>)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006ad6:	4b26      	ldr	r3, [pc, #152]	; (8006b70 <HAL_UART_MspInit+0x474>)
 8006ad8:	4a26      	ldr	r2, [pc, #152]	; (8006b74 <HAL_UART_MspInit+0x478>)
 8006ada:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8006adc:	4b24      	ldr	r3, [pc, #144]	; (8006b70 <HAL_UART_MspInit+0x474>)
 8006ade:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8006ae2:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006ae4:	4b22      	ldr	r3, [pc, #136]	; (8006b70 <HAL_UART_MspInit+0x474>)
 8006ae6:	2240      	movs	r2, #64	; 0x40
 8006ae8:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006aea:	4b21      	ldr	r3, [pc, #132]	; (8006b70 <HAL_UART_MspInit+0x474>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006af0:	4b1f      	ldr	r3, [pc, #124]	; (8006b70 <HAL_UART_MspInit+0x474>)
 8006af2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006af6:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006af8:	4b1d      	ldr	r3, [pc, #116]	; (8006b70 <HAL_UART_MspInit+0x474>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006afe:	4b1c      	ldr	r3, [pc, #112]	; (8006b70 <HAL_UART_MspInit+0x474>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8006b04:	4b1a      	ldr	r3, [pc, #104]	; (8006b70 <HAL_UART_MspInit+0x474>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006b0a:	4b19      	ldr	r3, [pc, #100]	; (8006b70 <HAL_UART_MspInit+0x474>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006b10:	4b17      	ldr	r3, [pc, #92]	; (8006b70 <HAL_UART_MspInit+0x474>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8006b16:	4816      	ldr	r0, [pc, #88]	; (8006b70 <HAL_UART_MspInit+0x474>)
 8006b18:	f001 f802 	bl	8007b20 <HAL_DMA_Init>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <HAL_UART_MspInit+0x42a>
      Error_Handler();
 8006b22:	f7ff f883 	bl	8005c2c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a11      	ldr	r2, [pc, #68]	; (8006b70 <HAL_UART_MspInit+0x474>)
 8006b2a:	635a      	str	r2, [r3, #52]	; 0x34
 8006b2c:	4a10      	ldr	r2, [pc, #64]	; (8006b70 <HAL_UART_MspInit+0x474>)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8006b32:	2200      	movs	r2, #0
 8006b34:	2105      	movs	r1, #5
 8006b36:	2047      	movs	r0, #71	; 0x47
 8006b38:	f000 ffc8 	bl	8007acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8006b3c:	2047      	movs	r0, #71	; 0x47
 8006b3e:	f000 ffe1 	bl	8007b04 <HAL_NVIC_EnableIRQ>
}
 8006b42:	bf00      	nop
 8006b44:	3740      	adds	r7, #64	; 0x40
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	40004800 	.word	0x40004800
 8006b50:	40023800 	.word	0x40023800
 8006b54:	40020800 	.word	0x40020800
 8006b58:	20005940 	.word	0x20005940
 8006b5c:	40026058 	.word	0x40026058
 8006b60:	40011400 	.word	0x40011400
 8006b64:	40021800 	.word	0x40021800
 8006b68:	2000589c 	.word	0x2000589c
 8006b6c:	40026428 	.word	0x40026428
 8006b70:	200059a0 	.word	0x200059a0
 8006b74:	400264a0 	.word	0x400264a0

08006b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006bb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006b7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006b7e:	e003      	b.n	8006b88 <LoopCopyDataInit>

08006b80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006b80:	4b0c      	ldr	r3, [pc, #48]	; (8006bb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006b82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006b84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006b86:	3104      	adds	r1, #4

08006b88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006b88:	480b      	ldr	r0, [pc, #44]	; (8006bb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006b8a:	4b0c      	ldr	r3, [pc, #48]	; (8006bbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006b8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006b8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006b90:	d3f6      	bcc.n	8006b80 <CopyDataInit>
  ldr  r2, =_sbss
 8006b92:	4a0b      	ldr	r2, [pc, #44]	; (8006bc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006b94:	e002      	b.n	8006b9c <LoopFillZerobss>

08006b96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006b96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006b98:	f842 3b04 	str.w	r3, [r2], #4

08006b9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006b9c:	4b09      	ldr	r3, [pc, #36]	; (8006bc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006b9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006ba0:	d3f9      	bcc.n	8006b96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006ba2:	f7ff fa9b 	bl	80060dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006ba6:	f00d f975 	bl	8013e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006baa:	f7fe ff7f 	bl	8005aac <main>
  bx  lr    
 8006bae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006bb0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8006bb4:	08015290 	.word	0x08015290
  ldr  r0, =_sdata
 8006bb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006bbc:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 8006bc0:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8006bc4:	20007518 	.word	0x20007518

08006bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006bc8:	e7fe      	b.n	8006bc8 <ADC_IRQHandler>
	...

08006bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006bd0:	4b0e      	ldr	r3, [pc, #56]	; (8006c0c <HAL_Init+0x40>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a0d      	ldr	r2, [pc, #52]	; (8006c0c <HAL_Init+0x40>)
 8006bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006bdc:	4b0b      	ldr	r3, [pc, #44]	; (8006c0c <HAL_Init+0x40>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a0a      	ldr	r2, [pc, #40]	; (8006c0c <HAL_Init+0x40>)
 8006be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006be6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006be8:	4b08      	ldr	r3, [pc, #32]	; (8006c0c <HAL_Init+0x40>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a07      	ldr	r2, [pc, #28]	; (8006c0c <HAL_Init+0x40>)
 8006bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006bf4:	2003      	movs	r0, #3
 8006bf6:	f000 ff5e 	bl	8007ab6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006bfa:	2000      	movs	r0, #0
 8006bfc:	f7ff f902 	bl	8005e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006c00:	f7ff f8d4 	bl	8005dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	40023c00 	.word	0x40023c00

08006c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c10:	b480      	push	{r7}
 8006c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c14:	4b06      	ldr	r3, [pc, #24]	; (8006c30 <HAL_IncTick+0x20>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	4b06      	ldr	r3, [pc, #24]	; (8006c34 <HAL_IncTick+0x24>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4413      	add	r3, r2
 8006c20:	4a04      	ldr	r2, [pc, #16]	; (8006c34 <HAL_IncTick+0x24>)
 8006c22:	6013      	str	r3, [r2, #0]
}
 8006c24:	bf00      	nop
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	20000010 	.word	0x20000010
 8006c34:	20005bec 	.word	0x20005bec

08006c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8006c3c:	4b03      	ldr	r3, [pc, #12]	; (8006c4c <HAL_GetTick+0x14>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	20005bec 	.word	0x20005bec

08006c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c58:	f7ff ffee 	bl	8006c38 <HAL_GetTick>
 8006c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c68:	d005      	beq.n	8006c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006c6a:	4b0a      	ldr	r3, [pc, #40]	; (8006c94 <HAL_Delay+0x44>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006c76:	bf00      	nop
 8006c78:	f7ff ffde 	bl	8006c38 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d8f7      	bhi.n	8006c78 <HAL_Delay+0x28>
  {
  }
}
 8006c88:	bf00      	nop
 8006c8a:	bf00      	nop
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	20000010 	.word	0x20000010

08006c98 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e0ed      	b.n	8006e86 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d102      	bne.n	8006cbc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7fe fc90 	bl	80055dc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f022 0202 	bic.w	r2, r2, #2
 8006cca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ccc:	f7ff ffb4 	bl	8006c38 <HAL_GetTick>
 8006cd0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006cd2:	e012      	b.n	8006cfa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006cd4:	f7ff ffb0 	bl	8006c38 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b0a      	cmp	r3, #10
 8006ce0:	d90b      	bls.n	8006cfa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2205      	movs	r2, #5
 8006cf2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e0c5      	b.n	8006e86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f003 0302 	and.w	r3, r3, #2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1e5      	bne.n	8006cd4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f042 0201 	orr.w	r2, r2, #1
 8006d16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d18:	f7ff ff8e 	bl	8006c38 <HAL_GetTick>
 8006d1c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006d1e:	e012      	b.n	8006d46 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006d20:	f7ff ff8a 	bl	8006c38 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	2b0a      	cmp	r3, #10
 8006d2c:	d90b      	bls.n	8006d46 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2205      	movs	r2, #5
 8006d3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e09f      	b.n	8006e86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f003 0301 	and.w	r3, r3, #1
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d0e5      	beq.n	8006d20 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	7e1b      	ldrb	r3, [r3, #24]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d108      	bne.n	8006d6e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	e007      	b.n	8006d7e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	7e5b      	ldrb	r3, [r3, #25]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d108      	bne.n	8006d98 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	e007      	b.n	8006da8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006da6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	7e9b      	ldrb	r3, [r3, #26]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d108      	bne.n	8006dc2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f042 0220 	orr.w	r2, r2, #32
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	e007      	b.n	8006dd2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 0220 	bic.w	r2, r2, #32
 8006dd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	7edb      	ldrb	r3, [r3, #27]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d108      	bne.n	8006dec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 0210 	bic.w	r2, r2, #16
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	e007      	b.n	8006dfc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 0210 	orr.w	r2, r2, #16
 8006dfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	7f1b      	ldrb	r3, [r3, #28]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d108      	bne.n	8006e16 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f042 0208 	orr.w	r2, r2, #8
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	e007      	b.n	8006e26 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0208 	bic.w	r2, r2, #8
 8006e24:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	7f5b      	ldrb	r3, [r3, #29]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d108      	bne.n	8006e40 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f042 0204 	orr.w	r2, r2, #4
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	e007      	b.n	8006e50 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f022 0204 	bic.w	r2, r2, #4
 8006e4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689a      	ldr	r2, [r3, #8]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	431a      	orrs	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	ea42 0103 	orr.w	r1, r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	1e5a      	subs	r2, r3, #1
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
	...

08006e90 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b087      	sub	sp, #28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ea6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8006ea8:	7cfb      	ldrb	r3, [r7, #19]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d003      	beq.n	8006eb6 <HAL_CAN_ConfigFilter+0x26>
 8006eae:	7cfb      	ldrb	r3, [r7, #19]
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	f040 80be 	bne.w	8007032 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8006eb6:	4b65      	ldr	r3, [pc, #404]	; (800704c <HAL_CAN_ConfigFilter+0x1bc>)
 8006eb8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ec0:	f043 0201 	orr.w	r2, r3, #1
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ed0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee4:	021b      	lsls	r3, r3, #8
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	f003 031f 	and.w	r3, r3, #31
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8006efc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	43db      	mvns	r3, r3
 8006f08:	401a      	ands	r2, r3
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d123      	bne.n	8006f60 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	43db      	mvns	r3, r3
 8006f22:	401a      	ands	r2, r3
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f36:	683a      	ldr	r2, [r7, #0]
 8006f38:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006f3a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	3248      	adds	r2, #72	; 0x48
 8006f40:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f54:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f56:	6979      	ldr	r1, [r7, #20]
 8006f58:	3348      	adds	r3, #72	; 0x48
 8006f5a:	00db      	lsls	r3, r3, #3
 8006f5c:	440b      	add	r3, r1
 8006f5e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	69db      	ldr	r3, [r3, #28]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d122      	bne.n	8006fae <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	431a      	orrs	r2, r3
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006f88:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	3248      	adds	r2, #72	; 0x48
 8006f8e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006fa2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006fa4:	6979      	ldr	r1, [r7, #20]
 8006fa6:	3348      	adds	r3, #72	; 0x48
 8006fa8:	00db      	lsls	r3, r3, #3
 8006faa:	440b      	add	r3, r1
 8006fac:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d109      	bne.n	8006fca <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	43db      	mvns	r3, r3
 8006fc0:	401a      	ands	r2, r3
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8006fc8:	e007      	b.n	8006fda <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	431a      	orrs	r2, r3
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d109      	bne.n	8006ff6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	43db      	mvns	r3, r3
 8006fec:	401a      	ands	r2, r3
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006ff4:	e007      	b.n	8007006 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	431a      	orrs	r2, r3
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d107      	bne.n	800701e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	431a      	orrs	r2, r3
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007024:	f023 0201 	bic.w	r2, r3, #1
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800702e:	2300      	movs	r3, #0
 8007030:	e006      	b.n	8007040 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007036:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
  }
}
 8007040:	4618      	mov	r0, r3
 8007042:	371c      	adds	r7, #28
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	40006400 	.word	0x40006400

08007050 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b01      	cmp	r3, #1
 8007062:	d12e      	bne.n	80070c2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2202      	movs	r2, #2
 8007068:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f022 0201 	bic.w	r2, r2, #1
 800707a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800707c:	f7ff fddc 	bl	8006c38 <HAL_GetTick>
 8007080:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007082:	e012      	b.n	80070aa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007084:	f7ff fdd8 	bl	8006c38 <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	2b0a      	cmp	r3, #10
 8007090:	d90b      	bls.n	80070aa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007096:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2205      	movs	r2, #5
 80070a2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e012      	b.n	80070d0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1e5      	bne.n	8007084 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	e006      	b.n	80070d0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
  }
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80070d8:	b480      	push	{r7}
 80070da:	b089      	sub	sp, #36	; 0x24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
 80070e4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070ec:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80070f6:	7ffb      	ldrb	r3, [r7, #31]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d003      	beq.n	8007104 <HAL_CAN_AddTxMessage+0x2c>
 80070fc:	7ffb      	ldrb	r3, [r7, #31]
 80070fe:	2b02      	cmp	r3, #2
 8007100:	f040 80b8 	bne.w	8007274 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10a      	bne.n	8007124 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007114:	2b00      	cmp	r3, #0
 8007116:	d105      	bne.n	8007124 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800711e:	2b00      	cmp	r3, #0
 8007120:	f000 80a0 	beq.w	8007264 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	0e1b      	lsrs	r3, r3, #24
 8007128:	f003 0303 	and.w	r3, r3, #3
 800712c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2b02      	cmp	r3, #2
 8007132:	d907      	bls.n	8007144 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007138:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e09e      	b.n	8007282 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007144:	2201      	movs	r2, #1
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	409a      	lsls	r2, r3
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10d      	bne.n	8007172 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007160:	68f9      	ldr	r1, [r7, #12]
 8007162:	6809      	ldr	r1, [r1, #0]
 8007164:	431a      	orrs	r2, r3
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	3318      	adds	r3, #24
 800716a:	011b      	lsls	r3, r3, #4
 800716c:	440b      	add	r3, r1
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	e00f      	b.n	8007192 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800717c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007182:	68f9      	ldr	r1, [r7, #12]
 8007184:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007186:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	3318      	adds	r3, #24
 800718c:	011b      	lsls	r3, r3, #4
 800718e:	440b      	add	r3, r1
 8007190:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6819      	ldr	r1, [r3, #0]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	691a      	ldr	r2, [r3, #16]
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	3318      	adds	r3, #24
 800719e:	011b      	lsls	r3, r3, #4
 80071a0:	440b      	add	r3, r1
 80071a2:	3304      	adds	r3, #4
 80071a4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	7d1b      	ldrb	r3, [r3, #20]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d111      	bne.n	80071d2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	3318      	adds	r3, #24
 80071b6:	011b      	lsls	r3, r3, #4
 80071b8:	4413      	add	r3, r2
 80071ba:	3304      	adds	r3, #4
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	6811      	ldr	r1, [r2, #0]
 80071c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	3318      	adds	r3, #24
 80071ca:	011b      	lsls	r3, r3, #4
 80071cc:	440b      	add	r3, r1
 80071ce:	3304      	adds	r3, #4
 80071d0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	3307      	adds	r3, #7
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	061a      	lsls	r2, r3, #24
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	3306      	adds	r3, #6
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	041b      	lsls	r3, r3, #16
 80071e2:	431a      	orrs	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	3305      	adds	r3, #5
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	021b      	lsls	r3, r3, #8
 80071ec:	4313      	orrs	r3, r2
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	3204      	adds	r2, #4
 80071f2:	7812      	ldrb	r2, [r2, #0]
 80071f4:	4610      	mov	r0, r2
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	6811      	ldr	r1, [r2, #0]
 80071fa:	ea43 0200 	orr.w	r2, r3, r0
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	011b      	lsls	r3, r3, #4
 8007202:	440b      	add	r3, r1
 8007204:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007208:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	3303      	adds	r3, #3
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	061a      	lsls	r2, r3, #24
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3302      	adds	r3, #2
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	041b      	lsls	r3, r3, #16
 800721a:	431a      	orrs	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	3301      	adds	r3, #1
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	021b      	lsls	r3, r3, #8
 8007224:	4313      	orrs	r3, r2
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	7812      	ldrb	r2, [r2, #0]
 800722a:	4610      	mov	r0, r2
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	6811      	ldr	r1, [r2, #0]
 8007230:	ea43 0200 	orr.w	r2, r3, r0
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	011b      	lsls	r3, r3, #4
 8007238:	440b      	add	r3, r1
 800723a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800723e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	3318      	adds	r3, #24
 8007248:	011b      	lsls	r3, r3, #4
 800724a:	4413      	add	r3, r2
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	6811      	ldr	r1, [r2, #0]
 8007252:	f043 0201 	orr.w	r2, r3, #1
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	3318      	adds	r3, #24
 800725a:	011b      	lsls	r3, r3, #4
 800725c:	440b      	add	r3, r1
 800725e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007260:	2300      	movs	r3, #0
 8007262:	e00e      	b.n	8007282 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e006      	b.n	8007282 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007278:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
  }
}
 8007282:	4618      	mov	r0, r3
 8007284:	3724      	adds	r7, #36	; 0x24
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800728e:	b480      	push	{r7}
 8007290:	b087      	sub	sp, #28
 8007292:	af00      	add	r7, sp, #0
 8007294:	60f8      	str	r0, [r7, #12]
 8007296:	60b9      	str	r1, [r7, #8]
 8007298:	607a      	str	r2, [r7, #4]
 800729a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072a2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80072a4:	7dfb      	ldrb	r3, [r7, #23]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d003      	beq.n	80072b2 <HAL_CAN_GetRxMessage+0x24>
 80072aa:	7dfb      	ldrb	r3, [r7, #23]
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	f040 80f3 	bne.w	8007498 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10e      	bne.n	80072d6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	f003 0303 	and.w	r3, r3, #3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d116      	bne.n	80072f4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e0e7      	b.n	80074a6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	f003 0303 	and.w	r3, r3, #3
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d107      	bne.n	80072f4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e0d8      	b.n	80074a6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	331b      	adds	r3, #27
 80072fc:	011b      	lsls	r3, r3, #4
 80072fe:	4413      	add	r3, r2
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0204 	and.w	r2, r3, #4
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10c      	bne.n	800732c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	331b      	adds	r3, #27
 800731a:	011b      	lsls	r3, r3, #4
 800731c:	4413      	add	r3, r2
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	0d5b      	lsrs	r3, r3, #21
 8007322:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	e00b      	b.n	8007344 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	331b      	adds	r3, #27
 8007334:	011b      	lsls	r3, r3, #4
 8007336:	4413      	add	r3, r2
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	08db      	lsrs	r3, r3, #3
 800733c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	331b      	adds	r3, #27
 800734c:	011b      	lsls	r3, r3, #4
 800734e:	4413      	add	r3, r2
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0202 	and.w	r2, r3, #2
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	331b      	adds	r3, #27
 8007362:	011b      	lsls	r3, r3, #4
 8007364:	4413      	add	r3, r2
 8007366:	3304      	adds	r3, #4
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 020f 	and.w	r2, r3, #15
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	331b      	adds	r3, #27
 800737a:	011b      	lsls	r3, r3, #4
 800737c:	4413      	add	r3, r2
 800737e:	3304      	adds	r3, #4
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	0a1b      	lsrs	r3, r3, #8
 8007384:	b2da      	uxtb	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	331b      	adds	r3, #27
 8007392:	011b      	lsls	r3, r3, #4
 8007394:	4413      	add	r3, r2
 8007396:	3304      	adds	r3, #4
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	0c1b      	lsrs	r3, r3, #16
 800739c:	b29a      	uxth	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	011b      	lsls	r3, r3, #4
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	011b      	lsls	r3, r3, #4
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	0a1a      	lsrs	r2, r3, #8
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	3301      	adds	r3, #1
 80073ce:	b2d2      	uxtb	r2, r2
 80073d0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	011b      	lsls	r3, r3, #4
 80073da:	4413      	add	r3, r2
 80073dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	0c1a      	lsrs	r2, r3, #16
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	3302      	adds	r3, #2
 80073e8:	b2d2      	uxtb	r2, r2
 80073ea:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	011b      	lsls	r3, r3, #4
 80073f4:	4413      	add	r3, r2
 80073f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	0e1a      	lsrs	r2, r3, #24
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	3303      	adds	r3, #3
 8007402:	b2d2      	uxtb	r2, r2
 8007404:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	011b      	lsls	r3, r3, #4
 800740e:	4413      	add	r3, r2
 8007410:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	3304      	adds	r3, #4
 800741a:	b2d2      	uxtb	r2, r2
 800741c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	011b      	lsls	r3, r3, #4
 8007426:	4413      	add	r3, r2
 8007428:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	0a1a      	lsrs	r2, r3, #8
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	3305      	adds	r3, #5
 8007434:	b2d2      	uxtb	r2, r2
 8007436:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	011b      	lsls	r3, r3, #4
 8007440:	4413      	add	r3, r2
 8007442:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	0c1a      	lsrs	r2, r3, #16
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	3306      	adds	r3, #6
 800744e:	b2d2      	uxtb	r2, r2
 8007450:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	011b      	lsls	r3, r3, #4
 800745a:	4413      	add	r3, r2
 800745c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	0e1a      	lsrs	r2, r3, #24
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	3307      	adds	r3, #7
 8007468:	b2d2      	uxtb	r2, r2
 800746a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d108      	bne.n	8007484 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68da      	ldr	r2, [r3, #12]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f042 0220 	orr.w	r2, r2, #32
 8007480:	60da      	str	r2, [r3, #12]
 8007482:	e007      	b.n	8007494 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	691a      	ldr	r2, [r3, #16]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f042 0220 	orr.w	r2, r2, #32
 8007492:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	e006      	b.n	80074a6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
  }
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	371c      	adds	r7, #28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b085      	sub	sp, #20
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80074c2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d002      	beq.n	80074d0 <HAL_CAN_ActivateNotification+0x1e>
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d109      	bne.n	80074e4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6959      	ldr	r1, [r3, #20]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	430a      	orrs	r2, r1
 80074de:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	e006      	b.n	80074f2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
  }
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b08a      	sub	sp, #40	; 0x28
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007506:	2300      	movs	r3, #0
 8007508:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	695b      	ldr	r3, [r3, #20]
 8007510:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800753a:	6a3b      	ldr	r3, [r7, #32]
 800753c:	f003 0301 	and.w	r3, r3, #1
 8007540:	2b00      	cmp	r3, #0
 8007542:	d07c      	beq.n	800763e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	2b00      	cmp	r3, #0
 800754c:	d023      	beq.n	8007596 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2201      	movs	r2, #1
 8007554:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	f003 0302 	and.w	r3, r3, #2
 800755c:	2b00      	cmp	r3, #0
 800755e:	d003      	beq.n	8007568 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f983 	bl	800786c <HAL_CAN_TxMailbox0CompleteCallback>
 8007566:	e016      	b.n	8007596 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	f003 0304 	and.w	r3, r3, #4
 800756e:	2b00      	cmp	r3, #0
 8007570:	d004      	beq.n	800757c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007574:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007578:	627b      	str	r3, [r7, #36]	; 0x24
 800757a:	e00c      	b.n	8007596 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	f003 0308 	and.w	r3, r3, #8
 8007582:	2b00      	cmp	r3, #0
 8007584:	d004      	beq.n	8007590 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800758c:	627b      	str	r3, [r7, #36]	; 0x24
 800758e:	e002      	b.n	8007596 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f989 	bl	80078a8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800759c:	2b00      	cmp	r3, #0
 800759e:	d024      	beq.n	80075ea <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d003      	beq.n	80075bc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f963 	bl	8007880 <HAL_CAN_TxMailbox1CompleteCallback>
 80075ba:	e016      	b.n	80075ea <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d004      	beq.n	80075d0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80075c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80075cc:	627b      	str	r3, [r7, #36]	; 0x24
 80075ce:	e00c      	b.n	80075ea <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d004      	beq.n	80075e4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075e0:	627b      	str	r3, [r7, #36]	; 0x24
 80075e2:	e002      	b.n	80075ea <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f969 	bl	80078bc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d024      	beq.n	800763e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80075fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d003      	beq.n	8007610 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f943 	bl	8007894 <HAL_CAN_TxMailbox2CompleteCallback>
 800760e:	e016      	b.n	800763e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d004      	beq.n	8007624 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007620:	627b      	str	r3, [r7, #36]	; 0x24
 8007622:	e00c      	b.n	800763e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d004      	beq.n	8007638 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007634:	627b      	str	r3, [r7, #36]	; 0x24
 8007636:	e002      	b.n	800763e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 f949 	bl	80078d0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	f003 0308 	and.w	r3, r3, #8
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00c      	beq.n	8007662 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	f003 0310 	and.w	r3, r3, #16
 800764e:	2b00      	cmp	r3, #0
 8007650:	d007      	beq.n	8007662 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007658:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2210      	movs	r2, #16
 8007660:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	f003 0304 	and.w	r3, r3, #4
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00b      	beq.n	8007684 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	f003 0308 	and.w	r3, r3, #8
 8007672:	2b00      	cmp	r3, #0
 8007674:	d006      	beq.n	8007684 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2208      	movs	r2, #8
 800767c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f930 	bl	80078e4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	f003 0302 	and.w	r3, r3, #2
 800768a:	2b00      	cmp	r3, #0
 800768c:	d009      	beq.n	80076a2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	f003 0303 	and.w	r3, r3, #3
 8007698:	2b00      	cmp	r3, #0
 800769a:	d002      	beq.n	80076a2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f7f8 ff7b 	bl	8000598 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80076a2:	6a3b      	ldr	r3, [r7, #32]
 80076a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00c      	beq.n	80076c6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	f003 0310 	and.w	r3, r3, #16
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d007      	beq.n	80076c6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80076b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80076bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2210      	movs	r2, #16
 80076c4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	f003 0320 	and.w	r3, r3, #32
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00b      	beq.n	80076e8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	f003 0308 	and.w	r3, r3, #8
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d006      	beq.n	80076e8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2208      	movs	r2, #8
 80076e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f912 	bl	800790c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80076e8:	6a3b      	ldr	r3, [r7, #32]
 80076ea:	f003 0310 	and.w	r3, r3, #16
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d009      	beq.n	8007706 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	f003 0303 	and.w	r3, r3, #3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d002      	beq.n	8007706 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f8f9 	bl	80078f8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00b      	beq.n	8007728 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	f003 0310 	and.w	r3, r3, #16
 8007716:	2b00      	cmp	r3, #0
 8007718:	d006      	beq.n	8007728 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2210      	movs	r2, #16
 8007720:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f8fc 	bl	8007920 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007728:	6a3b      	ldr	r3, [r7, #32]
 800772a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00b      	beq.n	800774a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	f003 0308 	and.w	r3, r3, #8
 8007738:	2b00      	cmp	r3, #0
 800773a:	d006      	beq.n	800774a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2208      	movs	r2, #8
 8007742:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f8f5 	bl	8007934 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800774a:	6a3b      	ldr	r3, [r7, #32]
 800774c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d07b      	beq.n	800784c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	f003 0304 	and.w	r3, r3, #4
 800775a:	2b00      	cmp	r3, #0
 800775c:	d072      	beq.n	8007844 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800775e:	6a3b      	ldr	r3, [r7, #32]
 8007760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007764:	2b00      	cmp	r3, #0
 8007766:	d008      	beq.n	800777a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	f043 0301 	orr.w	r3, r3, #1
 8007778:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007780:	2b00      	cmp	r3, #0
 8007782:	d008      	beq.n	8007796 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800778a:	2b00      	cmp	r3, #0
 800778c:	d003      	beq.n	8007796 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	f043 0302 	orr.w	r3, r3, #2
 8007794:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800779c:	2b00      	cmp	r3, #0
 800779e:	d008      	beq.n	80077b2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	f043 0304 	orr.w	r3, r3, #4
 80077b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80077b2:	6a3b      	ldr	r3, [r7, #32]
 80077b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d043      	beq.n	8007844 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d03e      	beq.n	8007844 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077cc:	2b60      	cmp	r3, #96	; 0x60
 80077ce:	d02b      	beq.n	8007828 <HAL_CAN_IRQHandler+0x32a>
 80077d0:	2b60      	cmp	r3, #96	; 0x60
 80077d2:	d82e      	bhi.n	8007832 <HAL_CAN_IRQHandler+0x334>
 80077d4:	2b50      	cmp	r3, #80	; 0x50
 80077d6:	d022      	beq.n	800781e <HAL_CAN_IRQHandler+0x320>
 80077d8:	2b50      	cmp	r3, #80	; 0x50
 80077da:	d82a      	bhi.n	8007832 <HAL_CAN_IRQHandler+0x334>
 80077dc:	2b40      	cmp	r3, #64	; 0x40
 80077de:	d019      	beq.n	8007814 <HAL_CAN_IRQHandler+0x316>
 80077e0:	2b40      	cmp	r3, #64	; 0x40
 80077e2:	d826      	bhi.n	8007832 <HAL_CAN_IRQHandler+0x334>
 80077e4:	2b30      	cmp	r3, #48	; 0x30
 80077e6:	d010      	beq.n	800780a <HAL_CAN_IRQHandler+0x30c>
 80077e8:	2b30      	cmp	r3, #48	; 0x30
 80077ea:	d822      	bhi.n	8007832 <HAL_CAN_IRQHandler+0x334>
 80077ec:	2b10      	cmp	r3, #16
 80077ee:	d002      	beq.n	80077f6 <HAL_CAN_IRQHandler+0x2f8>
 80077f0:	2b20      	cmp	r3, #32
 80077f2:	d005      	beq.n	8007800 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80077f4:	e01d      	b.n	8007832 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	f043 0308 	orr.w	r3, r3, #8
 80077fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80077fe:	e019      	b.n	8007834 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	f043 0310 	orr.w	r3, r3, #16
 8007806:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007808:	e014      	b.n	8007834 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	f043 0320 	orr.w	r3, r3, #32
 8007810:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007812:	e00f      	b.n	8007834 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800781a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800781c:	e00a      	b.n	8007834 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007824:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007826:	e005      	b.n	8007834 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800782e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007830:	e000      	b.n	8007834 <HAL_CAN_IRQHandler+0x336>
            break;
 8007832:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	699a      	ldr	r2, [r3, #24]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007842:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2204      	movs	r2, #4
 800784a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	2b00      	cmp	r3, #0
 8007850:	d008      	beq.n	8007864 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007858:	431a      	orrs	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f872 	bl	8007948 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007864:	bf00      	nop
 8007866:	3728      	adds	r7, #40	; 0x28
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f003 0307 	and.w	r3, r3, #7
 800796a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800796c:	4b0c      	ldr	r3, [pc, #48]	; (80079a0 <__NVIC_SetPriorityGrouping+0x44>)
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007978:	4013      	ands	r3, r2
 800797a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800798c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800798e:	4a04      	ldr	r2, [pc, #16]	; (80079a0 <__NVIC_SetPriorityGrouping+0x44>)
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	60d3      	str	r3, [r2, #12]
}
 8007994:	bf00      	nop
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	e000ed00 	.word	0xe000ed00

080079a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80079a4:	b480      	push	{r7}
 80079a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80079a8:	4b04      	ldr	r3, [pc, #16]	; (80079bc <__NVIC_GetPriorityGrouping+0x18>)
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	0a1b      	lsrs	r3, r3, #8
 80079ae:	f003 0307 	and.w	r3, r3, #7
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	e000ed00 	.word	0xe000ed00

080079c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	4603      	mov	r3, r0
 80079c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	db0b      	blt.n	80079ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079d2:	79fb      	ldrb	r3, [r7, #7]
 80079d4:	f003 021f 	and.w	r2, r3, #31
 80079d8:	4907      	ldr	r1, [pc, #28]	; (80079f8 <__NVIC_EnableIRQ+0x38>)
 80079da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079de:	095b      	lsrs	r3, r3, #5
 80079e0:	2001      	movs	r0, #1
 80079e2:	fa00 f202 	lsl.w	r2, r0, r2
 80079e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80079ea:	bf00      	nop
 80079ec:	370c      	adds	r7, #12
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	e000e100 	.word	0xe000e100

080079fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	4603      	mov	r3, r0
 8007a04:	6039      	str	r1, [r7, #0]
 8007a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	db0a      	blt.n	8007a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	490c      	ldr	r1, [pc, #48]	; (8007a48 <__NVIC_SetPriority+0x4c>)
 8007a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a1a:	0112      	lsls	r2, r2, #4
 8007a1c:	b2d2      	uxtb	r2, r2
 8007a1e:	440b      	add	r3, r1
 8007a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007a24:	e00a      	b.n	8007a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	4908      	ldr	r1, [pc, #32]	; (8007a4c <__NVIC_SetPriority+0x50>)
 8007a2c:	79fb      	ldrb	r3, [r7, #7]
 8007a2e:	f003 030f 	and.w	r3, r3, #15
 8007a32:	3b04      	subs	r3, #4
 8007a34:	0112      	lsls	r2, r2, #4
 8007a36:	b2d2      	uxtb	r2, r2
 8007a38:	440b      	add	r3, r1
 8007a3a:	761a      	strb	r2, [r3, #24]
}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	e000e100 	.word	0xe000e100
 8007a4c:	e000ed00 	.word	0xe000ed00

08007a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b089      	sub	sp, #36	; 0x24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f003 0307 	and.w	r3, r3, #7
 8007a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	f1c3 0307 	rsb	r3, r3, #7
 8007a6a:	2b04      	cmp	r3, #4
 8007a6c:	bf28      	it	cs
 8007a6e:	2304      	movcs	r3, #4
 8007a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	3304      	adds	r3, #4
 8007a76:	2b06      	cmp	r3, #6
 8007a78:	d902      	bls.n	8007a80 <NVIC_EncodePriority+0x30>
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	3b03      	subs	r3, #3
 8007a7e:	e000      	b.n	8007a82 <NVIC_EncodePriority+0x32>
 8007a80:	2300      	movs	r3, #0
 8007a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a84:	f04f 32ff 	mov.w	r2, #4294967295
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8e:	43da      	mvns	r2, r3
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	401a      	ands	r2, r3
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a98:	f04f 31ff 	mov.w	r1, #4294967295
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa2:	43d9      	mvns	r1, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007aa8:	4313      	orrs	r3, r2
         );
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3724      	adds	r7, #36	; 0x24
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b082      	sub	sp, #8
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7ff ff4c 	bl	800795c <__NVIC_SetPriorityGrouping>
}
 8007ac4:	bf00      	nop
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
 8007ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007ade:	f7ff ff61 	bl	80079a4 <__NVIC_GetPriorityGrouping>
 8007ae2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	68b9      	ldr	r1, [r7, #8]
 8007ae8:	6978      	ldr	r0, [r7, #20]
 8007aea:	f7ff ffb1 	bl	8007a50 <NVIC_EncodePriority>
 8007aee:	4602      	mov	r2, r0
 8007af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007af4:	4611      	mov	r1, r2
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7ff ff80 	bl	80079fc <__NVIC_SetPriority>
}
 8007afc:	bf00      	nop
 8007afe:	3718      	adds	r7, #24
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7ff ff54 	bl	80079c0 <__NVIC_EnableIRQ>
}
 8007b18:	bf00      	nop
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007b2c:	f7ff f884 	bl	8006c38 <HAL_GetTick>
 8007b30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e099      	b.n	8007c70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2202      	movs	r2, #2
 8007b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f022 0201 	bic.w	r2, r2, #1
 8007b5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b5c:	e00f      	b.n	8007b7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007b5e:	f7ff f86b 	bl	8006c38 <HAL_GetTick>
 8007b62:	4602      	mov	r2, r0
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	2b05      	cmp	r3, #5
 8007b6a:	d908      	bls.n	8007b7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2220      	movs	r2, #32
 8007b70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2203      	movs	r2, #3
 8007b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e078      	b.n	8007c70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1e8      	bne.n	8007b5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	4b38      	ldr	r3, [pc, #224]	; (8007c78 <HAL_DMA_Init+0x158>)
 8007b98:	4013      	ands	r3, r2
 8007b9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685a      	ldr	r2, [r3, #4]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007baa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007bb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007bc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a1b      	ldr	r3, [r3, #32]
 8007bc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd4:	2b04      	cmp	r3, #4
 8007bd6:	d107      	bne.n	8007be8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be0:	4313      	orrs	r3, r2
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f023 0307 	bic.w	r3, r3, #7
 8007bfe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0e:	2b04      	cmp	r3, #4
 8007c10:	d117      	bne.n	8007c42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00e      	beq.n	8007c42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 fb01 	bl	800822c <DMA_CheckFifoParam>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d008      	beq.n	8007c42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2240      	movs	r2, #64	; 0x40
 8007c34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e016      	b.n	8007c70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fab8 	bl	80081c0 <DMA_CalcBaseAndBitshift>
 8007c50:	4603      	mov	r3, r0
 8007c52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c58:	223f      	movs	r2, #63	; 0x3f
 8007c5a:	409a      	lsls	r2, r3
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3718      	adds	r7, #24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	f010803f 	.word	0xf010803f

08007c7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
 8007c88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d101      	bne.n	8007ca2 <HAL_DMA_Start_IT+0x26>
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	e040      	b.n	8007d24 <HAL_DMA_Start_IT+0xa8>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d12f      	bne.n	8007d16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2202      	movs	r2, #2
 8007cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	68b9      	ldr	r1, [r7, #8]
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f000 fa4a 	bl	8008164 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cd4:	223f      	movs	r2, #63	; 0x3f
 8007cd6:	409a      	lsls	r2, r3
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f042 0216 	orr.w	r2, r2, #22
 8007cea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d007      	beq.n	8007d04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f042 0208 	orr.w	r2, r2, #8
 8007d02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f042 0201 	orr.w	r2, r2, #1
 8007d12:	601a      	str	r2, [r3, #0]
 8007d14:	e005      	b.n	8007d22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007d1e:	2302      	movs	r3, #2
 8007d20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3718      	adds	r7, #24
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007d3a:	f7fe ff7d 	bl	8006c38 <HAL_GetTick>
 8007d3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d008      	beq.n	8007d5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2280      	movs	r2, #128	; 0x80
 8007d50:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e052      	b.n	8007e04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f022 0216 	bic.w	r2, r2, #22
 8007d6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	695a      	ldr	r2, [r3, #20]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d103      	bne.n	8007d8e <HAL_DMA_Abort+0x62>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d007      	beq.n	8007d9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f022 0208 	bic.w	r2, r2, #8
 8007d9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f022 0201 	bic.w	r2, r2, #1
 8007dac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007dae:	e013      	b.n	8007dd8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007db0:	f7fe ff42 	bl	8006c38 <HAL_GetTick>
 8007db4:	4602      	mov	r2, r0
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	2b05      	cmp	r3, #5
 8007dbc:	d90c      	bls.n	8007dd8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2220      	movs	r2, #32
 8007dc2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2203      	movs	r2, #3
 8007dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e015      	b.n	8007e04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1e4      	bne.n	8007db0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dea:	223f      	movs	r2, #63	; 0x3f
 8007dec:	409a      	lsls	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d004      	beq.n	8007e2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2280      	movs	r2, #128	; 0x80
 8007e24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e00c      	b.n	8007e44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2205      	movs	r2, #5
 8007e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f022 0201 	bic.w	r2, r2, #1
 8007e40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007e5c:	4b92      	ldr	r3, [pc, #584]	; (80080a8 <HAL_DMA_IRQHandler+0x258>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a92      	ldr	r2, [pc, #584]	; (80080ac <HAL_DMA_IRQHandler+0x25c>)
 8007e62:	fba2 2303 	umull	r2, r3, r2, r3
 8007e66:	0a9b      	lsrs	r3, r3, #10
 8007e68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e7a:	2208      	movs	r2, #8
 8007e7c:	409a      	lsls	r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	4013      	ands	r3, r2
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d01a      	beq.n	8007ebc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0304 	and.w	r3, r3, #4
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d013      	beq.n	8007ebc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f022 0204 	bic.w	r2, r2, #4
 8007ea2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ea8:	2208      	movs	r2, #8
 8007eaa:	409a      	lsls	r2, r3
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb4:	f043 0201 	orr.w	r2, r3, #1
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	409a      	lsls	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d012      	beq.n	8007ef2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00b      	beq.n	8007ef2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ede:	2201      	movs	r2, #1
 8007ee0:	409a      	lsls	r2, r3
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eea:	f043 0202 	orr.w	r2, r3, #2
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ef6:	2204      	movs	r2, #4
 8007ef8:	409a      	lsls	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	4013      	ands	r3, r2
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d012      	beq.n	8007f28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0302 	and.w	r3, r3, #2
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00b      	beq.n	8007f28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f14:	2204      	movs	r2, #4
 8007f16:	409a      	lsls	r2, r3
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f20:	f043 0204 	orr.w	r2, r3, #4
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f2c:	2210      	movs	r2, #16
 8007f2e:	409a      	lsls	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4013      	ands	r3, r2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d043      	beq.n	8007fc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0308 	and.w	r3, r3, #8
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d03c      	beq.n	8007fc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f4a:	2210      	movs	r2, #16
 8007f4c:	409a      	lsls	r2, r3
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d018      	beq.n	8007f92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d108      	bne.n	8007f80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d024      	beq.n	8007fc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	4798      	blx	r3
 8007f7e:	e01f      	b.n	8007fc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d01b      	beq.n	8007fc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	4798      	blx	r3
 8007f90:	e016      	b.n	8007fc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d107      	bne.n	8007fb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f022 0208 	bic.w	r2, r2, #8
 8007fae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d003      	beq.n	8007fc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fc4:	2220      	movs	r2, #32
 8007fc6:	409a      	lsls	r2, r3
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	4013      	ands	r3, r2
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 808e 	beq.w	80080ee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 0310 	and.w	r3, r3, #16
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f000 8086 	beq.w	80080ee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	409a      	lsls	r2, r3
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b05      	cmp	r3, #5
 8007ff8:	d136      	bne.n	8008068 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f022 0216 	bic.w	r2, r2, #22
 8008008:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	695a      	ldr	r2, [r3, #20]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008018:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801e:	2b00      	cmp	r3, #0
 8008020:	d103      	bne.n	800802a <HAL_DMA_IRQHandler+0x1da>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008026:	2b00      	cmp	r3, #0
 8008028:	d007      	beq.n	800803a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f022 0208 	bic.w	r2, r2, #8
 8008038:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800803e:	223f      	movs	r2, #63	; 0x3f
 8008040:	409a      	lsls	r2, r3
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800805a:	2b00      	cmp	r3, #0
 800805c:	d07d      	beq.n	800815a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	4798      	blx	r3
        }
        return;
 8008066:	e078      	b.n	800815a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d01c      	beq.n	80080b0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d108      	bne.n	8008096 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008088:	2b00      	cmp	r3, #0
 800808a:	d030      	beq.n	80080ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	4798      	blx	r3
 8008094:	e02b      	b.n	80080ee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800809a:	2b00      	cmp	r3, #0
 800809c:	d027      	beq.n	80080ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	4798      	blx	r3
 80080a6:	e022      	b.n	80080ee <HAL_DMA_IRQHandler+0x29e>
 80080a8:	20000008 	.word	0x20000008
 80080ac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10f      	bne.n	80080de <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f022 0210 	bic.w	r2, r2, #16
 80080cc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d003      	beq.n	80080ee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d032      	beq.n	800815c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d022      	beq.n	8008148 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2205      	movs	r2, #5
 8008106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 0201 	bic.w	r2, r2, #1
 8008118:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	3301      	adds	r3, #1
 800811e:	60bb      	str	r3, [r7, #8]
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	429a      	cmp	r2, r3
 8008124:	d307      	bcc.n	8008136 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1f2      	bne.n	800811a <HAL_DMA_IRQHandler+0x2ca>
 8008134:	e000      	b.n	8008138 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008136:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800814c:	2b00      	cmp	r3, #0
 800814e:	d005      	beq.n	800815c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	4798      	blx	r3
 8008158:	e000      	b.n	800815c <HAL_DMA_IRQHandler+0x30c>
        return;
 800815a:	bf00      	nop
    }
  }
}
 800815c:	3718      	adds	r7, #24
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop

08008164 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
 8008170:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008180:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	683a      	ldr	r2, [r7, #0]
 8008188:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	2b40      	cmp	r3, #64	; 0x40
 8008190:	d108      	bne.n	80081a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80081a2:	e007      	b.n	80081b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	60da      	str	r2, [r3, #12]
}
 80081b4:	bf00      	nop
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	3b10      	subs	r3, #16
 80081d0:	4a14      	ldr	r2, [pc, #80]	; (8008224 <DMA_CalcBaseAndBitshift+0x64>)
 80081d2:	fba2 2303 	umull	r2, r3, r2, r3
 80081d6:	091b      	lsrs	r3, r3, #4
 80081d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80081da:	4a13      	ldr	r2, [pc, #76]	; (8008228 <DMA_CalcBaseAndBitshift+0x68>)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	4413      	add	r3, r2
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	461a      	mov	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2b03      	cmp	r3, #3
 80081ec:	d909      	bls.n	8008202 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80081f6:	f023 0303 	bic.w	r3, r3, #3
 80081fa:	1d1a      	adds	r2, r3, #4
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	659a      	str	r2, [r3, #88]	; 0x58
 8008200:	e007      	b.n	8008212 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800820a:	f023 0303 	bic.w	r3, r3, #3
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008216:	4618      	mov	r0, r3
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	aaaaaaab 	.word	0xaaaaaaab
 8008228:	08014a38 	.word	0x08014a38

0800822c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008234:	2300      	movs	r3, #0
 8008236:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d11f      	bne.n	8008286 <DMA_CheckFifoParam+0x5a>
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	2b03      	cmp	r3, #3
 800824a:	d856      	bhi.n	80082fa <DMA_CheckFifoParam+0xce>
 800824c:	a201      	add	r2, pc, #4	; (adr r2, 8008254 <DMA_CheckFifoParam+0x28>)
 800824e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008252:	bf00      	nop
 8008254:	08008265 	.word	0x08008265
 8008258:	08008277 	.word	0x08008277
 800825c:	08008265 	.word	0x08008265
 8008260:	080082fb 	.word	0x080082fb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d046      	beq.n	80082fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008274:	e043      	b.n	80082fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800827e:	d140      	bne.n	8008302 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008284:	e03d      	b.n	8008302 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800828e:	d121      	bne.n	80082d4 <DMA_CheckFifoParam+0xa8>
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2b03      	cmp	r3, #3
 8008294:	d837      	bhi.n	8008306 <DMA_CheckFifoParam+0xda>
 8008296:	a201      	add	r2, pc, #4	; (adr r2, 800829c <DMA_CheckFifoParam+0x70>)
 8008298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829c:	080082ad 	.word	0x080082ad
 80082a0:	080082b3 	.word	0x080082b3
 80082a4:	080082ad 	.word	0x080082ad
 80082a8:	080082c5 	.word	0x080082c5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	73fb      	strb	r3, [r7, #15]
      break;
 80082b0:	e030      	b.n	8008314 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d025      	beq.n	800830a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082c2:	e022      	b.n	800830a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80082cc:	d11f      	bne.n	800830e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80082d2:	e01c      	b.n	800830e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	d903      	bls.n	80082e2 <DMA_CheckFifoParam+0xb6>
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	2b03      	cmp	r3, #3
 80082de:	d003      	beq.n	80082e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80082e0:	e018      	b.n	8008314 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	73fb      	strb	r3, [r7, #15]
      break;
 80082e6:	e015      	b.n	8008314 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00e      	beq.n	8008312 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	73fb      	strb	r3, [r7, #15]
      break;
 80082f8:	e00b      	b.n	8008312 <DMA_CheckFifoParam+0xe6>
      break;
 80082fa:	bf00      	nop
 80082fc:	e00a      	b.n	8008314 <DMA_CheckFifoParam+0xe8>
      break;
 80082fe:	bf00      	nop
 8008300:	e008      	b.n	8008314 <DMA_CheckFifoParam+0xe8>
      break;
 8008302:	bf00      	nop
 8008304:	e006      	b.n	8008314 <DMA_CheckFifoParam+0xe8>
      break;
 8008306:	bf00      	nop
 8008308:	e004      	b.n	8008314 <DMA_CheckFifoParam+0xe8>
      break;
 800830a:	bf00      	nop
 800830c:	e002      	b.n	8008314 <DMA_CheckFifoParam+0xe8>
      break;   
 800830e:	bf00      	nop
 8008310:	e000      	b.n	8008314 <DMA_CheckFifoParam+0xe8>
      break;
 8008312:	bf00      	nop
    }
  } 
  
  return status; 
 8008314:	7bfb      	ldrb	r3, [r7, #15]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3714      	adds	r7, #20
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop

08008324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008324:	b480      	push	{r7}
 8008326:	b089      	sub	sp, #36	; 0x24
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800832e:	2300      	movs	r3, #0
 8008330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008332:	2300      	movs	r3, #0
 8008334:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008336:	2300      	movs	r3, #0
 8008338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800833a:	2300      	movs	r3, #0
 800833c:	61fb      	str	r3, [r7, #28]
 800833e:	e177      	b.n	8008630 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008340:	2201      	movs	r2, #1
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	fa02 f303 	lsl.w	r3, r2, r3
 8008348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	4013      	ands	r3, r2
 8008352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	429a      	cmp	r2, r3
 800835a:	f040 8166 	bne.w	800862a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	f003 0303 	and.w	r3, r3, #3
 8008366:	2b01      	cmp	r3, #1
 8008368:	d005      	beq.n	8008376 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008372:	2b02      	cmp	r3, #2
 8008374:	d130      	bne.n	80083d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	005b      	lsls	r3, r3, #1
 8008380:	2203      	movs	r2, #3
 8008382:	fa02 f303 	lsl.w	r3, r2, r3
 8008386:	43db      	mvns	r3, r3
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	4013      	ands	r3, r2
 800838c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	68da      	ldr	r2, [r3, #12]
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	005b      	lsls	r3, r3, #1
 8008396:	fa02 f303 	lsl.w	r3, r2, r3
 800839a:	69ba      	ldr	r2, [r7, #24]
 800839c:	4313      	orrs	r3, r2
 800839e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	69ba      	ldr	r2, [r7, #24]
 80083a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80083ac:	2201      	movs	r2, #1
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	fa02 f303 	lsl.w	r3, r2, r3
 80083b4:	43db      	mvns	r3, r3
 80083b6:	69ba      	ldr	r2, [r7, #24]
 80083b8:	4013      	ands	r3, r2
 80083ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	091b      	lsrs	r3, r3, #4
 80083c2:	f003 0201 	and.w	r2, r3, #1
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	fa02 f303 	lsl.w	r3, r2, r3
 80083cc:	69ba      	ldr	r2, [r7, #24]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	69ba      	ldr	r2, [r7, #24]
 80083d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	f003 0303 	and.w	r3, r3, #3
 80083e0:	2b03      	cmp	r3, #3
 80083e2:	d017      	beq.n	8008414 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	005b      	lsls	r3, r3, #1
 80083ee:	2203      	movs	r2, #3
 80083f0:	fa02 f303 	lsl.w	r3, r2, r3
 80083f4:	43db      	mvns	r3, r3
 80083f6:	69ba      	ldr	r2, [r7, #24]
 80083f8:	4013      	ands	r3, r2
 80083fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	689a      	ldr	r2, [r3, #8]
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	005b      	lsls	r3, r3, #1
 8008404:	fa02 f303 	lsl.w	r3, r2, r3
 8008408:	69ba      	ldr	r2, [r7, #24]
 800840a:	4313      	orrs	r3, r2
 800840c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	69ba      	ldr	r2, [r7, #24]
 8008412:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	f003 0303 	and.w	r3, r3, #3
 800841c:	2b02      	cmp	r3, #2
 800841e:	d123      	bne.n	8008468 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	08da      	lsrs	r2, r3, #3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	3208      	adds	r2, #8
 8008428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800842c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	f003 0307 	and.w	r3, r3, #7
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	220f      	movs	r2, #15
 8008438:	fa02 f303 	lsl.w	r3, r2, r3
 800843c:	43db      	mvns	r3, r3
 800843e:	69ba      	ldr	r2, [r7, #24]
 8008440:	4013      	ands	r3, r2
 8008442:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	691a      	ldr	r2, [r3, #16]
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	f003 0307 	and.w	r3, r3, #7
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	fa02 f303 	lsl.w	r3, r2, r3
 8008454:	69ba      	ldr	r2, [r7, #24]
 8008456:	4313      	orrs	r3, r2
 8008458:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	08da      	lsrs	r2, r3, #3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	3208      	adds	r2, #8
 8008462:	69b9      	ldr	r1, [r7, #24]
 8008464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	005b      	lsls	r3, r3, #1
 8008472:	2203      	movs	r2, #3
 8008474:	fa02 f303 	lsl.w	r3, r2, r3
 8008478:	43db      	mvns	r3, r3
 800847a:	69ba      	ldr	r2, [r7, #24]
 800847c:	4013      	ands	r3, r2
 800847e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	f003 0203 	and.w	r2, r3, #3
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	005b      	lsls	r3, r3, #1
 800848c:	fa02 f303 	lsl.w	r3, r2, r3
 8008490:	69ba      	ldr	r2, [r7, #24]
 8008492:	4313      	orrs	r3, r2
 8008494:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	69ba      	ldr	r2, [r7, #24]
 800849a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 80c0 	beq.w	800862a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084aa:	2300      	movs	r3, #0
 80084ac:	60fb      	str	r3, [r7, #12]
 80084ae:	4b66      	ldr	r3, [pc, #408]	; (8008648 <HAL_GPIO_Init+0x324>)
 80084b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b2:	4a65      	ldr	r2, [pc, #404]	; (8008648 <HAL_GPIO_Init+0x324>)
 80084b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084b8:	6453      	str	r3, [r2, #68]	; 0x44
 80084ba:	4b63      	ldr	r3, [pc, #396]	; (8008648 <HAL_GPIO_Init+0x324>)
 80084bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084c2:	60fb      	str	r3, [r7, #12]
 80084c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80084c6:	4a61      	ldr	r2, [pc, #388]	; (800864c <HAL_GPIO_Init+0x328>)
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	089b      	lsrs	r3, r3, #2
 80084cc:	3302      	adds	r3, #2
 80084ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	f003 0303 	and.w	r3, r3, #3
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	220f      	movs	r2, #15
 80084de:	fa02 f303 	lsl.w	r3, r2, r3
 80084e2:	43db      	mvns	r3, r3
 80084e4:	69ba      	ldr	r2, [r7, #24]
 80084e6:	4013      	ands	r3, r2
 80084e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a58      	ldr	r2, [pc, #352]	; (8008650 <HAL_GPIO_Init+0x32c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d037      	beq.n	8008562 <HAL_GPIO_Init+0x23e>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a57      	ldr	r2, [pc, #348]	; (8008654 <HAL_GPIO_Init+0x330>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d031      	beq.n	800855e <HAL_GPIO_Init+0x23a>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a56      	ldr	r2, [pc, #344]	; (8008658 <HAL_GPIO_Init+0x334>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d02b      	beq.n	800855a <HAL_GPIO_Init+0x236>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a55      	ldr	r2, [pc, #340]	; (800865c <HAL_GPIO_Init+0x338>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d025      	beq.n	8008556 <HAL_GPIO_Init+0x232>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a54      	ldr	r2, [pc, #336]	; (8008660 <HAL_GPIO_Init+0x33c>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d01f      	beq.n	8008552 <HAL_GPIO_Init+0x22e>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a53      	ldr	r2, [pc, #332]	; (8008664 <HAL_GPIO_Init+0x340>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d019      	beq.n	800854e <HAL_GPIO_Init+0x22a>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a52      	ldr	r2, [pc, #328]	; (8008668 <HAL_GPIO_Init+0x344>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d013      	beq.n	800854a <HAL_GPIO_Init+0x226>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a51      	ldr	r2, [pc, #324]	; (800866c <HAL_GPIO_Init+0x348>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d00d      	beq.n	8008546 <HAL_GPIO_Init+0x222>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a50      	ldr	r2, [pc, #320]	; (8008670 <HAL_GPIO_Init+0x34c>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d007      	beq.n	8008542 <HAL_GPIO_Init+0x21e>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a4f      	ldr	r2, [pc, #316]	; (8008674 <HAL_GPIO_Init+0x350>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d101      	bne.n	800853e <HAL_GPIO_Init+0x21a>
 800853a:	2309      	movs	r3, #9
 800853c:	e012      	b.n	8008564 <HAL_GPIO_Init+0x240>
 800853e:	230a      	movs	r3, #10
 8008540:	e010      	b.n	8008564 <HAL_GPIO_Init+0x240>
 8008542:	2308      	movs	r3, #8
 8008544:	e00e      	b.n	8008564 <HAL_GPIO_Init+0x240>
 8008546:	2307      	movs	r3, #7
 8008548:	e00c      	b.n	8008564 <HAL_GPIO_Init+0x240>
 800854a:	2306      	movs	r3, #6
 800854c:	e00a      	b.n	8008564 <HAL_GPIO_Init+0x240>
 800854e:	2305      	movs	r3, #5
 8008550:	e008      	b.n	8008564 <HAL_GPIO_Init+0x240>
 8008552:	2304      	movs	r3, #4
 8008554:	e006      	b.n	8008564 <HAL_GPIO_Init+0x240>
 8008556:	2303      	movs	r3, #3
 8008558:	e004      	b.n	8008564 <HAL_GPIO_Init+0x240>
 800855a:	2302      	movs	r3, #2
 800855c:	e002      	b.n	8008564 <HAL_GPIO_Init+0x240>
 800855e:	2301      	movs	r3, #1
 8008560:	e000      	b.n	8008564 <HAL_GPIO_Init+0x240>
 8008562:	2300      	movs	r3, #0
 8008564:	69fa      	ldr	r2, [r7, #28]
 8008566:	f002 0203 	and.w	r2, r2, #3
 800856a:	0092      	lsls	r2, r2, #2
 800856c:	4093      	lsls	r3, r2
 800856e:	69ba      	ldr	r2, [r7, #24]
 8008570:	4313      	orrs	r3, r2
 8008572:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008574:	4935      	ldr	r1, [pc, #212]	; (800864c <HAL_GPIO_Init+0x328>)
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	089b      	lsrs	r3, r3, #2
 800857a:	3302      	adds	r3, #2
 800857c:	69ba      	ldr	r2, [r7, #24]
 800857e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008582:	4b3d      	ldr	r3, [pc, #244]	; (8008678 <HAL_GPIO_Init+0x354>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	43db      	mvns	r3, r3
 800858c:	69ba      	ldr	r2, [r7, #24]
 800858e:	4013      	ands	r3, r2
 8008590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d003      	beq.n	80085a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800859e:	69ba      	ldr	r2, [r7, #24]
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80085a6:	4a34      	ldr	r2, [pc, #208]	; (8008678 <HAL_GPIO_Init+0x354>)
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80085ac:	4b32      	ldr	r3, [pc, #200]	; (8008678 <HAL_GPIO_Init+0x354>)
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	43db      	mvns	r3, r3
 80085b6:	69ba      	ldr	r2, [r7, #24]
 80085b8:	4013      	ands	r3, r2
 80085ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d003      	beq.n	80085d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80085c8:	69ba      	ldr	r2, [r7, #24]
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80085d0:	4a29      	ldr	r2, [pc, #164]	; (8008678 <HAL_GPIO_Init+0x354>)
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80085d6:	4b28      	ldr	r3, [pc, #160]	; (8008678 <HAL_GPIO_Init+0x354>)
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	43db      	mvns	r3, r3
 80085e0:	69ba      	ldr	r2, [r7, #24]
 80085e2:	4013      	ands	r3, r2
 80085e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d003      	beq.n	80085fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80085f2:	69ba      	ldr	r2, [r7, #24]
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80085fa:	4a1f      	ldr	r2, [pc, #124]	; (8008678 <HAL_GPIO_Init+0x354>)
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008600:	4b1d      	ldr	r3, [pc, #116]	; (8008678 <HAL_GPIO_Init+0x354>)
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	43db      	mvns	r3, r3
 800860a:	69ba      	ldr	r2, [r7, #24]
 800860c:	4013      	ands	r3, r2
 800860e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008618:	2b00      	cmp	r3, #0
 800861a:	d003      	beq.n	8008624 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800861c:	69ba      	ldr	r2, [r7, #24]
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	4313      	orrs	r3, r2
 8008622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008624:	4a14      	ldr	r2, [pc, #80]	; (8008678 <HAL_GPIO_Init+0x354>)
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	3301      	adds	r3, #1
 800862e:	61fb      	str	r3, [r7, #28]
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	2b0f      	cmp	r3, #15
 8008634:	f67f ae84 	bls.w	8008340 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008638:	bf00      	nop
 800863a:	bf00      	nop
 800863c:	3724      	adds	r7, #36	; 0x24
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	40023800 	.word	0x40023800
 800864c:	40013800 	.word	0x40013800
 8008650:	40020000 	.word	0x40020000
 8008654:	40020400 	.word	0x40020400
 8008658:	40020800 	.word	0x40020800
 800865c:	40020c00 	.word	0x40020c00
 8008660:	40021000 	.word	0x40021000
 8008664:	40021400 	.word	0x40021400
 8008668:	40021800 	.word	0x40021800
 800866c:	40021c00 	.word	0x40021c00
 8008670:	40022000 	.word	0x40022000
 8008674:	40022400 	.word	0x40022400
 8008678:	40013c00 	.word	0x40013c00

0800867c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	460b      	mov	r3, r1
 8008686:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	691a      	ldr	r2, [r3, #16]
 800868c:	887b      	ldrh	r3, [r7, #2]
 800868e:	4013      	ands	r3, r2
 8008690:	2b00      	cmp	r3, #0
 8008692:	d002      	beq.n	800869a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008694:	2301      	movs	r3, #1
 8008696:	73fb      	strb	r3, [r7, #15]
 8008698:	e001      	b.n	800869e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800869a:	2300      	movs	r3, #0
 800869c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800869e:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	460b      	mov	r3, r1
 80086b6:	807b      	strh	r3, [r7, #2]
 80086b8:	4613      	mov	r3, r2
 80086ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80086bc:	787b      	ldrb	r3, [r7, #1]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d003      	beq.n	80086ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80086c2:	887a      	ldrh	r2, [r7, #2]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80086c8:	e003      	b.n	80086d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80086ca:	887b      	ldrh	r3, [r7, #2]
 80086cc:	041a      	lsls	r2, r3, #16
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	619a      	str	r2, [r3, #24]
}
 80086d2:	bf00      	nop
 80086d4:	370c      	adds	r7, #12
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80086de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086e0:	b08f      	sub	sp, #60	; 0x3c
 80086e2:	af0a      	add	r7, sp, #40	; 0x28
 80086e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d101      	bne.n	80086f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e10f      	b.n	8008910 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d106      	bne.n	8008710 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f00b f816 	bl	801373c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2203      	movs	r2, #3
 8008714:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800871c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008720:	2b00      	cmp	r3, #0
 8008722:	d102      	bne.n	800872a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4618      	mov	r0, r3
 8008730:	f004 fa6b 	bl	800cc0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	603b      	str	r3, [r7, #0]
 800873a:	687e      	ldr	r6, [r7, #4]
 800873c:	466d      	mov	r5, sp
 800873e:	f106 0410 	add.w	r4, r6, #16
 8008742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800874a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800874e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008752:	1d33      	adds	r3, r6, #4
 8008754:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008756:	6838      	ldr	r0, [r7, #0]
 8008758:	f004 f942 	bl	800c9e0 <USB_CoreInit>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d005      	beq.n	800876e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2202      	movs	r2, #2
 8008766:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e0d0      	b.n	8008910 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2100      	movs	r1, #0
 8008774:	4618      	mov	r0, r3
 8008776:	f004 fa59 	bl	800cc2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800877a:	2300      	movs	r3, #0
 800877c:	73fb      	strb	r3, [r7, #15]
 800877e:	e04a      	b.n	8008816 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008780:	7bfa      	ldrb	r2, [r7, #15]
 8008782:	6879      	ldr	r1, [r7, #4]
 8008784:	4613      	mov	r3, r2
 8008786:	00db      	lsls	r3, r3, #3
 8008788:	1a9b      	subs	r3, r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	440b      	add	r3, r1
 800878e:	333d      	adds	r3, #61	; 0x3d
 8008790:	2201      	movs	r2, #1
 8008792:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008794:	7bfa      	ldrb	r2, [r7, #15]
 8008796:	6879      	ldr	r1, [r7, #4]
 8008798:	4613      	mov	r3, r2
 800879a:	00db      	lsls	r3, r3, #3
 800879c:	1a9b      	subs	r3, r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	440b      	add	r3, r1
 80087a2:	333c      	adds	r3, #60	; 0x3c
 80087a4:	7bfa      	ldrb	r2, [r7, #15]
 80087a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80087a8:	7bfa      	ldrb	r2, [r7, #15]
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
 80087ac:	b298      	uxth	r0, r3
 80087ae:	6879      	ldr	r1, [r7, #4]
 80087b0:	4613      	mov	r3, r2
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	1a9b      	subs	r3, r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	440b      	add	r3, r1
 80087ba:	3342      	adds	r3, #66	; 0x42
 80087bc:	4602      	mov	r2, r0
 80087be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80087c0:	7bfa      	ldrb	r2, [r7, #15]
 80087c2:	6879      	ldr	r1, [r7, #4]
 80087c4:	4613      	mov	r3, r2
 80087c6:	00db      	lsls	r3, r3, #3
 80087c8:	1a9b      	subs	r3, r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	440b      	add	r3, r1
 80087ce:	333f      	adds	r3, #63	; 0x3f
 80087d0:	2200      	movs	r2, #0
 80087d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80087d4:	7bfa      	ldrb	r2, [r7, #15]
 80087d6:	6879      	ldr	r1, [r7, #4]
 80087d8:	4613      	mov	r3, r2
 80087da:	00db      	lsls	r3, r3, #3
 80087dc:	1a9b      	subs	r3, r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	440b      	add	r3, r1
 80087e2:	3344      	adds	r3, #68	; 0x44
 80087e4:	2200      	movs	r2, #0
 80087e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80087e8:	7bfa      	ldrb	r2, [r7, #15]
 80087ea:	6879      	ldr	r1, [r7, #4]
 80087ec:	4613      	mov	r3, r2
 80087ee:	00db      	lsls	r3, r3, #3
 80087f0:	1a9b      	subs	r3, r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	440b      	add	r3, r1
 80087f6:	3348      	adds	r3, #72	; 0x48
 80087f8:	2200      	movs	r2, #0
 80087fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80087fc:	7bfa      	ldrb	r2, [r7, #15]
 80087fe:	6879      	ldr	r1, [r7, #4]
 8008800:	4613      	mov	r3, r2
 8008802:	00db      	lsls	r3, r3, #3
 8008804:	1a9b      	subs	r3, r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	440b      	add	r3, r1
 800880a:	3350      	adds	r3, #80	; 0x50
 800880c:	2200      	movs	r2, #0
 800880e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008810:	7bfb      	ldrb	r3, [r7, #15]
 8008812:	3301      	adds	r3, #1
 8008814:	73fb      	strb	r3, [r7, #15]
 8008816:	7bfa      	ldrb	r2, [r7, #15]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	429a      	cmp	r2, r3
 800881e:	d3af      	bcc.n	8008780 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008820:	2300      	movs	r3, #0
 8008822:	73fb      	strb	r3, [r7, #15]
 8008824:	e044      	b.n	80088b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008826:	7bfa      	ldrb	r2, [r7, #15]
 8008828:	6879      	ldr	r1, [r7, #4]
 800882a:	4613      	mov	r3, r2
 800882c:	00db      	lsls	r3, r3, #3
 800882e:	1a9b      	subs	r3, r3, r2
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	440b      	add	r3, r1
 8008834:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008838:	2200      	movs	r2, #0
 800883a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800883c:	7bfa      	ldrb	r2, [r7, #15]
 800883e:	6879      	ldr	r1, [r7, #4]
 8008840:	4613      	mov	r3, r2
 8008842:	00db      	lsls	r3, r3, #3
 8008844:	1a9b      	subs	r3, r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	440b      	add	r3, r1
 800884a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800884e:	7bfa      	ldrb	r2, [r7, #15]
 8008850:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008852:	7bfa      	ldrb	r2, [r7, #15]
 8008854:	6879      	ldr	r1, [r7, #4]
 8008856:	4613      	mov	r3, r2
 8008858:	00db      	lsls	r3, r3, #3
 800885a:	1a9b      	subs	r3, r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	440b      	add	r3, r1
 8008860:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008864:	2200      	movs	r2, #0
 8008866:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008868:	7bfa      	ldrb	r2, [r7, #15]
 800886a:	6879      	ldr	r1, [r7, #4]
 800886c:	4613      	mov	r3, r2
 800886e:	00db      	lsls	r3, r3, #3
 8008870:	1a9b      	subs	r3, r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	440b      	add	r3, r1
 8008876:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800887a:	2200      	movs	r2, #0
 800887c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800887e:	7bfa      	ldrb	r2, [r7, #15]
 8008880:	6879      	ldr	r1, [r7, #4]
 8008882:	4613      	mov	r3, r2
 8008884:	00db      	lsls	r3, r3, #3
 8008886:	1a9b      	subs	r3, r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	440b      	add	r3, r1
 800888c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008890:	2200      	movs	r2, #0
 8008892:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008894:	7bfa      	ldrb	r2, [r7, #15]
 8008896:	6879      	ldr	r1, [r7, #4]
 8008898:	4613      	mov	r3, r2
 800889a:	00db      	lsls	r3, r3, #3
 800889c:	1a9b      	subs	r3, r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	440b      	add	r3, r1
 80088a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80088a6:	2200      	movs	r2, #0
 80088a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088aa:	7bfb      	ldrb	r3, [r7, #15]
 80088ac:	3301      	adds	r3, #1
 80088ae:	73fb      	strb	r3, [r7, #15]
 80088b0:	7bfa      	ldrb	r2, [r7, #15]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d3b5      	bcc.n	8008826 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	603b      	str	r3, [r7, #0]
 80088c0:	687e      	ldr	r6, [r7, #4]
 80088c2:	466d      	mov	r5, sp
 80088c4:	f106 0410 	add.w	r4, r6, #16
 80088c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80088ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80088cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80088ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80088d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80088d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80088d8:	1d33      	adds	r3, r6, #4
 80088da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80088dc:	6838      	ldr	r0, [r7, #0]
 80088de:	f004 f9cf 	bl	800cc80 <USB_DevInit>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d005      	beq.n	80088f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2202      	movs	r2, #2
 80088ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e00d      	b.n	8008910 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4618      	mov	r0, r3
 800890a:	f005 fa17 	bl	800dd3c <USB_DevDisconnect>

  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3714      	adds	r7, #20
 8008914:	46bd      	mov	sp, r7
 8008916:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008918 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800892c:	2b01      	cmp	r3, #1
 800892e:	d101      	bne.n	8008934 <HAL_PCD_Start+0x1c>
 8008930:	2302      	movs	r3, #2
 8008932:	e020      	b.n	8008976 <HAL_PCD_Start+0x5e>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008940:	2b01      	cmp	r3, #1
 8008942:	d109      	bne.n	8008958 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008948:	2b01      	cmp	r3, #1
 800894a:	d005      	beq.n	8008958 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008950:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4618      	mov	r0, r3
 800895e:	f004 f943 	bl	800cbe8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4618      	mov	r0, r3
 8008968:	f005 f9c7 	bl	800dcfa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800897e:	b590      	push	{r4, r7, lr}
 8008980:	b08d      	sub	sp, #52	; 0x34
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4618      	mov	r0, r3
 8008996:	f005 fa85 	bl	800dea4 <USB_GetMode>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	f040 839d 	bne.w	80090dc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f005 f9e9 	bl	800dd7e <USB_ReadInterrupts>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f000 8393 	beq.w	80090da <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4618      	mov	r0, r3
 80089ba:	f005 f9e0 	bl	800dd7e <USB_ReadInterrupts>
 80089be:	4603      	mov	r3, r0
 80089c0:	f003 0302 	and.w	r3, r3, #2
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d107      	bne.n	80089d8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	695a      	ldr	r2, [r3, #20]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f002 0202 	and.w	r2, r2, #2
 80089d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4618      	mov	r0, r3
 80089de:	f005 f9ce 	bl	800dd7e <USB_ReadInterrupts>
 80089e2:	4603      	mov	r3, r0
 80089e4:	f003 0310 	and.w	r3, r3, #16
 80089e8:	2b10      	cmp	r3, #16
 80089ea:	d161      	bne.n	8008ab0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	699a      	ldr	r2, [r3, #24]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f022 0210 	bic.w	r2, r2, #16
 80089fa:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80089fc:	6a3b      	ldr	r3, [r7, #32]
 80089fe:	6a1b      	ldr	r3, [r3, #32]
 8008a00:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	f003 020f 	and.w	r2, r3, #15
 8008a08:	4613      	mov	r3, r2
 8008a0a:	00db      	lsls	r3, r3, #3
 8008a0c:	1a9b      	subs	r3, r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	4413      	add	r3, r2
 8008a18:	3304      	adds	r3, #4
 8008a1a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	0c5b      	lsrs	r3, r3, #17
 8008a20:	f003 030f 	and.w	r3, r3, #15
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d124      	bne.n	8008a72 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008a28:	69ba      	ldr	r2, [r7, #24]
 8008a2a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008a2e:	4013      	ands	r3, r2
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d035      	beq.n	8008aa0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	091b      	lsrs	r3, r3, #4
 8008a3c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008a3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	461a      	mov	r2, r3
 8008a46:	6a38      	ldr	r0, [r7, #32]
 8008a48:	f005 f834 	bl	800dab4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	68da      	ldr	r2, [r3, #12]
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	091b      	lsrs	r3, r3, #4
 8008a54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a58:	441a      	add	r2, r3
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	699a      	ldr	r2, [r3, #24]
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	091b      	lsrs	r3, r3, #4
 8008a66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a6a:	441a      	add	r2, r3
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	619a      	str	r2, [r3, #24]
 8008a70:	e016      	b.n	8008aa0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	0c5b      	lsrs	r3, r3, #17
 8008a76:	f003 030f 	and.w	r3, r3, #15
 8008a7a:	2b06      	cmp	r3, #6
 8008a7c:	d110      	bne.n	8008aa0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008a84:	2208      	movs	r2, #8
 8008a86:	4619      	mov	r1, r3
 8008a88:	6a38      	ldr	r0, [r7, #32]
 8008a8a:	f005 f813 	bl	800dab4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	699a      	ldr	r2, [r3, #24]
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	091b      	lsrs	r3, r3, #4
 8008a96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a9a:	441a      	add	r2, r3
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	699a      	ldr	r2, [r3, #24]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f042 0210 	orr.w	r2, r2, #16
 8008aae:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f005 f962 	bl	800dd7e <USB_ReadInterrupts>
 8008aba:	4603      	mov	r3, r0
 8008abc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ac0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008ac4:	d16e      	bne.n	8008ba4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f005 f968 	bl	800dda4 <USB_ReadDevAllOutEpInterrupt>
 8008ad4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008ad6:	e062      	b.n	8008b9e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d057      	beq.n	8008b92 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ae8:	b2d2      	uxtb	r2, r2
 8008aea:	4611      	mov	r1, r2
 8008aec:	4618      	mov	r0, r3
 8008aee:	f005 f98d 	bl	800de0c <USB_ReadDevOutEPInterrupt>
 8008af2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	f003 0301 	and.w	r3, r3, #1
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00c      	beq.n	8008b18 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b00:	015a      	lsls	r2, r3, #5
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	4413      	add	r3, r2
 8008b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008b10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 fdb0 	bl	8009678 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	f003 0308 	and.w	r3, r3, #8
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00c      	beq.n	8008b3c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b24:	015a      	lsls	r2, r3, #5
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	4413      	add	r3, r2
 8008b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b2e:	461a      	mov	r2, r3
 8008b30:	2308      	movs	r3, #8
 8008b32:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008b34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 feaa 	bl	8009890 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	f003 0310 	and.w	r3, r3, #16
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d008      	beq.n	8008b58 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b52:	461a      	mov	r2, r3
 8008b54:	2310      	movs	r3, #16
 8008b56:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	f003 0320 	and.w	r3, r3, #32
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d008      	beq.n	8008b74 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b64:	015a      	lsls	r2, r3, #5
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	4413      	add	r3, r2
 8008b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b6e:	461a      	mov	r2, r3
 8008b70:	2320      	movs	r3, #32
 8008b72:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d009      	beq.n	8008b92 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b80:	015a      	lsls	r2, r3, #5
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	4413      	add	r3, r2
 8008b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b90:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b94:	3301      	adds	r3, #1
 8008b96:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9a:	085b      	lsrs	r3, r3, #1
 8008b9c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d199      	bne.n	8008ad8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f005 f8e8 	bl	800dd7e <USB_ReadInterrupts>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008bb8:	f040 80c0 	bne.w	8008d3c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f005 f909 	bl	800ddd8 <USB_ReadDevAllInEpInterrupt>
 8008bc6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008bcc:	e0b2      	b.n	8008d34 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd0:	f003 0301 	and.w	r3, r3, #1
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f000 80a7 	beq.w	8008d28 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008be0:	b2d2      	uxtb	r2, r2
 8008be2:	4611      	mov	r1, r2
 8008be4:	4618      	mov	r0, r3
 8008be6:	f005 f92f 	bl	800de48 <USB_ReadDevInEPInterrupt>
 8008bea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d057      	beq.n	8008ca6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf8:	f003 030f 	and.w	r3, r3, #15
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8008c02:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	43db      	mvns	r3, r3
 8008c10:	69f9      	ldr	r1, [r7, #28]
 8008c12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c16:	4013      	ands	r3, r2
 8008c18:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1c:	015a      	lsls	r2, r3, #5
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	4413      	add	r3, r2
 8008c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c26:	461a      	mov	r2, r3
 8008c28:	2301      	movs	r3, #1
 8008c2a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d132      	bne.n	8008c9a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008c34:	6879      	ldr	r1, [r7, #4]
 8008c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c38:	4613      	mov	r3, r2
 8008c3a:	00db      	lsls	r3, r3, #3
 8008c3c:	1a9b      	subs	r3, r3, r2
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	440b      	add	r3, r1
 8008c42:	3348      	adds	r3, #72	; 0x48
 8008c44:	6819      	ldr	r1, [r3, #0]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	00db      	lsls	r3, r3, #3
 8008c4e:	1a9b      	subs	r3, r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4403      	add	r3, r0
 8008c54:	3344      	adds	r3, #68	; 0x44
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4419      	add	r1, r3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c5e:	4613      	mov	r3, r2
 8008c60:	00db      	lsls	r3, r3, #3
 8008c62:	1a9b      	subs	r3, r3, r2
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	4403      	add	r3, r0
 8008c68:	3348      	adds	r3, #72	; 0x48
 8008c6a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d113      	bne.n	8008c9a <HAL_PCD_IRQHandler+0x31c>
 8008c72:	6879      	ldr	r1, [r7, #4]
 8008c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c76:	4613      	mov	r3, r2
 8008c78:	00db      	lsls	r3, r3, #3
 8008c7a:	1a9b      	subs	r3, r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	440b      	add	r3, r1
 8008c80:	3350      	adds	r3, #80	; 0x50
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d108      	bne.n	8008c9a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6818      	ldr	r0, [r3, #0]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008c92:	461a      	mov	r2, r3
 8008c94:	2101      	movs	r1, #1
 8008c96:	f005 f937 	bl	800df08 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f00a fdcc 	bl	801383e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	f003 0308 	and.w	r3, r3, #8
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d008      	beq.n	8008cc2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb2:	015a      	lsls	r2, r3, #5
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	2308      	movs	r3, #8
 8008cc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	f003 0310 	and.w	r3, r3, #16
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d008      	beq.n	8008cde <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cce:	015a      	lsls	r2, r3, #5
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd8:	461a      	mov	r2, r3
 8008cda:	2310      	movs	r3, #16
 8008cdc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d008      	beq.n	8008cfa <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cea:	015a      	lsls	r2, r3, #5
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	2340      	movs	r3, #64	; 0x40
 8008cf8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	f003 0302 	and.w	r3, r3, #2
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d008      	beq.n	8008d16 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d06:	015a      	lsls	r2, r3, #5
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d10:	461a      	mov	r2, r3
 8008d12:	2302      	movs	r3, #2
 8008d14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d003      	beq.n	8008d28 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008d20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fc1b 	bl	800955e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d30:	085b      	lsrs	r3, r3, #1
 8008d32:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f47f af49 	bne.w	8008bce <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4618      	mov	r0, r3
 8008d42:	f005 f81c 	bl	800dd7e <USB_ReadInterrupts>
 8008d46:	4603      	mov	r3, r0
 8008d48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d50:	d122      	bne.n	8008d98 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	69fa      	ldr	r2, [r7, #28]
 8008d5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d60:	f023 0301 	bic.w	r3, r3, #1
 8008d64:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d108      	bne.n	8008d82 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008d78:	2100      	movs	r1, #0
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fe26 	bl	80099cc <HAL_PCDEx_LPM_Callback>
 8008d80:	e002      	b.n	8008d88 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f00a fdd2 	bl	801392c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	695a      	ldr	r2, [r3, #20]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008d96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f004 ffee 	bl	800dd7e <USB_ReadInterrupts>
 8008da2:	4603      	mov	r3, r0
 8008da4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dac:	d112      	bne.n	8008dd4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d102      	bne.n	8008dc4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f00a fd8e 	bl	80138e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	695a      	ldr	r2, [r3, #20]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008dd2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f004 ffd0 	bl	800dd7e <USB_ReadInterrupts>
 8008dde:	4603      	mov	r3, r0
 8008de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008de8:	f040 80c7 	bne.w	8008f7a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	69fa      	ldr	r2, [r7, #28]
 8008df6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dfa:	f023 0301 	bic.w	r3, r3, #1
 8008dfe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2110      	movs	r1, #16
 8008e06:	4618      	mov	r0, r3
 8008e08:	f004 f89e 	bl	800cf48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e10:	e056      	b.n	8008ec0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e14:	015a      	lsls	r2, r3, #5
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	4413      	add	r3, r2
 8008e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e1e:	461a      	mov	r2, r3
 8008e20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e24:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e28:	015a      	lsls	r2, r3, #5
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e36:	0151      	lsls	r1, r2, #5
 8008e38:	69fa      	ldr	r2, [r7, #28]
 8008e3a:	440a      	add	r2, r1
 8008e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e44:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e48:	015a      	lsls	r2, r3, #5
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e56:	0151      	lsls	r1, r2, #5
 8008e58:	69fa      	ldr	r2, [r7, #28]
 8008e5a:	440a      	add	r2, r1
 8008e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008e64:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e68:	015a      	lsls	r2, r3, #5
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e72:	461a      	mov	r2, r3
 8008e74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e78:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7c:	015a      	lsls	r2, r3, #5
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	4413      	add	r3, r2
 8008e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e8a:	0151      	lsls	r1, r2, #5
 8008e8c:	69fa      	ldr	r2, [r7, #28]
 8008e8e:	440a      	add	r2, r1
 8008e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e98:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9c:	015a      	lsls	r2, r3, #5
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eaa:	0151      	lsls	r1, r2, #5
 8008eac:	69fa      	ldr	r2, [r7, #28]
 8008eae:	440a      	add	r2, r1
 8008eb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008eb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008eb8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d3a3      	bcc.n	8008e12 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ed0:	69db      	ldr	r3, [r3, #28]
 8008ed2:	69fa      	ldr	r2, [r7, #28]
 8008ed4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ed8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008edc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d016      	beq.n	8008f14 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ef0:	69fa      	ldr	r2, [r7, #28]
 8008ef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ef6:	f043 030b 	orr.w	r3, r3, #11
 8008efa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f06:	69fa      	ldr	r2, [r7, #28]
 8008f08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f0c:	f043 030b 	orr.w	r3, r3, #11
 8008f10:	6453      	str	r3, [r2, #68]	; 0x44
 8008f12:	e015      	b.n	8008f40 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f1a:	695b      	ldr	r3, [r3, #20]
 8008f1c:	69fa      	ldr	r2, [r7, #28]
 8008f1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008f26:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008f2a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	69fa      	ldr	r2, [r7, #28]
 8008f36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f3a:	f043 030b 	orr.w	r3, r3, #11
 8008f3e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	69fa      	ldr	r2, [r7, #28]
 8008f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f4e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008f52:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6818      	ldr	r0, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008f64:	461a      	mov	r2, r3
 8008f66:	f004 ffcf 	bl	800df08 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	695a      	ldr	r2, [r3, #20]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008f78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f004 fefd 	bl	800dd7e <USB_ReadInterrupts>
 8008f84:	4603      	mov	r3, r0
 8008f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f8e:	d124      	bne.n	8008fda <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4618      	mov	r0, r3
 8008f96:	f004 ff93 	bl	800dec0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f004 f833 	bl	800d00a <USB_GetDevSpeed>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681c      	ldr	r4, [r3, #0]
 8008fb0:	f001 f92c 	bl	800a20c <HAL_RCC_GetHCLKFreq>
 8008fb4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f003 fd70 	bl	800caa4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f00a fc62 	bl	801388e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	695a      	ldr	r2, [r3, #20]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008fd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f004 fecd 	bl	800dd7e <USB_ReadInterrupts>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	f003 0308 	and.w	r3, r3, #8
 8008fea:	2b08      	cmp	r3, #8
 8008fec:	d10a      	bne.n	8009004 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f00a fc3f 	bl	8013872 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	695a      	ldr	r2, [r3, #20]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f002 0208 	and.w	r2, r2, #8
 8009002:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4618      	mov	r0, r3
 800900a:	f004 feb8 	bl	800dd7e <USB_ReadInterrupts>
 800900e:	4603      	mov	r3, r0
 8009010:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009014:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009018:	d10f      	bne.n	800903a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800901a:	2300      	movs	r3, #0
 800901c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800901e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009020:	b2db      	uxtb	r3, r3
 8009022:	4619      	mov	r1, r3
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f00a fca1 	bl	801396c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	695a      	ldr	r2, [r3, #20]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009038:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4618      	mov	r0, r3
 8009040:	f004 fe9d 	bl	800dd7e <USB_ReadInterrupts>
 8009044:	4603      	mov	r3, r0
 8009046:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800904a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800904e:	d10f      	bne.n	8009070 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009050:	2300      	movs	r3, #0
 8009052:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009056:	b2db      	uxtb	r3, r3
 8009058:	4619      	mov	r1, r3
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f00a fc74 	bl	8013948 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	695a      	ldr	r2, [r3, #20]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800906e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4618      	mov	r0, r3
 8009076:	f004 fe82 	bl	800dd7e <USB_ReadInterrupts>
 800907a:	4603      	mov	r3, r0
 800907c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009084:	d10a      	bne.n	800909c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f00a fc82 	bl	8013990 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	695a      	ldr	r2, [r3, #20]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800909a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4618      	mov	r0, r3
 80090a2:	f004 fe6c 	bl	800dd7e <USB_ReadInterrupts>
 80090a6:	4603      	mov	r3, r0
 80090a8:	f003 0304 	and.w	r3, r3, #4
 80090ac:	2b04      	cmp	r3, #4
 80090ae:	d115      	bne.n	80090dc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	f003 0304 	and.w	r3, r3, #4
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d002      	beq.n	80090c8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f00a fc72 	bl	80139ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	6859      	ldr	r1, [r3, #4]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	69ba      	ldr	r2, [r7, #24]
 80090d4:	430a      	orrs	r2, r1
 80090d6:	605a      	str	r2, [r3, #4]
 80090d8:	e000      	b.n	80090dc <HAL_PCD_IRQHandler+0x75e>
      return;
 80090da:	bf00      	nop
    }
  }
}
 80090dc:	3734      	adds	r7, #52	; 0x34
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd90      	pop	{r4, r7, pc}

080090e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b082      	sub	sp, #8
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	460b      	mov	r3, r1
 80090ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d101      	bne.n	80090fc <HAL_PCD_SetAddress+0x1a>
 80090f8:	2302      	movs	r3, #2
 80090fa:	e013      	b.n	8009124 <HAL_PCD_SetAddress+0x42>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	78fa      	ldrb	r2, [r7, #3]
 8009108:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	78fa      	ldrb	r2, [r7, #3]
 8009112:	4611      	mov	r1, r2
 8009114:	4618      	mov	r0, r3
 8009116:	f004 fdca 	bl	800dcae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3708      	adds	r7, #8
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	4608      	mov	r0, r1
 8009136:	4611      	mov	r1, r2
 8009138:	461a      	mov	r2, r3
 800913a:	4603      	mov	r3, r0
 800913c:	70fb      	strb	r3, [r7, #3]
 800913e:	460b      	mov	r3, r1
 8009140:	803b      	strh	r3, [r7, #0]
 8009142:	4613      	mov	r3, r2
 8009144:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800914a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800914e:	2b00      	cmp	r3, #0
 8009150:	da0f      	bge.n	8009172 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009152:	78fb      	ldrb	r3, [r7, #3]
 8009154:	f003 020f 	and.w	r2, r3, #15
 8009158:	4613      	mov	r3, r2
 800915a:	00db      	lsls	r3, r3, #3
 800915c:	1a9b      	subs	r3, r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	3338      	adds	r3, #56	; 0x38
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	4413      	add	r3, r2
 8009166:	3304      	adds	r3, #4
 8009168:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2201      	movs	r2, #1
 800916e:	705a      	strb	r2, [r3, #1]
 8009170:	e00f      	b.n	8009192 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009172:	78fb      	ldrb	r3, [r7, #3]
 8009174:	f003 020f 	and.w	r2, r3, #15
 8009178:	4613      	mov	r3, r2
 800917a:	00db      	lsls	r3, r3, #3
 800917c:	1a9b      	subs	r3, r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	4413      	add	r3, r2
 8009188:	3304      	adds	r3, #4
 800918a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009192:	78fb      	ldrb	r3, [r7, #3]
 8009194:	f003 030f 	and.w	r3, r3, #15
 8009198:	b2da      	uxtb	r2, r3
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800919e:	883a      	ldrh	r2, [r7, #0]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	78ba      	ldrb	r2, [r7, #2]
 80091a8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	785b      	ldrb	r3, [r3, #1]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d004      	beq.n	80091bc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80091bc:	78bb      	ldrb	r3, [r7, #2]
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d102      	bne.n	80091c8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2200      	movs	r2, #0
 80091c6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d101      	bne.n	80091d6 <HAL_PCD_EP_Open+0xaa>
 80091d2:	2302      	movs	r3, #2
 80091d4:	e00e      	b.n	80091f4 <HAL_PCD_EP_Open+0xc8>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68f9      	ldr	r1, [r7, #12]
 80091e4:	4618      	mov	r0, r3
 80091e6:	f003 ff35 	bl	800d054 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80091f2:	7afb      	ldrb	r3, [r7, #11]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3710      	adds	r7, #16
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	460b      	mov	r3, r1
 8009206:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009208:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800920c:	2b00      	cmp	r3, #0
 800920e:	da0f      	bge.n	8009230 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009210:	78fb      	ldrb	r3, [r7, #3]
 8009212:	f003 020f 	and.w	r2, r3, #15
 8009216:	4613      	mov	r3, r2
 8009218:	00db      	lsls	r3, r3, #3
 800921a:	1a9b      	subs	r3, r3, r2
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	3338      	adds	r3, #56	; 0x38
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	4413      	add	r3, r2
 8009224:	3304      	adds	r3, #4
 8009226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2201      	movs	r2, #1
 800922c:	705a      	strb	r2, [r3, #1]
 800922e:	e00f      	b.n	8009250 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009230:	78fb      	ldrb	r3, [r7, #3]
 8009232:	f003 020f 	and.w	r2, r3, #15
 8009236:	4613      	mov	r3, r2
 8009238:	00db      	lsls	r3, r3, #3
 800923a:	1a9b      	subs	r3, r3, r2
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	4413      	add	r3, r2
 8009246:	3304      	adds	r3, #4
 8009248:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009250:	78fb      	ldrb	r3, [r7, #3]
 8009252:	f003 030f 	and.w	r3, r3, #15
 8009256:	b2da      	uxtb	r2, r3
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009262:	2b01      	cmp	r3, #1
 8009264:	d101      	bne.n	800926a <HAL_PCD_EP_Close+0x6e>
 8009266:	2302      	movs	r3, #2
 8009268:	e00e      	b.n	8009288 <HAL_PCD_EP_Close+0x8c>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2201      	movs	r2, #1
 800926e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68f9      	ldr	r1, [r7, #12]
 8009278:	4618      	mov	r0, r3
 800927a:	f003 ff73 	bl	800d164 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b086      	sub	sp, #24
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	607a      	str	r2, [r7, #4]
 800929a:	603b      	str	r3, [r7, #0]
 800929c:	460b      	mov	r3, r1
 800929e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092a0:	7afb      	ldrb	r3, [r7, #11]
 80092a2:	f003 020f 	and.w	r2, r3, #15
 80092a6:	4613      	mov	r3, r2
 80092a8:	00db      	lsls	r3, r3, #3
 80092aa:	1a9b      	subs	r3, r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	4413      	add	r3, r2
 80092b6:	3304      	adds	r3, #4
 80092b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	683a      	ldr	r2, [r7, #0]
 80092c4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	2200      	movs	r2, #0
 80092ca:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	2200      	movs	r2, #0
 80092d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092d2:	7afb      	ldrb	r3, [r7, #11]
 80092d4:	f003 030f 	and.w	r3, r3, #15
 80092d8:	b2da      	uxtb	r2, r3
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d102      	bne.n	80092ec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80092ec:	7afb      	ldrb	r3, [r7, #11]
 80092ee:	f003 030f 	and.w	r3, r3, #15
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d109      	bne.n	800930a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6818      	ldr	r0, [r3, #0]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	461a      	mov	r2, r3
 8009302:	6979      	ldr	r1, [r7, #20]
 8009304:	f004 fa4e 	bl	800d7a4 <USB_EP0StartXfer>
 8009308:	e008      	b.n	800931c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6818      	ldr	r0, [r3, #0]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	b2db      	uxtb	r3, r3
 8009314:	461a      	mov	r2, r3
 8009316:	6979      	ldr	r1, [r7, #20]
 8009318:	f004 f800 	bl	800d31c <USB_EPStartXfer>
  }

  return HAL_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3718      	adds	r7, #24
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009326:	b480      	push	{r7}
 8009328:	b083      	sub	sp, #12
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
 800932e:	460b      	mov	r3, r1
 8009330:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009332:	78fb      	ldrb	r3, [r7, #3]
 8009334:	f003 020f 	and.w	r2, r3, #15
 8009338:	6879      	ldr	r1, [r7, #4]
 800933a:	4613      	mov	r3, r2
 800933c:	00db      	lsls	r3, r3, #3
 800933e:	1a9b      	subs	r3, r3, r2
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	440b      	add	r3, r1
 8009344:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009348:	681b      	ldr	r3, [r3, #0]
}
 800934a:	4618      	mov	r0, r3
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr

08009356 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b086      	sub	sp, #24
 800935a:	af00      	add	r7, sp, #0
 800935c:	60f8      	str	r0, [r7, #12]
 800935e:	607a      	str	r2, [r7, #4]
 8009360:	603b      	str	r3, [r7, #0]
 8009362:	460b      	mov	r3, r1
 8009364:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009366:	7afb      	ldrb	r3, [r7, #11]
 8009368:	f003 020f 	and.w	r2, r3, #15
 800936c:	4613      	mov	r3, r2
 800936e:	00db      	lsls	r3, r3, #3
 8009370:	1a9b      	subs	r3, r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	3338      	adds	r3, #56	; 0x38
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	4413      	add	r3, r2
 800937a:	3304      	adds	r3, #4
 800937c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	683a      	ldr	r2, [r7, #0]
 8009388:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	2200      	movs	r2, #0
 800938e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	2201      	movs	r2, #1
 8009394:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009396:	7afb      	ldrb	r3, [r7, #11]
 8009398:	f003 030f 	and.w	r3, r3, #15
 800939c:	b2da      	uxtb	r2, r3
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d102      	bne.n	80093b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80093b0:	7afb      	ldrb	r3, [r7, #11]
 80093b2:	f003 030f 	and.w	r3, r3, #15
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d109      	bne.n	80093ce <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6818      	ldr	r0, [r3, #0]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	461a      	mov	r2, r3
 80093c6:	6979      	ldr	r1, [r7, #20]
 80093c8:	f004 f9ec 	bl	800d7a4 <USB_EP0StartXfer>
 80093cc:	e008      	b.n	80093e0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6818      	ldr	r0, [r3, #0]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	461a      	mov	r2, r3
 80093da:	6979      	ldr	r1, [r7, #20]
 80093dc:	f003 ff9e 	bl	800d31c <USB_EPStartXfer>
  }

  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3718      	adds	r7, #24
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b084      	sub	sp, #16
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
 80093f2:	460b      	mov	r3, r1
 80093f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80093f6:	78fb      	ldrb	r3, [r7, #3]
 80093f8:	f003 020f 	and.w	r2, r3, #15
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	429a      	cmp	r2, r3
 8009402:	d901      	bls.n	8009408 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e050      	b.n	80094aa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800940c:	2b00      	cmp	r3, #0
 800940e:	da0f      	bge.n	8009430 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009410:	78fb      	ldrb	r3, [r7, #3]
 8009412:	f003 020f 	and.w	r2, r3, #15
 8009416:	4613      	mov	r3, r2
 8009418:	00db      	lsls	r3, r3, #3
 800941a:	1a9b      	subs	r3, r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	3338      	adds	r3, #56	; 0x38
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	4413      	add	r3, r2
 8009424:	3304      	adds	r3, #4
 8009426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2201      	movs	r2, #1
 800942c:	705a      	strb	r2, [r3, #1]
 800942e:	e00d      	b.n	800944c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009430:	78fa      	ldrb	r2, [r7, #3]
 8009432:	4613      	mov	r3, r2
 8009434:	00db      	lsls	r3, r3, #3
 8009436:	1a9b      	subs	r3, r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	4413      	add	r3, r2
 8009442:	3304      	adds	r3, #4
 8009444:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2200      	movs	r2, #0
 800944a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2201      	movs	r2, #1
 8009450:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009452:	78fb      	ldrb	r3, [r7, #3]
 8009454:	f003 030f 	and.w	r3, r3, #15
 8009458:	b2da      	uxtb	r2, r3
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009464:	2b01      	cmp	r3, #1
 8009466:	d101      	bne.n	800946c <HAL_PCD_EP_SetStall+0x82>
 8009468:	2302      	movs	r3, #2
 800946a:	e01e      	b.n	80094aa <HAL_PCD_EP_SetStall+0xc0>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68f9      	ldr	r1, [r7, #12]
 800947a:	4618      	mov	r0, r3
 800947c:	f004 fb43 	bl	800db06 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009480:	78fb      	ldrb	r3, [r7, #3]
 8009482:	f003 030f 	and.w	r3, r3, #15
 8009486:	2b00      	cmp	r3, #0
 8009488:	d10a      	bne.n	80094a0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6818      	ldr	r0, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	b2d9      	uxtb	r1, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800949a:	461a      	mov	r2, r3
 800949c:	f004 fd34 	bl	800df08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b084      	sub	sp, #16
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
 80094ba:	460b      	mov	r3, r1
 80094bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80094be:	78fb      	ldrb	r3, [r7, #3]
 80094c0:	f003 020f 	and.w	r2, r3, #15
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d901      	bls.n	80094d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	e042      	b.n	8009556 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80094d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	da0f      	bge.n	80094f8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094d8:	78fb      	ldrb	r3, [r7, #3]
 80094da:	f003 020f 	and.w	r2, r3, #15
 80094de:	4613      	mov	r3, r2
 80094e0:	00db      	lsls	r3, r3, #3
 80094e2:	1a9b      	subs	r3, r3, r2
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	3338      	adds	r3, #56	; 0x38
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	4413      	add	r3, r2
 80094ec:	3304      	adds	r3, #4
 80094ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2201      	movs	r2, #1
 80094f4:	705a      	strb	r2, [r3, #1]
 80094f6:	e00f      	b.n	8009518 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80094f8:	78fb      	ldrb	r3, [r7, #3]
 80094fa:	f003 020f 	and.w	r2, r3, #15
 80094fe:	4613      	mov	r3, r2
 8009500:	00db      	lsls	r3, r3, #3
 8009502:	1a9b      	subs	r3, r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	4413      	add	r3, r2
 800950e:	3304      	adds	r3, #4
 8009510:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2200      	movs	r2, #0
 800951c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800951e:	78fb      	ldrb	r3, [r7, #3]
 8009520:	f003 030f 	and.w	r3, r3, #15
 8009524:	b2da      	uxtb	r2, r3
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009530:	2b01      	cmp	r3, #1
 8009532:	d101      	bne.n	8009538 <HAL_PCD_EP_ClrStall+0x86>
 8009534:	2302      	movs	r3, #2
 8009536:	e00e      	b.n	8009556 <HAL_PCD_EP_ClrStall+0xa4>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68f9      	ldr	r1, [r7, #12]
 8009546:	4618      	mov	r0, r3
 8009548:	f004 fb4b 	bl	800dbe2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b08a      	sub	sp, #40	; 0x28
 8009562:	af02      	add	r7, sp, #8
 8009564:	6078      	str	r0, [r7, #4]
 8009566:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	4613      	mov	r3, r2
 8009576:	00db      	lsls	r3, r3, #3
 8009578:	1a9b      	subs	r3, r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	3338      	adds	r3, #56	; 0x38
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	4413      	add	r3, r2
 8009582:	3304      	adds	r3, #4
 8009584:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	699a      	ldr	r2, [r3, #24]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	429a      	cmp	r2, r3
 8009590:	d901      	bls.n	8009596 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e06c      	b.n	8009670 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	695a      	ldr	r2, [r3, #20]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	699b      	ldr	r3, [r3, #24]
 800959e:	1ad3      	subs	r3, r2, r3
 80095a0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	69fa      	ldr	r2, [r7, #28]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d902      	bls.n	80095b2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	3303      	adds	r3, #3
 80095b6:	089b      	lsrs	r3, r3, #2
 80095b8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80095ba:	e02b      	b.n	8009614 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	695a      	ldr	r2, [r3, #20]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	699b      	ldr	r3, [r3, #24]
 80095c4:	1ad3      	subs	r3, r2, r3
 80095c6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	69fa      	ldr	r2, [r7, #28]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d902      	bls.n	80095d8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	3303      	adds	r3, #3
 80095dc:	089b      	lsrs	r3, r3, #2
 80095de:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	68d9      	ldr	r1, [r3, #12]
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	b2da      	uxtb	r2, r3
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	4603      	mov	r3, r0
 80095f6:	6978      	ldr	r0, [r7, #20]
 80095f8:	f004 fa27 	bl	800da4a <USB_WritePacket>

    ep->xfer_buff  += len;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	68da      	ldr	r2, [r3, #12]
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	441a      	add	r2, r3
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	699a      	ldr	r2, [r3, #24]
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	441a      	add	r2, r3
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	015a      	lsls	r2, r3, #5
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	4413      	add	r3, r2
 800961c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009620:	699b      	ldr	r3, [r3, #24]
 8009622:	b29b      	uxth	r3, r3
 8009624:	69ba      	ldr	r2, [r7, #24]
 8009626:	429a      	cmp	r2, r3
 8009628:	d809      	bhi.n	800963e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	699a      	ldr	r2, [r3, #24]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009632:	429a      	cmp	r2, r3
 8009634:	d203      	bcs.n	800963e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	695b      	ldr	r3, [r3, #20]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1be      	bne.n	80095bc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	695a      	ldr	r2, [r3, #20]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	699b      	ldr	r3, [r3, #24]
 8009646:	429a      	cmp	r2, r3
 8009648:	d811      	bhi.n	800966e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	f003 030f 	and.w	r3, r3, #15
 8009650:	2201      	movs	r2, #1
 8009652:	fa02 f303 	lsl.w	r3, r2, r3
 8009656:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800965e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	43db      	mvns	r3, r3
 8009664:	6939      	ldr	r1, [r7, #16]
 8009666:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800966a:	4013      	ands	r3, r2
 800966c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3720      	adds	r7, #32
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	333c      	adds	r3, #60	; 0x3c
 8009690:	3304      	adds	r3, #4
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	015a      	lsls	r2, r3, #5
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	4413      	add	r3, r2
 800969e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	f040 80a0 	bne.w	80097f0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	f003 0308 	and.w	r3, r3, #8
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d015      	beq.n	80096e6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	4a72      	ldr	r2, [pc, #456]	; (8009888 <PCD_EP_OutXfrComplete_int+0x210>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	f240 80dd 	bls.w	800987e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	f000 80d7 	beq.w	800987e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	015a      	lsls	r2, r3, #5
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	4413      	add	r3, r2
 80096d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096dc:	461a      	mov	r2, r3
 80096de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096e2:	6093      	str	r3, [r2, #8]
 80096e4:	e0cb      	b.n	800987e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	f003 0320 	and.w	r3, r3, #32
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d009      	beq.n	8009704 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	015a      	lsls	r2, r3, #5
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	4413      	add	r3, r2
 80096f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096fc:	461a      	mov	r2, r3
 80096fe:	2320      	movs	r3, #32
 8009700:	6093      	str	r3, [r2, #8]
 8009702:	e0bc      	b.n	800987e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800970a:	2b00      	cmp	r3, #0
 800970c:	f040 80b7 	bne.w	800987e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	4a5d      	ldr	r2, [pc, #372]	; (8009888 <PCD_EP_OutXfrComplete_int+0x210>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d90f      	bls.n	8009738 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00a      	beq.n	8009738 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	015a      	lsls	r2, r3, #5
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	4413      	add	r3, r2
 800972a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800972e:	461a      	mov	r2, r3
 8009730:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009734:	6093      	str	r3, [r2, #8]
 8009736:	e0a2      	b.n	800987e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8009738:	6879      	ldr	r1, [r7, #4]
 800973a:	683a      	ldr	r2, [r7, #0]
 800973c:	4613      	mov	r3, r2
 800973e:	00db      	lsls	r3, r3, #3
 8009740:	1a9b      	subs	r3, r3, r2
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	440b      	add	r3, r1
 8009746:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800974a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	0159      	lsls	r1, r3, #5
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	440b      	add	r3, r1
 8009754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800975e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	683a      	ldr	r2, [r7, #0]
 8009764:	4613      	mov	r3, r2
 8009766:	00db      	lsls	r3, r3, #3
 8009768:	1a9b      	subs	r3, r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	4403      	add	r3, r0
 800976e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009772:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009774:	6879      	ldr	r1, [r7, #4]
 8009776:	683a      	ldr	r2, [r7, #0]
 8009778:	4613      	mov	r3, r2
 800977a:	00db      	lsls	r3, r3, #3
 800977c:	1a9b      	subs	r3, r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	440b      	add	r3, r1
 8009782:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009786:	6819      	ldr	r1, [r3, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	4613      	mov	r3, r2
 800978e:	00db      	lsls	r3, r3, #3
 8009790:	1a9b      	subs	r3, r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	4403      	add	r3, r0
 8009796:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4419      	add	r1, r3
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	683a      	ldr	r2, [r7, #0]
 80097a2:	4613      	mov	r3, r2
 80097a4:	00db      	lsls	r3, r3, #3
 80097a6:	1a9b      	subs	r3, r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	4403      	add	r3, r0
 80097ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80097b0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d114      	bne.n	80097e2 <PCD_EP_OutXfrComplete_int+0x16a>
 80097b8:	6879      	ldr	r1, [r7, #4]
 80097ba:	683a      	ldr	r2, [r7, #0]
 80097bc:	4613      	mov	r3, r2
 80097be:	00db      	lsls	r3, r3, #3
 80097c0:	1a9b      	subs	r3, r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	440b      	add	r3, r1
 80097c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d108      	bne.n	80097e2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6818      	ldr	r0, [r3, #0]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80097da:	461a      	mov	r2, r3
 80097dc:	2101      	movs	r1, #1
 80097de:	f004 fb93 	bl	800df08 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	4619      	mov	r1, r3
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f00a f80d 	bl	8013808 <HAL_PCD_DataOutStageCallback>
 80097ee:	e046      	b.n	800987e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	4a26      	ldr	r2, [pc, #152]	; (800988c <PCD_EP_OutXfrComplete_int+0x214>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d124      	bne.n	8009842 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00a      	beq.n	8009818 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	015a      	lsls	r2, r3, #5
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	4413      	add	r3, r2
 800980a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800980e:	461a      	mov	r2, r3
 8009810:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009814:	6093      	str	r3, [r2, #8]
 8009816:	e032      	b.n	800987e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	f003 0320 	and.w	r3, r3, #32
 800981e:	2b00      	cmp	r3, #0
 8009820:	d008      	beq.n	8009834 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	015a      	lsls	r2, r3, #5
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	4413      	add	r3, r2
 800982a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800982e:	461a      	mov	r2, r3
 8009830:	2320      	movs	r3, #32
 8009832:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	b2db      	uxtb	r3, r3
 8009838:	4619      	mov	r1, r3
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f009 ffe4 	bl	8013808 <HAL_PCD_DataOutStageCallback>
 8009840:	e01d      	b.n	800987e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d114      	bne.n	8009872 <PCD_EP_OutXfrComplete_int+0x1fa>
 8009848:	6879      	ldr	r1, [r7, #4]
 800984a:	683a      	ldr	r2, [r7, #0]
 800984c:	4613      	mov	r3, r2
 800984e:	00db      	lsls	r3, r3, #3
 8009850:	1a9b      	subs	r3, r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	440b      	add	r3, r1
 8009856:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d108      	bne.n	8009872 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6818      	ldr	r0, [r3, #0]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800986a:	461a      	mov	r2, r3
 800986c:	2100      	movs	r1, #0
 800986e:	f004 fb4b 	bl	800df08 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	b2db      	uxtb	r3, r3
 8009876:	4619      	mov	r1, r3
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f009 ffc5 	bl	8013808 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3718      	adds	r7, #24
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	4f54300a 	.word	0x4f54300a
 800988c:	4f54310a 	.word	0x4f54310a

08009890 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b086      	sub	sp, #24
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	333c      	adds	r3, #60	; 0x3c
 80098a8:	3304      	adds	r3, #4
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	015a      	lsls	r2, r3, #5
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	4413      	add	r3, r2
 80098b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	4a15      	ldr	r2, [pc, #84]	; (8009918 <PCD_EP_OutSetupPacket_int+0x88>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d90e      	bls.n	80098e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d009      	beq.n	80098e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	015a      	lsls	r2, r3, #5
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	4413      	add	r3, r2
 80098d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098dc:	461a      	mov	r2, r3
 80098de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f009 ff7d 	bl	80137e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	4a0a      	ldr	r2, [pc, #40]	; (8009918 <PCD_EP_OutSetupPacket_int+0x88>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d90c      	bls.n	800990c <PCD_EP_OutSetupPacket_int+0x7c>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d108      	bne.n	800990c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6818      	ldr	r0, [r3, #0]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009904:	461a      	mov	r2, r3
 8009906:	2101      	movs	r1, #1
 8009908:	f004 fafe 	bl	800df08 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3718      	adds	r7, #24
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	4f54300a 	.word	0x4f54300a

0800991c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	460b      	mov	r3, r1
 8009926:	70fb      	strb	r3, [r7, #3]
 8009928:	4613      	mov	r3, r2
 800992a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009932:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009934:	78fb      	ldrb	r3, [r7, #3]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d107      	bne.n	800994a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800993a:	883b      	ldrh	r3, [r7, #0]
 800993c:	0419      	lsls	r1, r3, #16
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	68ba      	ldr	r2, [r7, #8]
 8009944:	430a      	orrs	r2, r1
 8009946:	629a      	str	r2, [r3, #40]	; 0x28
 8009948:	e028      	b.n	800999c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009950:	0c1b      	lsrs	r3, r3, #16
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	4413      	add	r3, r2
 8009956:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009958:	2300      	movs	r3, #0
 800995a:	73fb      	strb	r3, [r7, #15]
 800995c:	e00d      	b.n	800997a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	7bfb      	ldrb	r3, [r7, #15]
 8009964:	3340      	adds	r3, #64	; 0x40
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	4413      	add	r3, r2
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	0c1b      	lsrs	r3, r3, #16
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	4413      	add	r3, r2
 8009972:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009974:	7bfb      	ldrb	r3, [r7, #15]
 8009976:	3301      	adds	r3, #1
 8009978:	73fb      	strb	r3, [r7, #15]
 800997a:	7bfa      	ldrb	r2, [r7, #15]
 800997c:	78fb      	ldrb	r3, [r7, #3]
 800997e:	3b01      	subs	r3, #1
 8009980:	429a      	cmp	r2, r3
 8009982:	d3ec      	bcc.n	800995e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009984:	883b      	ldrh	r3, [r7, #0]
 8009986:	0418      	lsls	r0, r3, #16
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6819      	ldr	r1, [r3, #0]
 800998c:	78fb      	ldrb	r3, [r7, #3]
 800998e:	3b01      	subs	r3, #1
 8009990:	68ba      	ldr	r2, [r7, #8]
 8009992:	4302      	orrs	r2, r0
 8009994:	3340      	adds	r3, #64	; 0x40
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	440b      	add	r3, r1
 800999a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3714      	adds	r7, #20
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr

080099aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80099aa:	b480      	push	{r7}
 80099ac:	b083      	sub	sp, #12
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
 80099b2:	460b      	mov	r3, r1
 80099b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	887a      	ldrh	r2, [r7, #2]
 80099bc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	460b      	mov	r3, r1
 80099d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80099d8:	bf00      	nop
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d101      	bne.n	80099f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e264      	b.n	8009ec0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f003 0301 	and.w	r3, r3, #1
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d075      	beq.n	8009aee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009a02:	4ba3      	ldr	r3, [pc, #652]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	f003 030c 	and.w	r3, r3, #12
 8009a0a:	2b04      	cmp	r3, #4
 8009a0c:	d00c      	beq.n	8009a28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a0e:	4ba0      	ldr	r3, [pc, #640]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009a16:	2b08      	cmp	r3, #8
 8009a18:	d112      	bne.n	8009a40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a1a:	4b9d      	ldr	r3, [pc, #628]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a26:	d10b      	bne.n	8009a40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a28:	4b99      	ldr	r3, [pc, #612]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d05b      	beq.n	8009aec <HAL_RCC_OscConfig+0x108>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d157      	bne.n	8009aec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e23f      	b.n	8009ec0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a48:	d106      	bne.n	8009a58 <HAL_RCC_OscConfig+0x74>
 8009a4a:	4b91      	ldr	r3, [pc, #580]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a90      	ldr	r2, [pc, #576]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a54:	6013      	str	r3, [r2, #0]
 8009a56:	e01d      	b.n	8009a94 <HAL_RCC_OscConfig+0xb0>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a60:	d10c      	bne.n	8009a7c <HAL_RCC_OscConfig+0x98>
 8009a62:	4b8b      	ldr	r3, [pc, #556]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a8a      	ldr	r2, [pc, #552]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a6c:	6013      	str	r3, [r2, #0]
 8009a6e:	4b88      	ldr	r3, [pc, #544]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a87      	ldr	r2, [pc, #540]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a78:	6013      	str	r3, [r2, #0]
 8009a7a:	e00b      	b.n	8009a94 <HAL_RCC_OscConfig+0xb0>
 8009a7c:	4b84      	ldr	r3, [pc, #528]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a83      	ldr	r2, [pc, #524]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a86:	6013      	str	r3, [r2, #0]
 8009a88:	4b81      	ldr	r3, [pc, #516]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a80      	ldr	r2, [pc, #512]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d013      	beq.n	8009ac4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a9c:	f7fd f8cc 	bl	8006c38 <HAL_GetTick>
 8009aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009aa2:	e008      	b.n	8009ab6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009aa4:	f7fd f8c8 	bl	8006c38 <HAL_GetTick>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	1ad3      	subs	r3, r2, r3
 8009aae:	2b64      	cmp	r3, #100	; 0x64
 8009ab0:	d901      	bls.n	8009ab6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	e204      	b.n	8009ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ab6:	4b76      	ldr	r3, [pc, #472]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d0f0      	beq.n	8009aa4 <HAL_RCC_OscConfig+0xc0>
 8009ac2:	e014      	b.n	8009aee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ac4:	f7fd f8b8 	bl	8006c38 <HAL_GetTick>
 8009ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009aca:	e008      	b.n	8009ade <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009acc:	f7fd f8b4 	bl	8006c38 <HAL_GetTick>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	2b64      	cmp	r3, #100	; 0x64
 8009ad8:	d901      	bls.n	8009ade <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009ada:	2303      	movs	r3, #3
 8009adc:	e1f0      	b.n	8009ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ade:	4b6c      	ldr	r3, [pc, #432]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1f0      	bne.n	8009acc <HAL_RCC_OscConfig+0xe8>
 8009aea:	e000      	b.n	8009aee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f003 0302 	and.w	r3, r3, #2
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d063      	beq.n	8009bc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009afa:	4b65      	ldr	r3, [pc, #404]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	f003 030c 	and.w	r3, r3, #12
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00b      	beq.n	8009b1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b06:	4b62      	ldr	r3, [pc, #392]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009b0e:	2b08      	cmp	r3, #8
 8009b10:	d11c      	bne.n	8009b4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b12:	4b5f      	ldr	r3, [pc, #380]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d116      	bne.n	8009b4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b1e:	4b5c      	ldr	r3, [pc, #368]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f003 0302 	and.w	r3, r3, #2
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d005      	beq.n	8009b36 <HAL_RCC_OscConfig+0x152>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d001      	beq.n	8009b36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	e1c4      	b.n	8009ec0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b36:	4b56      	ldr	r3, [pc, #344]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	00db      	lsls	r3, r3, #3
 8009b44:	4952      	ldr	r1, [pc, #328]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009b46:	4313      	orrs	r3, r2
 8009b48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b4a:	e03a      	b.n	8009bc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d020      	beq.n	8009b96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009b54:	4b4f      	ldr	r3, [pc, #316]	; (8009c94 <HAL_RCC_OscConfig+0x2b0>)
 8009b56:	2201      	movs	r2, #1
 8009b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b5a:	f7fd f86d 	bl	8006c38 <HAL_GetTick>
 8009b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b60:	e008      	b.n	8009b74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009b62:	f7fd f869 	bl	8006c38 <HAL_GetTick>
 8009b66:	4602      	mov	r2, r0
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	1ad3      	subs	r3, r2, r3
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d901      	bls.n	8009b74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e1a5      	b.n	8009ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b74:	4b46      	ldr	r3, [pc, #280]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 0302 	and.w	r3, r3, #2
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d0f0      	beq.n	8009b62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b80:	4b43      	ldr	r3, [pc, #268]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	691b      	ldr	r3, [r3, #16]
 8009b8c:	00db      	lsls	r3, r3, #3
 8009b8e:	4940      	ldr	r1, [pc, #256]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009b90:	4313      	orrs	r3, r2
 8009b92:	600b      	str	r3, [r1, #0]
 8009b94:	e015      	b.n	8009bc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b96:	4b3f      	ldr	r3, [pc, #252]	; (8009c94 <HAL_RCC_OscConfig+0x2b0>)
 8009b98:	2200      	movs	r2, #0
 8009b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b9c:	f7fd f84c 	bl	8006c38 <HAL_GetTick>
 8009ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ba2:	e008      	b.n	8009bb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ba4:	f7fd f848 	bl	8006c38 <HAL_GetTick>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	1ad3      	subs	r3, r2, r3
 8009bae:	2b02      	cmp	r3, #2
 8009bb0:	d901      	bls.n	8009bb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	e184      	b.n	8009ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009bb6:	4b36      	ldr	r3, [pc, #216]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f003 0302 	and.w	r3, r3, #2
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1f0      	bne.n	8009ba4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f003 0308 	and.w	r3, r3, #8
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d030      	beq.n	8009c30 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	695b      	ldr	r3, [r3, #20]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d016      	beq.n	8009c04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009bd6:	4b30      	ldr	r3, [pc, #192]	; (8009c98 <HAL_RCC_OscConfig+0x2b4>)
 8009bd8:	2201      	movs	r2, #1
 8009bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bdc:	f7fd f82c 	bl	8006c38 <HAL_GetTick>
 8009be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009be2:	e008      	b.n	8009bf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009be4:	f7fd f828 	bl	8006c38 <HAL_GetTick>
 8009be8:	4602      	mov	r2, r0
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	d901      	bls.n	8009bf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009bf2:	2303      	movs	r3, #3
 8009bf4:	e164      	b.n	8009ec0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009bf6:	4b26      	ldr	r3, [pc, #152]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bfa:	f003 0302 	and.w	r3, r3, #2
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d0f0      	beq.n	8009be4 <HAL_RCC_OscConfig+0x200>
 8009c02:	e015      	b.n	8009c30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c04:	4b24      	ldr	r3, [pc, #144]	; (8009c98 <HAL_RCC_OscConfig+0x2b4>)
 8009c06:	2200      	movs	r2, #0
 8009c08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c0a:	f7fd f815 	bl	8006c38 <HAL_GetTick>
 8009c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c10:	e008      	b.n	8009c24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c12:	f7fd f811 	bl	8006c38 <HAL_GetTick>
 8009c16:	4602      	mov	r2, r0
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d901      	bls.n	8009c24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009c20:	2303      	movs	r3, #3
 8009c22:	e14d      	b.n	8009ec0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c24:	4b1a      	ldr	r3, [pc, #104]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c28:	f003 0302 	and.w	r3, r3, #2
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d1f0      	bne.n	8009c12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f003 0304 	and.w	r3, r3, #4
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	f000 80a0 	beq.w	8009d7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009c42:	4b13      	ldr	r3, [pc, #76]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10f      	bne.n	8009c6e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c4e:	2300      	movs	r3, #0
 8009c50:	60bb      	str	r3, [r7, #8]
 8009c52:	4b0f      	ldr	r3, [pc, #60]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c56:	4a0e      	ldr	r2, [pc, #56]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8009c5e:	4b0c      	ldr	r3, [pc, #48]	; (8009c90 <HAL_RCC_OscConfig+0x2ac>)
 8009c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c66:	60bb      	str	r3, [r7, #8]
 8009c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c6e:	4b0b      	ldr	r3, [pc, #44]	; (8009c9c <HAL_RCC_OscConfig+0x2b8>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d121      	bne.n	8009cbe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009c7a:	4b08      	ldr	r3, [pc, #32]	; (8009c9c <HAL_RCC_OscConfig+0x2b8>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a07      	ldr	r2, [pc, #28]	; (8009c9c <HAL_RCC_OscConfig+0x2b8>)
 8009c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009c86:	f7fc ffd7 	bl	8006c38 <HAL_GetTick>
 8009c8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c8c:	e011      	b.n	8009cb2 <HAL_RCC_OscConfig+0x2ce>
 8009c8e:	bf00      	nop
 8009c90:	40023800 	.word	0x40023800
 8009c94:	42470000 	.word	0x42470000
 8009c98:	42470e80 	.word	0x42470e80
 8009c9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ca0:	f7fc ffca 	bl	8006c38 <HAL_GetTick>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d901      	bls.n	8009cb2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	e106      	b.n	8009ec0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009cb2:	4b85      	ldr	r3, [pc, #532]	; (8009ec8 <HAL_RCC_OscConfig+0x4e4>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d0f0      	beq.n	8009ca0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d106      	bne.n	8009cd4 <HAL_RCC_OscConfig+0x2f0>
 8009cc6:	4b81      	ldr	r3, [pc, #516]	; (8009ecc <HAL_RCC_OscConfig+0x4e8>)
 8009cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cca:	4a80      	ldr	r2, [pc, #512]	; (8009ecc <HAL_RCC_OscConfig+0x4e8>)
 8009ccc:	f043 0301 	orr.w	r3, r3, #1
 8009cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8009cd2:	e01c      	b.n	8009d0e <HAL_RCC_OscConfig+0x32a>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	2b05      	cmp	r3, #5
 8009cda:	d10c      	bne.n	8009cf6 <HAL_RCC_OscConfig+0x312>
 8009cdc:	4b7b      	ldr	r3, [pc, #492]	; (8009ecc <HAL_RCC_OscConfig+0x4e8>)
 8009cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ce0:	4a7a      	ldr	r2, [pc, #488]	; (8009ecc <HAL_RCC_OscConfig+0x4e8>)
 8009ce2:	f043 0304 	orr.w	r3, r3, #4
 8009ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8009ce8:	4b78      	ldr	r3, [pc, #480]	; (8009ecc <HAL_RCC_OscConfig+0x4e8>)
 8009cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cec:	4a77      	ldr	r2, [pc, #476]	; (8009ecc <HAL_RCC_OscConfig+0x4e8>)
 8009cee:	f043 0301 	orr.w	r3, r3, #1
 8009cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8009cf4:	e00b      	b.n	8009d0e <HAL_RCC_OscConfig+0x32a>
 8009cf6:	4b75      	ldr	r3, [pc, #468]	; (8009ecc <HAL_RCC_OscConfig+0x4e8>)
 8009cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cfa:	4a74      	ldr	r2, [pc, #464]	; (8009ecc <HAL_RCC_OscConfig+0x4e8>)
 8009cfc:	f023 0301 	bic.w	r3, r3, #1
 8009d00:	6713      	str	r3, [r2, #112]	; 0x70
 8009d02:	4b72      	ldr	r3, [pc, #456]	; (8009ecc <HAL_RCC_OscConfig+0x4e8>)
 8009d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d06:	4a71      	ldr	r2, [pc, #452]	; (8009ecc <HAL_RCC_OscConfig+0x4e8>)
 8009d08:	f023 0304 	bic.w	r3, r3, #4
 8009d0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d015      	beq.n	8009d42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d16:	f7fc ff8f 	bl	8006c38 <HAL_GetTick>
 8009d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d1c:	e00a      	b.n	8009d34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d1e:	f7fc ff8b 	bl	8006c38 <HAL_GetTick>
 8009d22:	4602      	mov	r2, r0
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	1ad3      	subs	r3, r2, r3
 8009d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d901      	bls.n	8009d34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009d30:	2303      	movs	r3, #3
 8009d32:	e0c5      	b.n	8009ec0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d34:	4b65      	ldr	r3, [pc, #404]	; (8009ecc <HAL_RCC_OscConfig+0x4e8>)
 8009d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d38:	f003 0302 	and.w	r3, r3, #2
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d0ee      	beq.n	8009d1e <HAL_RCC_OscConfig+0x33a>
 8009d40:	e014      	b.n	8009d6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009d42:	f7fc ff79 	bl	8006c38 <HAL_GetTick>
 8009d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d48:	e00a      	b.n	8009d60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d4a:	f7fc ff75 	bl	8006c38 <HAL_GetTick>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d901      	bls.n	8009d60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009d5c:	2303      	movs	r3, #3
 8009d5e:	e0af      	b.n	8009ec0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d60:	4b5a      	ldr	r3, [pc, #360]	; (8009ecc <HAL_RCC_OscConfig+0x4e8>)
 8009d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d64:	f003 0302 	and.w	r3, r3, #2
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1ee      	bne.n	8009d4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009d6c:	7dfb      	ldrb	r3, [r7, #23]
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d105      	bne.n	8009d7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d72:	4b56      	ldr	r3, [pc, #344]	; (8009ecc <HAL_RCC_OscConfig+0x4e8>)
 8009d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d76:	4a55      	ldr	r2, [pc, #340]	; (8009ecc <HAL_RCC_OscConfig+0x4e8>)
 8009d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	699b      	ldr	r3, [r3, #24]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f000 809b 	beq.w	8009ebe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009d88:	4b50      	ldr	r3, [pc, #320]	; (8009ecc <HAL_RCC_OscConfig+0x4e8>)
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	f003 030c 	and.w	r3, r3, #12
 8009d90:	2b08      	cmp	r3, #8
 8009d92:	d05c      	beq.n	8009e4e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	699b      	ldr	r3, [r3, #24]
 8009d98:	2b02      	cmp	r3, #2
 8009d9a:	d141      	bne.n	8009e20 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d9c:	4b4c      	ldr	r3, [pc, #304]	; (8009ed0 <HAL_RCC_OscConfig+0x4ec>)
 8009d9e:	2200      	movs	r2, #0
 8009da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009da2:	f7fc ff49 	bl	8006c38 <HAL_GetTick>
 8009da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009da8:	e008      	b.n	8009dbc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009daa:	f7fc ff45 	bl	8006c38 <HAL_GetTick>
 8009dae:	4602      	mov	r2, r0
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	d901      	bls.n	8009dbc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009db8:	2303      	movs	r3, #3
 8009dba:	e081      	b.n	8009ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009dbc:	4b43      	ldr	r3, [pc, #268]	; (8009ecc <HAL_RCC_OscConfig+0x4e8>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d1f0      	bne.n	8009daa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	69da      	ldr	r2, [r3, #28]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a1b      	ldr	r3, [r3, #32]
 8009dd0:	431a      	orrs	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd6:	019b      	lsls	r3, r3, #6
 8009dd8:	431a      	orrs	r2, r3
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dde:	085b      	lsrs	r3, r3, #1
 8009de0:	3b01      	subs	r3, #1
 8009de2:	041b      	lsls	r3, r3, #16
 8009de4:	431a      	orrs	r2, r3
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dea:	061b      	lsls	r3, r3, #24
 8009dec:	4937      	ldr	r1, [pc, #220]	; (8009ecc <HAL_RCC_OscConfig+0x4e8>)
 8009dee:	4313      	orrs	r3, r2
 8009df0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009df2:	4b37      	ldr	r3, [pc, #220]	; (8009ed0 <HAL_RCC_OscConfig+0x4ec>)
 8009df4:	2201      	movs	r2, #1
 8009df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009df8:	f7fc ff1e 	bl	8006c38 <HAL_GetTick>
 8009dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009dfe:	e008      	b.n	8009e12 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e00:	f7fc ff1a 	bl	8006c38 <HAL_GetTick>
 8009e04:	4602      	mov	r2, r0
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d901      	bls.n	8009e12 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009e0e:	2303      	movs	r3, #3
 8009e10:	e056      	b.n	8009ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e12:	4b2e      	ldr	r3, [pc, #184]	; (8009ecc <HAL_RCC_OscConfig+0x4e8>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d0f0      	beq.n	8009e00 <HAL_RCC_OscConfig+0x41c>
 8009e1e:	e04e      	b.n	8009ebe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e20:	4b2b      	ldr	r3, [pc, #172]	; (8009ed0 <HAL_RCC_OscConfig+0x4ec>)
 8009e22:	2200      	movs	r2, #0
 8009e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e26:	f7fc ff07 	bl	8006c38 <HAL_GetTick>
 8009e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e2c:	e008      	b.n	8009e40 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e2e:	f7fc ff03 	bl	8006c38 <HAL_GetTick>
 8009e32:	4602      	mov	r2, r0
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	1ad3      	subs	r3, r2, r3
 8009e38:	2b02      	cmp	r3, #2
 8009e3a:	d901      	bls.n	8009e40 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	e03f      	b.n	8009ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e40:	4b22      	ldr	r3, [pc, #136]	; (8009ecc <HAL_RCC_OscConfig+0x4e8>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d1f0      	bne.n	8009e2e <HAL_RCC_OscConfig+0x44a>
 8009e4c:	e037      	b.n	8009ebe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	699b      	ldr	r3, [r3, #24]
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d101      	bne.n	8009e5a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	e032      	b.n	8009ec0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009e5a:	4b1c      	ldr	r3, [pc, #112]	; (8009ecc <HAL_RCC_OscConfig+0x4e8>)
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	699b      	ldr	r3, [r3, #24]
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d028      	beq.n	8009eba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d121      	bne.n	8009eba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d11a      	bne.n	8009eba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009e8a:	4013      	ands	r3, r2
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009e90:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d111      	bne.n	8009eba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea0:	085b      	lsrs	r3, r3, #1
 8009ea2:	3b01      	subs	r3, #1
 8009ea4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d107      	bne.n	8009eba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d001      	beq.n	8009ebe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e000      	b.n	8009ec0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3718      	adds	r7, #24
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	40007000 	.word	0x40007000
 8009ecc:	40023800 	.word	0x40023800
 8009ed0:	42470060 	.word	0x42470060

08009ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d101      	bne.n	8009ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e0cc      	b.n	800a082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009ee8:	4b68      	ldr	r3, [pc, #416]	; (800a08c <HAL_RCC_ClockConfig+0x1b8>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 030f 	and.w	r3, r3, #15
 8009ef0:	683a      	ldr	r2, [r7, #0]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d90c      	bls.n	8009f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ef6:	4b65      	ldr	r3, [pc, #404]	; (800a08c <HAL_RCC_ClockConfig+0x1b8>)
 8009ef8:	683a      	ldr	r2, [r7, #0]
 8009efa:	b2d2      	uxtb	r2, r2
 8009efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009efe:	4b63      	ldr	r3, [pc, #396]	; (800a08c <HAL_RCC_ClockConfig+0x1b8>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f003 030f 	and.w	r3, r3, #15
 8009f06:	683a      	ldr	r2, [r7, #0]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d001      	beq.n	8009f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e0b8      	b.n	800a082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f003 0302 	and.w	r3, r3, #2
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d020      	beq.n	8009f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f003 0304 	and.w	r3, r3, #4
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d005      	beq.n	8009f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009f28:	4b59      	ldr	r3, [pc, #356]	; (800a090 <HAL_RCC_ClockConfig+0x1bc>)
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	4a58      	ldr	r2, [pc, #352]	; (800a090 <HAL_RCC_ClockConfig+0x1bc>)
 8009f2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009f32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 0308 	and.w	r3, r3, #8
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d005      	beq.n	8009f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009f40:	4b53      	ldr	r3, [pc, #332]	; (800a090 <HAL_RCC_ClockConfig+0x1bc>)
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	4a52      	ldr	r2, [pc, #328]	; (800a090 <HAL_RCC_ClockConfig+0x1bc>)
 8009f46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f4c:	4b50      	ldr	r3, [pc, #320]	; (800a090 <HAL_RCC_ClockConfig+0x1bc>)
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	494d      	ldr	r1, [pc, #308]	; (800a090 <HAL_RCC_ClockConfig+0x1bc>)
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f003 0301 	and.w	r3, r3, #1
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d044      	beq.n	8009ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d107      	bne.n	8009f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f72:	4b47      	ldr	r3, [pc, #284]	; (800a090 <HAL_RCC_ClockConfig+0x1bc>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d119      	bne.n	8009fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e07f      	b.n	800a082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	d003      	beq.n	8009f92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009f8e:	2b03      	cmp	r3, #3
 8009f90:	d107      	bne.n	8009fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f92:	4b3f      	ldr	r3, [pc, #252]	; (800a090 <HAL_RCC_ClockConfig+0x1bc>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d109      	bne.n	8009fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e06f      	b.n	800a082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009fa2:	4b3b      	ldr	r3, [pc, #236]	; (800a090 <HAL_RCC_ClockConfig+0x1bc>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f003 0302 	and.w	r3, r3, #2
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d101      	bne.n	8009fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e067      	b.n	800a082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009fb2:	4b37      	ldr	r3, [pc, #220]	; (800a090 <HAL_RCC_ClockConfig+0x1bc>)
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	f023 0203 	bic.w	r2, r3, #3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	4934      	ldr	r1, [pc, #208]	; (800a090 <HAL_RCC_ClockConfig+0x1bc>)
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009fc4:	f7fc fe38 	bl	8006c38 <HAL_GetTick>
 8009fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009fca:	e00a      	b.n	8009fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009fcc:	f7fc fe34 	bl	8006c38 <HAL_GetTick>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d901      	bls.n	8009fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009fde:	2303      	movs	r3, #3
 8009fe0:	e04f      	b.n	800a082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009fe2:	4b2b      	ldr	r3, [pc, #172]	; (800a090 <HAL_RCC_ClockConfig+0x1bc>)
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	f003 020c 	and.w	r2, r3, #12
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d1eb      	bne.n	8009fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009ff4:	4b25      	ldr	r3, [pc, #148]	; (800a08c <HAL_RCC_ClockConfig+0x1b8>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f003 030f 	and.w	r3, r3, #15
 8009ffc:	683a      	ldr	r2, [r7, #0]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d20c      	bcs.n	800a01c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a002:	4b22      	ldr	r3, [pc, #136]	; (800a08c <HAL_RCC_ClockConfig+0x1b8>)
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	b2d2      	uxtb	r2, r2
 800a008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a00a:	4b20      	ldr	r3, [pc, #128]	; (800a08c <HAL_RCC_ClockConfig+0x1b8>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f003 030f 	and.w	r3, r3, #15
 800a012:	683a      	ldr	r2, [r7, #0]
 800a014:	429a      	cmp	r2, r3
 800a016:	d001      	beq.n	800a01c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	e032      	b.n	800a082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f003 0304 	and.w	r3, r3, #4
 800a024:	2b00      	cmp	r3, #0
 800a026:	d008      	beq.n	800a03a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a028:	4b19      	ldr	r3, [pc, #100]	; (800a090 <HAL_RCC_ClockConfig+0x1bc>)
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	68db      	ldr	r3, [r3, #12]
 800a034:	4916      	ldr	r1, [pc, #88]	; (800a090 <HAL_RCC_ClockConfig+0x1bc>)
 800a036:	4313      	orrs	r3, r2
 800a038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f003 0308 	and.w	r3, r3, #8
 800a042:	2b00      	cmp	r3, #0
 800a044:	d009      	beq.n	800a05a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a046:	4b12      	ldr	r3, [pc, #72]	; (800a090 <HAL_RCC_ClockConfig+0x1bc>)
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	00db      	lsls	r3, r3, #3
 800a054:	490e      	ldr	r1, [pc, #56]	; (800a090 <HAL_RCC_ClockConfig+0x1bc>)
 800a056:	4313      	orrs	r3, r2
 800a058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a05a:	f000 f821 	bl	800a0a0 <HAL_RCC_GetSysClockFreq>
 800a05e:	4602      	mov	r2, r0
 800a060:	4b0b      	ldr	r3, [pc, #44]	; (800a090 <HAL_RCC_ClockConfig+0x1bc>)
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	091b      	lsrs	r3, r3, #4
 800a066:	f003 030f 	and.w	r3, r3, #15
 800a06a:	490a      	ldr	r1, [pc, #40]	; (800a094 <HAL_RCC_ClockConfig+0x1c0>)
 800a06c:	5ccb      	ldrb	r3, [r1, r3]
 800a06e:	fa22 f303 	lsr.w	r3, r2, r3
 800a072:	4a09      	ldr	r2, [pc, #36]	; (800a098 <HAL_RCC_ClockConfig+0x1c4>)
 800a074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a076:	4b09      	ldr	r3, [pc, #36]	; (800a09c <HAL_RCC_ClockConfig+0x1c8>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7fb fec2 	bl	8005e04 <HAL_InitTick>

  return HAL_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	40023c00 	.word	0x40023c00
 800a090:	40023800 	.word	0x40023800
 800a094:	08014a20 	.word	0x08014a20
 800a098:	20000008 	.word	0x20000008
 800a09c:	2000000c 	.word	0x2000000c

0800a0a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a0a0:	b5b0      	push	{r4, r5, r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	6079      	str	r1, [r7, #4]
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	60f9      	str	r1, [r7, #12]
 800a0ae:	2100      	movs	r1, #0
 800a0b0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a0b6:	4952      	ldr	r1, [pc, #328]	; (800a200 <HAL_RCC_GetSysClockFreq+0x160>)
 800a0b8:	6889      	ldr	r1, [r1, #8]
 800a0ba:	f001 010c 	and.w	r1, r1, #12
 800a0be:	2908      	cmp	r1, #8
 800a0c0:	d00d      	beq.n	800a0de <HAL_RCC_GetSysClockFreq+0x3e>
 800a0c2:	2908      	cmp	r1, #8
 800a0c4:	f200 8094 	bhi.w	800a1f0 <HAL_RCC_GetSysClockFreq+0x150>
 800a0c8:	2900      	cmp	r1, #0
 800a0ca:	d002      	beq.n	800a0d2 <HAL_RCC_GetSysClockFreq+0x32>
 800a0cc:	2904      	cmp	r1, #4
 800a0ce:	d003      	beq.n	800a0d8 <HAL_RCC_GetSysClockFreq+0x38>
 800a0d0:	e08e      	b.n	800a1f0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a0d2:	4b4c      	ldr	r3, [pc, #304]	; (800a204 <HAL_RCC_GetSysClockFreq+0x164>)
 800a0d4:	60bb      	str	r3, [r7, #8]
       break;
 800a0d6:	e08e      	b.n	800a1f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a0d8:	4b4b      	ldr	r3, [pc, #300]	; (800a208 <HAL_RCC_GetSysClockFreq+0x168>)
 800a0da:	60bb      	str	r3, [r7, #8]
      break;
 800a0dc:	e08b      	b.n	800a1f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a0de:	4948      	ldr	r1, [pc, #288]	; (800a200 <HAL_RCC_GetSysClockFreq+0x160>)
 800a0e0:	6849      	ldr	r1, [r1, #4]
 800a0e2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800a0e6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a0e8:	4945      	ldr	r1, [pc, #276]	; (800a200 <HAL_RCC_GetSysClockFreq+0x160>)
 800a0ea:	6849      	ldr	r1, [r1, #4]
 800a0ec:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800a0f0:	2900      	cmp	r1, #0
 800a0f2:	d024      	beq.n	800a13e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a0f4:	4942      	ldr	r1, [pc, #264]	; (800a200 <HAL_RCC_GetSysClockFreq+0x160>)
 800a0f6:	6849      	ldr	r1, [r1, #4]
 800a0f8:	0989      	lsrs	r1, r1, #6
 800a0fa:	4608      	mov	r0, r1
 800a0fc:	f04f 0100 	mov.w	r1, #0
 800a100:	f240 14ff 	movw	r4, #511	; 0x1ff
 800a104:	f04f 0500 	mov.w	r5, #0
 800a108:	ea00 0204 	and.w	r2, r0, r4
 800a10c:	ea01 0305 	and.w	r3, r1, r5
 800a110:	493d      	ldr	r1, [pc, #244]	; (800a208 <HAL_RCC_GetSysClockFreq+0x168>)
 800a112:	fb01 f003 	mul.w	r0, r1, r3
 800a116:	2100      	movs	r1, #0
 800a118:	fb01 f102 	mul.w	r1, r1, r2
 800a11c:	1844      	adds	r4, r0, r1
 800a11e:	493a      	ldr	r1, [pc, #232]	; (800a208 <HAL_RCC_GetSysClockFreq+0x168>)
 800a120:	fba2 0101 	umull	r0, r1, r2, r1
 800a124:	1863      	adds	r3, r4, r1
 800a126:	4619      	mov	r1, r3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	461a      	mov	r2, r3
 800a12c:	f04f 0300 	mov.w	r3, #0
 800a130:	f7f6 f8b6 	bl	80002a0 <__aeabi_uldivmod>
 800a134:	4602      	mov	r2, r0
 800a136:	460b      	mov	r3, r1
 800a138:	4613      	mov	r3, r2
 800a13a:	60fb      	str	r3, [r7, #12]
 800a13c:	e04a      	b.n	800a1d4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a13e:	4b30      	ldr	r3, [pc, #192]	; (800a200 <HAL_RCC_GetSysClockFreq+0x160>)
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	099b      	lsrs	r3, r3, #6
 800a144:	461a      	mov	r2, r3
 800a146:	f04f 0300 	mov.w	r3, #0
 800a14a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a14e:	f04f 0100 	mov.w	r1, #0
 800a152:	ea02 0400 	and.w	r4, r2, r0
 800a156:	ea03 0501 	and.w	r5, r3, r1
 800a15a:	4620      	mov	r0, r4
 800a15c:	4629      	mov	r1, r5
 800a15e:	f04f 0200 	mov.w	r2, #0
 800a162:	f04f 0300 	mov.w	r3, #0
 800a166:	014b      	lsls	r3, r1, #5
 800a168:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a16c:	0142      	lsls	r2, r0, #5
 800a16e:	4610      	mov	r0, r2
 800a170:	4619      	mov	r1, r3
 800a172:	1b00      	subs	r0, r0, r4
 800a174:	eb61 0105 	sbc.w	r1, r1, r5
 800a178:	f04f 0200 	mov.w	r2, #0
 800a17c:	f04f 0300 	mov.w	r3, #0
 800a180:	018b      	lsls	r3, r1, #6
 800a182:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a186:	0182      	lsls	r2, r0, #6
 800a188:	1a12      	subs	r2, r2, r0
 800a18a:	eb63 0301 	sbc.w	r3, r3, r1
 800a18e:	f04f 0000 	mov.w	r0, #0
 800a192:	f04f 0100 	mov.w	r1, #0
 800a196:	00d9      	lsls	r1, r3, #3
 800a198:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a19c:	00d0      	lsls	r0, r2, #3
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	1912      	adds	r2, r2, r4
 800a1a4:	eb45 0303 	adc.w	r3, r5, r3
 800a1a8:	f04f 0000 	mov.w	r0, #0
 800a1ac:	f04f 0100 	mov.w	r1, #0
 800a1b0:	0299      	lsls	r1, r3, #10
 800a1b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a1b6:	0290      	lsls	r0, r2, #10
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	4610      	mov	r0, r2
 800a1be:	4619      	mov	r1, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	f04f 0300 	mov.w	r3, #0
 800a1c8:	f7f6 f86a 	bl	80002a0 <__aeabi_uldivmod>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a1d4:	4b0a      	ldr	r3, [pc, #40]	; (800a200 <HAL_RCC_GetSysClockFreq+0x160>)
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	0c1b      	lsrs	r3, r3, #16
 800a1da:	f003 0303 	and.w	r3, r3, #3
 800a1de:	3301      	adds	r3, #1
 800a1e0:	005b      	lsls	r3, r3, #1
 800a1e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ec:	60bb      	str	r3, [r7, #8]
      break;
 800a1ee:	e002      	b.n	800a1f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a1f0:	4b04      	ldr	r3, [pc, #16]	; (800a204 <HAL_RCC_GetSysClockFreq+0x164>)
 800a1f2:	60bb      	str	r3, [r7, #8]
      break;
 800a1f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a1f6:	68bb      	ldr	r3, [r7, #8]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bdb0      	pop	{r4, r5, r7, pc}
 800a200:	40023800 	.word	0x40023800
 800a204:	00f42400 	.word	0x00f42400
 800a208:	00b71b00 	.word	0x00b71b00

0800a20c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a20c:	b480      	push	{r7}
 800a20e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a210:	4b03      	ldr	r3, [pc, #12]	; (800a220 <HAL_RCC_GetHCLKFreq+0x14>)
 800a212:	681b      	ldr	r3, [r3, #0]
}
 800a214:	4618      	mov	r0, r3
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	20000008 	.word	0x20000008

0800a224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a228:	f7ff fff0 	bl	800a20c <HAL_RCC_GetHCLKFreq>
 800a22c:	4602      	mov	r2, r0
 800a22e:	4b05      	ldr	r3, [pc, #20]	; (800a244 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	0a9b      	lsrs	r3, r3, #10
 800a234:	f003 0307 	and.w	r3, r3, #7
 800a238:	4903      	ldr	r1, [pc, #12]	; (800a248 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a23a:	5ccb      	ldrb	r3, [r1, r3]
 800a23c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a240:	4618      	mov	r0, r3
 800a242:	bd80      	pop	{r7, pc}
 800a244:	40023800 	.word	0x40023800
 800a248:	08014a30 	.word	0x08014a30

0800a24c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a250:	f7ff ffdc 	bl	800a20c <HAL_RCC_GetHCLKFreq>
 800a254:	4602      	mov	r2, r0
 800a256:	4b05      	ldr	r3, [pc, #20]	; (800a26c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	0b5b      	lsrs	r3, r3, #13
 800a25c:	f003 0307 	and.w	r3, r3, #7
 800a260:	4903      	ldr	r1, [pc, #12]	; (800a270 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a262:	5ccb      	ldrb	r3, [r1, r3]
 800a264:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a268:	4618      	mov	r0, r3
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	40023800 	.word	0x40023800
 800a270:	08014a30 	.word	0x08014a30

0800a274 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	220f      	movs	r2, #15
 800a282:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a284:	4b12      	ldr	r3, [pc, #72]	; (800a2d0 <HAL_RCC_GetClockConfig+0x5c>)
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	f003 0203 	and.w	r2, r3, #3
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a290:	4b0f      	ldr	r3, [pc, #60]	; (800a2d0 <HAL_RCC_GetClockConfig+0x5c>)
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a29c:	4b0c      	ldr	r3, [pc, #48]	; (800a2d0 <HAL_RCC_GetClockConfig+0x5c>)
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a2a8:	4b09      	ldr	r3, [pc, #36]	; (800a2d0 <HAL_RCC_GetClockConfig+0x5c>)
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	08db      	lsrs	r3, r3, #3
 800a2ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a2b6:	4b07      	ldr	r3, [pc, #28]	; (800a2d4 <HAL_RCC_GetClockConfig+0x60>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f003 020f 	and.w	r2, r3, #15
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	601a      	str	r2, [r3, #0]
}
 800a2c2:	bf00      	nop
 800a2c4:	370c      	adds	r7, #12
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr
 800a2ce:	bf00      	nop
 800a2d0:	40023800 	.word	0x40023800
 800a2d4:	40023c00 	.word	0x40023c00

0800a2d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f003 0301 	and.w	r3, r3, #1
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d10b      	bne.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d105      	bne.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d075      	beq.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a30c:	4bad      	ldr	r3, [pc, #692]	; (800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800a30e:	2200      	movs	r2, #0
 800a310:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a312:	f7fc fc91 	bl	8006c38 <HAL_GetTick>
 800a316:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a318:	e008      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a31a:	f7fc fc8d 	bl	8006c38 <HAL_GetTick>
 800a31e:	4602      	mov	r2, r0
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	1ad3      	subs	r3, r2, r3
 800a324:	2b02      	cmp	r3, #2
 800a326:	d901      	bls.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a328:	2303      	movs	r3, #3
 800a32a:	e18b      	b.n	800a644 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a32c:	4ba6      	ldr	r3, [pc, #664]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a334:	2b00      	cmp	r3, #0
 800a336:	d1f0      	bne.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f003 0301 	and.w	r3, r3, #1
 800a340:	2b00      	cmp	r3, #0
 800a342:	d009      	beq.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	019a      	lsls	r2, r3, #6
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	071b      	lsls	r3, r3, #28
 800a350:	499d      	ldr	r1, [pc, #628]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a352:	4313      	orrs	r3, r2
 800a354:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f003 0302 	and.w	r3, r3, #2
 800a360:	2b00      	cmp	r3, #0
 800a362:	d01f      	beq.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a364:	4b98      	ldr	r3, [pc, #608]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a366:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a36a:	0f1b      	lsrs	r3, r3, #28
 800a36c:	f003 0307 	and.w	r3, r3, #7
 800a370:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	019a      	lsls	r2, r3, #6
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	061b      	lsls	r3, r3, #24
 800a37e:	431a      	orrs	r2, r3
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	071b      	lsls	r3, r3, #28
 800a384:	4990      	ldr	r1, [pc, #576]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a386:	4313      	orrs	r3, r2
 800a388:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a38c:	4b8e      	ldr	r3, [pc, #568]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a38e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a392:	f023 021f 	bic.w	r2, r3, #31
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	69db      	ldr	r3, [r3, #28]
 800a39a:	3b01      	subs	r3, #1
 800a39c:	498a      	ldr	r1, [pc, #552]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d00d      	beq.n	800a3cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	019a      	lsls	r2, r3, #6
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	061b      	lsls	r3, r3, #24
 800a3bc:	431a      	orrs	r2, r3
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	071b      	lsls	r3, r3, #28
 800a3c4:	4980      	ldr	r1, [pc, #512]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a3cc:	4b7d      	ldr	r3, [pc, #500]	; (800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a3d2:	f7fc fc31 	bl	8006c38 <HAL_GetTick>
 800a3d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a3d8:	e008      	b.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a3da:	f7fc fc2d 	bl	8006c38 <HAL_GetTick>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	1ad3      	subs	r3, r2, r3
 800a3e4:	2b02      	cmp	r3, #2
 800a3e6:	d901      	bls.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	e12b      	b.n	800a644 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a3ec:	4b76      	ldr	r3, [pc, #472]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d0f0      	beq.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 0304 	and.w	r3, r3, #4
 800a400:	2b00      	cmp	r3, #0
 800a402:	d105      	bne.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d079      	beq.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a410:	4b6e      	ldr	r3, [pc, #440]	; (800a5cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a412:	2200      	movs	r2, #0
 800a414:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a416:	f7fc fc0f 	bl	8006c38 <HAL_GetTick>
 800a41a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a41c:	e008      	b.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a41e:	f7fc fc0b 	bl	8006c38 <HAL_GetTick>
 800a422:	4602      	mov	r2, r0
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	1ad3      	subs	r3, r2, r3
 800a428:	2b02      	cmp	r3, #2
 800a42a:	d901      	bls.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a42c:	2303      	movs	r3, #3
 800a42e:	e109      	b.n	800a644 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a430:	4b65      	ldr	r3, [pc, #404]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a43c:	d0ef      	beq.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f003 0304 	and.w	r3, r3, #4
 800a446:	2b00      	cmp	r3, #0
 800a448:	d020      	beq.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a44a:	4b5f      	ldr	r3, [pc, #380]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a44c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a450:	0f1b      	lsrs	r3, r3, #28
 800a452:	f003 0307 	and.w	r3, r3, #7
 800a456:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	691b      	ldr	r3, [r3, #16]
 800a45c:	019a      	lsls	r2, r3, #6
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	695b      	ldr	r3, [r3, #20]
 800a462:	061b      	lsls	r3, r3, #24
 800a464:	431a      	orrs	r2, r3
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	071b      	lsls	r3, r3, #28
 800a46a:	4957      	ldr	r1, [pc, #348]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a46c:	4313      	orrs	r3, r2
 800a46e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a472:	4b55      	ldr	r3, [pc, #340]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a478:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a1b      	ldr	r3, [r3, #32]
 800a480:	3b01      	subs	r3, #1
 800a482:	021b      	lsls	r3, r3, #8
 800a484:	4950      	ldr	r1, [pc, #320]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a486:	4313      	orrs	r3, r2
 800a488:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 0308 	and.w	r3, r3, #8
 800a494:	2b00      	cmp	r3, #0
 800a496:	d01e      	beq.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a498:	4b4b      	ldr	r3, [pc, #300]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a49a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a49e:	0e1b      	lsrs	r3, r3, #24
 800a4a0:	f003 030f 	and.w	r3, r3, #15
 800a4a4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	691b      	ldr	r3, [r3, #16]
 800a4aa:	019a      	lsls	r2, r3, #6
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	061b      	lsls	r3, r3, #24
 800a4b0:	431a      	orrs	r2, r3
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	699b      	ldr	r3, [r3, #24]
 800a4b6:	071b      	lsls	r3, r3, #28
 800a4b8:	4943      	ldr	r1, [pc, #268]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a4c0:	4b41      	ldr	r3, [pc, #260]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a4c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ce:	493e      	ldr	r1, [pc, #248]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a4d6:	4b3d      	ldr	r3, [pc, #244]	; (800a5cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a4d8:	2201      	movs	r2, #1
 800a4da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a4dc:	f7fc fbac 	bl	8006c38 <HAL_GetTick>
 800a4e0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a4e2:	e008      	b.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a4e4:	f7fc fba8 	bl	8006c38 <HAL_GetTick>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	d901      	bls.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a4f2:	2303      	movs	r3, #3
 800a4f4:	e0a6      	b.n	800a644 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a4f6:	4b34      	ldr	r3, [pc, #208]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a502:	d1ef      	bne.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f003 0320 	and.w	r3, r3, #32
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f000 808d 	beq.w	800a62c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a512:	2300      	movs	r3, #0
 800a514:	60fb      	str	r3, [r7, #12]
 800a516:	4b2c      	ldr	r3, [pc, #176]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51a:	4a2b      	ldr	r2, [pc, #172]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a51c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a520:	6413      	str	r3, [r2, #64]	; 0x40
 800a522:	4b29      	ldr	r3, [pc, #164]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a52a:	60fb      	str	r3, [r7, #12]
 800a52c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a52e:	4b28      	ldr	r3, [pc, #160]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a27      	ldr	r2, [pc, #156]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a538:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a53a:	f7fc fb7d 	bl	8006c38 <HAL_GetTick>
 800a53e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a540:	e008      	b.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a542:	f7fc fb79 	bl	8006c38 <HAL_GetTick>
 800a546:	4602      	mov	r2, r0
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	1ad3      	subs	r3, r2, r3
 800a54c:	2b02      	cmp	r3, #2
 800a54e:	d901      	bls.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800a550:	2303      	movs	r3, #3
 800a552:	e077      	b.n	800a644 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a554:	4b1e      	ldr	r3, [pc, #120]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d0f0      	beq.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a560:	4b19      	ldr	r3, [pc, #100]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a568:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d039      	beq.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a578:	693a      	ldr	r2, [r7, #16]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d032      	beq.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a57e:	4b12      	ldr	r3, [pc, #72]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a586:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a588:	4b12      	ldr	r3, [pc, #72]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800a58a:	2201      	movs	r2, #1
 800a58c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a58e:	4b11      	ldr	r3, [pc, #68]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800a590:	2200      	movs	r2, #0
 800a592:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a594:	4a0c      	ldr	r2, [pc, #48]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a59a:	4b0b      	ldr	r3, [pc, #44]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a59c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a59e:	f003 0301 	and.w	r3, r3, #1
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d11e      	bne.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a5a6:	f7fc fb47 	bl	8006c38 <HAL_GetTick>
 800a5aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a5ac:	e014      	b.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a5ae:	f7fc fb43 	bl	8006c38 <HAL_GetTick>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	1ad3      	subs	r3, r2, r3
 800a5b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d90b      	bls.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800a5c0:	2303      	movs	r3, #3
 800a5c2:	e03f      	b.n	800a644 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800a5c4:	42470068 	.word	0x42470068
 800a5c8:	40023800 	.word	0x40023800
 800a5cc:	42470070 	.word	0x42470070
 800a5d0:	40007000 	.word	0x40007000
 800a5d4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a5d8:	4b1c      	ldr	r3, [pc, #112]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a5da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5dc:	f003 0302 	and.w	r3, r3, #2
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d0e4      	beq.n	800a5ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5f0:	d10d      	bne.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800a5f2:	4b16      	ldr	r3, [pc, #88]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a606:	4911      	ldr	r1, [pc, #68]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a608:	4313      	orrs	r3, r2
 800a60a:	608b      	str	r3, [r1, #8]
 800a60c:	e005      	b.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a60e:	4b0f      	ldr	r3, [pc, #60]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	4a0e      	ldr	r2, [pc, #56]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a614:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a618:	6093      	str	r3, [r2, #8]
 800a61a:	4b0c      	ldr	r3, [pc, #48]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a61c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a626:	4909      	ldr	r1, [pc, #36]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a628:	4313      	orrs	r3, r2
 800a62a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f003 0310 	and.w	r3, r3, #16
 800a634:	2b00      	cmp	r3, #0
 800a636:	d004      	beq.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800a63e:	4b04      	ldr	r3, [pc, #16]	; (800a650 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800a640:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3718      	adds	r7, #24
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	40023800 	.word	0x40023800
 800a650:	424711e0 	.word	0x424711e0

0800a654 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d101      	bne.n	800a666 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a662:	2301      	movs	r3, #1
 800a664:	e083      	b.n	800a76e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	7f5b      	ldrb	r3, [r3, #29]
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d105      	bne.n	800a67c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f7fb fb04 	bl	8005c84 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2202      	movs	r2, #2
 800a680:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	22ca      	movs	r2, #202	; 0xca
 800a688:	625a      	str	r2, [r3, #36]	; 0x24
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2253      	movs	r2, #83	; 0x53
 800a690:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 f897 	bl	800a7c6 <RTC_EnterInitMode>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d008      	beq.n	800a6b0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	22ff      	movs	r2, #255	; 0xff
 800a6a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2204      	movs	r2, #4
 800a6aa:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e05e      	b.n	800a76e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	6812      	ldr	r2, [r2, #0]
 800a6ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a6be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6c2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	6899      	ldr	r1, [r3, #8]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	685a      	ldr	r2, [r3, #4]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	691b      	ldr	r3, [r3, #16]
 800a6d2:	431a      	orrs	r2, r3
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	695b      	ldr	r3, [r3, #20]
 800a6d8:	431a      	orrs	r2, r3
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	430a      	orrs	r2, r1
 800a6e0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	68d2      	ldr	r2, [r2, #12]
 800a6ea:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	6919      	ldr	r1, [r3, #16]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	041a      	lsls	r2, r3, #16
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	430a      	orrs	r2, r1
 800a6fe:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	68da      	ldr	r2, [r3, #12]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a70e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	f003 0320 	and.w	r3, r3, #32
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d10e      	bne.n	800a73c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 f829 	bl	800a776 <HAL_RTC_WaitForSynchro>
 800a724:	4603      	mov	r3, r0
 800a726:	2b00      	cmp	r3, #0
 800a728:	d008      	beq.n	800a73c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	22ff      	movs	r2, #255	; 0xff
 800a730:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2204      	movs	r2, #4
 800a736:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800a738:	2301      	movs	r3, #1
 800a73a:	e018      	b.n	800a76e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a74a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	699a      	ldr	r2, [r3, #24]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	430a      	orrs	r2, r1
 800a75c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	22ff      	movs	r2, #255	; 0xff
 800a764:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2201      	movs	r2, #1
 800a76a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a76c:	2300      	movs	r3, #0
  }
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3708      	adds	r7, #8
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b084      	sub	sp, #16
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a77e:	2300      	movs	r3, #0
 800a780:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68da      	ldr	r2, [r3, #12]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a790:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a792:	f7fc fa51 	bl	8006c38 <HAL_GetTick>
 800a796:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a798:	e009      	b.n	800a7ae <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a79a:	f7fc fa4d 	bl	8006c38 <HAL_GetTick>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	1ad3      	subs	r3, r2, r3
 800a7a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7a8:	d901      	bls.n	800a7ae <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a7aa:	2303      	movs	r3, #3
 800a7ac:	e007      	b.n	800a7be <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	f003 0320 	and.w	r3, r3, #32
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d0ee      	beq.n	800a79a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a7bc:	2300      	movs	r3, #0
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b084      	sub	sp, #16
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d119      	bne.n	800a814 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7e8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a7ea:	f7fc fa25 	bl	8006c38 <HAL_GetTick>
 800a7ee:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a7f0:	e009      	b.n	800a806 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a7f2:	f7fc fa21 	bl	8006c38 <HAL_GetTick>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	1ad3      	subs	r3, r2, r3
 800a7fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a800:	d901      	bls.n	800a806 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a802:	2303      	movs	r3, #3
 800a804:	e007      	b.n	800a816 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a810:	2b00      	cmp	r3, #0
 800a812:	d0ee      	beq.n	800a7f2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a814:	2300      	movs	r3, #0
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a81e:	b580      	push	{r7, lr}
 800a820:	b082      	sub	sp, #8
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d101      	bne.n	800a830 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	e07b      	b.n	800a928 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a834:	2b00      	cmp	r3, #0
 800a836:	d108      	bne.n	800a84a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a840:	d009      	beq.n	800a856 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	61da      	str	r2, [r3, #28]
 800a848:	e005      	b.n	800a856 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2200      	movs	r2, #0
 800a854:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a862:	b2db      	uxtb	r3, r3
 800a864:	2b00      	cmp	r3, #0
 800a866:	d106      	bne.n	800a876 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f7fb fa53 	bl	8005d1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2202      	movs	r2, #2
 800a87a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a88c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	689b      	ldr	r3, [r3, #8]
 800a89a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a89e:	431a      	orrs	r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8a8:	431a      	orrs	r2, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	f003 0302 	and.w	r3, r3, #2
 800a8b2:	431a      	orrs	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	695b      	ldr	r3, [r3, #20]
 800a8b8:	f003 0301 	and.w	r3, r3, #1
 800a8bc:	431a      	orrs	r2, r3
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a8c6:	431a      	orrs	r2, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	69db      	ldr	r3, [r3, #28]
 800a8cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8d0:	431a      	orrs	r2, r3
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a1b      	ldr	r3, [r3, #32]
 800a8d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8da:	ea42 0103 	orr.w	r1, r2, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	430a      	orrs	r2, r1
 800a8ec:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	699b      	ldr	r3, [r3, #24]
 800a8f2:	0c1b      	lsrs	r3, r3, #16
 800a8f4:	f003 0104 	and.w	r1, r3, #4
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fc:	f003 0210 	and.w	r2, r3, #16
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	430a      	orrs	r2, r1
 800a906:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	69da      	ldr	r2, [r3, #28]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a916:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2201      	movs	r2, #1
 800a922:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3708      	adds	r7, #8
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d101      	bne.n	800a942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	e041      	b.n	800a9c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d106      	bne.n	800a95c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f7fb fd2c 	bl	80063b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2202      	movs	r2, #2
 800a960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	3304      	adds	r3, #4
 800a96c:	4619      	mov	r1, r3
 800a96e:	4610      	mov	r0, r2
 800a970:	f000 fcd0 	bl	800b314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2201      	movs	r2, #1
 800a978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2201      	movs	r2, #1
 800a980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2201      	movs	r2, #1
 800a998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3708      	adds	r7, #8
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
	...

0800a9d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d001      	beq.n	800a9e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e046      	b.n	800aa76 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2202      	movs	r2, #2
 800a9ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a23      	ldr	r2, [pc, #140]	; (800aa84 <HAL_TIM_Base_Start+0xb4>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d022      	beq.n	800aa40 <HAL_TIM_Base_Start+0x70>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa02:	d01d      	beq.n	800aa40 <HAL_TIM_Base_Start+0x70>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a1f      	ldr	r2, [pc, #124]	; (800aa88 <HAL_TIM_Base_Start+0xb8>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d018      	beq.n	800aa40 <HAL_TIM_Base_Start+0x70>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4a1e      	ldr	r2, [pc, #120]	; (800aa8c <HAL_TIM_Base_Start+0xbc>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d013      	beq.n	800aa40 <HAL_TIM_Base_Start+0x70>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a1c      	ldr	r2, [pc, #112]	; (800aa90 <HAL_TIM_Base_Start+0xc0>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d00e      	beq.n	800aa40 <HAL_TIM_Base_Start+0x70>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4a1b      	ldr	r2, [pc, #108]	; (800aa94 <HAL_TIM_Base_Start+0xc4>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d009      	beq.n	800aa40 <HAL_TIM_Base_Start+0x70>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a19      	ldr	r2, [pc, #100]	; (800aa98 <HAL_TIM_Base_Start+0xc8>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d004      	beq.n	800aa40 <HAL_TIM_Base_Start+0x70>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a18      	ldr	r2, [pc, #96]	; (800aa9c <HAL_TIM_Base_Start+0xcc>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d111      	bne.n	800aa64 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	f003 0307 	and.w	r3, r3, #7
 800aa4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2b06      	cmp	r3, #6
 800aa50:	d010      	beq.n	800aa74 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f042 0201 	orr.w	r2, r2, #1
 800aa60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa62:	e007      	b.n	800aa74 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f042 0201 	orr.w	r2, r2, #1
 800aa72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aa74:	2300      	movs	r3, #0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3714      	adds	r7, #20
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	40010000 	.word	0x40010000
 800aa88:	40000400 	.word	0x40000400
 800aa8c:	40000800 	.word	0x40000800
 800aa90:	40000c00 	.word	0x40000c00
 800aa94:	40010400 	.word	0x40010400
 800aa98:	40014000 	.word	0x40014000
 800aa9c:	40001800 	.word	0x40001800

0800aaa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d001      	beq.n	800aab8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	e04e      	b.n	800ab56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2202      	movs	r2, #2
 800aabc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	68da      	ldr	r2, [r3, #12]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f042 0201 	orr.w	r2, r2, #1
 800aace:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a23      	ldr	r2, [pc, #140]	; (800ab64 <HAL_TIM_Base_Start_IT+0xc4>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d022      	beq.n	800ab20 <HAL_TIM_Base_Start_IT+0x80>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aae2:	d01d      	beq.n	800ab20 <HAL_TIM_Base_Start_IT+0x80>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a1f      	ldr	r2, [pc, #124]	; (800ab68 <HAL_TIM_Base_Start_IT+0xc8>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d018      	beq.n	800ab20 <HAL_TIM_Base_Start_IT+0x80>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a1e      	ldr	r2, [pc, #120]	; (800ab6c <HAL_TIM_Base_Start_IT+0xcc>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d013      	beq.n	800ab20 <HAL_TIM_Base_Start_IT+0x80>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a1c      	ldr	r2, [pc, #112]	; (800ab70 <HAL_TIM_Base_Start_IT+0xd0>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d00e      	beq.n	800ab20 <HAL_TIM_Base_Start_IT+0x80>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a1b      	ldr	r2, [pc, #108]	; (800ab74 <HAL_TIM_Base_Start_IT+0xd4>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d009      	beq.n	800ab20 <HAL_TIM_Base_Start_IT+0x80>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a19      	ldr	r2, [pc, #100]	; (800ab78 <HAL_TIM_Base_Start_IT+0xd8>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d004      	beq.n	800ab20 <HAL_TIM_Base_Start_IT+0x80>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a18      	ldr	r2, [pc, #96]	; (800ab7c <HAL_TIM_Base_Start_IT+0xdc>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d111      	bne.n	800ab44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	689b      	ldr	r3, [r3, #8]
 800ab26:	f003 0307 	and.w	r3, r3, #7
 800ab2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2b06      	cmp	r3, #6
 800ab30:	d010      	beq.n	800ab54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f042 0201 	orr.w	r2, r2, #1
 800ab40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab42:	e007      	b.n	800ab54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f042 0201 	orr.w	r2, r2, #1
 800ab52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3714      	adds	r7, #20
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	40010000 	.word	0x40010000
 800ab68:	40000400 	.word	0x40000400
 800ab6c:	40000800 	.word	0x40000800
 800ab70:	40000c00 	.word	0x40000c00
 800ab74:	40010400 	.word	0x40010400
 800ab78:	40014000 	.word	0x40014000
 800ab7c:	40001800 	.word	0x40001800

0800ab80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d101      	bne.n	800ab92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e041      	b.n	800ac16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d106      	bne.n	800abac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f7fb fc3c 	bl	8006424 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2202      	movs	r2, #2
 800abb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	3304      	adds	r3, #4
 800abbc:	4619      	mov	r1, r3
 800abbe:	4610      	mov	r0, r2
 800abc0:	f000 fba8 	bl	800b314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2201      	movs	r2, #1
 800abc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2201      	movs	r2, #1
 800abd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2201      	movs	r2, #1
 800abe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2201      	movs	r2, #1
 800abf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2201      	movs	r2, #1
 800abf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2201      	movs	r2, #1
 800ac00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2201      	movs	r2, #1
 800ac08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3708      	adds	r7, #8
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
	...

0800ac20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d109      	bne.n	800ac44 <HAL_TIM_PWM_Start+0x24>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	bf14      	ite	ne
 800ac3c:	2301      	movne	r3, #1
 800ac3e:	2300      	moveq	r3, #0
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	e022      	b.n	800ac8a <HAL_TIM_PWM_Start+0x6a>
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	2b04      	cmp	r3, #4
 800ac48:	d109      	bne.n	800ac5e <HAL_TIM_PWM_Start+0x3e>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	bf14      	ite	ne
 800ac56:	2301      	movne	r3, #1
 800ac58:	2300      	moveq	r3, #0
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	e015      	b.n	800ac8a <HAL_TIM_PWM_Start+0x6a>
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	2b08      	cmp	r3, #8
 800ac62:	d109      	bne.n	800ac78 <HAL_TIM_PWM_Start+0x58>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	bf14      	ite	ne
 800ac70:	2301      	movne	r3, #1
 800ac72:	2300      	moveq	r3, #0
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	e008      	b.n	800ac8a <HAL_TIM_PWM_Start+0x6a>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	bf14      	ite	ne
 800ac84:	2301      	movne	r3, #1
 800ac86:	2300      	moveq	r3, #0
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d001      	beq.n	800ac92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e07c      	b.n	800ad8c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d104      	bne.n	800aca2 <HAL_TIM_PWM_Start+0x82>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2202      	movs	r2, #2
 800ac9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aca0:	e013      	b.n	800acca <HAL_TIM_PWM_Start+0xaa>
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	2b04      	cmp	r3, #4
 800aca6:	d104      	bne.n	800acb2 <HAL_TIM_PWM_Start+0x92>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2202      	movs	r2, #2
 800acac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800acb0:	e00b      	b.n	800acca <HAL_TIM_PWM_Start+0xaa>
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	2b08      	cmp	r3, #8
 800acb6:	d104      	bne.n	800acc2 <HAL_TIM_PWM_Start+0xa2>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2202      	movs	r2, #2
 800acbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800acc0:	e003      	b.n	800acca <HAL_TIM_PWM_Start+0xaa>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2202      	movs	r2, #2
 800acc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2201      	movs	r2, #1
 800acd0:	6839      	ldr	r1, [r7, #0]
 800acd2:	4618      	mov	r0, r3
 800acd4:	f000 fe08 	bl	800b8e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a2d      	ldr	r2, [pc, #180]	; (800ad94 <HAL_TIM_PWM_Start+0x174>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d004      	beq.n	800acec <HAL_TIM_PWM_Start+0xcc>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a2c      	ldr	r2, [pc, #176]	; (800ad98 <HAL_TIM_PWM_Start+0x178>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d101      	bne.n	800acf0 <HAL_TIM_PWM_Start+0xd0>
 800acec:	2301      	movs	r3, #1
 800acee:	e000      	b.n	800acf2 <HAL_TIM_PWM_Start+0xd2>
 800acf0:	2300      	movs	r3, #0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d007      	beq.n	800ad06 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a22      	ldr	r2, [pc, #136]	; (800ad94 <HAL_TIM_PWM_Start+0x174>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d022      	beq.n	800ad56 <HAL_TIM_PWM_Start+0x136>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad18:	d01d      	beq.n	800ad56 <HAL_TIM_PWM_Start+0x136>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a1f      	ldr	r2, [pc, #124]	; (800ad9c <HAL_TIM_PWM_Start+0x17c>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d018      	beq.n	800ad56 <HAL_TIM_PWM_Start+0x136>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a1d      	ldr	r2, [pc, #116]	; (800ada0 <HAL_TIM_PWM_Start+0x180>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d013      	beq.n	800ad56 <HAL_TIM_PWM_Start+0x136>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4a1c      	ldr	r2, [pc, #112]	; (800ada4 <HAL_TIM_PWM_Start+0x184>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d00e      	beq.n	800ad56 <HAL_TIM_PWM_Start+0x136>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a16      	ldr	r2, [pc, #88]	; (800ad98 <HAL_TIM_PWM_Start+0x178>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d009      	beq.n	800ad56 <HAL_TIM_PWM_Start+0x136>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4a18      	ldr	r2, [pc, #96]	; (800ada8 <HAL_TIM_PWM_Start+0x188>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d004      	beq.n	800ad56 <HAL_TIM_PWM_Start+0x136>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a16      	ldr	r2, [pc, #88]	; (800adac <HAL_TIM_PWM_Start+0x18c>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d111      	bne.n	800ad7a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	689b      	ldr	r3, [r3, #8]
 800ad5c:	f003 0307 	and.w	r3, r3, #7
 800ad60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2b06      	cmp	r3, #6
 800ad66:	d010      	beq.n	800ad8a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f042 0201 	orr.w	r2, r2, #1
 800ad76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad78:	e007      	b.n	800ad8a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f042 0201 	orr.w	r2, r2, #1
 800ad88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ad8a:	2300      	movs	r3, #0
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3710      	adds	r7, #16
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	40010000 	.word	0x40010000
 800ad98:	40010400 	.word	0x40010400
 800ad9c:	40000400 	.word	0x40000400
 800ada0:	40000800 	.word	0x40000800
 800ada4:	40000c00 	.word	0x40000c00
 800ada8:	40014000 	.word	0x40014000
 800adac:	40001800 	.word	0x40001800

0800adb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	691b      	ldr	r3, [r3, #16]
 800adbe:	f003 0302 	and.w	r3, r3, #2
 800adc2:	2b02      	cmp	r3, #2
 800adc4:	d122      	bne.n	800ae0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	f003 0302 	and.w	r3, r3, #2
 800add0:	2b02      	cmp	r3, #2
 800add2:	d11b      	bne.n	800ae0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f06f 0202 	mvn.w	r2, #2
 800addc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2201      	movs	r2, #1
 800ade2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	699b      	ldr	r3, [r3, #24]
 800adea:	f003 0303 	and.w	r3, r3, #3
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d003      	beq.n	800adfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fa70 	bl	800b2d8 <HAL_TIM_IC_CaptureCallback>
 800adf8:	e005      	b.n	800ae06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 fa62 	bl	800b2c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 fa73 	bl	800b2ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	f003 0304 	and.w	r3, r3, #4
 800ae16:	2b04      	cmp	r3, #4
 800ae18:	d122      	bne.n	800ae60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	f003 0304 	and.w	r3, r3, #4
 800ae24:	2b04      	cmp	r3, #4
 800ae26:	d11b      	bne.n	800ae60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f06f 0204 	mvn.w	r2, #4
 800ae30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2202      	movs	r2, #2
 800ae36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	699b      	ldr	r3, [r3, #24]
 800ae3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d003      	beq.n	800ae4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 fa46 	bl	800b2d8 <HAL_TIM_IC_CaptureCallback>
 800ae4c:	e005      	b.n	800ae5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 fa38 	bl	800b2c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 fa49 	bl	800b2ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	691b      	ldr	r3, [r3, #16]
 800ae66:	f003 0308 	and.w	r3, r3, #8
 800ae6a:	2b08      	cmp	r3, #8
 800ae6c:	d122      	bne.n	800aeb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	f003 0308 	and.w	r3, r3, #8
 800ae78:	2b08      	cmp	r3, #8
 800ae7a:	d11b      	bne.n	800aeb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f06f 0208 	mvn.w	r2, #8
 800ae84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2204      	movs	r2, #4
 800ae8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	69db      	ldr	r3, [r3, #28]
 800ae92:	f003 0303 	and.w	r3, r3, #3
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d003      	beq.n	800aea2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 fa1c 	bl	800b2d8 <HAL_TIM_IC_CaptureCallback>
 800aea0:	e005      	b.n	800aeae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 fa0e 	bl	800b2c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 fa1f 	bl	800b2ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	691b      	ldr	r3, [r3, #16]
 800aeba:	f003 0310 	and.w	r3, r3, #16
 800aebe:	2b10      	cmp	r3, #16
 800aec0:	d122      	bne.n	800af08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	f003 0310 	and.w	r3, r3, #16
 800aecc:	2b10      	cmp	r3, #16
 800aece:	d11b      	bne.n	800af08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f06f 0210 	mvn.w	r2, #16
 800aed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2208      	movs	r2, #8
 800aede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	69db      	ldr	r3, [r3, #28]
 800aee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d003      	beq.n	800aef6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 f9f2 	bl	800b2d8 <HAL_TIM_IC_CaptureCallback>
 800aef4:	e005      	b.n	800af02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 f9e4 	bl	800b2c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 f9f5 	bl	800b2ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	f003 0301 	and.w	r3, r3, #1
 800af12:	2b01      	cmp	r3, #1
 800af14:	d10e      	bne.n	800af34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	f003 0301 	and.w	r3, r3, #1
 800af20:	2b01      	cmp	r3, #1
 800af22:	d107      	bne.n	800af34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f06f 0201 	mvn.w	r2, #1
 800af2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f7fa fe6a 	bl	8005c08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	691b      	ldr	r3, [r3, #16]
 800af3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af3e:	2b80      	cmp	r3, #128	; 0x80
 800af40:	d10e      	bne.n	800af60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af4c:	2b80      	cmp	r3, #128	; 0x80
 800af4e:	d107      	bne.n	800af60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800af58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 fd70 	bl	800ba40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af6a:	2b40      	cmp	r3, #64	; 0x40
 800af6c:	d10e      	bne.n	800af8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af78:	2b40      	cmp	r3, #64	; 0x40
 800af7a:	d107      	bne.n	800af8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800af84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f9ba 	bl	800b300 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	691b      	ldr	r3, [r3, #16]
 800af92:	f003 0320 	and.w	r3, r3, #32
 800af96:	2b20      	cmp	r3, #32
 800af98:	d10e      	bne.n	800afb8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	f003 0320 	and.w	r3, r3, #32
 800afa4:	2b20      	cmp	r3, #32
 800afa6:	d107      	bne.n	800afb8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f06f 0220 	mvn.w	r2, #32
 800afb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 fd3a 	bl	800ba2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800afb8:	bf00      	nop
 800afba:	3708      	adds	r7, #8
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d101      	bne.n	800afda <HAL_TIM_PWM_ConfigChannel+0x1a>
 800afd6:	2302      	movs	r3, #2
 800afd8:	e0ac      	b.n	800b134 <HAL_TIM_PWM_ConfigChannel+0x174>
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2201      	movs	r2, #1
 800afde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2b0c      	cmp	r3, #12
 800afe6:	f200 809f 	bhi.w	800b128 <HAL_TIM_PWM_ConfigChannel+0x168>
 800afea:	a201      	add	r2, pc, #4	; (adr r2, 800aff0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800afec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff0:	0800b025 	.word	0x0800b025
 800aff4:	0800b129 	.word	0x0800b129
 800aff8:	0800b129 	.word	0x0800b129
 800affc:	0800b129 	.word	0x0800b129
 800b000:	0800b065 	.word	0x0800b065
 800b004:	0800b129 	.word	0x0800b129
 800b008:	0800b129 	.word	0x0800b129
 800b00c:	0800b129 	.word	0x0800b129
 800b010:	0800b0a7 	.word	0x0800b0a7
 800b014:	0800b129 	.word	0x0800b129
 800b018:	0800b129 	.word	0x0800b129
 800b01c:	0800b129 	.word	0x0800b129
 800b020:	0800b0e7 	.word	0x0800b0e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	68b9      	ldr	r1, [r7, #8]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f000 fa12 	bl	800b454 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	699a      	ldr	r2, [r3, #24]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f042 0208 	orr.w	r2, r2, #8
 800b03e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	699a      	ldr	r2, [r3, #24]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f022 0204 	bic.w	r2, r2, #4
 800b04e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	6999      	ldr	r1, [r3, #24]
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	691a      	ldr	r2, [r3, #16]
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	430a      	orrs	r2, r1
 800b060:	619a      	str	r2, [r3, #24]
      break;
 800b062:	e062      	b.n	800b12a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	68b9      	ldr	r1, [r7, #8]
 800b06a:	4618      	mov	r0, r3
 800b06c:	f000 fa62 	bl	800b534 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	699a      	ldr	r2, [r3, #24]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b07e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	699a      	ldr	r2, [r3, #24]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b08e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	6999      	ldr	r1, [r3, #24]
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	691b      	ldr	r3, [r3, #16]
 800b09a:	021a      	lsls	r2, r3, #8
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	430a      	orrs	r2, r1
 800b0a2:	619a      	str	r2, [r3, #24]
      break;
 800b0a4:	e041      	b.n	800b12a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	68b9      	ldr	r1, [r7, #8]
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f000 fab7 	bl	800b620 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	69da      	ldr	r2, [r3, #28]
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f042 0208 	orr.w	r2, r2, #8
 800b0c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	69da      	ldr	r2, [r3, #28]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f022 0204 	bic.w	r2, r2, #4
 800b0d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	69d9      	ldr	r1, [r3, #28]
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	691a      	ldr	r2, [r3, #16]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	430a      	orrs	r2, r1
 800b0e2:	61da      	str	r2, [r3, #28]
      break;
 800b0e4:	e021      	b.n	800b12a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	68b9      	ldr	r1, [r7, #8]
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f000 fb0b 	bl	800b708 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	69da      	ldr	r2, [r3, #28]
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	69da      	ldr	r2, [r3, #28]
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	69d9      	ldr	r1, [r3, #28]
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	691b      	ldr	r3, [r3, #16]
 800b11c:	021a      	lsls	r2, r3, #8
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	430a      	orrs	r2, r1
 800b124:	61da      	str	r2, [r3, #28]
      break;
 800b126:	e000      	b.n	800b12a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800b128:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2200      	movs	r2, #0
 800b12e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b132:	2300      	movs	r3, #0
}
 800b134:	4618      	mov	r0, r3
 800b136:	3710      	adds	r7, #16
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d101      	bne.n	800b154 <HAL_TIM_ConfigClockSource+0x18>
 800b150:	2302      	movs	r3, #2
 800b152:	e0b3      	b.n	800b2bc <HAL_TIM_ConfigClockSource+0x180>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2201      	movs	r2, #1
 800b158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2202      	movs	r2, #2
 800b160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	689b      	ldr	r3, [r3, #8]
 800b16a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b172:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b17a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b18c:	d03e      	beq.n	800b20c <HAL_TIM_ConfigClockSource+0xd0>
 800b18e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b192:	f200 8087 	bhi.w	800b2a4 <HAL_TIM_ConfigClockSource+0x168>
 800b196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b19a:	f000 8085 	beq.w	800b2a8 <HAL_TIM_ConfigClockSource+0x16c>
 800b19e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1a2:	d87f      	bhi.n	800b2a4 <HAL_TIM_ConfigClockSource+0x168>
 800b1a4:	2b70      	cmp	r3, #112	; 0x70
 800b1a6:	d01a      	beq.n	800b1de <HAL_TIM_ConfigClockSource+0xa2>
 800b1a8:	2b70      	cmp	r3, #112	; 0x70
 800b1aa:	d87b      	bhi.n	800b2a4 <HAL_TIM_ConfigClockSource+0x168>
 800b1ac:	2b60      	cmp	r3, #96	; 0x60
 800b1ae:	d050      	beq.n	800b252 <HAL_TIM_ConfigClockSource+0x116>
 800b1b0:	2b60      	cmp	r3, #96	; 0x60
 800b1b2:	d877      	bhi.n	800b2a4 <HAL_TIM_ConfigClockSource+0x168>
 800b1b4:	2b50      	cmp	r3, #80	; 0x50
 800b1b6:	d03c      	beq.n	800b232 <HAL_TIM_ConfigClockSource+0xf6>
 800b1b8:	2b50      	cmp	r3, #80	; 0x50
 800b1ba:	d873      	bhi.n	800b2a4 <HAL_TIM_ConfigClockSource+0x168>
 800b1bc:	2b40      	cmp	r3, #64	; 0x40
 800b1be:	d058      	beq.n	800b272 <HAL_TIM_ConfigClockSource+0x136>
 800b1c0:	2b40      	cmp	r3, #64	; 0x40
 800b1c2:	d86f      	bhi.n	800b2a4 <HAL_TIM_ConfigClockSource+0x168>
 800b1c4:	2b30      	cmp	r3, #48	; 0x30
 800b1c6:	d064      	beq.n	800b292 <HAL_TIM_ConfigClockSource+0x156>
 800b1c8:	2b30      	cmp	r3, #48	; 0x30
 800b1ca:	d86b      	bhi.n	800b2a4 <HAL_TIM_ConfigClockSource+0x168>
 800b1cc:	2b20      	cmp	r3, #32
 800b1ce:	d060      	beq.n	800b292 <HAL_TIM_ConfigClockSource+0x156>
 800b1d0:	2b20      	cmp	r3, #32
 800b1d2:	d867      	bhi.n	800b2a4 <HAL_TIM_ConfigClockSource+0x168>
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d05c      	beq.n	800b292 <HAL_TIM_ConfigClockSource+0x156>
 800b1d8:	2b10      	cmp	r3, #16
 800b1da:	d05a      	beq.n	800b292 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b1dc:	e062      	b.n	800b2a4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6818      	ldr	r0, [r3, #0]
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	6899      	ldr	r1, [r3, #8]
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	685a      	ldr	r2, [r3, #4]
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	f000 fb5b 	bl	800b8a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b200:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	68fa      	ldr	r2, [r7, #12]
 800b208:	609a      	str	r2, [r3, #8]
      break;
 800b20a:	e04e      	b.n	800b2aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6818      	ldr	r0, [r3, #0]
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	6899      	ldr	r1, [r3, #8]
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	685a      	ldr	r2, [r3, #4]
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	f000 fb44 	bl	800b8a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	689a      	ldr	r2, [r3, #8]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b22e:	609a      	str	r2, [r3, #8]
      break;
 800b230:	e03b      	b.n	800b2aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6818      	ldr	r0, [r3, #0]
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	6859      	ldr	r1, [r3, #4]
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	68db      	ldr	r3, [r3, #12]
 800b23e:	461a      	mov	r2, r3
 800b240:	f000 fab8 	bl	800b7b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2150      	movs	r1, #80	; 0x50
 800b24a:	4618      	mov	r0, r3
 800b24c:	f000 fb11 	bl	800b872 <TIM_ITRx_SetConfig>
      break;
 800b250:	e02b      	b.n	800b2aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6818      	ldr	r0, [r3, #0]
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	6859      	ldr	r1, [r3, #4]
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	68db      	ldr	r3, [r3, #12]
 800b25e:	461a      	mov	r2, r3
 800b260:	f000 fad7 	bl	800b812 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2160      	movs	r1, #96	; 0x60
 800b26a:	4618      	mov	r0, r3
 800b26c:	f000 fb01 	bl	800b872 <TIM_ITRx_SetConfig>
      break;
 800b270:	e01b      	b.n	800b2aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6818      	ldr	r0, [r3, #0]
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	6859      	ldr	r1, [r3, #4]
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	461a      	mov	r2, r3
 800b280:	f000 fa98 	bl	800b7b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2140      	movs	r1, #64	; 0x40
 800b28a:	4618      	mov	r0, r3
 800b28c:	f000 faf1 	bl	800b872 <TIM_ITRx_SetConfig>
      break;
 800b290:	e00b      	b.n	800b2aa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4619      	mov	r1, r3
 800b29c:	4610      	mov	r0, r2
 800b29e:	f000 fae8 	bl	800b872 <TIM_ITRx_SetConfig>
        break;
 800b2a2:	e002      	b.n	800b2aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b2a4:	bf00      	nop
 800b2a6:	e000      	b.n	800b2aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b2a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b2ba:	2300      	movs	r3, #0
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3710      	adds	r7, #16
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b2cc:	bf00      	nop
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b2e0:	bf00      	nop
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b2f4:	bf00      	nop
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b308:	bf00      	nop
 800b30a:	370c      	adds	r7, #12
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b314:	b480      	push	{r7}
 800b316:	b085      	sub	sp, #20
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	4a40      	ldr	r2, [pc, #256]	; (800b428 <TIM_Base_SetConfig+0x114>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d013      	beq.n	800b354 <TIM_Base_SetConfig+0x40>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b332:	d00f      	beq.n	800b354 <TIM_Base_SetConfig+0x40>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4a3d      	ldr	r2, [pc, #244]	; (800b42c <TIM_Base_SetConfig+0x118>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d00b      	beq.n	800b354 <TIM_Base_SetConfig+0x40>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4a3c      	ldr	r2, [pc, #240]	; (800b430 <TIM_Base_SetConfig+0x11c>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d007      	beq.n	800b354 <TIM_Base_SetConfig+0x40>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4a3b      	ldr	r2, [pc, #236]	; (800b434 <TIM_Base_SetConfig+0x120>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d003      	beq.n	800b354 <TIM_Base_SetConfig+0x40>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4a3a      	ldr	r2, [pc, #232]	; (800b438 <TIM_Base_SetConfig+0x124>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d108      	bne.n	800b366 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b35a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	4313      	orrs	r3, r2
 800b364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4a2f      	ldr	r2, [pc, #188]	; (800b428 <TIM_Base_SetConfig+0x114>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d02b      	beq.n	800b3c6 <TIM_Base_SetConfig+0xb2>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b374:	d027      	beq.n	800b3c6 <TIM_Base_SetConfig+0xb2>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	4a2c      	ldr	r2, [pc, #176]	; (800b42c <TIM_Base_SetConfig+0x118>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d023      	beq.n	800b3c6 <TIM_Base_SetConfig+0xb2>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	4a2b      	ldr	r2, [pc, #172]	; (800b430 <TIM_Base_SetConfig+0x11c>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d01f      	beq.n	800b3c6 <TIM_Base_SetConfig+0xb2>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	4a2a      	ldr	r2, [pc, #168]	; (800b434 <TIM_Base_SetConfig+0x120>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d01b      	beq.n	800b3c6 <TIM_Base_SetConfig+0xb2>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4a29      	ldr	r2, [pc, #164]	; (800b438 <TIM_Base_SetConfig+0x124>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d017      	beq.n	800b3c6 <TIM_Base_SetConfig+0xb2>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4a28      	ldr	r2, [pc, #160]	; (800b43c <TIM_Base_SetConfig+0x128>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d013      	beq.n	800b3c6 <TIM_Base_SetConfig+0xb2>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	4a27      	ldr	r2, [pc, #156]	; (800b440 <TIM_Base_SetConfig+0x12c>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d00f      	beq.n	800b3c6 <TIM_Base_SetConfig+0xb2>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4a26      	ldr	r2, [pc, #152]	; (800b444 <TIM_Base_SetConfig+0x130>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d00b      	beq.n	800b3c6 <TIM_Base_SetConfig+0xb2>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	4a25      	ldr	r2, [pc, #148]	; (800b448 <TIM_Base_SetConfig+0x134>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d007      	beq.n	800b3c6 <TIM_Base_SetConfig+0xb2>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	4a24      	ldr	r2, [pc, #144]	; (800b44c <TIM_Base_SetConfig+0x138>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d003      	beq.n	800b3c6 <TIM_Base_SetConfig+0xb2>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	4a23      	ldr	r2, [pc, #140]	; (800b450 <TIM_Base_SetConfig+0x13c>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d108      	bne.n	800b3d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	68db      	ldr	r3, [r3, #12]
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	695b      	ldr	r3, [r3, #20]
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	68fa      	ldr	r2, [r7, #12]
 800b3ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	689a      	ldr	r2, [r3, #8]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	4a0a      	ldr	r2, [pc, #40]	; (800b428 <TIM_Base_SetConfig+0x114>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d003      	beq.n	800b40c <TIM_Base_SetConfig+0xf8>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	4a0c      	ldr	r2, [pc, #48]	; (800b438 <TIM_Base_SetConfig+0x124>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d103      	bne.n	800b414 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	691a      	ldr	r2, [r3, #16]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2201      	movs	r2, #1
 800b418:	615a      	str	r2, [r3, #20]
}
 800b41a:	bf00      	nop
 800b41c:	3714      	adds	r7, #20
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr
 800b426:	bf00      	nop
 800b428:	40010000 	.word	0x40010000
 800b42c:	40000400 	.word	0x40000400
 800b430:	40000800 	.word	0x40000800
 800b434:	40000c00 	.word	0x40000c00
 800b438:	40010400 	.word	0x40010400
 800b43c:	40014000 	.word	0x40014000
 800b440:	40014400 	.word	0x40014400
 800b444:	40014800 	.word	0x40014800
 800b448:	40001800 	.word	0x40001800
 800b44c:	40001c00 	.word	0x40001c00
 800b450:	40002000 	.word	0x40002000

0800b454 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b454:	b480      	push	{r7}
 800b456:	b087      	sub	sp, #28
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a1b      	ldr	r3, [r3, #32]
 800b462:	f023 0201 	bic.w	r2, r3, #1
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6a1b      	ldr	r3, [r3, #32]
 800b46e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	699b      	ldr	r3, [r3, #24]
 800b47a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f023 0303 	bic.w	r3, r3, #3
 800b48a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	4313      	orrs	r3, r2
 800b494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	f023 0302 	bic.w	r3, r3, #2
 800b49c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	689b      	ldr	r3, [r3, #8]
 800b4a2:	697a      	ldr	r2, [r7, #20]
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	4a20      	ldr	r2, [pc, #128]	; (800b52c <TIM_OC1_SetConfig+0xd8>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d003      	beq.n	800b4b8 <TIM_OC1_SetConfig+0x64>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4a1f      	ldr	r2, [pc, #124]	; (800b530 <TIM_OC1_SetConfig+0xdc>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d10c      	bne.n	800b4d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	f023 0308 	bic.w	r3, r3, #8
 800b4be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	68db      	ldr	r3, [r3, #12]
 800b4c4:	697a      	ldr	r2, [r7, #20]
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	f023 0304 	bic.w	r3, r3, #4
 800b4d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	4a15      	ldr	r2, [pc, #84]	; (800b52c <TIM_OC1_SetConfig+0xd8>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d003      	beq.n	800b4e2 <TIM_OC1_SetConfig+0x8e>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	4a14      	ldr	r2, [pc, #80]	; (800b530 <TIM_OC1_SetConfig+0xdc>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d111      	bne.n	800b506 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b4f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	695b      	ldr	r3, [r3, #20]
 800b4f6:	693a      	ldr	r2, [r7, #16]
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	699b      	ldr	r3, [r3, #24]
 800b500:	693a      	ldr	r2, [r7, #16]
 800b502:	4313      	orrs	r3, r2
 800b504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	693a      	ldr	r2, [r7, #16]
 800b50a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	68fa      	ldr	r2, [r7, #12]
 800b510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	685a      	ldr	r2, [r3, #4]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	697a      	ldr	r2, [r7, #20]
 800b51e:	621a      	str	r2, [r3, #32]
}
 800b520:	bf00      	nop
 800b522:	371c      	adds	r7, #28
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr
 800b52c:	40010000 	.word	0x40010000
 800b530:	40010400 	.word	0x40010400

0800b534 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b534:	b480      	push	{r7}
 800b536:	b087      	sub	sp, #28
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6a1b      	ldr	r3, [r3, #32]
 800b542:	f023 0210 	bic.w	r2, r3, #16
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6a1b      	ldr	r3, [r3, #32]
 800b54e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	699b      	ldr	r3, [r3, #24]
 800b55a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b56a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	021b      	lsls	r3, r3, #8
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	4313      	orrs	r3, r2
 800b576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	f023 0320 	bic.w	r3, r3, #32
 800b57e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	011b      	lsls	r3, r3, #4
 800b586:	697a      	ldr	r2, [r7, #20]
 800b588:	4313      	orrs	r3, r2
 800b58a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4a22      	ldr	r2, [pc, #136]	; (800b618 <TIM_OC2_SetConfig+0xe4>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d003      	beq.n	800b59c <TIM_OC2_SetConfig+0x68>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	4a21      	ldr	r2, [pc, #132]	; (800b61c <TIM_OC2_SetConfig+0xe8>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d10d      	bne.n	800b5b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	68db      	ldr	r3, [r3, #12]
 800b5a8:	011b      	lsls	r3, r3, #4
 800b5aa:	697a      	ldr	r2, [r7, #20]
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	4a17      	ldr	r2, [pc, #92]	; (800b618 <TIM_OC2_SetConfig+0xe4>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d003      	beq.n	800b5c8 <TIM_OC2_SetConfig+0x94>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4a16      	ldr	r2, [pc, #88]	; (800b61c <TIM_OC2_SetConfig+0xe8>)
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d113      	bne.n	800b5f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b5ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b5d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	695b      	ldr	r3, [r3, #20]
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	693a      	ldr	r2, [r7, #16]
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	699b      	ldr	r3, [r3, #24]
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	693a      	ldr	r2, [r7, #16]
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	693a      	ldr	r2, [r7, #16]
 800b5f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	68fa      	ldr	r2, [r7, #12]
 800b5fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	685a      	ldr	r2, [r3, #4]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	697a      	ldr	r2, [r7, #20]
 800b608:	621a      	str	r2, [r3, #32]
}
 800b60a:	bf00      	nop
 800b60c:	371c      	adds	r7, #28
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr
 800b616:	bf00      	nop
 800b618:	40010000 	.word	0x40010000
 800b61c:	40010400 	.word	0x40010400

0800b620 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b620:	b480      	push	{r7}
 800b622:	b087      	sub	sp, #28
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6a1b      	ldr	r3, [r3, #32]
 800b62e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6a1b      	ldr	r3, [r3, #32]
 800b63a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	69db      	ldr	r3, [r3, #28]
 800b646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b64e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f023 0303 	bic.w	r3, r3, #3
 800b656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	68fa      	ldr	r2, [r7, #12]
 800b65e:	4313      	orrs	r3, r2
 800b660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	021b      	lsls	r3, r3, #8
 800b670:	697a      	ldr	r2, [r7, #20]
 800b672:	4313      	orrs	r3, r2
 800b674:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	4a21      	ldr	r2, [pc, #132]	; (800b700 <TIM_OC3_SetConfig+0xe0>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d003      	beq.n	800b686 <TIM_OC3_SetConfig+0x66>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	4a20      	ldr	r2, [pc, #128]	; (800b704 <TIM_OC3_SetConfig+0xe4>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d10d      	bne.n	800b6a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b68c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	021b      	lsls	r3, r3, #8
 800b694:	697a      	ldr	r2, [r7, #20]
 800b696:	4313      	orrs	r3, r2
 800b698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b6a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	4a16      	ldr	r2, [pc, #88]	; (800b700 <TIM_OC3_SetConfig+0xe0>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d003      	beq.n	800b6b2 <TIM_OC3_SetConfig+0x92>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4a15      	ldr	r2, [pc, #84]	; (800b704 <TIM_OC3_SetConfig+0xe4>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d113      	bne.n	800b6da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b6c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	695b      	ldr	r3, [r3, #20]
 800b6c6:	011b      	lsls	r3, r3, #4
 800b6c8:	693a      	ldr	r2, [r7, #16]
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	699b      	ldr	r3, [r3, #24]
 800b6d2:	011b      	lsls	r3, r3, #4
 800b6d4:	693a      	ldr	r2, [r7, #16]
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	693a      	ldr	r2, [r7, #16]
 800b6de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	68fa      	ldr	r2, [r7, #12]
 800b6e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	685a      	ldr	r2, [r3, #4]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	697a      	ldr	r2, [r7, #20]
 800b6f2:	621a      	str	r2, [r3, #32]
}
 800b6f4:	bf00      	nop
 800b6f6:	371c      	adds	r7, #28
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr
 800b700:	40010000 	.word	0x40010000
 800b704:	40010400 	.word	0x40010400

0800b708 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b708:	b480      	push	{r7}
 800b70a:	b087      	sub	sp, #28
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6a1b      	ldr	r3, [r3, #32]
 800b716:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6a1b      	ldr	r3, [r3, #32]
 800b722:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	69db      	ldr	r3, [r3, #28]
 800b72e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b73e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	021b      	lsls	r3, r3, #8
 800b746:	68fa      	ldr	r2, [r7, #12]
 800b748:	4313      	orrs	r3, r2
 800b74a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b752:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	031b      	lsls	r3, r3, #12
 800b75a:	693a      	ldr	r2, [r7, #16]
 800b75c:	4313      	orrs	r3, r2
 800b75e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	4a12      	ldr	r2, [pc, #72]	; (800b7ac <TIM_OC4_SetConfig+0xa4>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d003      	beq.n	800b770 <TIM_OC4_SetConfig+0x68>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	4a11      	ldr	r2, [pc, #68]	; (800b7b0 <TIM_OC4_SetConfig+0xa8>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d109      	bne.n	800b784 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b776:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	695b      	ldr	r3, [r3, #20]
 800b77c:	019b      	lsls	r3, r3, #6
 800b77e:	697a      	ldr	r2, [r7, #20]
 800b780:	4313      	orrs	r3, r2
 800b782:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	697a      	ldr	r2, [r7, #20]
 800b788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	685a      	ldr	r2, [r3, #4]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	693a      	ldr	r2, [r7, #16]
 800b79c:	621a      	str	r2, [r3, #32]
}
 800b79e:	bf00      	nop
 800b7a0:	371c      	adds	r7, #28
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr
 800b7aa:	bf00      	nop
 800b7ac:	40010000 	.word	0x40010000
 800b7b0:	40010400 	.word	0x40010400

0800b7b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b087      	sub	sp, #28
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	6a1b      	ldr	r3, [r3, #32]
 800b7c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	6a1b      	ldr	r3, [r3, #32]
 800b7ca:	f023 0201 	bic.w	r2, r3, #1
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	699b      	ldr	r3, [r3, #24]
 800b7d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b7de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	011b      	lsls	r3, r3, #4
 800b7e4:	693a      	ldr	r2, [r7, #16]
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	f023 030a 	bic.w	r3, r3, #10
 800b7f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b7f2:	697a      	ldr	r2, [r7, #20]
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	693a      	ldr	r2, [r7, #16]
 800b7fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	697a      	ldr	r2, [r7, #20]
 800b804:	621a      	str	r2, [r3, #32]
}
 800b806:	bf00      	nop
 800b808:	371c      	adds	r7, #28
 800b80a:	46bd      	mov	sp, r7
 800b80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b810:	4770      	bx	lr

0800b812 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b812:	b480      	push	{r7}
 800b814:	b087      	sub	sp, #28
 800b816:	af00      	add	r7, sp, #0
 800b818:	60f8      	str	r0, [r7, #12]
 800b81a:	60b9      	str	r1, [r7, #8]
 800b81c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	6a1b      	ldr	r3, [r3, #32]
 800b822:	f023 0210 	bic.w	r2, r3, #16
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	699b      	ldr	r3, [r3, #24]
 800b82e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6a1b      	ldr	r3, [r3, #32]
 800b834:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b83c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	031b      	lsls	r3, r3, #12
 800b842:	697a      	ldr	r2, [r7, #20]
 800b844:	4313      	orrs	r3, r2
 800b846:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b84e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	011b      	lsls	r3, r3, #4
 800b854:	693a      	ldr	r2, [r7, #16]
 800b856:	4313      	orrs	r3, r2
 800b858:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	697a      	ldr	r2, [r7, #20]
 800b85e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	693a      	ldr	r2, [r7, #16]
 800b864:	621a      	str	r2, [r3, #32]
}
 800b866:	bf00      	nop
 800b868:	371c      	adds	r7, #28
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr

0800b872 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b872:	b480      	push	{r7}
 800b874:	b085      	sub	sp, #20
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
 800b87a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	689b      	ldr	r3, [r3, #8]
 800b880:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b88a:	683a      	ldr	r2, [r7, #0]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	4313      	orrs	r3, r2
 800b890:	f043 0307 	orr.w	r3, r3, #7
 800b894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	68fa      	ldr	r2, [r7, #12]
 800b89a:	609a      	str	r2, [r3, #8]
}
 800b89c:	bf00      	nop
 800b89e:	3714      	adds	r7, #20
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr

0800b8a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b087      	sub	sp, #28
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	607a      	str	r2, [r7, #4]
 800b8b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	689b      	ldr	r3, [r3, #8]
 800b8ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b8c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	021a      	lsls	r2, r3, #8
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	431a      	orrs	r2, r3
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	697a      	ldr	r2, [r7, #20]
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	697a      	ldr	r2, [r7, #20]
 800b8da:	609a      	str	r2, [r3, #8]
}
 800b8dc:	bf00      	nop
 800b8de:	371c      	adds	r7, #28
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b087      	sub	sp, #28
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	f003 031f 	and.w	r3, r3, #31
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b900:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6a1a      	ldr	r2, [r3, #32]
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	43db      	mvns	r3, r3
 800b90a:	401a      	ands	r2, r3
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	6a1a      	ldr	r2, [r3, #32]
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	f003 031f 	and.w	r3, r3, #31
 800b91a:	6879      	ldr	r1, [r7, #4]
 800b91c:	fa01 f303 	lsl.w	r3, r1, r3
 800b920:	431a      	orrs	r2, r3
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	621a      	str	r2, [r3, #32]
}
 800b926:	bf00      	nop
 800b928:	371c      	adds	r7, #28
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr
	...

0800b934 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b934:	b480      	push	{r7}
 800b936:	b085      	sub	sp, #20
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b944:	2b01      	cmp	r3, #1
 800b946:	d101      	bne.n	800b94c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b948:	2302      	movs	r3, #2
 800b94a:	e05a      	b.n	800ba02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2201      	movs	r2, #1
 800b950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2202      	movs	r2, #2
 800b958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	689b      	ldr	r3, [r3, #8]
 800b96a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b972:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	4313      	orrs	r3, r2
 800b97c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	68fa      	ldr	r2, [r7, #12]
 800b984:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a21      	ldr	r2, [pc, #132]	; (800ba10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d022      	beq.n	800b9d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b998:	d01d      	beq.n	800b9d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4a1d      	ldr	r2, [pc, #116]	; (800ba14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d018      	beq.n	800b9d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4a1b      	ldr	r2, [pc, #108]	; (800ba18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d013      	beq.n	800b9d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4a1a      	ldr	r2, [pc, #104]	; (800ba1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d00e      	beq.n	800b9d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4a18      	ldr	r2, [pc, #96]	; (800ba20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d009      	beq.n	800b9d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a17      	ldr	r2, [pc, #92]	; (800ba24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d004      	beq.n	800b9d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a15      	ldr	r2, [pc, #84]	; (800ba28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d10c      	bne.n	800b9f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	68ba      	ldr	r2, [r7, #8]
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba00:	2300      	movs	r3, #0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3714      	adds	r7, #20
 800ba06:	46bd      	mov	sp, r7
 800ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0c:	4770      	bx	lr
 800ba0e:	bf00      	nop
 800ba10:	40010000 	.word	0x40010000
 800ba14:	40000400 	.word	0x40000400
 800ba18:	40000800 	.word	0x40000800
 800ba1c:	40000c00 	.word	0x40000c00
 800ba20:	40010400 	.word	0x40010400
 800ba24:	40014000 	.word	0x40014000
 800ba28:	40001800 	.word	0x40001800

0800ba2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ba34:	bf00      	nop
 800ba36:	370c      	adds	r7, #12
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b083      	sub	sp, #12
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ba48:	bf00      	nop
 800ba4a:	370c      	adds	r7, #12
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr

0800ba54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b082      	sub	sp, #8
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d101      	bne.n	800ba66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba62:	2301      	movs	r3, #1
 800ba64:	e03f      	b.n	800bae6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d106      	bne.n	800ba80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2200      	movs	r2, #0
 800ba76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f7fa fe3e 	bl	80066fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2224      	movs	r2, #36	; 0x24
 800ba84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	68da      	ldr	r2, [r3, #12]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ba96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 fdd9 	bl	800c650 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	691a      	ldr	r2, [r3, #16]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800baac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	695a      	ldr	r2, [r3, #20]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800babc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	68da      	ldr	r2, [r3, #12]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bacc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2220      	movs	r2, #32
 800bad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2220      	movs	r2, #32
 800bae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3708      	adds	r7, #8
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b08a      	sub	sp, #40	; 0x28
 800baf2:	af02      	add	r7, sp, #8
 800baf4:	60f8      	str	r0, [r7, #12]
 800baf6:	60b9      	str	r1, [r7, #8]
 800baf8:	603b      	str	r3, [r7, #0]
 800bafa:	4613      	mov	r3, r2
 800bafc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bafe:	2300      	movs	r3, #0
 800bb00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb08:	b2db      	uxtb	r3, r3
 800bb0a:	2b20      	cmp	r3, #32
 800bb0c:	d17c      	bne.n	800bc08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d002      	beq.n	800bb1a <HAL_UART_Transmit+0x2c>
 800bb14:	88fb      	ldrh	r3, [r7, #6]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d101      	bne.n	800bb1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	e075      	b.n	800bc0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d101      	bne.n	800bb2c <HAL_UART_Transmit+0x3e>
 800bb28:	2302      	movs	r3, #2
 800bb2a:	e06e      	b.n	800bc0a <HAL_UART_Transmit+0x11c>
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2201      	movs	r2, #1
 800bb30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2200      	movs	r2, #0
 800bb38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2221      	movs	r2, #33	; 0x21
 800bb3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bb42:	f7fb f879 	bl	8006c38 <HAL_GetTick>
 800bb46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	88fa      	ldrh	r2, [r7, #6]
 800bb4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	88fa      	ldrh	r2, [r7, #6]
 800bb52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb5c:	d108      	bne.n	800bb70 <HAL_UART_Transmit+0x82>
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	691b      	ldr	r3, [r3, #16]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d104      	bne.n	800bb70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800bb66:	2300      	movs	r3, #0
 800bb68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	61bb      	str	r3, [r7, #24]
 800bb6e:	e003      	b.n	800bb78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bb74:	2300      	movs	r3, #0
 800bb76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800bb80:	e02a      	b.n	800bbd8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	9300      	str	r3, [sp, #0]
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	2180      	movs	r1, #128	; 0x80
 800bb8c:	68f8      	ldr	r0, [r7, #12]
 800bb8e:	f000 fb5b 	bl	800c248 <UART_WaitOnFlagUntilTimeout>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d001      	beq.n	800bb9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800bb98:	2303      	movs	r3, #3
 800bb9a:	e036      	b.n	800bc0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d10b      	bne.n	800bbba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bba2:	69bb      	ldr	r3, [r7, #24]
 800bba4:	881b      	ldrh	r3, [r3, #0]
 800bba6:	461a      	mov	r2, r3
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bbb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bbb2:	69bb      	ldr	r3, [r7, #24]
 800bbb4:	3302      	adds	r3, #2
 800bbb6:	61bb      	str	r3, [r7, #24]
 800bbb8:	e007      	b.n	800bbca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bbba:	69fb      	ldr	r3, [r7, #28]
 800bbbc:	781a      	ldrb	r2, [r3, #0]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bbc4:	69fb      	ldr	r3, [r7, #28]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	3b01      	subs	r3, #1
 800bbd2:	b29a      	uxth	r2, r3
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d1cf      	bne.n	800bb82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	9300      	str	r3, [sp, #0]
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	2140      	movs	r1, #64	; 0x40
 800bbec:	68f8      	ldr	r0, [r7, #12]
 800bbee:	f000 fb2b 	bl	800c248 <UART_WaitOnFlagUntilTimeout>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d001      	beq.n	800bbfc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bbf8:	2303      	movs	r3, #3
 800bbfa:	e006      	b.n	800bc0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2220      	movs	r2, #32
 800bc00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bc04:	2300      	movs	r3, #0
 800bc06:	e000      	b.n	800bc0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bc08:	2302      	movs	r3, #2
  }
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3720      	adds	r7, #32
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}

0800bc12 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc12:	b580      	push	{r7, lr}
 800bc14:	b084      	sub	sp, #16
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	60f8      	str	r0, [r7, #12]
 800bc1a:	60b9      	str	r1, [r7, #8]
 800bc1c:	4613      	mov	r3, r2
 800bc1e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	2b20      	cmp	r3, #32
 800bc2a:	d11d      	bne.n	800bc68 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d002      	beq.n	800bc38 <HAL_UART_Receive_DMA+0x26>
 800bc32:	88fb      	ldrh	r3, [r7, #6]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d101      	bne.n	800bc3c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	e016      	b.n	800bc6a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d101      	bne.n	800bc4a <HAL_UART_Receive_DMA+0x38>
 800bc46:	2302      	movs	r3, #2
 800bc48:	e00f      	b.n	800bc6a <HAL_UART_Receive_DMA+0x58>
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2201      	movs	r2, #1
 800bc4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2200      	movs	r2, #0
 800bc56:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800bc58:	88fb      	ldrh	r3, [r7, #6]
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	68b9      	ldr	r1, [r7, #8]
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	f000 fb3c 	bl	800c2dc <UART_Start_Receive_DMA>
 800bc64:	4603      	mov	r3, r0
 800bc66:	e000      	b.n	800bc6a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bc68:	2302      	movs	r3, #2
  }
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3710      	adds	r7, #16
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b084      	sub	sp, #16
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	695b      	ldr	r3, [r3, #20]
 800bc84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc88:	2b80      	cmp	r3, #128	; 0x80
 800bc8a:	bf0c      	ite	eq
 800bc8c:	2301      	moveq	r3, #1
 800bc8e:	2300      	movne	r3, #0
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	2b21      	cmp	r3, #33	; 0x21
 800bc9e:	d116      	bne.n	800bcce <HAL_UART_DMAStop+0x5c>
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d013      	beq.n	800bcce <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	695a      	ldr	r2, [r3, #20]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bcb4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d004      	beq.n	800bcc8 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7fc f832 	bl	8007d2c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f000 fb6b 	bl	800c3a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	695b      	ldr	r3, [r3, #20]
 800bcd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcd8:	2b40      	cmp	r3, #64	; 0x40
 800bcda:	bf0c      	ite	eq
 800bcdc:	2301      	moveq	r3, #1
 800bcde:	2300      	movne	r3, #0
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	2b22      	cmp	r3, #34	; 0x22
 800bcee:	d116      	bne.n	800bd1e <HAL_UART_DMAStop+0xac>
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d013      	beq.n	800bd1e <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	695a      	ldr	r2, [r3, #20]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd04:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d004      	beq.n	800bd18 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7fc f80a 	bl	8007d2c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 fb59 	bl	800c3d0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800bd1e:	2300      	movs	r3, #0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3710      	adds	r7, #16
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b08a      	sub	sp, #40	; 0x28
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	695b      	ldr	r3, [r3, #20]
 800bd46:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd52:	f003 030f 	and.w	r3, r3, #15
 800bd56:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800bd58:	69bb      	ldr	r3, [r7, #24]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d10d      	bne.n	800bd7a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd60:	f003 0320 	and.w	r3, r3, #32
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d008      	beq.n	800bd7a <HAL_UART_IRQHandler+0x52>
 800bd68:	6a3b      	ldr	r3, [r7, #32]
 800bd6a:	f003 0320 	and.w	r3, r3, #32
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d003      	beq.n	800bd7a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 fbd5 	bl	800c522 <UART_Receive_IT>
      return;
 800bd78:	e17c      	b.n	800c074 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	f000 80b1 	beq.w	800bee4 <HAL_UART_IRQHandler+0x1bc>
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	f003 0301 	and.w	r3, r3, #1
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d105      	bne.n	800bd98 <HAL_UART_IRQHandler+0x70>
 800bd8c:	6a3b      	ldr	r3, [r7, #32]
 800bd8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	f000 80a6 	beq.w	800bee4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9a:	f003 0301 	and.w	r3, r3, #1
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d00a      	beq.n	800bdb8 <HAL_UART_IRQHandler+0x90>
 800bda2:	6a3b      	ldr	r3, [r7, #32]
 800bda4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d005      	beq.n	800bdb8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdb0:	f043 0201 	orr.w	r2, r3, #1
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdba:	f003 0304 	and.w	r3, r3, #4
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d00a      	beq.n	800bdd8 <HAL_UART_IRQHandler+0xb0>
 800bdc2:	69fb      	ldr	r3, [r7, #28]
 800bdc4:	f003 0301 	and.w	r3, r3, #1
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d005      	beq.n	800bdd8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdd0:	f043 0202 	orr.w	r2, r3, #2
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdda:	f003 0302 	and.w	r3, r3, #2
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d00a      	beq.n	800bdf8 <HAL_UART_IRQHandler+0xd0>
 800bde2:	69fb      	ldr	r3, [r7, #28]
 800bde4:	f003 0301 	and.w	r3, r3, #1
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d005      	beq.n	800bdf8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdf0:	f043 0204 	orr.w	r2, r3, #4
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800bdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfa:	f003 0308 	and.w	r3, r3, #8
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d00f      	beq.n	800be22 <HAL_UART_IRQHandler+0xfa>
 800be02:	6a3b      	ldr	r3, [r7, #32]
 800be04:	f003 0320 	and.w	r3, r3, #32
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d104      	bne.n	800be16 <HAL_UART_IRQHandler+0xee>
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	f003 0301 	and.w	r3, r3, #1
 800be12:	2b00      	cmp	r3, #0
 800be14:	d005      	beq.n	800be22 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be1a:	f043 0208 	orr.w	r2, r3, #8
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be26:	2b00      	cmp	r3, #0
 800be28:	f000 811f 	beq.w	800c06a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800be2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be2e:	f003 0320 	and.w	r3, r3, #32
 800be32:	2b00      	cmp	r3, #0
 800be34:	d007      	beq.n	800be46 <HAL_UART_IRQHandler+0x11e>
 800be36:	6a3b      	ldr	r3, [r7, #32]
 800be38:	f003 0320 	and.w	r3, r3, #32
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d002      	beq.n	800be46 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 fb6e 	bl	800c522 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	695b      	ldr	r3, [r3, #20]
 800be4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be50:	2b40      	cmp	r3, #64	; 0x40
 800be52:	bf0c      	ite	eq
 800be54:	2301      	moveq	r3, #1
 800be56:	2300      	movne	r3, #0
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be60:	f003 0308 	and.w	r3, r3, #8
 800be64:	2b00      	cmp	r3, #0
 800be66:	d102      	bne.n	800be6e <HAL_UART_IRQHandler+0x146>
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d031      	beq.n	800bed2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 faae 	bl	800c3d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	695b      	ldr	r3, [r3, #20]
 800be7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be7e:	2b40      	cmp	r3, #64	; 0x40
 800be80:	d123      	bne.n	800beca <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	695a      	ldr	r2, [r3, #20]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be90:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be96:	2b00      	cmp	r3, #0
 800be98:	d013      	beq.n	800bec2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be9e:	4a77      	ldr	r2, [pc, #476]	; (800c07c <HAL_UART_IRQHandler+0x354>)
 800bea0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7fb ffb0 	bl	8007e0c <HAL_DMA_Abort_IT>
 800beac:	4603      	mov	r3, r0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d016      	beq.n	800bee0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bebc:	4610      	mov	r0, r2
 800bebe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bec0:	e00e      	b.n	800bee0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 f8fa 	bl	800c0bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bec8:	e00a      	b.n	800bee0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 f8f6 	bl	800c0bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bed0:	e006      	b.n	800bee0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 f8f2 	bl	800c0bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800bede:	e0c4      	b.n	800c06a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bee0:	bf00      	nop
    return;
 800bee2:	e0c2      	b.n	800c06a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bee8:	2b01      	cmp	r3, #1
 800beea:	f040 80a2 	bne.w	800c032 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800beee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef0:	f003 0310 	and.w	r3, r3, #16
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	f000 809c 	beq.w	800c032 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800befa:	6a3b      	ldr	r3, [r7, #32]
 800befc:	f003 0310 	and.w	r3, r3, #16
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f000 8096 	beq.w	800c032 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf06:	2300      	movs	r3, #0
 800bf08:	60fb      	str	r3, [r7, #12]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	60fb      	str	r3, [r7, #12]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	60fb      	str	r3, [r7, #12]
 800bf1a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	695b      	ldr	r3, [r3, #20]
 800bf22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf26:	2b40      	cmp	r3, #64	; 0x40
 800bf28:	d14f      	bne.n	800bfca <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800bf34:	8a3b      	ldrh	r3, [r7, #16]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	f000 8099 	beq.w	800c06e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bf40:	8a3a      	ldrh	r2, [r7, #16]
 800bf42:	429a      	cmp	r2, r3
 800bf44:	f080 8093 	bcs.w	800c06e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	8a3a      	ldrh	r2, [r7, #16]
 800bf4c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf52:	69db      	ldr	r3, [r3, #28]
 800bf54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf58:	d02b      	beq.n	800bfb2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	68da      	ldr	r2, [r3, #12]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bf68:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	695a      	ldr	r2, [r3, #20]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f022 0201 	bic.w	r2, r2, #1
 800bf78:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	695a      	ldr	r2, [r3, #20]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf88:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2220      	movs	r2, #32
 800bf8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2200      	movs	r2, #0
 800bf96:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	68da      	ldr	r2, [r3, #12]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f022 0210 	bic.w	r2, r2, #16
 800bfa6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfac:	4618      	mov	r0, r3
 800bfae:	f7fb febd 	bl	8007d2c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bfba:	b29b      	uxth	r3, r3
 800bfbc:	1ad3      	subs	r3, r2, r3
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 f884 	bl	800c0d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800bfc8:	e051      	b.n	800c06e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	1ad3      	subs	r3, r2, r3
 800bfd6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d047      	beq.n	800c072 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800bfe2:	8a7b      	ldrh	r3, [r7, #18]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d044      	beq.n	800c072 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	68da      	ldr	r2, [r3, #12]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bff6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	695a      	ldr	r2, [r3, #20]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f022 0201 	bic.w	r2, r2, #1
 800c006:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2220      	movs	r2, #32
 800c00c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2200      	movs	r2, #0
 800c014:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	68da      	ldr	r2, [r3, #12]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f022 0210 	bic.w	r2, r2, #16
 800c024:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c026:	8a7b      	ldrh	r3, [r7, #18]
 800c028:	4619      	mov	r1, r3
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 f850 	bl	800c0d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800c030:	e01f      	b.n	800c072 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d008      	beq.n	800c04e <HAL_UART_IRQHandler+0x326>
 800c03c:	6a3b      	ldr	r3, [r7, #32]
 800c03e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c042:	2b00      	cmp	r3, #0
 800c044:	d003      	beq.n	800c04e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 fa03 	bl	800c452 <UART_Transmit_IT>
    return;
 800c04c:	e012      	b.n	800c074 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c054:	2b00      	cmp	r3, #0
 800c056:	d00d      	beq.n	800c074 <HAL_UART_IRQHandler+0x34c>
 800c058:	6a3b      	ldr	r3, [r7, #32]
 800c05a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d008      	beq.n	800c074 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 fa45 	bl	800c4f2 <UART_EndTransmit_IT>
    return;
 800c068:	e004      	b.n	800c074 <HAL_UART_IRQHandler+0x34c>
    return;
 800c06a:	bf00      	nop
 800c06c:	e002      	b.n	800c074 <HAL_UART_IRQHandler+0x34c>
      return;
 800c06e:	bf00      	nop
 800c070:	e000      	b.n	800c074 <HAL_UART_IRQHandler+0x34c>
      return;
 800c072:	bf00      	nop
  }
}
 800c074:	3728      	adds	r7, #40	; 0x28
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	0800c42b 	.word	0x0800c42b

0800c080 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c080:	b480      	push	{r7}
 800c082:	b083      	sub	sp, #12
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c088:	bf00      	nop
 800c08a:	370c      	adds	r7, #12
 800c08c:	46bd      	mov	sp, r7
 800c08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c092:	4770      	bx	lr

0800c094 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c094:	b480      	push	{r7}
 800c096:	b083      	sub	sp, #12
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c09c:	bf00      	nop
 800c09e:	370c      	adds	r7, #12
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr

0800c0a8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c0b0:	bf00      	nop
 800c0b2:	370c      	adds	r7, #12
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr

0800c0bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c0c4:	bf00      	nop
 800c0c6:	370c      	adds	r7, #12
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr

0800c0d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b083      	sub	sp, #12
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	460b      	mov	r3, r1
 800c0da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c0dc:	bf00      	nop
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0f4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c100:	2b00      	cmp	r3, #0
 800c102:	d12a      	bne.n	800c15a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2200      	movs	r2, #0
 800c108:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	68da      	ldr	r2, [r3, #12]
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c118:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	695a      	ldr	r2, [r3, #20]
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f022 0201 	bic.w	r2, r2, #1
 800c128:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	695a      	ldr	r2, [r3, #20]
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c138:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2220      	movs	r2, #32
 800c13e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c146:	2b01      	cmp	r3, #1
 800c148:	d107      	bne.n	800c15a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	68da      	ldr	r2, [r3, #12]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f022 0210 	bic.w	r2, r2, #16
 800c158:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c15e:	2b01      	cmp	r3, #1
 800c160:	d106      	bne.n	800c170 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c166:	4619      	mov	r1, r3
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	f7ff ffb1 	bl	800c0d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c16e:	e002      	b.n	800c176 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800c170:	68f8      	ldr	r0, [r7, #12]
 800c172:	f7ff ff8f 	bl	800c094 <HAL_UART_RxCpltCallback>
}
 800c176:	bf00      	nop
 800c178:	3710      	adds	r7, #16
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}

0800c17e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	b084      	sub	sp, #16
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c18a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c190:	2b01      	cmp	r3, #1
 800c192:	d108      	bne.n	800c1a6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c198:	085b      	lsrs	r3, r3, #1
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	4619      	mov	r1, r3
 800c19e:	68f8      	ldr	r0, [r7, #12]
 800c1a0:	f7ff ff96 	bl	800c0d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c1a4:	e002      	b.n	800c1ac <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800c1a6:	68f8      	ldr	r0, [r7, #12]
 800c1a8:	f7ff ff7e 	bl	800c0a8 <HAL_UART_RxHalfCpltCallback>
}
 800c1ac:	bf00      	nop
 800c1ae:	3710      	adds	r7, #16
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1c4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	695b      	ldr	r3, [r3, #20]
 800c1cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1d0:	2b80      	cmp	r3, #128	; 0x80
 800c1d2:	bf0c      	ite	eq
 800c1d4:	2301      	moveq	r3, #1
 800c1d6:	2300      	movne	r3, #0
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	2b21      	cmp	r3, #33	; 0x21
 800c1e6:	d108      	bne.n	800c1fa <UART_DMAError+0x46>
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d005      	beq.n	800c1fa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c1f4:	68b8      	ldr	r0, [r7, #8]
 800c1f6:	f000 f8d5 	bl	800c3a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	695b      	ldr	r3, [r3, #20]
 800c200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c204:	2b40      	cmp	r3, #64	; 0x40
 800c206:	bf0c      	ite	eq
 800c208:	2301      	moveq	r3, #1
 800c20a:	2300      	movne	r3, #0
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c216:	b2db      	uxtb	r3, r3
 800c218:	2b22      	cmp	r3, #34	; 0x22
 800c21a:	d108      	bne.n	800c22e <UART_DMAError+0x7a>
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d005      	beq.n	800c22e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	2200      	movs	r2, #0
 800c226:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c228:	68b8      	ldr	r0, [r7, #8]
 800c22a:	f000 f8d1 	bl	800c3d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c232:	f043 0210 	orr.w	r2, r3, #16
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c23a:	68b8      	ldr	r0, [r7, #8]
 800c23c:	f7ff ff3e 	bl	800c0bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c240:	bf00      	nop
 800c242:	3710      	adds	r7, #16
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	603b      	str	r3, [r7, #0]
 800c254:	4613      	mov	r3, r2
 800c256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c258:	e02c      	b.n	800c2b4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c25a:	69bb      	ldr	r3, [r7, #24]
 800c25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c260:	d028      	beq.n	800c2b4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d007      	beq.n	800c278 <UART_WaitOnFlagUntilTimeout+0x30>
 800c268:	f7fa fce6 	bl	8006c38 <HAL_GetTick>
 800c26c:	4602      	mov	r2, r0
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	1ad3      	subs	r3, r2, r3
 800c272:	69ba      	ldr	r2, [r7, #24]
 800c274:	429a      	cmp	r2, r3
 800c276:	d21d      	bcs.n	800c2b4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	68da      	ldr	r2, [r3, #12]
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c286:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	695a      	ldr	r2, [r3, #20]
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f022 0201 	bic.w	r2, r2, #1
 800c296:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2220      	movs	r2, #32
 800c29c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2220      	movs	r2, #32
 800c2a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c2b0:	2303      	movs	r3, #3
 800c2b2:	e00f      	b.n	800c2d4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	4013      	ands	r3, r2
 800c2be:	68ba      	ldr	r2, [r7, #8]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	bf0c      	ite	eq
 800c2c4:	2301      	moveq	r3, #1
 800c2c6:	2300      	movne	r3, #0
 800c2c8:	b2db      	uxtb	r3, r3
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	79fb      	ldrb	r3, [r7, #7]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d0c3      	beq.n	800c25a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c2d2:	2300      	movs	r3, #0
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3710      	adds	r7, #16
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b086      	sub	sp, #24
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800c2ea:	68ba      	ldr	r2, [r7, #8]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	88fa      	ldrh	r2, [r7, #6]
 800c2f4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2222      	movs	r2, #34	; 0x22
 800c300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c308:	4a23      	ldr	r2, [pc, #140]	; (800c398 <UART_Start_Receive_DMA+0xbc>)
 800c30a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c310:	4a22      	ldr	r2, [pc, #136]	; (800c39c <UART_Start_Receive_DMA+0xc0>)
 800c312:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c318:	4a21      	ldr	r2, [pc, #132]	; (800c3a0 <UART_Start_Receive_DMA+0xc4>)
 800c31a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c320:	2200      	movs	r2, #0
 800c322:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800c324:	f107 0308 	add.w	r3, r7, #8
 800c328:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	3304      	adds	r3, #4
 800c334:	4619      	mov	r1, r3
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	681a      	ldr	r2, [r3, #0]
 800c33a:	88fb      	ldrh	r3, [r7, #6]
 800c33c:	f7fb fc9e 	bl	8007c7c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800c340:	2300      	movs	r3, #0
 800c342:	613b      	str	r3, [r7, #16]
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	613b      	str	r3, [r7, #16]
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	613b      	str	r3, [r7, #16]
 800c354:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2200      	movs	r2, #0
 800c35a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	68da      	ldr	r2, [r3, #12]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c36c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	695a      	ldr	r2, [r3, #20]
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f042 0201 	orr.w	r2, r2, #1
 800c37c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	695a      	ldr	r2, [r3, #20]
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c38c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800c38e:	2300      	movs	r3, #0
}
 800c390:	4618      	mov	r0, r3
 800c392:	3718      	adds	r7, #24
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}
 800c398:	0800c0e9 	.word	0x0800c0e9
 800c39c:	0800c17f 	.word	0x0800c17f
 800c3a0:	0800c1b5 	.word	0x0800c1b5

0800c3a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	68da      	ldr	r2, [r3, #12]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c3ba:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2220      	movs	r2, #32
 800c3c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800c3c4:	bf00      	nop
 800c3c6:	370c      	adds	r7, #12
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr

0800c3d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	68da      	ldr	r2, [r3, #12]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c3e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	695a      	ldr	r2, [r3, #20]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f022 0201 	bic.w	r2, r2, #1
 800c3f6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d107      	bne.n	800c410 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	68da      	ldr	r2, [r3, #12]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f022 0210 	bic.w	r2, r2, #16
 800c40e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2220      	movs	r2, #32
 800c414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2200      	movs	r2, #0
 800c41c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c41e:	bf00      	nop
 800c420:	370c      	adds	r7, #12
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr

0800c42a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b084      	sub	sp, #16
 800c42e:	af00      	add	r7, sp, #0
 800c430:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c436:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2200      	movs	r2, #0
 800c43c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2200      	movs	r2, #0
 800c442:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c444:	68f8      	ldr	r0, [r7, #12]
 800c446:	f7ff fe39 	bl	800c0bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c44a:	bf00      	nop
 800c44c:	3710      	adds	r7, #16
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}

0800c452 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c452:	b480      	push	{r7}
 800c454:	b085      	sub	sp, #20
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c460:	b2db      	uxtb	r3, r3
 800c462:	2b21      	cmp	r3, #33	; 0x21
 800c464:	d13e      	bne.n	800c4e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	689b      	ldr	r3, [r3, #8]
 800c46a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c46e:	d114      	bne.n	800c49a <UART_Transmit_IT+0x48>
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	691b      	ldr	r3, [r3, #16]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d110      	bne.n	800c49a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6a1b      	ldr	r3, [r3, #32]
 800c47c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	881b      	ldrh	r3, [r3, #0]
 800c482:	461a      	mov	r2, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c48c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6a1b      	ldr	r3, [r3, #32]
 800c492:	1c9a      	adds	r2, r3, #2
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	621a      	str	r2, [r3, #32]
 800c498:	e008      	b.n	800c4ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6a1b      	ldr	r3, [r3, #32]
 800c49e:	1c59      	adds	r1, r3, #1
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	6211      	str	r1, [r2, #32]
 800c4a4:	781a      	ldrb	r2, [r3, #0]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c4b0:	b29b      	uxth	r3, r3
 800c4b2:	3b01      	subs	r3, #1
 800c4b4:	b29b      	uxth	r3, r3
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d10f      	bne.n	800c4e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	68da      	ldr	r2, [r3, #12]
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c4ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	68da      	ldr	r2, [r3, #12]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c4de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	e000      	b.n	800c4e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c4e4:	2302      	movs	r3, #2
  }
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3714      	adds	r7, #20
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr

0800c4f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b082      	sub	sp, #8
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	68da      	ldr	r2, [r3, #12]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c508:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2220      	movs	r2, #32
 800c50e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f7ff fdb4 	bl	800c080 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c518:	2300      	movs	r3, #0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3708      	adds	r7, #8
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}

0800c522 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c522:	b580      	push	{r7, lr}
 800c524:	b084      	sub	sp, #16
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c530:	b2db      	uxtb	r3, r3
 800c532:	2b22      	cmp	r3, #34	; 0x22
 800c534:	f040 8087 	bne.w	800c646 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	689b      	ldr	r3, [r3, #8]
 800c53c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c540:	d117      	bne.n	800c572 <UART_Receive_IT+0x50>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	691b      	ldr	r3, [r3, #16]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d113      	bne.n	800c572 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c54a:	2300      	movs	r3, #0
 800c54c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c552:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c560:	b29a      	uxth	r2, r3
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c56a:	1c9a      	adds	r2, r3, #2
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	629a      	str	r2, [r3, #40]	; 0x28
 800c570:	e026      	b.n	800c5c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c576:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800c578:	2300      	movs	r3, #0
 800c57a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	689b      	ldr	r3, [r3, #8]
 800c580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c584:	d007      	beq.n	800c596 <UART_Receive_IT+0x74>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d10a      	bne.n	800c5a4 <UART_Receive_IT+0x82>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	691b      	ldr	r3, [r3, #16]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d106      	bne.n	800c5a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	685b      	ldr	r3, [r3, #4]
 800c59c:	b2da      	uxtb	r2, r3
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	701a      	strb	r2, [r3, #0]
 800c5a2:	e008      	b.n	800c5b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5b0:	b2da      	uxtb	r2, r3
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ba:	1c5a      	adds	r2, r3, #1
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	3b01      	subs	r3, #1
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d136      	bne.n	800c642 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	68da      	ldr	r2, [r3, #12]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f022 0220 	bic.w	r2, r2, #32
 800c5e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	68da      	ldr	r2, [r3, #12]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c5f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	695a      	ldr	r2, [r3, #20]
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f022 0201 	bic.w	r2, r2, #1
 800c602:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2220      	movs	r2, #32
 800c608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c610:	2b01      	cmp	r3, #1
 800c612:	d10e      	bne.n	800c632 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	68da      	ldr	r2, [r3, #12]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f022 0210 	bic.w	r2, r2, #16
 800c622:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c628:	4619      	mov	r1, r3
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f7ff fd50 	bl	800c0d0 <HAL_UARTEx_RxEventCallback>
 800c630:	e002      	b.n	800c638 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f7ff fd2e 	bl	800c094 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2200      	movs	r2, #0
 800c63c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800c63e:	2300      	movs	r3, #0
 800c640:	e002      	b.n	800c648 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800c642:	2300      	movs	r3, #0
 800c644:	e000      	b.n	800c648 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800c646:	2302      	movs	r3, #2
  }
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3710      	adds	r7, #16
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c654:	b09f      	sub	sp, #124	; 0x7c
 800c656:	af00      	add	r7, sp, #0
 800c658:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c65a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	691b      	ldr	r3, [r3, #16]
 800c660:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c666:	68d9      	ldr	r1, [r3, #12]
 800c668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	ea40 0301 	orr.w	r3, r0, r1
 800c670:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c674:	689a      	ldr	r2, [r3, #8]
 800c676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c678:	691b      	ldr	r3, [r3, #16]
 800c67a:	431a      	orrs	r2, r3
 800c67c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c67e:	695b      	ldr	r3, [r3, #20]
 800c680:	431a      	orrs	r2, r3
 800c682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c684:	69db      	ldr	r3, [r3, #28]
 800c686:	4313      	orrs	r3, r2
 800c688:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800c68a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	68db      	ldr	r3, [r3, #12]
 800c690:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c694:	f021 010c 	bic.w	r1, r1, #12
 800c698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c69a:	681a      	ldr	r2, [r3, #0]
 800c69c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c69e:	430b      	orrs	r3, r1
 800c6a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c6a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	695b      	ldr	r3, [r3, #20]
 800c6a8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c6ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c6ae:	6999      	ldr	r1, [r3, #24]
 800c6b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	ea40 0301 	orr.w	r3, r0, r1
 800c6b8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c6ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c6bc:	681a      	ldr	r2, [r3, #0]
 800c6be:	4bc5      	ldr	r3, [pc, #788]	; (800c9d4 <UART_SetConfig+0x384>)
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d004      	beq.n	800c6ce <UART_SetConfig+0x7e>
 800c6c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c6c6:	681a      	ldr	r2, [r3, #0]
 800c6c8:	4bc3      	ldr	r3, [pc, #780]	; (800c9d8 <UART_SetConfig+0x388>)
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d103      	bne.n	800c6d6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c6ce:	f7fd fdbd 	bl	800a24c <HAL_RCC_GetPCLK2Freq>
 800c6d2:	6778      	str	r0, [r7, #116]	; 0x74
 800c6d4:	e002      	b.n	800c6dc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c6d6:	f7fd fda5 	bl	800a224 <HAL_RCC_GetPCLK1Freq>
 800c6da:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c6dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c6de:	69db      	ldr	r3, [r3, #28]
 800c6e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6e4:	f040 80b6 	bne.w	800c854 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c6e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c6ea:	461c      	mov	r4, r3
 800c6ec:	f04f 0500 	mov.w	r5, #0
 800c6f0:	4622      	mov	r2, r4
 800c6f2:	462b      	mov	r3, r5
 800c6f4:	1891      	adds	r1, r2, r2
 800c6f6:	6439      	str	r1, [r7, #64]	; 0x40
 800c6f8:	415b      	adcs	r3, r3
 800c6fa:	647b      	str	r3, [r7, #68]	; 0x44
 800c6fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c700:	1912      	adds	r2, r2, r4
 800c702:	eb45 0303 	adc.w	r3, r5, r3
 800c706:	f04f 0000 	mov.w	r0, #0
 800c70a:	f04f 0100 	mov.w	r1, #0
 800c70e:	00d9      	lsls	r1, r3, #3
 800c710:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c714:	00d0      	lsls	r0, r2, #3
 800c716:	4602      	mov	r2, r0
 800c718:	460b      	mov	r3, r1
 800c71a:	1911      	adds	r1, r2, r4
 800c71c:	6639      	str	r1, [r7, #96]	; 0x60
 800c71e:	416b      	adcs	r3, r5
 800c720:	667b      	str	r3, [r7, #100]	; 0x64
 800c722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	461a      	mov	r2, r3
 800c728:	f04f 0300 	mov.w	r3, #0
 800c72c:	1891      	adds	r1, r2, r2
 800c72e:	63b9      	str	r1, [r7, #56]	; 0x38
 800c730:	415b      	adcs	r3, r3
 800c732:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c734:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c738:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800c73c:	f7f3 fdb0 	bl	80002a0 <__aeabi_uldivmod>
 800c740:	4602      	mov	r2, r0
 800c742:	460b      	mov	r3, r1
 800c744:	4ba5      	ldr	r3, [pc, #660]	; (800c9dc <UART_SetConfig+0x38c>)
 800c746:	fba3 2302 	umull	r2, r3, r3, r2
 800c74a:	095b      	lsrs	r3, r3, #5
 800c74c:	011e      	lsls	r6, r3, #4
 800c74e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c750:	461c      	mov	r4, r3
 800c752:	f04f 0500 	mov.w	r5, #0
 800c756:	4622      	mov	r2, r4
 800c758:	462b      	mov	r3, r5
 800c75a:	1891      	adds	r1, r2, r2
 800c75c:	6339      	str	r1, [r7, #48]	; 0x30
 800c75e:	415b      	adcs	r3, r3
 800c760:	637b      	str	r3, [r7, #52]	; 0x34
 800c762:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c766:	1912      	adds	r2, r2, r4
 800c768:	eb45 0303 	adc.w	r3, r5, r3
 800c76c:	f04f 0000 	mov.w	r0, #0
 800c770:	f04f 0100 	mov.w	r1, #0
 800c774:	00d9      	lsls	r1, r3, #3
 800c776:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c77a:	00d0      	lsls	r0, r2, #3
 800c77c:	4602      	mov	r2, r0
 800c77e:	460b      	mov	r3, r1
 800c780:	1911      	adds	r1, r2, r4
 800c782:	65b9      	str	r1, [r7, #88]	; 0x58
 800c784:	416b      	adcs	r3, r5
 800c786:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c78a:	685b      	ldr	r3, [r3, #4]
 800c78c:	461a      	mov	r2, r3
 800c78e:	f04f 0300 	mov.w	r3, #0
 800c792:	1891      	adds	r1, r2, r2
 800c794:	62b9      	str	r1, [r7, #40]	; 0x28
 800c796:	415b      	adcs	r3, r3
 800c798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c79a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c79e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800c7a2:	f7f3 fd7d 	bl	80002a0 <__aeabi_uldivmod>
 800c7a6:	4602      	mov	r2, r0
 800c7a8:	460b      	mov	r3, r1
 800c7aa:	4b8c      	ldr	r3, [pc, #560]	; (800c9dc <UART_SetConfig+0x38c>)
 800c7ac:	fba3 1302 	umull	r1, r3, r3, r2
 800c7b0:	095b      	lsrs	r3, r3, #5
 800c7b2:	2164      	movs	r1, #100	; 0x64
 800c7b4:	fb01 f303 	mul.w	r3, r1, r3
 800c7b8:	1ad3      	subs	r3, r2, r3
 800c7ba:	00db      	lsls	r3, r3, #3
 800c7bc:	3332      	adds	r3, #50	; 0x32
 800c7be:	4a87      	ldr	r2, [pc, #540]	; (800c9dc <UART_SetConfig+0x38c>)
 800c7c0:	fba2 2303 	umull	r2, r3, r2, r3
 800c7c4:	095b      	lsrs	r3, r3, #5
 800c7c6:	005b      	lsls	r3, r3, #1
 800c7c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c7cc:	441e      	add	r6, r3
 800c7ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f04f 0100 	mov.w	r1, #0
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	460b      	mov	r3, r1
 800c7da:	1894      	adds	r4, r2, r2
 800c7dc:	623c      	str	r4, [r7, #32]
 800c7de:	415b      	adcs	r3, r3
 800c7e0:	627b      	str	r3, [r7, #36]	; 0x24
 800c7e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c7e6:	1812      	adds	r2, r2, r0
 800c7e8:	eb41 0303 	adc.w	r3, r1, r3
 800c7ec:	f04f 0400 	mov.w	r4, #0
 800c7f0:	f04f 0500 	mov.w	r5, #0
 800c7f4:	00dd      	lsls	r5, r3, #3
 800c7f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c7fa:	00d4      	lsls	r4, r2, #3
 800c7fc:	4622      	mov	r2, r4
 800c7fe:	462b      	mov	r3, r5
 800c800:	1814      	adds	r4, r2, r0
 800c802:	653c      	str	r4, [r7, #80]	; 0x50
 800c804:	414b      	adcs	r3, r1
 800c806:	657b      	str	r3, [r7, #84]	; 0x54
 800c808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	461a      	mov	r2, r3
 800c80e:	f04f 0300 	mov.w	r3, #0
 800c812:	1891      	adds	r1, r2, r2
 800c814:	61b9      	str	r1, [r7, #24]
 800c816:	415b      	adcs	r3, r3
 800c818:	61fb      	str	r3, [r7, #28]
 800c81a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c81e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800c822:	f7f3 fd3d 	bl	80002a0 <__aeabi_uldivmod>
 800c826:	4602      	mov	r2, r0
 800c828:	460b      	mov	r3, r1
 800c82a:	4b6c      	ldr	r3, [pc, #432]	; (800c9dc <UART_SetConfig+0x38c>)
 800c82c:	fba3 1302 	umull	r1, r3, r3, r2
 800c830:	095b      	lsrs	r3, r3, #5
 800c832:	2164      	movs	r1, #100	; 0x64
 800c834:	fb01 f303 	mul.w	r3, r1, r3
 800c838:	1ad3      	subs	r3, r2, r3
 800c83a:	00db      	lsls	r3, r3, #3
 800c83c:	3332      	adds	r3, #50	; 0x32
 800c83e:	4a67      	ldr	r2, [pc, #412]	; (800c9dc <UART_SetConfig+0x38c>)
 800c840:	fba2 2303 	umull	r2, r3, r2, r3
 800c844:	095b      	lsrs	r3, r3, #5
 800c846:	f003 0207 	and.w	r2, r3, #7
 800c84a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	4432      	add	r2, r6
 800c850:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c852:	e0b9      	b.n	800c9c8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c854:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c856:	461c      	mov	r4, r3
 800c858:	f04f 0500 	mov.w	r5, #0
 800c85c:	4622      	mov	r2, r4
 800c85e:	462b      	mov	r3, r5
 800c860:	1891      	adds	r1, r2, r2
 800c862:	6139      	str	r1, [r7, #16]
 800c864:	415b      	adcs	r3, r3
 800c866:	617b      	str	r3, [r7, #20]
 800c868:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c86c:	1912      	adds	r2, r2, r4
 800c86e:	eb45 0303 	adc.w	r3, r5, r3
 800c872:	f04f 0000 	mov.w	r0, #0
 800c876:	f04f 0100 	mov.w	r1, #0
 800c87a:	00d9      	lsls	r1, r3, #3
 800c87c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c880:	00d0      	lsls	r0, r2, #3
 800c882:	4602      	mov	r2, r0
 800c884:	460b      	mov	r3, r1
 800c886:	eb12 0804 	adds.w	r8, r2, r4
 800c88a:	eb43 0905 	adc.w	r9, r3, r5
 800c88e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	4618      	mov	r0, r3
 800c894:	f04f 0100 	mov.w	r1, #0
 800c898:	f04f 0200 	mov.w	r2, #0
 800c89c:	f04f 0300 	mov.w	r3, #0
 800c8a0:	008b      	lsls	r3, r1, #2
 800c8a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c8a6:	0082      	lsls	r2, r0, #2
 800c8a8:	4640      	mov	r0, r8
 800c8aa:	4649      	mov	r1, r9
 800c8ac:	f7f3 fcf8 	bl	80002a0 <__aeabi_uldivmod>
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	460b      	mov	r3, r1
 800c8b4:	4b49      	ldr	r3, [pc, #292]	; (800c9dc <UART_SetConfig+0x38c>)
 800c8b6:	fba3 2302 	umull	r2, r3, r3, r2
 800c8ba:	095b      	lsrs	r3, r3, #5
 800c8bc:	011e      	lsls	r6, r3, #4
 800c8be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f04f 0100 	mov.w	r1, #0
 800c8c6:	4602      	mov	r2, r0
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	1894      	adds	r4, r2, r2
 800c8cc:	60bc      	str	r4, [r7, #8]
 800c8ce:	415b      	adcs	r3, r3
 800c8d0:	60fb      	str	r3, [r7, #12]
 800c8d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c8d6:	1812      	adds	r2, r2, r0
 800c8d8:	eb41 0303 	adc.w	r3, r1, r3
 800c8dc:	f04f 0400 	mov.w	r4, #0
 800c8e0:	f04f 0500 	mov.w	r5, #0
 800c8e4:	00dd      	lsls	r5, r3, #3
 800c8e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c8ea:	00d4      	lsls	r4, r2, #3
 800c8ec:	4622      	mov	r2, r4
 800c8ee:	462b      	mov	r3, r5
 800c8f0:	1814      	adds	r4, r2, r0
 800c8f2:	64bc      	str	r4, [r7, #72]	; 0x48
 800c8f4:	414b      	adcs	r3, r1
 800c8f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c8f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f04f 0100 	mov.w	r1, #0
 800c902:	f04f 0200 	mov.w	r2, #0
 800c906:	f04f 0300 	mov.w	r3, #0
 800c90a:	008b      	lsls	r3, r1, #2
 800c90c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c910:	0082      	lsls	r2, r0, #2
 800c912:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c916:	f7f3 fcc3 	bl	80002a0 <__aeabi_uldivmod>
 800c91a:	4602      	mov	r2, r0
 800c91c:	460b      	mov	r3, r1
 800c91e:	4b2f      	ldr	r3, [pc, #188]	; (800c9dc <UART_SetConfig+0x38c>)
 800c920:	fba3 1302 	umull	r1, r3, r3, r2
 800c924:	095b      	lsrs	r3, r3, #5
 800c926:	2164      	movs	r1, #100	; 0x64
 800c928:	fb01 f303 	mul.w	r3, r1, r3
 800c92c:	1ad3      	subs	r3, r2, r3
 800c92e:	011b      	lsls	r3, r3, #4
 800c930:	3332      	adds	r3, #50	; 0x32
 800c932:	4a2a      	ldr	r2, [pc, #168]	; (800c9dc <UART_SetConfig+0x38c>)
 800c934:	fba2 2303 	umull	r2, r3, r2, r3
 800c938:	095b      	lsrs	r3, r3, #5
 800c93a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c93e:	441e      	add	r6, r3
 800c940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c942:	4618      	mov	r0, r3
 800c944:	f04f 0100 	mov.w	r1, #0
 800c948:	4602      	mov	r2, r0
 800c94a:	460b      	mov	r3, r1
 800c94c:	1894      	adds	r4, r2, r2
 800c94e:	603c      	str	r4, [r7, #0]
 800c950:	415b      	adcs	r3, r3
 800c952:	607b      	str	r3, [r7, #4]
 800c954:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c958:	1812      	adds	r2, r2, r0
 800c95a:	eb41 0303 	adc.w	r3, r1, r3
 800c95e:	f04f 0400 	mov.w	r4, #0
 800c962:	f04f 0500 	mov.w	r5, #0
 800c966:	00dd      	lsls	r5, r3, #3
 800c968:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c96c:	00d4      	lsls	r4, r2, #3
 800c96e:	4622      	mov	r2, r4
 800c970:	462b      	mov	r3, r5
 800c972:	eb12 0a00 	adds.w	sl, r2, r0
 800c976:	eb43 0b01 	adc.w	fp, r3, r1
 800c97a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c97c:	685b      	ldr	r3, [r3, #4]
 800c97e:	4618      	mov	r0, r3
 800c980:	f04f 0100 	mov.w	r1, #0
 800c984:	f04f 0200 	mov.w	r2, #0
 800c988:	f04f 0300 	mov.w	r3, #0
 800c98c:	008b      	lsls	r3, r1, #2
 800c98e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c992:	0082      	lsls	r2, r0, #2
 800c994:	4650      	mov	r0, sl
 800c996:	4659      	mov	r1, fp
 800c998:	f7f3 fc82 	bl	80002a0 <__aeabi_uldivmod>
 800c99c:	4602      	mov	r2, r0
 800c99e:	460b      	mov	r3, r1
 800c9a0:	4b0e      	ldr	r3, [pc, #56]	; (800c9dc <UART_SetConfig+0x38c>)
 800c9a2:	fba3 1302 	umull	r1, r3, r3, r2
 800c9a6:	095b      	lsrs	r3, r3, #5
 800c9a8:	2164      	movs	r1, #100	; 0x64
 800c9aa:	fb01 f303 	mul.w	r3, r1, r3
 800c9ae:	1ad3      	subs	r3, r2, r3
 800c9b0:	011b      	lsls	r3, r3, #4
 800c9b2:	3332      	adds	r3, #50	; 0x32
 800c9b4:	4a09      	ldr	r2, [pc, #36]	; (800c9dc <UART_SetConfig+0x38c>)
 800c9b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c9ba:	095b      	lsrs	r3, r3, #5
 800c9bc:	f003 020f 	and.w	r2, r3, #15
 800c9c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4432      	add	r2, r6
 800c9c6:	609a      	str	r2, [r3, #8]
}
 800c9c8:	bf00      	nop
 800c9ca:	377c      	adds	r7, #124	; 0x7c
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d2:	bf00      	nop
 800c9d4:	40011000 	.word	0x40011000
 800c9d8:	40011400 	.word	0x40011400
 800c9dc:	51eb851f 	.word	0x51eb851f

0800c9e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c9e0:	b084      	sub	sp, #16
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b084      	sub	sp, #16
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
 800c9ea:	f107 001c 	add.w	r0, r7, #28
 800c9ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d122      	bne.n	800ca3e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	68db      	ldr	r3, [r3, #12]
 800ca08:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ca0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	68db      	ldr	r3, [r3, #12]
 800ca18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ca20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca22:	2b01      	cmp	r3, #1
 800ca24:	d105      	bne.n	800ca32 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	68db      	ldr	r3, [r3, #12]
 800ca2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f001 fac6 	bl	800dfc4 <USB_CoreReset>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	73fb      	strb	r3, [r7, #15]
 800ca3c:	e01a      	b.n	800ca74 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	68db      	ldr	r3, [r3, #12]
 800ca42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f001 faba 	bl	800dfc4 <USB_CoreReset>
 800ca50:	4603      	mov	r3, r0
 800ca52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ca54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d106      	bne.n	800ca68 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	639a      	str	r2, [r3, #56]	; 0x38
 800ca66:	e005      	b.n	800ca74 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ca74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca76:	2b01      	cmp	r3, #1
 800ca78:	d10b      	bne.n	800ca92 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	689b      	ldr	r3, [r3, #8]
 800ca7e:	f043 0206 	orr.w	r2, r3, #6
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	689b      	ldr	r3, [r3, #8]
 800ca8a:	f043 0220 	orr.w	r2, r3, #32
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ca92:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3710      	adds	r7, #16
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ca9e:	b004      	add	sp, #16
 800caa0:	4770      	bx	lr
	...

0800caa4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b087      	sub	sp, #28
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	4613      	mov	r3, r2
 800cab0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cab2:	79fb      	ldrb	r3, [r7, #7]
 800cab4:	2b02      	cmp	r3, #2
 800cab6:	d165      	bne.n	800cb84 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	4a41      	ldr	r2, [pc, #260]	; (800cbc0 <USB_SetTurnaroundTime+0x11c>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d906      	bls.n	800cace <USB_SetTurnaroundTime+0x2a>
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	4a40      	ldr	r2, [pc, #256]	; (800cbc4 <USB_SetTurnaroundTime+0x120>)
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d202      	bcs.n	800cace <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cac8:	230f      	movs	r3, #15
 800caca:	617b      	str	r3, [r7, #20]
 800cacc:	e062      	b.n	800cb94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	4a3c      	ldr	r2, [pc, #240]	; (800cbc4 <USB_SetTurnaroundTime+0x120>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d306      	bcc.n	800cae4 <USB_SetTurnaroundTime+0x40>
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	4a3b      	ldr	r2, [pc, #236]	; (800cbc8 <USB_SetTurnaroundTime+0x124>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d202      	bcs.n	800cae4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800cade:	230e      	movs	r3, #14
 800cae0:	617b      	str	r3, [r7, #20]
 800cae2:	e057      	b.n	800cb94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	4a38      	ldr	r2, [pc, #224]	; (800cbc8 <USB_SetTurnaroundTime+0x124>)
 800cae8:	4293      	cmp	r3, r2
 800caea:	d306      	bcc.n	800cafa <USB_SetTurnaroundTime+0x56>
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	4a37      	ldr	r2, [pc, #220]	; (800cbcc <USB_SetTurnaroundTime+0x128>)
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d202      	bcs.n	800cafa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800caf4:	230d      	movs	r3, #13
 800caf6:	617b      	str	r3, [r7, #20]
 800caf8:	e04c      	b.n	800cb94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	4a33      	ldr	r2, [pc, #204]	; (800cbcc <USB_SetTurnaroundTime+0x128>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d306      	bcc.n	800cb10 <USB_SetTurnaroundTime+0x6c>
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	4a32      	ldr	r2, [pc, #200]	; (800cbd0 <USB_SetTurnaroundTime+0x12c>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d802      	bhi.n	800cb10 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cb0a:	230c      	movs	r3, #12
 800cb0c:	617b      	str	r3, [r7, #20]
 800cb0e:	e041      	b.n	800cb94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	4a2f      	ldr	r2, [pc, #188]	; (800cbd0 <USB_SetTurnaroundTime+0x12c>)
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d906      	bls.n	800cb26 <USB_SetTurnaroundTime+0x82>
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	4a2e      	ldr	r2, [pc, #184]	; (800cbd4 <USB_SetTurnaroundTime+0x130>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d802      	bhi.n	800cb26 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cb20:	230b      	movs	r3, #11
 800cb22:	617b      	str	r3, [r7, #20]
 800cb24:	e036      	b.n	800cb94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	4a2a      	ldr	r2, [pc, #168]	; (800cbd4 <USB_SetTurnaroundTime+0x130>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d906      	bls.n	800cb3c <USB_SetTurnaroundTime+0x98>
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	4a29      	ldr	r2, [pc, #164]	; (800cbd8 <USB_SetTurnaroundTime+0x134>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d802      	bhi.n	800cb3c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cb36:	230a      	movs	r3, #10
 800cb38:	617b      	str	r3, [r7, #20]
 800cb3a:	e02b      	b.n	800cb94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	4a26      	ldr	r2, [pc, #152]	; (800cbd8 <USB_SetTurnaroundTime+0x134>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d906      	bls.n	800cb52 <USB_SetTurnaroundTime+0xae>
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	4a25      	ldr	r2, [pc, #148]	; (800cbdc <USB_SetTurnaroundTime+0x138>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d202      	bcs.n	800cb52 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cb4c:	2309      	movs	r3, #9
 800cb4e:	617b      	str	r3, [r7, #20]
 800cb50:	e020      	b.n	800cb94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	4a21      	ldr	r2, [pc, #132]	; (800cbdc <USB_SetTurnaroundTime+0x138>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d306      	bcc.n	800cb68 <USB_SetTurnaroundTime+0xc4>
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	4a20      	ldr	r2, [pc, #128]	; (800cbe0 <USB_SetTurnaroundTime+0x13c>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d802      	bhi.n	800cb68 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cb62:	2308      	movs	r3, #8
 800cb64:	617b      	str	r3, [r7, #20]
 800cb66:	e015      	b.n	800cb94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	4a1d      	ldr	r2, [pc, #116]	; (800cbe0 <USB_SetTurnaroundTime+0x13c>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d906      	bls.n	800cb7e <USB_SetTurnaroundTime+0xda>
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	4a1c      	ldr	r2, [pc, #112]	; (800cbe4 <USB_SetTurnaroundTime+0x140>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d202      	bcs.n	800cb7e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cb78:	2307      	movs	r3, #7
 800cb7a:	617b      	str	r3, [r7, #20]
 800cb7c:	e00a      	b.n	800cb94 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cb7e:	2306      	movs	r3, #6
 800cb80:	617b      	str	r3, [r7, #20]
 800cb82:	e007      	b.n	800cb94 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800cb84:	79fb      	ldrb	r3, [r7, #7]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d102      	bne.n	800cb90 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800cb8a:	2309      	movs	r3, #9
 800cb8c:	617b      	str	r3, [r7, #20]
 800cb8e:	e001      	b.n	800cb94 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cb90:	2309      	movs	r3, #9
 800cb92:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	68db      	ldr	r3, [r3, #12]
 800cb98:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	68da      	ldr	r2, [r3, #12]
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	029b      	lsls	r3, r3, #10
 800cba8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800cbac:	431a      	orrs	r2, r3
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cbb2:	2300      	movs	r3, #0
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	371c      	adds	r7, #28
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr
 800cbc0:	00d8acbf 	.word	0x00d8acbf
 800cbc4:	00e4e1c0 	.word	0x00e4e1c0
 800cbc8:	00f42400 	.word	0x00f42400
 800cbcc:	01067380 	.word	0x01067380
 800cbd0:	011a499f 	.word	0x011a499f
 800cbd4:	01312cff 	.word	0x01312cff
 800cbd8:	014ca43f 	.word	0x014ca43f
 800cbdc:	016e3600 	.word	0x016e3600
 800cbe0:	01a6ab1f 	.word	0x01a6ab1f
 800cbe4:	01e84800 	.word	0x01e84800

0800cbe8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b083      	sub	sp, #12
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	f043 0201 	orr.w	r2, r3, #1
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cbfc:	2300      	movs	r3, #0
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	370c      	adds	r7, #12
 800cc02:	46bd      	mov	sp, r7
 800cc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc08:	4770      	bx	lr

0800cc0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cc0a:	b480      	push	{r7}
 800cc0c:	b083      	sub	sp, #12
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	689b      	ldr	r3, [r3, #8]
 800cc16:	f023 0201 	bic.w	r2, r3, #1
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cc1e:	2300      	movs	r3, #0
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	370c      	adds	r7, #12
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr

0800cc2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	460b      	mov	r3, r1
 800cc36:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	68db      	ldr	r3, [r3, #12]
 800cc3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cc44:	78fb      	ldrb	r3, [r7, #3]
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	d106      	bne.n	800cc58 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	68db      	ldr	r3, [r3, #12]
 800cc4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	60da      	str	r2, [r3, #12]
 800cc56:	e00b      	b.n	800cc70 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800cc58:	78fb      	ldrb	r3, [r7, #3]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d106      	bne.n	800cc6c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	60da      	str	r2, [r3, #12]
 800cc6a:	e001      	b.n	800cc70 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	e003      	b.n	800cc78 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800cc70:	2032      	movs	r0, #50	; 0x32
 800cc72:	f7f9 ffed 	bl	8006c50 <HAL_Delay>

  return HAL_OK;
 800cc76:	2300      	movs	r3, #0
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3708      	adds	r7, #8
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cc80:	b084      	sub	sp, #16
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b086      	sub	sp, #24
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
 800cc8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cc8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cc92:	2300      	movs	r3, #0
 800cc94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	613b      	str	r3, [r7, #16]
 800cc9e:	e009      	b.n	800ccb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	3340      	adds	r3, #64	; 0x40
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	4413      	add	r3, r2
 800ccaa:	2200      	movs	r2, #0
 800ccac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	3301      	adds	r3, #1
 800ccb2:	613b      	str	r3, [r7, #16]
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	2b0e      	cmp	r3, #14
 800ccb8:	d9f2      	bls.n	800cca0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ccba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d11c      	bne.n	800ccfa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccc6:	685b      	ldr	r3, [r3, #4]
 800ccc8:	68fa      	ldr	r2, [r7, #12]
 800ccca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ccce:	f043 0302 	orr.w	r3, r3, #2
 800ccd2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccd8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cce4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccf0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	639a      	str	r2, [r3, #56]	; 0x38
 800ccf8:	e00b      	b.n	800cd12 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccfe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd0a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cd18:	461a      	mov	r2, r3
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd24:	4619      	mov	r1, r3
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	680b      	ldr	r3, [r1, #0]
 800cd30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cd32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d10c      	bne.n	800cd52 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d104      	bne.n	800cd48 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cd3e:	2100      	movs	r1, #0
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f000 f949 	bl	800cfd8 <USB_SetDevSpeed>
 800cd46:	e008      	b.n	800cd5a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cd48:	2101      	movs	r1, #1
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 f944 	bl	800cfd8 <USB_SetDevSpeed>
 800cd50:	e003      	b.n	800cd5a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cd52:	2103      	movs	r1, #3
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 f93f 	bl	800cfd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cd5a:	2110      	movs	r1, #16
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f000 f8f3 	bl	800cf48 <USB_FlushTxFifo>
 800cd62:	4603      	mov	r3, r0
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d001      	beq.n	800cd6c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800cd68:	2301      	movs	r3, #1
 800cd6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f000 f911 	bl	800cf94 <USB_FlushRxFifo>
 800cd72:	4603      	mov	r3, r0
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d001      	beq.n	800cd7c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800cd78:	2301      	movs	r3, #1
 800cd7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd82:	461a      	mov	r2, r3
 800cd84:	2300      	movs	r3, #0
 800cd86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd8e:	461a      	mov	r2, r3
 800cd90:	2300      	movs	r3, #0
 800cd92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd9a:	461a      	mov	r2, r3
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cda0:	2300      	movs	r3, #0
 800cda2:	613b      	str	r3, [r7, #16]
 800cda4:	e043      	b.n	800ce2e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	015a      	lsls	r2, r3, #5
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	4413      	add	r3, r2
 800cdae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cdb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cdbc:	d118      	bne.n	800cdf0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d10a      	bne.n	800cdda <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	015a      	lsls	r2, r3, #5
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	4413      	add	r3, r2
 800cdcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cdd6:	6013      	str	r3, [r2, #0]
 800cdd8:	e013      	b.n	800ce02 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	015a      	lsls	r2, r3, #5
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	4413      	add	r3, r2
 800cde2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cde6:	461a      	mov	r2, r3
 800cde8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cdec:	6013      	str	r3, [r2, #0]
 800cdee:	e008      	b.n	800ce02 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	015a      	lsls	r2, r3, #5
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	4413      	add	r3, r2
 800cdf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	2300      	movs	r3, #0
 800ce00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	015a      	lsls	r2, r3, #5
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	4413      	add	r3, r2
 800ce0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce0e:	461a      	mov	r2, r3
 800ce10:	2300      	movs	r3, #0
 800ce12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	015a      	lsls	r2, r3, #5
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	4413      	add	r3, r2
 800ce1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce20:	461a      	mov	r2, r3
 800ce22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ce26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	613b      	str	r3, [r7, #16]
 800ce2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce30:	693a      	ldr	r2, [r7, #16]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d3b7      	bcc.n	800cda6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce36:	2300      	movs	r3, #0
 800ce38:	613b      	str	r3, [r7, #16]
 800ce3a:	e043      	b.n	800cec4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	015a      	lsls	r2, r3, #5
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	4413      	add	r3, r2
 800ce44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce52:	d118      	bne.n	800ce86 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d10a      	bne.n	800ce70 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	015a      	lsls	r2, r3, #5
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	4413      	add	r3, r2
 800ce62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce66:	461a      	mov	r2, r3
 800ce68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ce6c:	6013      	str	r3, [r2, #0]
 800ce6e:	e013      	b.n	800ce98 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	015a      	lsls	r2, r3, #5
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	4413      	add	r3, r2
 800ce78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce7c:	461a      	mov	r2, r3
 800ce7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ce82:	6013      	str	r3, [r2, #0]
 800ce84:	e008      	b.n	800ce98 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	015a      	lsls	r2, r3, #5
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	4413      	add	r3, r2
 800ce8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce92:	461a      	mov	r2, r3
 800ce94:	2300      	movs	r3, #0
 800ce96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	015a      	lsls	r2, r3, #5
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	4413      	add	r3, r2
 800cea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cea4:	461a      	mov	r2, r3
 800cea6:	2300      	movs	r3, #0
 800cea8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	015a      	lsls	r2, r3, #5
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	4413      	add	r3, r2
 800ceb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceb6:	461a      	mov	r2, r3
 800ceb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cebc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	3301      	adds	r3, #1
 800cec2:	613b      	str	r3, [r7, #16]
 800cec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec6:	693a      	ldr	r2, [r7, #16]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d3b7      	bcc.n	800ce3c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ced2:	691b      	ldr	r3, [r3, #16]
 800ced4:	68fa      	ldr	r2, [r7, #12]
 800ced6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ceda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cede:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ceec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ceee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d105      	bne.n	800cf00 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	699b      	ldr	r3, [r3, #24]
 800cef8:	f043 0210 	orr.w	r2, r3, #16
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	699a      	ldr	r2, [r3, #24]
 800cf04:	4b0f      	ldr	r3, [pc, #60]	; (800cf44 <USB_DevInit+0x2c4>)
 800cf06:	4313      	orrs	r3, r2
 800cf08:	687a      	ldr	r2, [r7, #4]
 800cf0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cf0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d005      	beq.n	800cf1e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	699b      	ldr	r3, [r3, #24]
 800cf16:	f043 0208 	orr.w	r2, r3, #8
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cf1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d107      	bne.n	800cf34 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	699b      	ldr	r3, [r3, #24]
 800cf28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cf2c:	f043 0304 	orr.w	r3, r3, #4
 800cf30:	687a      	ldr	r2, [r7, #4]
 800cf32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cf34:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3718      	adds	r7, #24
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cf40:	b004      	add	sp, #16
 800cf42:	4770      	bx	lr
 800cf44:	803c3800 	.word	0x803c3800

0800cf48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b085      	sub	sp, #20
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800cf52:	2300      	movs	r3, #0
 800cf54:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	019b      	lsls	r3, r3, #6
 800cf5a:	f043 0220 	orr.w	r2, r3, #32
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	3301      	adds	r3, #1
 800cf66:	60fb      	str	r3, [r7, #12]
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	4a09      	ldr	r2, [pc, #36]	; (800cf90 <USB_FlushTxFifo+0x48>)
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d901      	bls.n	800cf74 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800cf70:	2303      	movs	r3, #3
 800cf72:	e006      	b.n	800cf82 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	691b      	ldr	r3, [r3, #16]
 800cf78:	f003 0320 	and.w	r3, r3, #32
 800cf7c:	2b20      	cmp	r3, #32
 800cf7e:	d0f0      	beq.n	800cf62 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cf80:	2300      	movs	r3, #0
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3714      	adds	r7, #20
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr
 800cf8e:	bf00      	nop
 800cf90:	00030d40 	.word	0x00030d40

0800cf94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b085      	sub	sp, #20
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2210      	movs	r2, #16
 800cfa4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	60fb      	str	r3, [r7, #12]
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	4a09      	ldr	r2, [pc, #36]	; (800cfd4 <USB_FlushRxFifo+0x40>)
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d901      	bls.n	800cfb8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800cfb4:	2303      	movs	r3, #3
 800cfb6:	e006      	b.n	800cfc6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	691b      	ldr	r3, [r3, #16]
 800cfbc:	f003 0310 	and.w	r3, r3, #16
 800cfc0:	2b10      	cmp	r3, #16
 800cfc2:	d0f0      	beq.n	800cfa6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cfc4:	2300      	movs	r3, #0
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3714      	adds	r7, #20
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr
 800cfd2:	bf00      	nop
 800cfd4:	00030d40 	.word	0x00030d40

0800cfd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	460b      	mov	r3, r1
 800cfe2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfee:	681a      	ldr	r2, [r3, #0]
 800cff0:	78fb      	ldrb	r3, [r7, #3]
 800cff2:	68f9      	ldr	r1, [r7, #12]
 800cff4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cff8:	4313      	orrs	r3, r2
 800cffa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cffc:	2300      	movs	r3, #0
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3714      	adds	r7, #20
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr

0800d00a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d00a:	b480      	push	{r7}
 800d00c:	b087      	sub	sp, #28
 800d00e:	af00      	add	r7, sp, #0
 800d010:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d01c:	689b      	ldr	r3, [r3, #8]
 800d01e:	f003 0306 	and.w	r3, r3, #6
 800d022:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d102      	bne.n	800d030 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d02a:	2300      	movs	r3, #0
 800d02c:	75fb      	strb	r3, [r7, #23]
 800d02e:	e00a      	b.n	800d046 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2b02      	cmp	r3, #2
 800d034:	d002      	beq.n	800d03c <USB_GetDevSpeed+0x32>
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	2b06      	cmp	r3, #6
 800d03a:	d102      	bne.n	800d042 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d03c:	2302      	movs	r3, #2
 800d03e:	75fb      	strb	r3, [r7, #23]
 800d040:	e001      	b.n	800d046 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d042:	230f      	movs	r3, #15
 800d044:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d046:	7dfb      	ldrb	r3, [r7, #23]
}
 800d048:	4618      	mov	r0, r3
 800d04a:	371c      	adds	r7, #28
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr

0800d054 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d054:	b480      	push	{r7}
 800d056:	b085      	sub	sp, #20
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	785b      	ldrb	r3, [r3, #1]
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	d13a      	bne.n	800d0e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d076:	69da      	ldr	r2, [r3, #28]
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	f003 030f 	and.w	r3, r3, #15
 800d080:	2101      	movs	r1, #1
 800d082:	fa01 f303 	lsl.w	r3, r1, r3
 800d086:	b29b      	uxth	r3, r3
 800d088:	68f9      	ldr	r1, [r7, #12]
 800d08a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d08e:	4313      	orrs	r3, r2
 800d090:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	015a      	lsls	r2, r3, #5
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	4413      	add	r3, r2
 800d09a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d155      	bne.n	800d154 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	015a      	lsls	r2, r3, #5
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	4413      	add	r3, r2
 800d0b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0b4:	681a      	ldr	r2, [r3, #0]
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	689b      	ldr	r3, [r3, #8]
 800d0ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	78db      	ldrb	r3, [r3, #3]
 800d0c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d0c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	059b      	lsls	r3, r3, #22
 800d0ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d0cc:	4313      	orrs	r3, r2
 800d0ce:	68ba      	ldr	r2, [r7, #8]
 800d0d0:	0151      	lsls	r1, r2, #5
 800d0d2:	68fa      	ldr	r2, [r7, #12]
 800d0d4:	440a      	add	r2, r1
 800d0d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d0e2:	6013      	str	r3, [r2, #0]
 800d0e4:	e036      	b.n	800d154 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0ec:	69da      	ldr	r2, [r3, #28]
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	f003 030f 	and.w	r3, r3, #15
 800d0f6:	2101      	movs	r1, #1
 800d0f8:	fa01 f303 	lsl.w	r3, r1, r3
 800d0fc:	041b      	lsls	r3, r3, #16
 800d0fe:	68f9      	ldr	r1, [r7, #12]
 800d100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d104:	4313      	orrs	r3, r2
 800d106:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	015a      	lsls	r2, r3, #5
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	4413      	add	r3, r2
 800d110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d11a      	bne.n	800d154 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	015a      	lsls	r2, r3, #5
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	4413      	add	r3, r2
 800d126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	689b      	ldr	r3, [r3, #8]
 800d130:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	78db      	ldrb	r3, [r3, #3]
 800d138:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d13a:	430b      	orrs	r3, r1
 800d13c:	4313      	orrs	r3, r2
 800d13e:	68ba      	ldr	r2, [r7, #8]
 800d140:	0151      	lsls	r1, r2, #5
 800d142:	68fa      	ldr	r2, [r7, #12]
 800d144:	440a      	add	r2, r1
 800d146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d14a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d14e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d152:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d154:	2300      	movs	r3, #0
}
 800d156:	4618      	mov	r0, r3
 800d158:	3714      	adds	r7, #20
 800d15a:	46bd      	mov	sp, r7
 800d15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d160:	4770      	bx	lr
	...

0800d164 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d164:	b480      	push	{r7}
 800d166:	b085      	sub	sp, #20
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	785b      	ldrb	r3, [r3, #1]
 800d17c:	2b01      	cmp	r3, #1
 800d17e:	d161      	bne.n	800d244 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	015a      	lsls	r2, r3, #5
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	4413      	add	r3, r2
 800d188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d192:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d196:	d11f      	bne.n	800d1d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	015a      	lsls	r2, r3, #5
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	4413      	add	r3, r2
 800d1a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	68ba      	ldr	r2, [r7, #8]
 800d1a8:	0151      	lsls	r1, r2, #5
 800d1aa:	68fa      	ldr	r2, [r7, #12]
 800d1ac:	440a      	add	r2, r1
 800d1ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d1b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	015a      	lsls	r2, r3, #5
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	4413      	add	r3, r2
 800d1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	68ba      	ldr	r2, [r7, #8]
 800d1c8:	0151      	lsls	r1, r2, #5
 800d1ca:	68fa      	ldr	r2, [r7, #12]
 800d1cc:	440a      	add	r2, r1
 800d1ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d1d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	f003 030f 	and.w	r3, r3, #15
 800d1e8:	2101      	movs	r1, #1
 800d1ea:	fa01 f303 	lsl.w	r3, r1, r3
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	43db      	mvns	r3, r3
 800d1f2:	68f9      	ldr	r1, [r7, #12]
 800d1f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d1f8:	4013      	ands	r3, r2
 800d1fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d202:	69da      	ldr	r2, [r3, #28]
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	f003 030f 	and.w	r3, r3, #15
 800d20c:	2101      	movs	r1, #1
 800d20e:	fa01 f303 	lsl.w	r3, r1, r3
 800d212:	b29b      	uxth	r3, r3
 800d214:	43db      	mvns	r3, r3
 800d216:	68f9      	ldr	r1, [r7, #12]
 800d218:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d21c:	4013      	ands	r3, r2
 800d21e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	015a      	lsls	r2, r3, #5
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	4413      	add	r3, r2
 800d228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	0159      	lsls	r1, r3, #5
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	440b      	add	r3, r1
 800d236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d23a:	4619      	mov	r1, r3
 800d23c:	4b35      	ldr	r3, [pc, #212]	; (800d314 <USB_DeactivateEndpoint+0x1b0>)
 800d23e:	4013      	ands	r3, r2
 800d240:	600b      	str	r3, [r1, #0]
 800d242:	e060      	b.n	800d306 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	015a      	lsls	r2, r3, #5
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	4413      	add	r3, r2
 800d24c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d25a:	d11f      	bne.n	800d29c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	015a      	lsls	r2, r3, #5
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	4413      	add	r3, r2
 800d264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	68ba      	ldr	r2, [r7, #8]
 800d26c:	0151      	lsls	r1, r2, #5
 800d26e:	68fa      	ldr	r2, [r7, #12]
 800d270:	440a      	add	r2, r1
 800d272:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d276:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d27a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	015a      	lsls	r2, r3, #5
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	4413      	add	r3, r2
 800d284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	68ba      	ldr	r2, [r7, #8]
 800d28c:	0151      	lsls	r1, r2, #5
 800d28e:	68fa      	ldr	r2, [r7, #12]
 800d290:	440a      	add	r2, r1
 800d292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d296:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d29a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	f003 030f 	and.w	r3, r3, #15
 800d2ac:	2101      	movs	r1, #1
 800d2ae:	fa01 f303 	lsl.w	r3, r1, r3
 800d2b2:	041b      	lsls	r3, r3, #16
 800d2b4:	43db      	mvns	r3, r3
 800d2b6:	68f9      	ldr	r1, [r7, #12]
 800d2b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d2bc:	4013      	ands	r3, r2
 800d2be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2c6:	69da      	ldr	r2, [r3, #28]
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	f003 030f 	and.w	r3, r3, #15
 800d2d0:	2101      	movs	r1, #1
 800d2d2:	fa01 f303 	lsl.w	r3, r1, r3
 800d2d6:	041b      	lsls	r3, r3, #16
 800d2d8:	43db      	mvns	r3, r3
 800d2da:	68f9      	ldr	r1, [r7, #12]
 800d2dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d2e0:	4013      	ands	r3, r2
 800d2e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	015a      	lsls	r2, r3, #5
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	4413      	add	r3, r2
 800d2ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2f0:	681a      	ldr	r2, [r3, #0]
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	0159      	lsls	r1, r3, #5
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	440b      	add	r3, r1
 800d2fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2fe:	4619      	mov	r1, r3
 800d300:	4b05      	ldr	r3, [pc, #20]	; (800d318 <USB_DeactivateEndpoint+0x1b4>)
 800d302:	4013      	ands	r3, r2
 800d304:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d306:	2300      	movs	r3, #0
}
 800d308:	4618      	mov	r0, r3
 800d30a:	3714      	adds	r7, #20
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr
 800d314:	ec337800 	.word	0xec337800
 800d318:	eff37800 	.word	0xeff37800

0800d31c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b08a      	sub	sp, #40	; 0x28
 800d320:	af02      	add	r7, sp, #8
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	4613      	mov	r3, r2
 800d328:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	781b      	ldrb	r3, [r3, #0]
 800d332:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	785b      	ldrb	r3, [r3, #1]
 800d338:	2b01      	cmp	r3, #1
 800d33a:	f040 815c 	bne.w	800d5f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	695b      	ldr	r3, [r3, #20]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d132      	bne.n	800d3ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d346:	69bb      	ldr	r3, [r7, #24]
 800d348:	015a      	lsls	r2, r3, #5
 800d34a:	69fb      	ldr	r3, [r7, #28]
 800d34c:	4413      	add	r3, r2
 800d34e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d352:	691b      	ldr	r3, [r3, #16]
 800d354:	69ba      	ldr	r2, [r7, #24]
 800d356:	0151      	lsls	r1, r2, #5
 800d358:	69fa      	ldr	r2, [r7, #28]
 800d35a:	440a      	add	r2, r1
 800d35c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d360:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d364:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d368:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d36a:	69bb      	ldr	r3, [r7, #24]
 800d36c:	015a      	lsls	r2, r3, #5
 800d36e:	69fb      	ldr	r3, [r7, #28]
 800d370:	4413      	add	r3, r2
 800d372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d376:	691b      	ldr	r3, [r3, #16]
 800d378:	69ba      	ldr	r2, [r7, #24]
 800d37a:	0151      	lsls	r1, r2, #5
 800d37c:	69fa      	ldr	r2, [r7, #28]
 800d37e:	440a      	add	r2, r1
 800d380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d384:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d388:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d38a:	69bb      	ldr	r3, [r7, #24]
 800d38c:	015a      	lsls	r2, r3, #5
 800d38e:	69fb      	ldr	r3, [r7, #28]
 800d390:	4413      	add	r3, r2
 800d392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d396:	691b      	ldr	r3, [r3, #16]
 800d398:	69ba      	ldr	r2, [r7, #24]
 800d39a:	0151      	lsls	r1, r2, #5
 800d39c:	69fa      	ldr	r2, [r7, #28]
 800d39e:	440a      	add	r2, r1
 800d3a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3a4:	0cdb      	lsrs	r3, r3, #19
 800d3a6:	04db      	lsls	r3, r3, #19
 800d3a8:	6113      	str	r3, [r2, #16]
 800d3aa:	e074      	b.n	800d496 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d3ac:	69bb      	ldr	r3, [r7, #24]
 800d3ae:	015a      	lsls	r2, r3, #5
 800d3b0:	69fb      	ldr	r3, [r7, #28]
 800d3b2:	4413      	add	r3, r2
 800d3b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3b8:	691b      	ldr	r3, [r3, #16]
 800d3ba:	69ba      	ldr	r2, [r7, #24]
 800d3bc:	0151      	lsls	r1, r2, #5
 800d3be:	69fa      	ldr	r2, [r7, #28]
 800d3c0:	440a      	add	r2, r1
 800d3c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3c6:	0cdb      	lsrs	r3, r3, #19
 800d3c8:	04db      	lsls	r3, r3, #19
 800d3ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d3cc:	69bb      	ldr	r3, [r7, #24]
 800d3ce:	015a      	lsls	r2, r3, #5
 800d3d0:	69fb      	ldr	r3, [r7, #28]
 800d3d2:	4413      	add	r3, r2
 800d3d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3d8:	691b      	ldr	r3, [r3, #16]
 800d3da:	69ba      	ldr	r2, [r7, #24]
 800d3dc:	0151      	lsls	r1, r2, #5
 800d3de:	69fa      	ldr	r2, [r7, #28]
 800d3e0:	440a      	add	r2, r1
 800d3e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d3ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d3ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d3f0:	69bb      	ldr	r3, [r7, #24]
 800d3f2:	015a      	lsls	r2, r3, #5
 800d3f4:	69fb      	ldr	r3, [r7, #28]
 800d3f6:	4413      	add	r3, r2
 800d3f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3fc:	691a      	ldr	r2, [r3, #16]
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	6959      	ldr	r1, [r3, #20]
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	689b      	ldr	r3, [r3, #8]
 800d406:	440b      	add	r3, r1
 800d408:	1e59      	subs	r1, r3, #1
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	689b      	ldr	r3, [r3, #8]
 800d40e:	fbb1 f3f3 	udiv	r3, r1, r3
 800d412:	04d9      	lsls	r1, r3, #19
 800d414:	4b9d      	ldr	r3, [pc, #628]	; (800d68c <USB_EPStartXfer+0x370>)
 800d416:	400b      	ands	r3, r1
 800d418:	69b9      	ldr	r1, [r7, #24]
 800d41a:	0148      	lsls	r0, r1, #5
 800d41c:	69f9      	ldr	r1, [r7, #28]
 800d41e:	4401      	add	r1, r0
 800d420:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d424:	4313      	orrs	r3, r2
 800d426:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d428:	69bb      	ldr	r3, [r7, #24]
 800d42a:	015a      	lsls	r2, r3, #5
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	4413      	add	r3, r2
 800d430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d434:	691a      	ldr	r2, [r3, #16]
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	695b      	ldr	r3, [r3, #20]
 800d43a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d43e:	69b9      	ldr	r1, [r7, #24]
 800d440:	0148      	lsls	r0, r1, #5
 800d442:	69f9      	ldr	r1, [r7, #28]
 800d444:	4401      	add	r1, r0
 800d446:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d44a:	4313      	orrs	r3, r2
 800d44c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	78db      	ldrb	r3, [r3, #3]
 800d452:	2b01      	cmp	r3, #1
 800d454:	d11f      	bne.n	800d496 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d456:	69bb      	ldr	r3, [r7, #24]
 800d458:	015a      	lsls	r2, r3, #5
 800d45a:	69fb      	ldr	r3, [r7, #28]
 800d45c:	4413      	add	r3, r2
 800d45e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d462:	691b      	ldr	r3, [r3, #16]
 800d464:	69ba      	ldr	r2, [r7, #24]
 800d466:	0151      	lsls	r1, r2, #5
 800d468:	69fa      	ldr	r2, [r7, #28]
 800d46a:	440a      	add	r2, r1
 800d46c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d470:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d474:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d476:	69bb      	ldr	r3, [r7, #24]
 800d478:	015a      	lsls	r2, r3, #5
 800d47a:	69fb      	ldr	r3, [r7, #28]
 800d47c:	4413      	add	r3, r2
 800d47e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d482:	691b      	ldr	r3, [r3, #16]
 800d484:	69ba      	ldr	r2, [r7, #24]
 800d486:	0151      	lsls	r1, r2, #5
 800d488:	69fa      	ldr	r2, [r7, #28]
 800d48a:	440a      	add	r2, r1
 800d48c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d490:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d494:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d496:	79fb      	ldrb	r3, [r7, #7]
 800d498:	2b01      	cmp	r3, #1
 800d49a:	d14b      	bne.n	800d534 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	691b      	ldr	r3, [r3, #16]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d009      	beq.n	800d4b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d4a4:	69bb      	ldr	r3, [r7, #24]
 800d4a6:	015a      	lsls	r2, r3, #5
 800d4a8:	69fb      	ldr	r3, [r7, #28]
 800d4aa:	4413      	add	r3, r2
 800d4ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	691b      	ldr	r3, [r3, #16]
 800d4b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	78db      	ldrb	r3, [r3, #3]
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	d128      	bne.n	800d512 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d4c0:	69fb      	ldr	r3, [r7, #28]
 800d4c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4c6:	689b      	ldr	r3, [r3, #8]
 800d4c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d110      	bne.n	800d4f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d4d0:	69bb      	ldr	r3, [r7, #24]
 800d4d2:	015a      	lsls	r2, r3, #5
 800d4d4:	69fb      	ldr	r3, [r7, #28]
 800d4d6:	4413      	add	r3, r2
 800d4d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	69ba      	ldr	r2, [r7, #24]
 800d4e0:	0151      	lsls	r1, r2, #5
 800d4e2:	69fa      	ldr	r2, [r7, #28]
 800d4e4:	440a      	add	r2, r1
 800d4e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d4ee:	6013      	str	r3, [r2, #0]
 800d4f0:	e00f      	b.n	800d512 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d4f2:	69bb      	ldr	r3, [r7, #24]
 800d4f4:	015a      	lsls	r2, r3, #5
 800d4f6:	69fb      	ldr	r3, [r7, #28]
 800d4f8:	4413      	add	r3, r2
 800d4fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	69ba      	ldr	r2, [r7, #24]
 800d502:	0151      	lsls	r1, r2, #5
 800d504:	69fa      	ldr	r2, [r7, #28]
 800d506:	440a      	add	r2, r1
 800d508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d50c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d510:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d512:	69bb      	ldr	r3, [r7, #24]
 800d514:	015a      	lsls	r2, r3, #5
 800d516:	69fb      	ldr	r3, [r7, #28]
 800d518:	4413      	add	r3, r2
 800d51a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	69ba      	ldr	r2, [r7, #24]
 800d522:	0151      	lsls	r1, r2, #5
 800d524:	69fa      	ldr	r2, [r7, #28]
 800d526:	440a      	add	r2, r1
 800d528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d52c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d530:	6013      	str	r3, [r2, #0]
 800d532:	e12f      	b.n	800d794 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d534:	69bb      	ldr	r3, [r7, #24]
 800d536:	015a      	lsls	r2, r3, #5
 800d538:	69fb      	ldr	r3, [r7, #28]
 800d53a:	4413      	add	r3, r2
 800d53c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	69ba      	ldr	r2, [r7, #24]
 800d544:	0151      	lsls	r1, r2, #5
 800d546:	69fa      	ldr	r2, [r7, #28]
 800d548:	440a      	add	r2, r1
 800d54a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d54e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d552:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	78db      	ldrb	r3, [r3, #3]
 800d558:	2b01      	cmp	r3, #1
 800d55a:	d015      	beq.n	800d588 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	695b      	ldr	r3, [r3, #20]
 800d560:	2b00      	cmp	r3, #0
 800d562:	f000 8117 	beq.w	800d794 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d566:	69fb      	ldr	r3, [r7, #28]
 800d568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d56c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	781b      	ldrb	r3, [r3, #0]
 800d572:	f003 030f 	and.w	r3, r3, #15
 800d576:	2101      	movs	r1, #1
 800d578:	fa01 f303 	lsl.w	r3, r1, r3
 800d57c:	69f9      	ldr	r1, [r7, #28]
 800d57e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d582:	4313      	orrs	r3, r2
 800d584:	634b      	str	r3, [r1, #52]	; 0x34
 800d586:	e105      	b.n	800d794 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d588:	69fb      	ldr	r3, [r7, #28]
 800d58a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d58e:	689b      	ldr	r3, [r3, #8]
 800d590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d594:	2b00      	cmp	r3, #0
 800d596:	d110      	bne.n	800d5ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d598:	69bb      	ldr	r3, [r7, #24]
 800d59a:	015a      	lsls	r2, r3, #5
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	4413      	add	r3, r2
 800d5a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	69ba      	ldr	r2, [r7, #24]
 800d5a8:	0151      	lsls	r1, r2, #5
 800d5aa:	69fa      	ldr	r2, [r7, #28]
 800d5ac:	440a      	add	r2, r1
 800d5ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d5b6:	6013      	str	r3, [r2, #0]
 800d5b8:	e00f      	b.n	800d5da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d5ba:	69bb      	ldr	r3, [r7, #24]
 800d5bc:	015a      	lsls	r2, r3, #5
 800d5be:	69fb      	ldr	r3, [r7, #28]
 800d5c0:	4413      	add	r3, r2
 800d5c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	69ba      	ldr	r2, [r7, #24]
 800d5ca:	0151      	lsls	r1, r2, #5
 800d5cc:	69fa      	ldr	r2, [r7, #28]
 800d5ce:	440a      	add	r2, r1
 800d5d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	68d9      	ldr	r1, [r3, #12]
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	781a      	ldrb	r2, [r3, #0]
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	695b      	ldr	r3, [r3, #20]
 800d5e6:	b298      	uxth	r0, r3
 800d5e8:	79fb      	ldrb	r3, [r7, #7]
 800d5ea:	9300      	str	r3, [sp, #0]
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	68f8      	ldr	r0, [r7, #12]
 800d5f0:	f000 fa2b 	bl	800da4a <USB_WritePacket>
 800d5f4:	e0ce      	b.n	800d794 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d5f6:	69bb      	ldr	r3, [r7, #24]
 800d5f8:	015a      	lsls	r2, r3, #5
 800d5fa:	69fb      	ldr	r3, [r7, #28]
 800d5fc:	4413      	add	r3, r2
 800d5fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d602:	691b      	ldr	r3, [r3, #16]
 800d604:	69ba      	ldr	r2, [r7, #24]
 800d606:	0151      	lsls	r1, r2, #5
 800d608:	69fa      	ldr	r2, [r7, #28]
 800d60a:	440a      	add	r2, r1
 800d60c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d610:	0cdb      	lsrs	r3, r3, #19
 800d612:	04db      	lsls	r3, r3, #19
 800d614:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d616:	69bb      	ldr	r3, [r7, #24]
 800d618:	015a      	lsls	r2, r3, #5
 800d61a:	69fb      	ldr	r3, [r7, #28]
 800d61c:	4413      	add	r3, r2
 800d61e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d622:	691b      	ldr	r3, [r3, #16]
 800d624:	69ba      	ldr	r2, [r7, #24]
 800d626:	0151      	lsls	r1, r2, #5
 800d628:	69fa      	ldr	r2, [r7, #28]
 800d62a:	440a      	add	r2, r1
 800d62c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d630:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d634:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d638:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	695b      	ldr	r3, [r3, #20]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d126      	bne.n	800d690 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d642:	69bb      	ldr	r3, [r7, #24]
 800d644:	015a      	lsls	r2, r3, #5
 800d646:	69fb      	ldr	r3, [r7, #28]
 800d648:	4413      	add	r3, r2
 800d64a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d64e:	691a      	ldr	r2, [r3, #16]
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	689b      	ldr	r3, [r3, #8]
 800d654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d658:	69b9      	ldr	r1, [r7, #24]
 800d65a:	0148      	lsls	r0, r1, #5
 800d65c:	69f9      	ldr	r1, [r7, #28]
 800d65e:	4401      	add	r1, r0
 800d660:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d664:	4313      	orrs	r3, r2
 800d666:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d668:	69bb      	ldr	r3, [r7, #24]
 800d66a:	015a      	lsls	r2, r3, #5
 800d66c:	69fb      	ldr	r3, [r7, #28]
 800d66e:	4413      	add	r3, r2
 800d670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d674:	691b      	ldr	r3, [r3, #16]
 800d676:	69ba      	ldr	r2, [r7, #24]
 800d678:	0151      	lsls	r1, r2, #5
 800d67a:	69fa      	ldr	r2, [r7, #28]
 800d67c:	440a      	add	r2, r1
 800d67e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d682:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d686:	6113      	str	r3, [r2, #16]
 800d688:	e036      	b.n	800d6f8 <USB_EPStartXfer+0x3dc>
 800d68a:	bf00      	nop
 800d68c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	695a      	ldr	r2, [r3, #20]
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	689b      	ldr	r3, [r3, #8]
 800d698:	4413      	add	r3, r2
 800d69a:	1e5a      	subs	r2, r3, #1
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	689b      	ldr	r3, [r3, #8]
 800d6a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6a4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d6a6:	69bb      	ldr	r3, [r7, #24]
 800d6a8:	015a      	lsls	r2, r3, #5
 800d6aa:	69fb      	ldr	r3, [r7, #28]
 800d6ac:	4413      	add	r3, r2
 800d6ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6b2:	691a      	ldr	r2, [r3, #16]
 800d6b4:	8afb      	ldrh	r3, [r7, #22]
 800d6b6:	04d9      	lsls	r1, r3, #19
 800d6b8:	4b39      	ldr	r3, [pc, #228]	; (800d7a0 <USB_EPStartXfer+0x484>)
 800d6ba:	400b      	ands	r3, r1
 800d6bc:	69b9      	ldr	r1, [r7, #24]
 800d6be:	0148      	lsls	r0, r1, #5
 800d6c0:	69f9      	ldr	r1, [r7, #28]
 800d6c2:	4401      	add	r1, r0
 800d6c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d6cc:	69bb      	ldr	r3, [r7, #24]
 800d6ce:	015a      	lsls	r2, r3, #5
 800d6d0:	69fb      	ldr	r3, [r7, #28]
 800d6d2:	4413      	add	r3, r2
 800d6d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6d8:	691a      	ldr	r2, [r3, #16]
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	689b      	ldr	r3, [r3, #8]
 800d6de:	8af9      	ldrh	r1, [r7, #22]
 800d6e0:	fb01 f303 	mul.w	r3, r1, r3
 800d6e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d6e8:	69b9      	ldr	r1, [r7, #24]
 800d6ea:	0148      	lsls	r0, r1, #5
 800d6ec:	69f9      	ldr	r1, [r7, #28]
 800d6ee:	4401      	add	r1, r0
 800d6f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d6f4:	4313      	orrs	r3, r2
 800d6f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d6f8:	79fb      	ldrb	r3, [r7, #7]
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d10d      	bne.n	800d71a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	68db      	ldr	r3, [r3, #12]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d009      	beq.n	800d71a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	68d9      	ldr	r1, [r3, #12]
 800d70a:	69bb      	ldr	r3, [r7, #24]
 800d70c:	015a      	lsls	r2, r3, #5
 800d70e:	69fb      	ldr	r3, [r7, #28]
 800d710:	4413      	add	r3, r2
 800d712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d716:	460a      	mov	r2, r1
 800d718:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	78db      	ldrb	r3, [r3, #3]
 800d71e:	2b01      	cmp	r3, #1
 800d720:	d128      	bne.n	800d774 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d722:	69fb      	ldr	r3, [r7, #28]
 800d724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d728:	689b      	ldr	r3, [r3, #8]
 800d72a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d110      	bne.n	800d754 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d732:	69bb      	ldr	r3, [r7, #24]
 800d734:	015a      	lsls	r2, r3, #5
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	4413      	add	r3, r2
 800d73a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	69ba      	ldr	r2, [r7, #24]
 800d742:	0151      	lsls	r1, r2, #5
 800d744:	69fa      	ldr	r2, [r7, #28]
 800d746:	440a      	add	r2, r1
 800d748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d74c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d750:	6013      	str	r3, [r2, #0]
 800d752:	e00f      	b.n	800d774 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d754:	69bb      	ldr	r3, [r7, #24]
 800d756:	015a      	lsls	r2, r3, #5
 800d758:	69fb      	ldr	r3, [r7, #28]
 800d75a:	4413      	add	r3, r2
 800d75c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	69ba      	ldr	r2, [r7, #24]
 800d764:	0151      	lsls	r1, r2, #5
 800d766:	69fa      	ldr	r2, [r7, #28]
 800d768:	440a      	add	r2, r1
 800d76a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d76e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d772:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d774:	69bb      	ldr	r3, [r7, #24]
 800d776:	015a      	lsls	r2, r3, #5
 800d778:	69fb      	ldr	r3, [r7, #28]
 800d77a:	4413      	add	r3, r2
 800d77c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	69ba      	ldr	r2, [r7, #24]
 800d784:	0151      	lsls	r1, r2, #5
 800d786:	69fa      	ldr	r2, [r7, #28]
 800d788:	440a      	add	r2, r1
 800d78a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d78e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d792:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d794:	2300      	movs	r3, #0
}
 800d796:	4618      	mov	r0, r3
 800d798:	3720      	adds	r7, #32
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
 800d79e:	bf00      	nop
 800d7a0:	1ff80000 	.word	0x1ff80000

0800d7a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b087      	sub	sp, #28
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	60f8      	str	r0, [r7, #12]
 800d7ac:	60b9      	str	r1, [r7, #8]
 800d7ae:	4613      	mov	r3, r2
 800d7b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	785b      	ldrb	r3, [r3, #1]
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	f040 80cd 	bne.w	800d960 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	695b      	ldr	r3, [r3, #20]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d132      	bne.n	800d834 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	015a      	lsls	r2, r3, #5
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	4413      	add	r3, r2
 800d7d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7da:	691b      	ldr	r3, [r3, #16]
 800d7dc:	693a      	ldr	r2, [r7, #16]
 800d7de:	0151      	lsls	r1, r2, #5
 800d7e0:	697a      	ldr	r2, [r7, #20]
 800d7e2:	440a      	add	r2, r1
 800d7e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d7ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d7f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d7f2:	693b      	ldr	r3, [r7, #16]
 800d7f4:	015a      	lsls	r2, r3, #5
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	4413      	add	r3, r2
 800d7fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7fe:	691b      	ldr	r3, [r3, #16]
 800d800:	693a      	ldr	r2, [r7, #16]
 800d802:	0151      	lsls	r1, r2, #5
 800d804:	697a      	ldr	r2, [r7, #20]
 800d806:	440a      	add	r2, r1
 800d808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d80c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d810:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	015a      	lsls	r2, r3, #5
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	4413      	add	r3, r2
 800d81a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d81e:	691b      	ldr	r3, [r3, #16]
 800d820:	693a      	ldr	r2, [r7, #16]
 800d822:	0151      	lsls	r1, r2, #5
 800d824:	697a      	ldr	r2, [r7, #20]
 800d826:	440a      	add	r2, r1
 800d828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d82c:	0cdb      	lsrs	r3, r3, #19
 800d82e:	04db      	lsls	r3, r3, #19
 800d830:	6113      	str	r3, [r2, #16]
 800d832:	e04e      	b.n	800d8d2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	015a      	lsls	r2, r3, #5
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	4413      	add	r3, r2
 800d83c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d840:	691b      	ldr	r3, [r3, #16]
 800d842:	693a      	ldr	r2, [r7, #16]
 800d844:	0151      	lsls	r1, r2, #5
 800d846:	697a      	ldr	r2, [r7, #20]
 800d848:	440a      	add	r2, r1
 800d84a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d84e:	0cdb      	lsrs	r3, r3, #19
 800d850:	04db      	lsls	r3, r3, #19
 800d852:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	015a      	lsls	r2, r3, #5
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	4413      	add	r3, r2
 800d85c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d860:	691b      	ldr	r3, [r3, #16]
 800d862:	693a      	ldr	r2, [r7, #16]
 800d864:	0151      	lsls	r1, r2, #5
 800d866:	697a      	ldr	r2, [r7, #20]
 800d868:	440a      	add	r2, r1
 800d86a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d86e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d872:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d876:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	695a      	ldr	r2, [r3, #20]
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	429a      	cmp	r2, r3
 800d882:	d903      	bls.n	800d88c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	689a      	ldr	r2, [r3, #8]
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	015a      	lsls	r2, r3, #5
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	4413      	add	r3, r2
 800d894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d898:	691b      	ldr	r3, [r3, #16]
 800d89a:	693a      	ldr	r2, [r7, #16]
 800d89c:	0151      	lsls	r1, r2, #5
 800d89e:	697a      	ldr	r2, [r7, #20]
 800d8a0:	440a      	add	r2, r1
 800d8a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d8aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	015a      	lsls	r2, r3, #5
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	4413      	add	r3, r2
 800d8b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8b8:	691a      	ldr	r2, [r3, #16]
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	695b      	ldr	r3, [r3, #20]
 800d8be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d8c2:	6939      	ldr	r1, [r7, #16]
 800d8c4:	0148      	lsls	r0, r1, #5
 800d8c6:	6979      	ldr	r1, [r7, #20]
 800d8c8:	4401      	add	r1, r0
 800d8ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d8ce:	4313      	orrs	r3, r2
 800d8d0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d8d2:	79fb      	ldrb	r3, [r7, #7]
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d11e      	bne.n	800d916 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	691b      	ldr	r3, [r3, #16]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d009      	beq.n	800d8f4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d8e0:	693b      	ldr	r3, [r7, #16]
 800d8e2:	015a      	lsls	r2, r3, #5
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	4413      	add	r3, r2
 800d8e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	691b      	ldr	r3, [r3, #16]
 800d8f2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	015a      	lsls	r2, r3, #5
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	4413      	add	r3, r2
 800d8fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	693a      	ldr	r2, [r7, #16]
 800d904:	0151      	lsls	r1, r2, #5
 800d906:	697a      	ldr	r2, [r7, #20]
 800d908:	440a      	add	r2, r1
 800d90a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d90e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d912:	6013      	str	r3, [r2, #0]
 800d914:	e092      	b.n	800da3c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	015a      	lsls	r2, r3, #5
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	4413      	add	r3, r2
 800d91e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	693a      	ldr	r2, [r7, #16]
 800d926:	0151      	lsls	r1, r2, #5
 800d928:	697a      	ldr	r2, [r7, #20]
 800d92a:	440a      	add	r2, r1
 800d92c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d930:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d934:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	695b      	ldr	r3, [r3, #20]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d07e      	beq.n	800da3c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	f003 030f 	and.w	r3, r3, #15
 800d94e:	2101      	movs	r1, #1
 800d950:	fa01 f303 	lsl.w	r3, r1, r3
 800d954:	6979      	ldr	r1, [r7, #20]
 800d956:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d95a:	4313      	orrs	r3, r2
 800d95c:	634b      	str	r3, [r1, #52]	; 0x34
 800d95e:	e06d      	b.n	800da3c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	015a      	lsls	r2, r3, #5
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	4413      	add	r3, r2
 800d968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d96c:	691b      	ldr	r3, [r3, #16]
 800d96e:	693a      	ldr	r2, [r7, #16]
 800d970:	0151      	lsls	r1, r2, #5
 800d972:	697a      	ldr	r2, [r7, #20]
 800d974:	440a      	add	r2, r1
 800d976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d97a:	0cdb      	lsrs	r3, r3, #19
 800d97c:	04db      	lsls	r3, r3, #19
 800d97e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d980:	693b      	ldr	r3, [r7, #16]
 800d982:	015a      	lsls	r2, r3, #5
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	4413      	add	r3, r2
 800d988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d98c:	691b      	ldr	r3, [r3, #16]
 800d98e:	693a      	ldr	r2, [r7, #16]
 800d990:	0151      	lsls	r1, r2, #5
 800d992:	697a      	ldr	r2, [r7, #20]
 800d994:	440a      	add	r2, r1
 800d996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d99a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d99e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d9a2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	695b      	ldr	r3, [r3, #20]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d003      	beq.n	800d9b4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	689a      	ldr	r2, [r3, #8]
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d9b4:	693b      	ldr	r3, [r7, #16]
 800d9b6:	015a      	lsls	r2, r3, #5
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	4413      	add	r3, r2
 800d9bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9c0:	691b      	ldr	r3, [r3, #16]
 800d9c2:	693a      	ldr	r2, [r7, #16]
 800d9c4:	0151      	lsls	r1, r2, #5
 800d9c6:	697a      	ldr	r2, [r7, #20]
 800d9c8:	440a      	add	r2, r1
 800d9ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d9d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	015a      	lsls	r2, r3, #5
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	4413      	add	r3, r2
 800d9dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9e0:	691a      	ldr	r2, [r3, #16]
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	689b      	ldr	r3, [r3, #8]
 800d9e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d9ea:	6939      	ldr	r1, [r7, #16]
 800d9ec:	0148      	lsls	r0, r1, #5
 800d9ee:	6979      	ldr	r1, [r7, #20]
 800d9f0:	4401      	add	r1, r0
 800d9f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d9f6:	4313      	orrs	r3, r2
 800d9f8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d9fa:	79fb      	ldrb	r3, [r7, #7]
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	d10d      	bne.n	800da1c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	68db      	ldr	r3, [r3, #12]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d009      	beq.n	800da1c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	68d9      	ldr	r1, [r3, #12]
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	015a      	lsls	r2, r3, #5
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	4413      	add	r3, r2
 800da14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da18:	460a      	mov	r2, r1
 800da1a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	015a      	lsls	r2, r3, #5
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	4413      	add	r3, r2
 800da24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	693a      	ldr	r2, [r7, #16]
 800da2c:	0151      	lsls	r1, r2, #5
 800da2e:	697a      	ldr	r2, [r7, #20]
 800da30:	440a      	add	r2, r1
 800da32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800da3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800da3c:	2300      	movs	r3, #0
}
 800da3e:	4618      	mov	r0, r3
 800da40:	371c      	adds	r7, #28
 800da42:	46bd      	mov	sp, r7
 800da44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da48:	4770      	bx	lr

0800da4a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800da4a:	b480      	push	{r7}
 800da4c:	b089      	sub	sp, #36	; 0x24
 800da4e:	af00      	add	r7, sp, #0
 800da50:	60f8      	str	r0, [r7, #12]
 800da52:	60b9      	str	r1, [r7, #8]
 800da54:	4611      	mov	r1, r2
 800da56:	461a      	mov	r2, r3
 800da58:	460b      	mov	r3, r1
 800da5a:	71fb      	strb	r3, [r7, #7]
 800da5c:	4613      	mov	r3, r2
 800da5e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800da68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d11a      	bne.n	800daa6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800da70:	88bb      	ldrh	r3, [r7, #4]
 800da72:	3303      	adds	r3, #3
 800da74:	089b      	lsrs	r3, r3, #2
 800da76:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800da78:	2300      	movs	r3, #0
 800da7a:	61bb      	str	r3, [r7, #24]
 800da7c:	e00f      	b.n	800da9e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800da7e:	79fb      	ldrb	r3, [r7, #7]
 800da80:	031a      	lsls	r2, r3, #12
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	4413      	add	r3, r2
 800da86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da8a:	461a      	mov	r2, r3
 800da8c:	69fb      	ldr	r3, [r7, #28]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	6013      	str	r3, [r2, #0]
      pSrc++;
 800da92:	69fb      	ldr	r3, [r7, #28]
 800da94:	3304      	adds	r3, #4
 800da96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800da98:	69bb      	ldr	r3, [r7, #24]
 800da9a:	3301      	adds	r3, #1
 800da9c:	61bb      	str	r3, [r7, #24]
 800da9e:	69ba      	ldr	r2, [r7, #24]
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d3eb      	bcc.n	800da7e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800daa6:	2300      	movs	r3, #0
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3724      	adds	r7, #36	; 0x24
 800daac:	46bd      	mov	sp, r7
 800daae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab2:	4770      	bx	lr

0800dab4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b089      	sub	sp, #36	; 0x24
 800dab8:	af00      	add	r7, sp, #0
 800daba:	60f8      	str	r0, [r7, #12]
 800dabc:	60b9      	str	r1, [r7, #8]
 800dabe:	4613      	mov	r3, r2
 800dac0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800daca:	88fb      	ldrh	r3, [r7, #6]
 800dacc:	3303      	adds	r3, #3
 800dace:	089b      	lsrs	r3, r3, #2
 800dad0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800dad2:	2300      	movs	r3, #0
 800dad4:	61bb      	str	r3, [r7, #24]
 800dad6:	e00b      	b.n	800daf0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dade:	681a      	ldr	r2, [r3, #0]
 800dae0:	69fb      	ldr	r3, [r7, #28]
 800dae2:	601a      	str	r2, [r3, #0]
    pDest++;
 800dae4:	69fb      	ldr	r3, [r7, #28]
 800dae6:	3304      	adds	r3, #4
 800dae8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800daea:	69bb      	ldr	r3, [r7, #24]
 800daec:	3301      	adds	r3, #1
 800daee:	61bb      	str	r3, [r7, #24]
 800daf0:	69ba      	ldr	r2, [r7, #24]
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	429a      	cmp	r2, r3
 800daf6:	d3ef      	bcc.n	800dad8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800daf8:	69fb      	ldr	r3, [r7, #28]
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3724      	adds	r7, #36	; 0x24
 800dafe:	46bd      	mov	sp, r7
 800db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db04:	4770      	bx	lr

0800db06 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800db06:	b480      	push	{r7}
 800db08:	b085      	sub	sp, #20
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	6078      	str	r0, [r7, #4]
 800db0e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	785b      	ldrb	r3, [r3, #1]
 800db1e:	2b01      	cmp	r3, #1
 800db20:	d12c      	bne.n	800db7c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	015a      	lsls	r2, r3, #5
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	4413      	add	r3, r2
 800db2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	2b00      	cmp	r3, #0
 800db32:	db12      	blt.n	800db5a <USB_EPSetStall+0x54>
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d00f      	beq.n	800db5a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	015a      	lsls	r2, r3, #5
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	4413      	add	r3, r2
 800db42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	68ba      	ldr	r2, [r7, #8]
 800db4a:	0151      	lsls	r1, r2, #5
 800db4c:	68fa      	ldr	r2, [r7, #12]
 800db4e:	440a      	add	r2, r1
 800db50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800db58:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	015a      	lsls	r2, r3, #5
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	4413      	add	r3, r2
 800db62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	68ba      	ldr	r2, [r7, #8]
 800db6a:	0151      	lsls	r1, r2, #5
 800db6c:	68fa      	ldr	r2, [r7, #12]
 800db6e:	440a      	add	r2, r1
 800db70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800db78:	6013      	str	r3, [r2, #0]
 800db7a:	e02b      	b.n	800dbd4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	015a      	lsls	r2, r3, #5
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	4413      	add	r3, r2
 800db84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	db12      	blt.n	800dbb4 <USB_EPSetStall+0xae>
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d00f      	beq.n	800dbb4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	015a      	lsls	r2, r3, #5
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	4413      	add	r3, r2
 800db9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	68ba      	ldr	r2, [r7, #8]
 800dba4:	0151      	lsls	r1, r2, #5
 800dba6:	68fa      	ldr	r2, [r7, #12]
 800dba8:	440a      	add	r2, r1
 800dbaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dbb2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	015a      	lsls	r2, r3, #5
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	4413      	add	r3, r2
 800dbbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	68ba      	ldr	r2, [r7, #8]
 800dbc4:	0151      	lsls	r1, r2, #5
 800dbc6:	68fa      	ldr	r2, [r7, #12]
 800dbc8:	440a      	add	r2, r1
 800dbca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dbd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dbd4:	2300      	movs	r3, #0
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3714      	adds	r7, #20
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe0:	4770      	bx	lr

0800dbe2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dbe2:	b480      	push	{r7}
 800dbe4:	b085      	sub	sp, #20
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]
 800dbea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	785b      	ldrb	r3, [r3, #1]
 800dbfa:	2b01      	cmp	r3, #1
 800dbfc:	d128      	bne.n	800dc50 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	015a      	lsls	r2, r3, #5
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	4413      	add	r3, r2
 800dc06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	68ba      	ldr	r2, [r7, #8]
 800dc0e:	0151      	lsls	r1, r2, #5
 800dc10:	68fa      	ldr	r2, [r7, #12]
 800dc12:	440a      	add	r2, r1
 800dc14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dc1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	78db      	ldrb	r3, [r3, #3]
 800dc22:	2b03      	cmp	r3, #3
 800dc24:	d003      	beq.n	800dc2e <USB_EPClearStall+0x4c>
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	78db      	ldrb	r3, [r3, #3]
 800dc2a:	2b02      	cmp	r3, #2
 800dc2c:	d138      	bne.n	800dca0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	015a      	lsls	r2, r3, #5
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	4413      	add	r3, r2
 800dc36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	68ba      	ldr	r2, [r7, #8]
 800dc3e:	0151      	lsls	r1, r2, #5
 800dc40:	68fa      	ldr	r2, [r7, #12]
 800dc42:	440a      	add	r2, r1
 800dc44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc4c:	6013      	str	r3, [r2, #0]
 800dc4e:	e027      	b.n	800dca0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	015a      	lsls	r2, r3, #5
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	4413      	add	r3, r2
 800dc58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	68ba      	ldr	r2, [r7, #8]
 800dc60:	0151      	lsls	r1, r2, #5
 800dc62:	68fa      	ldr	r2, [r7, #12]
 800dc64:	440a      	add	r2, r1
 800dc66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dc6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	78db      	ldrb	r3, [r3, #3]
 800dc74:	2b03      	cmp	r3, #3
 800dc76:	d003      	beq.n	800dc80 <USB_EPClearStall+0x9e>
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	78db      	ldrb	r3, [r3, #3]
 800dc7c:	2b02      	cmp	r3, #2
 800dc7e:	d10f      	bne.n	800dca0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	015a      	lsls	r2, r3, #5
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	4413      	add	r3, r2
 800dc88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	68ba      	ldr	r2, [r7, #8]
 800dc90:	0151      	lsls	r1, r2, #5
 800dc92:	68fa      	ldr	r2, [r7, #12]
 800dc94:	440a      	add	r2, r1
 800dc96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc9e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800dca0:	2300      	movs	r3, #0
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3714      	adds	r7, #20
 800dca6:	46bd      	mov	sp, r7
 800dca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcac:	4770      	bx	lr

0800dcae <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800dcae:	b480      	push	{r7}
 800dcb0:	b085      	sub	sp, #20
 800dcb2:	af00      	add	r7, sp, #0
 800dcb4:	6078      	str	r0, [r7, #4]
 800dcb6:	460b      	mov	r3, r1
 800dcb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	68fa      	ldr	r2, [r7, #12]
 800dcc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dccc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800dcd0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcd8:	681a      	ldr	r2, [r3, #0]
 800dcda:	78fb      	ldrb	r3, [r7, #3]
 800dcdc:	011b      	lsls	r3, r3, #4
 800dcde:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800dce2:	68f9      	ldr	r1, [r7, #12]
 800dce4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dce8:	4313      	orrs	r3, r2
 800dcea:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800dcec:	2300      	movs	r3, #0
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3714      	adds	r7, #20
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr

0800dcfa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800dcfa:	b480      	push	{r7}
 800dcfc:	b085      	sub	sp, #20
 800dcfe:	af00      	add	r7, sp, #0
 800dd00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	68fa      	ldr	r2, [r7, #12]
 800dd10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dd14:	f023 0303 	bic.w	r3, r3, #3
 800dd18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd20:	685b      	ldr	r3, [r3, #4]
 800dd22:	68fa      	ldr	r2, [r7, #12]
 800dd24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dd28:	f023 0302 	bic.w	r3, r3, #2
 800dd2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dd2e:	2300      	movs	r3, #0
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	3714      	adds	r7, #20
 800dd34:	46bd      	mov	sp, r7
 800dd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3a:	4770      	bx	lr

0800dd3c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800dd3c:	b480      	push	{r7}
 800dd3e:	b085      	sub	sp, #20
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	68fa      	ldr	r2, [r7, #12]
 800dd52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dd56:	f023 0303 	bic.w	r3, r3, #3
 800dd5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd62:	685b      	ldr	r3, [r3, #4]
 800dd64:	68fa      	ldr	r2, [r7, #12]
 800dd66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dd6a:	f043 0302 	orr.w	r3, r3, #2
 800dd6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dd70:	2300      	movs	r3, #0
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3714      	adds	r7, #20
 800dd76:	46bd      	mov	sp, r7
 800dd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7c:	4770      	bx	lr

0800dd7e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800dd7e:	b480      	push	{r7}
 800dd80:	b085      	sub	sp, #20
 800dd82:	af00      	add	r7, sp, #0
 800dd84:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	695b      	ldr	r3, [r3, #20]
 800dd8a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	699b      	ldr	r3, [r3, #24]
 800dd90:	68fa      	ldr	r2, [r7, #12]
 800dd92:	4013      	ands	r3, r2
 800dd94:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800dd96:	68fb      	ldr	r3, [r7, #12]
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3714      	adds	r7, #20
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr

0800dda4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dda4:	b480      	push	{r7}
 800dda6:	b085      	sub	sp, #20
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddb6:	699b      	ldr	r3, [r3, #24]
 800ddb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddc0:	69db      	ldr	r3, [r3, #28]
 800ddc2:	68ba      	ldr	r2, [r7, #8]
 800ddc4:	4013      	ands	r3, r2
 800ddc6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	0c1b      	lsrs	r3, r3, #16
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3714      	adds	r7, #20
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr

0800ddd8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b085      	sub	sp, #20
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddea:	699b      	ldr	r3, [r3, #24]
 800ddec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddf4:	69db      	ldr	r3, [r3, #28]
 800ddf6:	68ba      	ldr	r2, [r7, #8]
 800ddf8:	4013      	ands	r3, r2
 800ddfa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	b29b      	uxth	r3, r3
}
 800de00:	4618      	mov	r0, r3
 800de02:	3714      	adds	r7, #20
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr

0800de0c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b085      	sub	sp, #20
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	460b      	mov	r3, r1
 800de16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800de1c:	78fb      	ldrb	r3, [r7, #3]
 800de1e:	015a      	lsls	r2, r3, #5
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	4413      	add	r3, r2
 800de24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de28:	689b      	ldr	r3, [r3, #8]
 800de2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de32:	695b      	ldr	r3, [r3, #20]
 800de34:	68ba      	ldr	r2, [r7, #8]
 800de36:	4013      	ands	r3, r2
 800de38:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800de3a:	68bb      	ldr	r3, [r7, #8]
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3714      	adds	r7, #20
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr

0800de48 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800de48:	b480      	push	{r7}
 800de4a:	b087      	sub	sp, #28
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	460b      	mov	r3, r1
 800de52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de5e:	691b      	ldr	r3, [r3, #16]
 800de60:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de6a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800de6c:	78fb      	ldrb	r3, [r7, #3]
 800de6e:	f003 030f 	and.w	r3, r3, #15
 800de72:	68fa      	ldr	r2, [r7, #12]
 800de74:	fa22 f303 	lsr.w	r3, r2, r3
 800de78:	01db      	lsls	r3, r3, #7
 800de7a:	b2db      	uxtb	r3, r3
 800de7c:	693a      	ldr	r2, [r7, #16]
 800de7e:	4313      	orrs	r3, r2
 800de80:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800de82:	78fb      	ldrb	r3, [r7, #3]
 800de84:	015a      	lsls	r2, r3, #5
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	4413      	add	r3, r2
 800de8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de8e:	689b      	ldr	r3, [r3, #8]
 800de90:	693a      	ldr	r2, [r7, #16]
 800de92:	4013      	ands	r3, r2
 800de94:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800de96:	68bb      	ldr	r3, [r7, #8]
}
 800de98:	4618      	mov	r0, r3
 800de9a:	371c      	adds	r7, #28
 800de9c:	46bd      	mov	sp, r7
 800de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea2:	4770      	bx	lr

0800dea4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800dea4:	b480      	push	{r7}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	695b      	ldr	r3, [r3, #20]
 800deb0:	f003 0301 	and.w	r3, r3, #1
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	370c      	adds	r7, #12
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr

0800dec0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800dec0:	b480      	push	{r7}
 800dec2:	b085      	sub	sp, #20
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	68fa      	ldr	r2, [r7, #12]
 800ded6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800deda:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800dede:	f023 0307 	bic.w	r3, r3, #7
 800dee2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800deea:	685b      	ldr	r3, [r3, #4]
 800deec:	68fa      	ldr	r2, [r7, #12]
 800deee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800def2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800def6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800def8:	2300      	movs	r3, #0
}
 800defa:	4618      	mov	r0, r3
 800defc:	3714      	adds	r7, #20
 800defe:	46bd      	mov	sp, r7
 800df00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df04:	4770      	bx	lr
	...

0800df08 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800df08:	b480      	push	{r7}
 800df0a:	b087      	sub	sp, #28
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	60f8      	str	r0, [r7, #12]
 800df10:	460b      	mov	r3, r1
 800df12:	607a      	str	r2, [r7, #4]
 800df14:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	333c      	adds	r3, #60	; 0x3c
 800df1e:	3304      	adds	r3, #4
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	4a26      	ldr	r2, [pc, #152]	; (800dfc0 <USB_EP0_OutStart+0xb8>)
 800df28:	4293      	cmp	r3, r2
 800df2a:	d90a      	bls.n	800df42 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800df38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df3c:	d101      	bne.n	800df42 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800df3e:	2300      	movs	r3, #0
 800df40:	e037      	b.n	800dfb2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df48:	461a      	mov	r2, r3
 800df4a:	2300      	movs	r3, #0
 800df4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df54:	691b      	ldr	r3, [r3, #16]
 800df56:	697a      	ldr	r2, [r7, #20]
 800df58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800df60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df68:	691b      	ldr	r3, [r3, #16]
 800df6a:	697a      	ldr	r2, [r7, #20]
 800df6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df70:	f043 0318 	orr.w	r3, r3, #24
 800df74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df7c:	691b      	ldr	r3, [r3, #16]
 800df7e:	697a      	ldr	r2, [r7, #20]
 800df80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df84:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800df88:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800df8a:	7afb      	ldrb	r3, [r7, #11]
 800df8c:	2b01      	cmp	r3, #1
 800df8e:	d10f      	bne.n	800dfb0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df96:	461a      	mov	r2, r3
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	697a      	ldr	r2, [r7, #20]
 800dfa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dfaa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800dfae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dfb0:	2300      	movs	r3, #0
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	371c      	adds	r7, #28
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbc:	4770      	bx	lr
 800dfbe:	bf00      	nop
 800dfc0:	4f54300a 	.word	0x4f54300a

0800dfc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b085      	sub	sp, #20
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	60fb      	str	r3, [r7, #12]
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	4a13      	ldr	r2, [pc, #76]	; (800e028 <USB_CoreReset+0x64>)
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	d901      	bls.n	800dfe2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800dfde:	2303      	movs	r3, #3
 800dfe0:	e01b      	b.n	800e01a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	691b      	ldr	r3, [r3, #16]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	daf2      	bge.n	800dfd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dfea:	2300      	movs	r3, #0
 800dfec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	691b      	ldr	r3, [r3, #16]
 800dff2:	f043 0201 	orr.w	r2, r3, #1
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	3301      	adds	r3, #1
 800dffe:	60fb      	str	r3, [r7, #12]
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	4a09      	ldr	r2, [pc, #36]	; (800e028 <USB_CoreReset+0x64>)
 800e004:	4293      	cmp	r3, r2
 800e006:	d901      	bls.n	800e00c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e008:	2303      	movs	r3, #3
 800e00a:	e006      	b.n	800e01a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	691b      	ldr	r3, [r3, #16]
 800e010:	f003 0301 	and.w	r3, r3, #1
 800e014:	2b01      	cmp	r3, #1
 800e016:	d0f0      	beq.n	800dffa <USB_CoreReset+0x36>

  return HAL_OK;
 800e018:	2300      	movs	r3, #0
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3714      	adds	r7, #20
 800e01e:	46bd      	mov	sp, r7
 800e020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e024:	4770      	bx	lr
 800e026:	bf00      	nop
 800e028:	00030d40 	.word	0x00030d40

0800e02c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b084      	sub	sp, #16
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	460b      	mov	r3, r1
 800e036:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e038:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e03c:	f005 fe4e 	bl	8013cdc <USBD_static_malloc>
 800e040:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d105      	bne.n	800e054 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2200      	movs	r2, #0
 800e04c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e050:	2302      	movs	r3, #2
 800e052:	e066      	b.n	800e122 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	68fa      	ldr	r2, [r7, #12]
 800e058:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	7c1b      	ldrb	r3, [r3, #16]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d119      	bne.n	800e098 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e064:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e068:	2202      	movs	r2, #2
 800e06a:	2181      	movs	r1, #129	; 0x81
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f005 fd12 	bl	8013a96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2201      	movs	r2, #1
 800e076:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e078:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e07c:	2202      	movs	r2, #2
 800e07e:	2101      	movs	r1, #1
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f005 fd08 	bl	8013a96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2201      	movs	r2, #1
 800e08a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2210      	movs	r2, #16
 800e092:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e096:	e016      	b.n	800e0c6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e098:	2340      	movs	r3, #64	; 0x40
 800e09a:	2202      	movs	r2, #2
 800e09c:	2181      	movs	r1, #129	; 0x81
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f005 fcf9 	bl	8013a96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2201      	movs	r2, #1
 800e0a8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e0aa:	2340      	movs	r3, #64	; 0x40
 800e0ac:	2202      	movs	r2, #2
 800e0ae:	2101      	movs	r1, #1
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f005 fcf0 	bl	8013a96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2201      	movs	r2, #1
 800e0ba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2210      	movs	r2, #16
 800e0c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e0c6:	2308      	movs	r3, #8
 800e0c8:	2203      	movs	r2, #3
 800e0ca:	2182      	movs	r1, #130	; 0x82
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f005 fce2 	bl	8013a96 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2201      	movs	r2, #1
 800e0d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	7c1b      	ldrb	r3, [r3, #16]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d109      	bne.n	800e110 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e102:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e106:	2101      	movs	r1, #1
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f005 fdb3 	bl	8013c74 <USBD_LL_PrepareReceive>
 800e10e:	e007      	b.n	800e120 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e116:	2340      	movs	r3, #64	; 0x40
 800e118:	2101      	movs	r1, #1
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f005 fdaa 	bl	8013c74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e120:	2300      	movs	r3, #0
}
 800e122:	4618      	mov	r0, r3
 800e124:	3710      	adds	r7, #16
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}

0800e12a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e12a:	b580      	push	{r7, lr}
 800e12c:	b082      	sub	sp, #8
 800e12e:	af00      	add	r7, sp, #0
 800e130:	6078      	str	r0, [r7, #4]
 800e132:	460b      	mov	r3, r1
 800e134:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e136:	2181      	movs	r1, #129	; 0x81
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f005 fcd2 	bl	8013ae2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2200      	movs	r2, #0
 800e142:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e144:	2101      	movs	r1, #1
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f005 fccb 	bl	8013ae2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2200      	movs	r2, #0
 800e150:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e154:	2182      	movs	r1, #130	; 0x82
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f005 fcc3 	bl	8013ae2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2200      	movs	r2, #0
 800e160:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2200      	movs	r2, #0
 800e168:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e172:	2b00      	cmp	r3, #0
 800e174:	d00e      	beq.n	800e194 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e186:	4618      	mov	r0, r3
 800e188:	f005 fdb6 	bl	8013cf8 <USBD_static_free>
    pdev->pClassData = NULL;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2200      	movs	r2, #0
 800e190:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e194:	2300      	movs	r3, #0
}
 800e196:	4618      	mov	r0, r3
 800e198:	3708      	adds	r7, #8
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
	...

0800e1a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b086      	sub	sp, #24
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d101      	bne.n	800e1c8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e1c4:	2303      	movs	r3, #3
 800e1c6:	e0af      	b.n	800e328 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d03f      	beq.n	800e254 <USBD_CDC_Setup+0xb4>
 800e1d4:	2b20      	cmp	r3, #32
 800e1d6:	f040 809f 	bne.w	800e318 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	88db      	ldrh	r3, [r3, #6]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d02e      	beq.n	800e240 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	781b      	ldrb	r3, [r3, #0]
 800e1e6:	b25b      	sxtb	r3, r3
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	da16      	bge.n	800e21a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1f2:	689b      	ldr	r3, [r3, #8]
 800e1f4:	683a      	ldr	r2, [r7, #0]
 800e1f6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e1f8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e1fa:	683a      	ldr	r2, [r7, #0]
 800e1fc:	88d2      	ldrh	r2, [r2, #6]
 800e1fe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	88db      	ldrh	r3, [r3, #6]
 800e204:	2b07      	cmp	r3, #7
 800e206:	bf28      	it	cs
 800e208:	2307      	movcs	r3, #7
 800e20a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	89fa      	ldrh	r2, [r7, #14]
 800e210:	4619      	mov	r1, r3
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f001 fae9 	bl	800f7ea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e218:	e085      	b.n	800e326 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	785a      	ldrb	r2, [r3, #1]
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	88db      	ldrh	r3, [r3, #6]
 800e228:	b2da      	uxtb	r2, r3
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e230:	6939      	ldr	r1, [r7, #16]
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	88db      	ldrh	r3, [r3, #6]
 800e236:	461a      	mov	r2, r3
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f001 fb02 	bl	800f842 <USBD_CtlPrepareRx>
      break;
 800e23e:	e072      	b.n	800e326 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e246:	689b      	ldr	r3, [r3, #8]
 800e248:	683a      	ldr	r2, [r7, #0]
 800e24a:	7850      	ldrb	r0, [r2, #1]
 800e24c:	2200      	movs	r2, #0
 800e24e:	6839      	ldr	r1, [r7, #0]
 800e250:	4798      	blx	r3
      break;
 800e252:	e068      	b.n	800e326 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	785b      	ldrb	r3, [r3, #1]
 800e258:	2b0b      	cmp	r3, #11
 800e25a:	d852      	bhi.n	800e302 <USBD_CDC_Setup+0x162>
 800e25c:	a201      	add	r2, pc, #4	; (adr r2, 800e264 <USBD_CDC_Setup+0xc4>)
 800e25e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e262:	bf00      	nop
 800e264:	0800e295 	.word	0x0800e295
 800e268:	0800e311 	.word	0x0800e311
 800e26c:	0800e303 	.word	0x0800e303
 800e270:	0800e303 	.word	0x0800e303
 800e274:	0800e303 	.word	0x0800e303
 800e278:	0800e303 	.word	0x0800e303
 800e27c:	0800e303 	.word	0x0800e303
 800e280:	0800e303 	.word	0x0800e303
 800e284:	0800e303 	.word	0x0800e303
 800e288:	0800e303 	.word	0x0800e303
 800e28c:	0800e2bf 	.word	0x0800e2bf
 800e290:	0800e2e9 	.word	0x0800e2e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e29a:	b2db      	uxtb	r3, r3
 800e29c:	2b03      	cmp	r3, #3
 800e29e:	d107      	bne.n	800e2b0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e2a0:	f107 030a 	add.w	r3, r7, #10
 800e2a4:	2202      	movs	r2, #2
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f001 fa9e 	bl	800f7ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e2ae:	e032      	b.n	800e316 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e2b0:	6839      	ldr	r1, [r7, #0]
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f001 fa28 	bl	800f708 <USBD_CtlError>
            ret = USBD_FAIL;
 800e2b8:	2303      	movs	r3, #3
 800e2ba:	75fb      	strb	r3, [r7, #23]
          break;
 800e2bc:	e02b      	b.n	800e316 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2c4:	b2db      	uxtb	r3, r3
 800e2c6:	2b03      	cmp	r3, #3
 800e2c8:	d107      	bne.n	800e2da <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e2ca:	f107 030d 	add.w	r3, r7, #13
 800e2ce:	2201      	movs	r2, #1
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f001 fa89 	bl	800f7ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e2d8:	e01d      	b.n	800e316 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e2da:	6839      	ldr	r1, [r7, #0]
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f001 fa13 	bl	800f708 <USBD_CtlError>
            ret = USBD_FAIL;
 800e2e2:	2303      	movs	r3, #3
 800e2e4:	75fb      	strb	r3, [r7, #23]
          break;
 800e2e6:	e016      	b.n	800e316 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2ee:	b2db      	uxtb	r3, r3
 800e2f0:	2b03      	cmp	r3, #3
 800e2f2:	d00f      	beq.n	800e314 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e2f4:	6839      	ldr	r1, [r7, #0]
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f001 fa06 	bl	800f708 <USBD_CtlError>
            ret = USBD_FAIL;
 800e2fc:	2303      	movs	r3, #3
 800e2fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e300:	e008      	b.n	800e314 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e302:	6839      	ldr	r1, [r7, #0]
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f001 f9ff 	bl	800f708 <USBD_CtlError>
          ret = USBD_FAIL;
 800e30a:	2303      	movs	r3, #3
 800e30c:	75fb      	strb	r3, [r7, #23]
          break;
 800e30e:	e002      	b.n	800e316 <USBD_CDC_Setup+0x176>
          break;
 800e310:	bf00      	nop
 800e312:	e008      	b.n	800e326 <USBD_CDC_Setup+0x186>
          break;
 800e314:	bf00      	nop
      }
      break;
 800e316:	e006      	b.n	800e326 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e318:	6839      	ldr	r1, [r7, #0]
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f001 f9f4 	bl	800f708 <USBD_CtlError>
      ret = USBD_FAIL;
 800e320:	2303      	movs	r3, #3
 800e322:	75fb      	strb	r3, [r7, #23]
      break;
 800e324:	bf00      	nop
  }

  return (uint8_t)ret;
 800e326:	7dfb      	ldrb	r3, [r7, #23]
}
 800e328:	4618      	mov	r0, r3
 800e32a:	3718      	adds	r7, #24
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}

0800e330 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b084      	sub	sp, #16
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	460b      	mov	r3, r1
 800e33a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e342:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d101      	bne.n	800e352 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e34e:	2303      	movs	r3, #3
 800e350:	e04f      	b.n	800e3f2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e358:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e35a:	78fa      	ldrb	r2, [r7, #3]
 800e35c:	6879      	ldr	r1, [r7, #4]
 800e35e:	4613      	mov	r3, r2
 800e360:	009b      	lsls	r3, r3, #2
 800e362:	4413      	add	r3, r2
 800e364:	009b      	lsls	r3, r3, #2
 800e366:	440b      	add	r3, r1
 800e368:	3318      	adds	r3, #24
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d029      	beq.n	800e3c4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e370:	78fa      	ldrb	r2, [r7, #3]
 800e372:	6879      	ldr	r1, [r7, #4]
 800e374:	4613      	mov	r3, r2
 800e376:	009b      	lsls	r3, r3, #2
 800e378:	4413      	add	r3, r2
 800e37a:	009b      	lsls	r3, r3, #2
 800e37c:	440b      	add	r3, r1
 800e37e:	3318      	adds	r3, #24
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	78f9      	ldrb	r1, [r7, #3]
 800e384:	68f8      	ldr	r0, [r7, #12]
 800e386:	460b      	mov	r3, r1
 800e388:	00db      	lsls	r3, r3, #3
 800e38a:	1a5b      	subs	r3, r3, r1
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	4403      	add	r3, r0
 800e390:	3344      	adds	r3, #68	; 0x44
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	fbb2 f1f3 	udiv	r1, r2, r3
 800e398:	fb03 f301 	mul.w	r3, r3, r1
 800e39c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d110      	bne.n	800e3c4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e3a2:	78fa      	ldrb	r2, [r7, #3]
 800e3a4:	6879      	ldr	r1, [r7, #4]
 800e3a6:	4613      	mov	r3, r2
 800e3a8:	009b      	lsls	r3, r3, #2
 800e3aa:	4413      	add	r3, r2
 800e3ac:	009b      	lsls	r3, r3, #2
 800e3ae:	440b      	add	r3, r1
 800e3b0:	3318      	adds	r3, #24
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e3b6:	78f9      	ldrb	r1, [r7, #3]
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f005 fc38 	bl	8013c32 <USBD_LL_Transmit>
 800e3c2:	e015      	b.n	800e3f0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3d2:	691b      	ldr	r3, [r3, #16]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d00b      	beq.n	800e3f0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3de:	691b      	ldr	r3, [r3, #16]
 800e3e0:	68ba      	ldr	r2, [r7, #8]
 800e3e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e3e6:	68ba      	ldr	r2, [r7, #8]
 800e3e8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e3ec:	78fa      	ldrb	r2, [r7, #3]
 800e3ee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e3f0:	2300      	movs	r3, #0
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3710      	adds	r7, #16
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}

0800e3fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e3fa:	b580      	push	{r7, lr}
 800e3fc:	b084      	sub	sp, #16
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	6078      	str	r0, [r7, #4]
 800e402:	460b      	mov	r3, r1
 800e404:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e40c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e414:	2b00      	cmp	r3, #0
 800e416:	d101      	bne.n	800e41c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e418:	2303      	movs	r3, #3
 800e41a:	e015      	b.n	800e448 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e41c:	78fb      	ldrb	r3, [r7, #3]
 800e41e:	4619      	mov	r1, r3
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f005 fc48 	bl	8013cb6 <USBD_LL_GetRxDataSize>
 800e426:	4602      	mov	r2, r0
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	68fa      	ldr	r2, [r7, #12]
 800e438:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e43c:	68fa      	ldr	r2, [r7, #12]
 800e43e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e442:	4611      	mov	r1, r2
 800e444:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e446:	2300      	movs	r3, #0
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3710      	adds	r7, #16
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e45e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d101      	bne.n	800e46a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e466:	2303      	movs	r3, #3
 800e468:	e01b      	b.n	800e4a2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e470:	2b00      	cmp	r3, #0
 800e472:	d015      	beq.n	800e4a0 <USBD_CDC_EP0_RxReady+0x50>
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e47a:	2bff      	cmp	r3, #255	; 0xff
 800e47c:	d010      	beq.n	800e4a0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e484:	689b      	ldr	r3, [r3, #8]
 800e486:	68fa      	ldr	r2, [r7, #12]
 800e488:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e48c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e48e:	68fa      	ldr	r2, [r7, #12]
 800e490:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e494:	b292      	uxth	r2, r2
 800e496:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	22ff      	movs	r2, #255	; 0xff
 800e49c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e4a0:	2300      	movs	r3, #0
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3710      	adds	r7, #16
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}
	...

0800e4ac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b083      	sub	sp, #12
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2243      	movs	r2, #67	; 0x43
 800e4b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e4ba:	4b03      	ldr	r3, [pc, #12]	; (800e4c8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	370c      	adds	r7, #12
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c6:	4770      	bx	lr
 800e4c8:	2000009c 	.word	0x2000009c

0800e4cc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b083      	sub	sp, #12
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2243      	movs	r2, #67	; 0x43
 800e4d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e4da:	4b03      	ldr	r3, [pc, #12]	; (800e4e8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	370c      	adds	r7, #12
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e6:	4770      	bx	lr
 800e4e8:	20000058 	.word	0x20000058

0800e4ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b083      	sub	sp, #12
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2243      	movs	r2, #67	; 0x43
 800e4f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e4fa:	4b03      	ldr	r3, [pc, #12]	; (800e508 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	370c      	adds	r7, #12
 800e500:	46bd      	mov	sp, r7
 800e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e506:	4770      	bx	lr
 800e508:	200000e0 	.word	0x200000e0

0800e50c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e50c:	b480      	push	{r7}
 800e50e:	b083      	sub	sp, #12
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	220a      	movs	r2, #10
 800e518:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e51a:	4b03      	ldr	r3, [pc, #12]	; (800e528 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	370c      	adds	r7, #12
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr
 800e528:	20000014 	.word	0x20000014

0800e52c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e52c:	b480      	push	{r7}
 800e52e:	b083      	sub	sp, #12
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d101      	bne.n	800e540 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e53c:	2303      	movs	r3, #3
 800e53e:	e004      	b.n	800e54a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	683a      	ldr	r2, [r7, #0]
 800e544:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e548:	2300      	movs	r3, #0
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	370c      	adds	r7, #12
 800e54e:	46bd      	mov	sp, r7
 800e550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e554:	4770      	bx	lr

0800e556 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e556:	b480      	push	{r7}
 800e558:	b087      	sub	sp, #28
 800e55a:	af00      	add	r7, sp, #0
 800e55c:	60f8      	str	r0, [r7, #12]
 800e55e:	60b9      	str	r1, [r7, #8]
 800e560:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e568:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d101      	bne.n	800e574 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e570:	2303      	movs	r3, #3
 800e572:	e008      	b.n	800e586 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	68ba      	ldr	r2, [r7, #8]
 800e578:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	687a      	ldr	r2, [r7, #4]
 800e580:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e584:	2300      	movs	r3, #0
}
 800e586:	4618      	mov	r0, r3
 800e588:	371c      	adds	r7, #28
 800e58a:	46bd      	mov	sp, r7
 800e58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e590:	4770      	bx	lr

0800e592 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e592:	b480      	push	{r7}
 800e594:	b085      	sub	sp, #20
 800e596:	af00      	add	r7, sp, #0
 800e598:	6078      	str	r0, [r7, #4]
 800e59a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5a2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d101      	bne.n	800e5ae <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800e5aa:	2303      	movs	r3, #3
 800e5ac:	e004      	b.n	800e5b8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	683a      	ldr	r2, [r7, #0]
 800e5b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e5b6:	2300      	movs	r3, #0
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3714      	adds	r7, #20
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c2:	4770      	bx	lr

0800e5c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b084      	sub	sp, #16
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d101      	bne.n	800e5e2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e5de:	2303      	movs	r3, #3
 800e5e0:	e016      	b.n	800e610 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	7c1b      	ldrb	r3, [r3, #16]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d109      	bne.n	800e5fe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e5f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e5f4:	2101      	movs	r1, #1
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f005 fb3c 	bl	8013c74 <USBD_LL_PrepareReceive>
 800e5fc:	e007      	b.n	800e60e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e604:	2340      	movs	r3, #64	; 0x40
 800e606:	2101      	movs	r1, #1
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f005 fb33 	bl	8013c74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e60e:	2300      	movs	r3, #0
}
 800e610:	4618      	mov	r0, r3
 800e612:	3710      	adds	r7, #16
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}

0800e618 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b086      	sub	sp, #24
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	60f8      	str	r0, [r7, #12]
 800e620:	60b9      	str	r1, [r7, #8]
 800e622:	4613      	mov	r3, r2
 800e624:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d101      	bne.n	800e630 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e62c:	2303      	movs	r3, #3
 800e62e:	e01f      	b.n	800e670 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	2200      	movs	r2, #0
 800e634:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2200      	movs	r2, #0
 800e63c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	2200      	movs	r2, #0
 800e644:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d003      	beq.n	800e656 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	68ba      	ldr	r2, [r7, #8]
 800e652:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	2201      	movs	r2, #1
 800e65a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	79fa      	ldrb	r2, [r7, #7]
 800e662:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e664:	68f8      	ldr	r0, [r7, #12]
 800e666:	f005 f9af 	bl	80139c8 <USBD_LL_Init>
 800e66a:	4603      	mov	r3, r0
 800e66c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e66e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e670:	4618      	mov	r0, r3
 800e672:	3718      	adds	r7, #24
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}

0800e678 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b084      	sub	sp, #16
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e682:	2300      	movs	r3, #0
 800e684:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d101      	bne.n	800e690 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e68c:	2303      	movs	r3, #3
 800e68e:	e016      	b.n	800e6be <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	683a      	ldr	r2, [r7, #0]
 800e694:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d00b      	beq.n	800e6bc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ac:	f107 020e 	add.w	r2, r7, #14
 800e6b0:	4610      	mov	r0, r2
 800e6b2:	4798      	blx	r3
 800e6b4:	4602      	mov	r2, r0
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e6bc:	2300      	movs	r3, #0
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3710      	adds	r7, #16
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}

0800e6c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e6c6:	b580      	push	{r7, lr}
 800e6c8:	b082      	sub	sp, #8
 800e6ca:	af00      	add	r7, sp, #0
 800e6cc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f005 f9c6 	bl	8013a60 <USBD_LL_Start>
 800e6d4:	4603      	mov	r3, r0
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3708      	adds	r7, #8
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}

0800e6de <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e6de:	b480      	push	{r7}
 800e6e0:	b083      	sub	sp, #12
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e6e6:	2300      	movs	r3, #0
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	370c      	adds	r7, #12
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f2:	4770      	bx	lr

0800e6f4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b084      	sub	sp, #16
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	460b      	mov	r3, r1
 800e6fe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e700:	2303      	movs	r3, #3
 800e702:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d009      	beq.n	800e722 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	78fa      	ldrb	r2, [r7, #3]
 800e718:	4611      	mov	r1, r2
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	4798      	blx	r3
 800e71e:	4603      	mov	r3, r0
 800e720:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e722:	7bfb      	ldrb	r3, [r7, #15]
}
 800e724:	4618      	mov	r0, r3
 800e726:	3710      	adds	r7, #16
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}

0800e72c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b082      	sub	sp, #8
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	460b      	mov	r3, r1
 800e736:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d007      	beq.n	800e752 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	78fa      	ldrb	r2, [r7, #3]
 800e74c:	4611      	mov	r1, r2
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	4798      	blx	r3
  }

  return USBD_OK;
 800e752:	2300      	movs	r3, #0
}
 800e754:	4618      	mov	r0, r3
 800e756:	3708      	adds	r7, #8
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}

0800e75c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b084      	sub	sp, #16
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
 800e764:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e76c:	6839      	ldr	r1, [r7, #0]
 800e76e:	4618      	mov	r0, r3
 800e770:	f000 ff90 	bl	800f694 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2201      	movs	r2, #1
 800e778:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e782:	461a      	mov	r2, r3
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e790:	f003 031f 	and.w	r3, r3, #31
 800e794:	2b02      	cmp	r3, #2
 800e796:	d01a      	beq.n	800e7ce <USBD_LL_SetupStage+0x72>
 800e798:	2b02      	cmp	r3, #2
 800e79a:	d822      	bhi.n	800e7e2 <USBD_LL_SetupStage+0x86>
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d002      	beq.n	800e7a6 <USBD_LL_SetupStage+0x4a>
 800e7a0:	2b01      	cmp	r3, #1
 800e7a2:	d00a      	beq.n	800e7ba <USBD_LL_SetupStage+0x5e>
 800e7a4:	e01d      	b.n	800e7e2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e7ac:	4619      	mov	r1, r3
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f000 fa62 	bl	800ec78 <USBD_StdDevReq>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	73fb      	strb	r3, [r7, #15]
      break;
 800e7b8:	e020      	b.n	800e7fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f000 fac6 	bl	800ed54 <USBD_StdItfReq>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	73fb      	strb	r3, [r7, #15]
      break;
 800e7cc:	e016      	b.n	800e7fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e7d4:	4619      	mov	r1, r3
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f000 fb05 	bl	800ede6 <USBD_StdEPReq>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	73fb      	strb	r3, [r7, #15]
      break;
 800e7e0:	e00c      	b.n	800e7fc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e7e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e7ec:	b2db      	uxtb	r3, r3
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f005 f995 	bl	8013b20 <USBD_LL_StallEP>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	73fb      	strb	r3, [r7, #15]
      break;
 800e7fa:	bf00      	nop
  }

  return ret;
 800e7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3710      	adds	r7, #16
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}

0800e806 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e806:	b580      	push	{r7, lr}
 800e808:	b086      	sub	sp, #24
 800e80a:	af00      	add	r7, sp, #0
 800e80c:	60f8      	str	r0, [r7, #12]
 800e80e:	460b      	mov	r3, r1
 800e810:	607a      	str	r2, [r7, #4]
 800e812:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e814:	7afb      	ldrb	r3, [r7, #11]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d138      	bne.n	800e88c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e820:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e828:	2b03      	cmp	r3, #3
 800e82a:	d14a      	bne.n	800e8c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	689a      	ldr	r2, [r3, #8]
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	68db      	ldr	r3, [r3, #12]
 800e834:	429a      	cmp	r2, r3
 800e836:	d913      	bls.n	800e860 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	689a      	ldr	r2, [r3, #8]
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	68db      	ldr	r3, [r3, #12]
 800e840:	1ad2      	subs	r2, r2, r3
 800e842:	693b      	ldr	r3, [r7, #16]
 800e844:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	68da      	ldr	r2, [r3, #12]
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	689b      	ldr	r3, [r3, #8]
 800e84e:	4293      	cmp	r3, r2
 800e850:	bf28      	it	cs
 800e852:	4613      	movcs	r3, r2
 800e854:	461a      	mov	r2, r3
 800e856:	6879      	ldr	r1, [r7, #4]
 800e858:	68f8      	ldr	r0, [r7, #12]
 800e85a:	f001 f80f 	bl	800f87c <USBD_CtlContinueRx>
 800e85e:	e030      	b.n	800e8c2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e866:	b2db      	uxtb	r3, r3
 800e868:	2b03      	cmp	r3, #3
 800e86a:	d10b      	bne.n	800e884 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e872:	691b      	ldr	r3, [r3, #16]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d005      	beq.n	800e884 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e87e:	691b      	ldr	r3, [r3, #16]
 800e880:	68f8      	ldr	r0, [r7, #12]
 800e882:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e884:	68f8      	ldr	r0, [r7, #12]
 800e886:	f001 f80a 	bl	800f89e <USBD_CtlSendStatus>
 800e88a:	e01a      	b.n	800e8c2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e892:	b2db      	uxtb	r3, r3
 800e894:	2b03      	cmp	r3, #3
 800e896:	d114      	bne.n	800e8c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e89e:	699b      	ldr	r3, [r3, #24]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d00e      	beq.n	800e8c2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8aa:	699b      	ldr	r3, [r3, #24]
 800e8ac:	7afa      	ldrb	r2, [r7, #11]
 800e8ae:	4611      	mov	r1, r2
 800e8b0:	68f8      	ldr	r0, [r7, #12]
 800e8b2:	4798      	blx	r3
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e8b8:	7dfb      	ldrb	r3, [r7, #23]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d001      	beq.n	800e8c2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800e8be:	7dfb      	ldrb	r3, [r7, #23]
 800e8c0:	e000      	b.n	800e8c4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800e8c2:	2300      	movs	r3, #0
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3718      	adds	r7, #24
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}

0800e8cc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b086      	sub	sp, #24
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	60f8      	str	r0, [r7, #12]
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	607a      	str	r2, [r7, #4]
 800e8d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e8da:	7afb      	ldrb	r3, [r7, #11]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d16b      	bne.n	800e9b8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	3314      	adds	r3, #20
 800e8e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e8ec:	2b02      	cmp	r3, #2
 800e8ee:	d156      	bne.n	800e99e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e8f0:	693b      	ldr	r3, [r7, #16]
 800e8f2:	689a      	ldr	r2, [r3, #8]
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	68db      	ldr	r3, [r3, #12]
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d914      	bls.n	800e926 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	689a      	ldr	r2, [r3, #8]
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	68db      	ldr	r3, [r3, #12]
 800e904:	1ad2      	subs	r2, r2, r3
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	689b      	ldr	r3, [r3, #8]
 800e90e:	461a      	mov	r2, r3
 800e910:	6879      	ldr	r1, [r7, #4]
 800e912:	68f8      	ldr	r0, [r7, #12]
 800e914:	f000 ff84 	bl	800f820 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e918:	2300      	movs	r3, #0
 800e91a:	2200      	movs	r2, #0
 800e91c:	2100      	movs	r1, #0
 800e91e:	68f8      	ldr	r0, [r7, #12]
 800e920:	f005 f9a8 	bl	8013c74 <USBD_LL_PrepareReceive>
 800e924:	e03b      	b.n	800e99e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e926:	693b      	ldr	r3, [r7, #16]
 800e928:	68da      	ldr	r2, [r3, #12]
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	689b      	ldr	r3, [r3, #8]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d11c      	bne.n	800e96c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	685a      	ldr	r2, [r3, #4]
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e93a:	429a      	cmp	r2, r3
 800e93c:	d316      	bcc.n	800e96c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	685a      	ldr	r2, [r3, #4]
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e948:	429a      	cmp	r2, r3
 800e94a:	d20f      	bcs.n	800e96c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e94c:	2200      	movs	r2, #0
 800e94e:	2100      	movs	r1, #0
 800e950:	68f8      	ldr	r0, [r7, #12]
 800e952:	f000 ff65 	bl	800f820 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2200      	movs	r2, #0
 800e95a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e95e:	2300      	movs	r3, #0
 800e960:	2200      	movs	r2, #0
 800e962:	2100      	movs	r1, #0
 800e964:	68f8      	ldr	r0, [r7, #12]
 800e966:	f005 f985 	bl	8013c74 <USBD_LL_PrepareReceive>
 800e96a:	e018      	b.n	800e99e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e972:	b2db      	uxtb	r3, r3
 800e974:	2b03      	cmp	r3, #3
 800e976:	d10b      	bne.n	800e990 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e97e:	68db      	ldr	r3, [r3, #12]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d005      	beq.n	800e990 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e98a:	68db      	ldr	r3, [r3, #12]
 800e98c:	68f8      	ldr	r0, [r7, #12]
 800e98e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e990:	2180      	movs	r1, #128	; 0x80
 800e992:	68f8      	ldr	r0, [r7, #12]
 800e994:	f005 f8c4 	bl	8013b20 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e998:	68f8      	ldr	r0, [r7, #12]
 800e99a:	f000 ff93 	bl	800f8c4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d122      	bne.n	800e9ee <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e9a8:	68f8      	ldr	r0, [r7, #12]
 800e9aa:	f7ff fe98 	bl	800e6de <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e9b6:	e01a      	b.n	800e9ee <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9be:	b2db      	uxtb	r3, r3
 800e9c0:	2b03      	cmp	r3, #3
 800e9c2:	d114      	bne.n	800e9ee <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9ca:	695b      	ldr	r3, [r3, #20]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d00e      	beq.n	800e9ee <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9d6:	695b      	ldr	r3, [r3, #20]
 800e9d8:	7afa      	ldrb	r2, [r7, #11]
 800e9da:	4611      	mov	r1, r2
 800e9dc:	68f8      	ldr	r0, [r7, #12]
 800e9de:	4798      	blx	r3
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e9e4:	7dfb      	ldrb	r3, [r7, #23]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d001      	beq.n	800e9ee <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e9ea:	7dfb      	ldrb	r3, [r7, #23]
 800e9ec:	e000      	b.n	800e9f0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e9ee:	2300      	movs	r3, #0
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3718      	adds	r7, #24
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}

0800e9f8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b082      	sub	sp, #8
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2201      	movs	r2, #1
 800ea04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2200      	movs	r2, #0
 800ea14:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2200      	movs	r2, #0
 800ea1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d101      	bne.n	800ea2c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ea28:	2303      	movs	r3, #3
 800ea2a:	e02f      	b.n	800ea8c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d00f      	beq.n	800ea56 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea3c:	685b      	ldr	r3, [r3, #4]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d009      	beq.n	800ea56 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea48:	685b      	ldr	r3, [r3, #4]
 800ea4a:	687a      	ldr	r2, [r7, #4]
 800ea4c:	6852      	ldr	r2, [r2, #4]
 800ea4e:	b2d2      	uxtb	r2, r2
 800ea50:	4611      	mov	r1, r2
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ea56:	2340      	movs	r3, #64	; 0x40
 800ea58:	2200      	movs	r2, #0
 800ea5a:	2100      	movs	r1, #0
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f005 f81a 	bl	8013a96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2201      	movs	r2, #1
 800ea66:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2240      	movs	r2, #64	; 0x40
 800ea6e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ea72:	2340      	movs	r3, #64	; 0x40
 800ea74:	2200      	movs	r2, #0
 800ea76:	2180      	movs	r1, #128	; 0x80
 800ea78:	6878      	ldr	r0, [r7, #4]
 800ea7a:	f005 f80c 	bl	8013a96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2201      	movs	r2, #1
 800ea82:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2240      	movs	r2, #64	; 0x40
 800ea88:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ea8a:	2300      	movs	r3, #0
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	3708      	adds	r7, #8
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}

0800ea94 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b083      	sub	sp, #12
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	460b      	mov	r3, r1
 800ea9e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	78fa      	ldrb	r2, [r7, #3]
 800eaa4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800eaa6:	2300      	movs	r3, #0
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	370c      	adds	r7, #12
 800eaac:	46bd      	mov	sp, r7
 800eaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab2:	4770      	bx	lr

0800eab4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800eab4:	b480      	push	{r7}
 800eab6:	b083      	sub	sp, #12
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eac2:	b2da      	uxtb	r2, r3
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2204      	movs	r2, #4
 800eace:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ead2:	2300      	movs	r3, #0
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	370c      	adds	r7, #12
 800ead8:	46bd      	mov	sp, r7
 800eada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eade:	4770      	bx	lr

0800eae0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b083      	sub	sp, #12
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eaee:	b2db      	uxtb	r3, r3
 800eaf0:	2b04      	cmp	r3, #4
 800eaf2:	d106      	bne.n	800eb02 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800eafa:	b2da      	uxtb	r2, r3
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800eb02:	2300      	movs	r3, #0
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	370c      	adds	r7, #12
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0e:	4770      	bx	lr

0800eb10 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b082      	sub	sp, #8
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d101      	bne.n	800eb26 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800eb22:	2303      	movs	r3, #3
 800eb24:	e012      	b.n	800eb4c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb2c:	b2db      	uxtb	r3, r3
 800eb2e:	2b03      	cmp	r3, #3
 800eb30:	d10b      	bne.n	800eb4a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb38:	69db      	ldr	r3, [r3, #28]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d005      	beq.n	800eb4a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb44:	69db      	ldr	r3, [r3, #28]
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eb4a:	2300      	movs	r3, #0
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3708      	adds	r7, #8
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}

0800eb54 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b082      	sub	sp, #8
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	460b      	mov	r3, r1
 800eb5e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d101      	bne.n	800eb6e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800eb6a:	2303      	movs	r3, #3
 800eb6c:	e014      	b.n	800eb98 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb74:	b2db      	uxtb	r3, r3
 800eb76:	2b03      	cmp	r3, #3
 800eb78:	d10d      	bne.n	800eb96 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb80:	6a1b      	ldr	r3, [r3, #32]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d007      	beq.n	800eb96 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb8c:	6a1b      	ldr	r3, [r3, #32]
 800eb8e:	78fa      	ldrb	r2, [r7, #3]
 800eb90:	4611      	mov	r1, r2
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eb96:	2300      	movs	r3, #0
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3708      	adds	r7, #8
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b082      	sub	sp, #8
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	460b      	mov	r3, r1
 800ebaa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d101      	bne.n	800ebba <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ebb6:	2303      	movs	r3, #3
 800ebb8:	e014      	b.n	800ebe4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebc0:	b2db      	uxtb	r3, r3
 800ebc2:	2b03      	cmp	r3, #3
 800ebc4:	d10d      	bne.n	800ebe2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d007      	beq.n	800ebe2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebda:	78fa      	ldrb	r2, [r7, #3]
 800ebdc:	4611      	mov	r1, r2
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ebe2:	2300      	movs	r3, #0
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3708      	adds	r7, #8
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}

0800ebec <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ebec:	b480      	push	{r7}
 800ebee:	b083      	sub	sp, #12
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ebf4:	2300      	movs	r3, #0
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	370c      	adds	r7, #12
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec00:	4770      	bx	lr

0800ec02 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ec02:	b580      	push	{r7, lr}
 800ec04:	b082      	sub	sp, #8
 800ec06:	af00      	add	r7, sp, #0
 800ec08:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2201      	movs	r2, #1
 800ec0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d009      	beq.n	800ec30 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec22:	685b      	ldr	r3, [r3, #4]
 800ec24:	687a      	ldr	r2, [r7, #4]
 800ec26:	6852      	ldr	r2, [r2, #4]
 800ec28:	b2d2      	uxtb	r2, r2
 800ec2a:	4611      	mov	r1, r2
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	4798      	blx	r3
  }

  return USBD_OK;
 800ec30:	2300      	movs	r3, #0
}
 800ec32:	4618      	mov	r0, r3
 800ec34:	3708      	adds	r7, #8
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}

0800ec3a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ec3a:	b480      	push	{r7}
 800ec3c:	b087      	sub	sp, #28
 800ec3e:	af00      	add	r7, sp, #0
 800ec40:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ec46:	697b      	ldr	r3, [r7, #20]
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	3301      	adds	r3, #1
 800ec50:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	781b      	ldrb	r3, [r3, #0]
 800ec56:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ec58:	8a3b      	ldrh	r3, [r7, #16]
 800ec5a:	021b      	lsls	r3, r3, #8
 800ec5c:	b21a      	sxth	r2, r3
 800ec5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ec62:	4313      	orrs	r3, r2
 800ec64:	b21b      	sxth	r3, r3
 800ec66:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ec68:	89fb      	ldrh	r3, [r7, #14]
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	371c      	adds	r7, #28
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec74:	4770      	bx	lr
	...

0800ec78 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b084      	sub	sp, #16
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
 800ec80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec82:	2300      	movs	r3, #0
 800ec84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	781b      	ldrb	r3, [r3, #0]
 800ec8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ec8e:	2b40      	cmp	r3, #64	; 0x40
 800ec90:	d005      	beq.n	800ec9e <USBD_StdDevReq+0x26>
 800ec92:	2b40      	cmp	r3, #64	; 0x40
 800ec94:	d853      	bhi.n	800ed3e <USBD_StdDevReq+0xc6>
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d00b      	beq.n	800ecb2 <USBD_StdDevReq+0x3a>
 800ec9a:	2b20      	cmp	r3, #32
 800ec9c:	d14f      	bne.n	800ed3e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eca4:	689b      	ldr	r3, [r3, #8]
 800eca6:	6839      	ldr	r1, [r7, #0]
 800eca8:	6878      	ldr	r0, [r7, #4]
 800ecaa:	4798      	blx	r3
 800ecac:	4603      	mov	r3, r0
 800ecae:	73fb      	strb	r3, [r7, #15]
      break;
 800ecb0:	e04a      	b.n	800ed48 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	785b      	ldrb	r3, [r3, #1]
 800ecb6:	2b09      	cmp	r3, #9
 800ecb8:	d83b      	bhi.n	800ed32 <USBD_StdDevReq+0xba>
 800ecba:	a201      	add	r2, pc, #4	; (adr r2, 800ecc0 <USBD_StdDevReq+0x48>)
 800ecbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecc0:	0800ed15 	.word	0x0800ed15
 800ecc4:	0800ed29 	.word	0x0800ed29
 800ecc8:	0800ed33 	.word	0x0800ed33
 800eccc:	0800ed1f 	.word	0x0800ed1f
 800ecd0:	0800ed33 	.word	0x0800ed33
 800ecd4:	0800ecf3 	.word	0x0800ecf3
 800ecd8:	0800ece9 	.word	0x0800ece9
 800ecdc:	0800ed33 	.word	0x0800ed33
 800ece0:	0800ed0b 	.word	0x0800ed0b
 800ece4:	0800ecfd 	.word	0x0800ecfd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ece8:	6839      	ldr	r1, [r7, #0]
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f000 f9de 	bl	800f0ac <USBD_GetDescriptor>
          break;
 800ecf0:	e024      	b.n	800ed3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ecf2:	6839      	ldr	r1, [r7, #0]
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f000 fb43 	bl	800f380 <USBD_SetAddress>
          break;
 800ecfa:	e01f      	b.n	800ed3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ecfc:	6839      	ldr	r1, [r7, #0]
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	f000 fb82 	bl	800f408 <USBD_SetConfig>
 800ed04:	4603      	mov	r3, r0
 800ed06:	73fb      	strb	r3, [r7, #15]
          break;
 800ed08:	e018      	b.n	800ed3c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ed0a:	6839      	ldr	r1, [r7, #0]
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f000 fc21 	bl	800f554 <USBD_GetConfig>
          break;
 800ed12:	e013      	b.n	800ed3c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ed14:	6839      	ldr	r1, [r7, #0]
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f000 fc52 	bl	800f5c0 <USBD_GetStatus>
          break;
 800ed1c:	e00e      	b.n	800ed3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ed1e:	6839      	ldr	r1, [r7, #0]
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f000 fc81 	bl	800f628 <USBD_SetFeature>
          break;
 800ed26:	e009      	b.n	800ed3c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ed28:	6839      	ldr	r1, [r7, #0]
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f000 fc90 	bl	800f650 <USBD_ClrFeature>
          break;
 800ed30:	e004      	b.n	800ed3c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ed32:	6839      	ldr	r1, [r7, #0]
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f000 fce7 	bl	800f708 <USBD_CtlError>
          break;
 800ed3a:	bf00      	nop
      }
      break;
 800ed3c:	e004      	b.n	800ed48 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ed3e:	6839      	ldr	r1, [r7, #0]
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f000 fce1 	bl	800f708 <USBD_CtlError>
      break;
 800ed46:	bf00      	nop
  }

  return ret;
 800ed48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3710      	adds	r7, #16
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop

0800ed54 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b084      	sub	sp, #16
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
 800ed5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	781b      	ldrb	r3, [r3, #0]
 800ed66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ed6a:	2b40      	cmp	r3, #64	; 0x40
 800ed6c:	d005      	beq.n	800ed7a <USBD_StdItfReq+0x26>
 800ed6e:	2b40      	cmp	r3, #64	; 0x40
 800ed70:	d82f      	bhi.n	800edd2 <USBD_StdItfReq+0x7e>
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d001      	beq.n	800ed7a <USBD_StdItfReq+0x26>
 800ed76:	2b20      	cmp	r3, #32
 800ed78:	d12b      	bne.n	800edd2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	3b01      	subs	r3, #1
 800ed84:	2b02      	cmp	r3, #2
 800ed86:	d81d      	bhi.n	800edc4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	889b      	ldrh	r3, [r3, #4]
 800ed8c:	b2db      	uxtb	r3, r3
 800ed8e:	2b01      	cmp	r3, #1
 800ed90:	d813      	bhi.n	800edba <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed98:	689b      	ldr	r3, [r3, #8]
 800ed9a:	6839      	ldr	r1, [r7, #0]
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	4798      	blx	r3
 800eda0:	4603      	mov	r3, r0
 800eda2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	88db      	ldrh	r3, [r3, #6]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d110      	bne.n	800edce <USBD_StdItfReq+0x7a>
 800edac:	7bfb      	ldrb	r3, [r7, #15]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d10d      	bne.n	800edce <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f000 fd73 	bl	800f89e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800edb8:	e009      	b.n	800edce <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800edba:	6839      	ldr	r1, [r7, #0]
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f000 fca3 	bl	800f708 <USBD_CtlError>
          break;
 800edc2:	e004      	b.n	800edce <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800edc4:	6839      	ldr	r1, [r7, #0]
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f000 fc9e 	bl	800f708 <USBD_CtlError>
          break;
 800edcc:	e000      	b.n	800edd0 <USBD_StdItfReq+0x7c>
          break;
 800edce:	bf00      	nop
      }
      break;
 800edd0:	e004      	b.n	800eddc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800edd2:	6839      	ldr	r1, [r7, #0]
 800edd4:	6878      	ldr	r0, [r7, #4]
 800edd6:	f000 fc97 	bl	800f708 <USBD_CtlError>
      break;
 800edda:	bf00      	nop
  }

  return ret;
 800eddc:	7bfb      	ldrb	r3, [r7, #15]
}
 800edde:	4618      	mov	r0, r3
 800ede0:	3710      	adds	r7, #16
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}

0800ede6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ede6:	b580      	push	{r7, lr}
 800ede8:	b084      	sub	sp, #16
 800edea:	af00      	add	r7, sp, #0
 800edec:	6078      	str	r0, [r7, #4]
 800edee:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800edf0:	2300      	movs	r3, #0
 800edf2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	889b      	ldrh	r3, [r3, #4]
 800edf8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ee02:	2b40      	cmp	r3, #64	; 0x40
 800ee04:	d007      	beq.n	800ee16 <USBD_StdEPReq+0x30>
 800ee06:	2b40      	cmp	r3, #64	; 0x40
 800ee08:	f200 8145 	bhi.w	800f096 <USBD_StdEPReq+0x2b0>
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d00c      	beq.n	800ee2a <USBD_StdEPReq+0x44>
 800ee10:	2b20      	cmp	r3, #32
 800ee12:	f040 8140 	bne.w	800f096 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee1c:	689b      	ldr	r3, [r3, #8]
 800ee1e:	6839      	ldr	r1, [r7, #0]
 800ee20:	6878      	ldr	r0, [r7, #4]
 800ee22:	4798      	blx	r3
 800ee24:	4603      	mov	r3, r0
 800ee26:	73fb      	strb	r3, [r7, #15]
      break;
 800ee28:	e13a      	b.n	800f0a0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	785b      	ldrb	r3, [r3, #1]
 800ee2e:	2b03      	cmp	r3, #3
 800ee30:	d007      	beq.n	800ee42 <USBD_StdEPReq+0x5c>
 800ee32:	2b03      	cmp	r3, #3
 800ee34:	f300 8129 	bgt.w	800f08a <USBD_StdEPReq+0x2a4>
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d07f      	beq.n	800ef3c <USBD_StdEPReq+0x156>
 800ee3c:	2b01      	cmp	r3, #1
 800ee3e:	d03c      	beq.n	800eeba <USBD_StdEPReq+0xd4>
 800ee40:	e123      	b.n	800f08a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee48:	b2db      	uxtb	r3, r3
 800ee4a:	2b02      	cmp	r3, #2
 800ee4c:	d002      	beq.n	800ee54 <USBD_StdEPReq+0x6e>
 800ee4e:	2b03      	cmp	r3, #3
 800ee50:	d016      	beq.n	800ee80 <USBD_StdEPReq+0x9a>
 800ee52:	e02c      	b.n	800eeae <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee54:	7bbb      	ldrb	r3, [r7, #14]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d00d      	beq.n	800ee76 <USBD_StdEPReq+0x90>
 800ee5a:	7bbb      	ldrb	r3, [r7, #14]
 800ee5c:	2b80      	cmp	r3, #128	; 0x80
 800ee5e:	d00a      	beq.n	800ee76 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ee60:	7bbb      	ldrb	r3, [r7, #14]
 800ee62:	4619      	mov	r1, r3
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f004 fe5b 	bl	8013b20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee6a:	2180      	movs	r1, #128	; 0x80
 800ee6c:	6878      	ldr	r0, [r7, #4]
 800ee6e:	f004 fe57 	bl	8013b20 <USBD_LL_StallEP>
 800ee72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ee74:	e020      	b.n	800eeb8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ee76:	6839      	ldr	r1, [r7, #0]
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f000 fc45 	bl	800f708 <USBD_CtlError>
              break;
 800ee7e:	e01b      	b.n	800eeb8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	885b      	ldrh	r3, [r3, #2]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d10e      	bne.n	800eea6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ee88:	7bbb      	ldrb	r3, [r7, #14]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d00b      	beq.n	800eea6 <USBD_StdEPReq+0xc0>
 800ee8e:	7bbb      	ldrb	r3, [r7, #14]
 800ee90:	2b80      	cmp	r3, #128	; 0x80
 800ee92:	d008      	beq.n	800eea6 <USBD_StdEPReq+0xc0>
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	88db      	ldrh	r3, [r3, #6]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d104      	bne.n	800eea6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ee9c:	7bbb      	ldrb	r3, [r7, #14]
 800ee9e:	4619      	mov	r1, r3
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f004 fe3d 	bl	8013b20 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	f000 fcf9 	bl	800f89e <USBD_CtlSendStatus>

              break;
 800eeac:	e004      	b.n	800eeb8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800eeae:	6839      	ldr	r1, [r7, #0]
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f000 fc29 	bl	800f708 <USBD_CtlError>
              break;
 800eeb6:	bf00      	nop
          }
          break;
 800eeb8:	e0ec      	b.n	800f094 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eec0:	b2db      	uxtb	r3, r3
 800eec2:	2b02      	cmp	r3, #2
 800eec4:	d002      	beq.n	800eecc <USBD_StdEPReq+0xe6>
 800eec6:	2b03      	cmp	r3, #3
 800eec8:	d016      	beq.n	800eef8 <USBD_StdEPReq+0x112>
 800eeca:	e030      	b.n	800ef2e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eecc:	7bbb      	ldrb	r3, [r7, #14]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d00d      	beq.n	800eeee <USBD_StdEPReq+0x108>
 800eed2:	7bbb      	ldrb	r3, [r7, #14]
 800eed4:	2b80      	cmp	r3, #128	; 0x80
 800eed6:	d00a      	beq.n	800eeee <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800eed8:	7bbb      	ldrb	r3, [r7, #14]
 800eeda:	4619      	mov	r1, r3
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f004 fe1f 	bl	8013b20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800eee2:	2180      	movs	r1, #128	; 0x80
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f004 fe1b 	bl	8013b20 <USBD_LL_StallEP>
 800eeea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800eeec:	e025      	b.n	800ef3a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800eeee:	6839      	ldr	r1, [r7, #0]
 800eef0:	6878      	ldr	r0, [r7, #4]
 800eef2:	f000 fc09 	bl	800f708 <USBD_CtlError>
              break;
 800eef6:	e020      	b.n	800ef3a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	885b      	ldrh	r3, [r3, #2]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d11b      	bne.n	800ef38 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ef00:	7bbb      	ldrb	r3, [r7, #14]
 800ef02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d004      	beq.n	800ef14 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ef0a:	7bbb      	ldrb	r3, [r7, #14]
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f004 fe25 	bl	8013b5e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f000 fcc2 	bl	800f89e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef20:	689b      	ldr	r3, [r3, #8]
 800ef22:	6839      	ldr	r1, [r7, #0]
 800ef24:	6878      	ldr	r0, [r7, #4]
 800ef26:	4798      	blx	r3
 800ef28:	4603      	mov	r3, r0
 800ef2a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ef2c:	e004      	b.n	800ef38 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ef2e:	6839      	ldr	r1, [r7, #0]
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f000 fbe9 	bl	800f708 <USBD_CtlError>
              break;
 800ef36:	e000      	b.n	800ef3a <USBD_StdEPReq+0x154>
              break;
 800ef38:	bf00      	nop
          }
          break;
 800ef3a:	e0ab      	b.n	800f094 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef42:	b2db      	uxtb	r3, r3
 800ef44:	2b02      	cmp	r3, #2
 800ef46:	d002      	beq.n	800ef4e <USBD_StdEPReq+0x168>
 800ef48:	2b03      	cmp	r3, #3
 800ef4a:	d032      	beq.n	800efb2 <USBD_StdEPReq+0x1cc>
 800ef4c:	e097      	b.n	800f07e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ef4e:	7bbb      	ldrb	r3, [r7, #14]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d007      	beq.n	800ef64 <USBD_StdEPReq+0x17e>
 800ef54:	7bbb      	ldrb	r3, [r7, #14]
 800ef56:	2b80      	cmp	r3, #128	; 0x80
 800ef58:	d004      	beq.n	800ef64 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ef5a:	6839      	ldr	r1, [r7, #0]
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f000 fbd3 	bl	800f708 <USBD_CtlError>
                break;
 800ef62:	e091      	b.n	800f088 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	da0b      	bge.n	800ef84 <USBD_StdEPReq+0x19e>
 800ef6c:	7bbb      	ldrb	r3, [r7, #14]
 800ef6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ef72:	4613      	mov	r3, r2
 800ef74:	009b      	lsls	r3, r3, #2
 800ef76:	4413      	add	r3, r2
 800ef78:	009b      	lsls	r3, r3, #2
 800ef7a:	3310      	adds	r3, #16
 800ef7c:	687a      	ldr	r2, [r7, #4]
 800ef7e:	4413      	add	r3, r2
 800ef80:	3304      	adds	r3, #4
 800ef82:	e00b      	b.n	800ef9c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ef84:	7bbb      	ldrb	r3, [r7, #14]
 800ef86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef8a:	4613      	mov	r3, r2
 800ef8c:	009b      	lsls	r3, r3, #2
 800ef8e:	4413      	add	r3, r2
 800ef90:	009b      	lsls	r3, r3, #2
 800ef92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	4413      	add	r3, r2
 800ef9a:	3304      	adds	r3, #4
 800ef9c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	2200      	movs	r2, #0
 800efa2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	2202      	movs	r2, #2
 800efa8:	4619      	mov	r1, r3
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f000 fc1d 	bl	800f7ea <USBD_CtlSendData>
              break;
 800efb0:	e06a      	b.n	800f088 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800efb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	da11      	bge.n	800efde <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800efba:	7bbb      	ldrb	r3, [r7, #14]
 800efbc:	f003 020f 	and.w	r2, r3, #15
 800efc0:	6879      	ldr	r1, [r7, #4]
 800efc2:	4613      	mov	r3, r2
 800efc4:	009b      	lsls	r3, r3, #2
 800efc6:	4413      	add	r3, r2
 800efc8:	009b      	lsls	r3, r3, #2
 800efca:	440b      	add	r3, r1
 800efcc:	3324      	adds	r3, #36	; 0x24
 800efce:	881b      	ldrh	r3, [r3, #0]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d117      	bne.n	800f004 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800efd4:	6839      	ldr	r1, [r7, #0]
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	f000 fb96 	bl	800f708 <USBD_CtlError>
                  break;
 800efdc:	e054      	b.n	800f088 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800efde:	7bbb      	ldrb	r3, [r7, #14]
 800efe0:	f003 020f 	and.w	r2, r3, #15
 800efe4:	6879      	ldr	r1, [r7, #4]
 800efe6:	4613      	mov	r3, r2
 800efe8:	009b      	lsls	r3, r3, #2
 800efea:	4413      	add	r3, r2
 800efec:	009b      	lsls	r3, r3, #2
 800efee:	440b      	add	r3, r1
 800eff0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800eff4:	881b      	ldrh	r3, [r3, #0]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d104      	bne.n	800f004 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800effa:	6839      	ldr	r1, [r7, #0]
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f000 fb83 	bl	800f708 <USBD_CtlError>
                  break;
 800f002:	e041      	b.n	800f088 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f004:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	da0b      	bge.n	800f024 <USBD_StdEPReq+0x23e>
 800f00c:	7bbb      	ldrb	r3, [r7, #14]
 800f00e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f012:	4613      	mov	r3, r2
 800f014:	009b      	lsls	r3, r3, #2
 800f016:	4413      	add	r3, r2
 800f018:	009b      	lsls	r3, r3, #2
 800f01a:	3310      	adds	r3, #16
 800f01c:	687a      	ldr	r2, [r7, #4]
 800f01e:	4413      	add	r3, r2
 800f020:	3304      	adds	r3, #4
 800f022:	e00b      	b.n	800f03c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f024:	7bbb      	ldrb	r3, [r7, #14]
 800f026:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f02a:	4613      	mov	r3, r2
 800f02c:	009b      	lsls	r3, r3, #2
 800f02e:	4413      	add	r3, r2
 800f030:	009b      	lsls	r3, r3, #2
 800f032:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f036:	687a      	ldr	r2, [r7, #4]
 800f038:	4413      	add	r3, r2
 800f03a:	3304      	adds	r3, #4
 800f03c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f03e:	7bbb      	ldrb	r3, [r7, #14]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d002      	beq.n	800f04a <USBD_StdEPReq+0x264>
 800f044:	7bbb      	ldrb	r3, [r7, #14]
 800f046:	2b80      	cmp	r3, #128	; 0x80
 800f048:	d103      	bne.n	800f052 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	2200      	movs	r2, #0
 800f04e:	601a      	str	r2, [r3, #0]
 800f050:	e00e      	b.n	800f070 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f052:	7bbb      	ldrb	r3, [r7, #14]
 800f054:	4619      	mov	r1, r3
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f004 fda0 	bl	8013b9c <USBD_LL_IsStallEP>
 800f05c:	4603      	mov	r3, r0
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d003      	beq.n	800f06a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	2201      	movs	r2, #1
 800f066:	601a      	str	r2, [r3, #0]
 800f068:	e002      	b.n	800f070 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	2200      	movs	r2, #0
 800f06e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	2202      	movs	r2, #2
 800f074:	4619      	mov	r1, r3
 800f076:	6878      	ldr	r0, [r7, #4]
 800f078:	f000 fbb7 	bl	800f7ea <USBD_CtlSendData>
              break;
 800f07c:	e004      	b.n	800f088 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f07e:	6839      	ldr	r1, [r7, #0]
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f000 fb41 	bl	800f708 <USBD_CtlError>
              break;
 800f086:	bf00      	nop
          }
          break;
 800f088:	e004      	b.n	800f094 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f08a:	6839      	ldr	r1, [r7, #0]
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	f000 fb3b 	bl	800f708 <USBD_CtlError>
          break;
 800f092:	bf00      	nop
      }
      break;
 800f094:	e004      	b.n	800f0a0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f096:	6839      	ldr	r1, [r7, #0]
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f000 fb35 	bl	800f708 <USBD_CtlError>
      break;
 800f09e:	bf00      	nop
  }

  return ret;
 800f0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	3710      	adds	r7, #16
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}
	...

0800f0ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
 800f0b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	885b      	ldrh	r3, [r3, #2]
 800f0c6:	0a1b      	lsrs	r3, r3, #8
 800f0c8:	b29b      	uxth	r3, r3
 800f0ca:	3b01      	subs	r3, #1
 800f0cc:	2b06      	cmp	r3, #6
 800f0ce:	f200 8128 	bhi.w	800f322 <USBD_GetDescriptor+0x276>
 800f0d2:	a201      	add	r2, pc, #4	; (adr r2, 800f0d8 <USBD_GetDescriptor+0x2c>)
 800f0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0d8:	0800f0f5 	.word	0x0800f0f5
 800f0dc:	0800f10d 	.word	0x0800f10d
 800f0e0:	0800f14d 	.word	0x0800f14d
 800f0e4:	0800f323 	.word	0x0800f323
 800f0e8:	0800f323 	.word	0x0800f323
 800f0ec:	0800f2c3 	.word	0x0800f2c3
 800f0f0:	0800f2ef 	.word	0x0800f2ef
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	687a      	ldr	r2, [r7, #4]
 800f0fe:	7c12      	ldrb	r2, [r2, #16]
 800f100:	f107 0108 	add.w	r1, r7, #8
 800f104:	4610      	mov	r0, r2
 800f106:	4798      	blx	r3
 800f108:	60f8      	str	r0, [r7, #12]
      break;
 800f10a:	e112      	b.n	800f332 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	7c1b      	ldrb	r3, [r3, #16]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d10d      	bne.n	800f130 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f11c:	f107 0208 	add.w	r2, r7, #8
 800f120:	4610      	mov	r0, r2
 800f122:	4798      	blx	r3
 800f124:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	3301      	adds	r3, #1
 800f12a:	2202      	movs	r2, #2
 800f12c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f12e:	e100      	b.n	800f332 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f138:	f107 0208 	add.w	r2, r7, #8
 800f13c:	4610      	mov	r0, r2
 800f13e:	4798      	blx	r3
 800f140:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	3301      	adds	r3, #1
 800f146:	2202      	movs	r2, #2
 800f148:	701a      	strb	r2, [r3, #0]
      break;
 800f14a:	e0f2      	b.n	800f332 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	885b      	ldrh	r3, [r3, #2]
 800f150:	b2db      	uxtb	r3, r3
 800f152:	2b05      	cmp	r3, #5
 800f154:	f200 80ac 	bhi.w	800f2b0 <USBD_GetDescriptor+0x204>
 800f158:	a201      	add	r2, pc, #4	; (adr r2, 800f160 <USBD_GetDescriptor+0xb4>)
 800f15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f15e:	bf00      	nop
 800f160:	0800f179 	.word	0x0800f179
 800f164:	0800f1ad 	.word	0x0800f1ad
 800f168:	0800f1e1 	.word	0x0800f1e1
 800f16c:	0800f215 	.word	0x0800f215
 800f170:	0800f249 	.word	0x0800f249
 800f174:	0800f27d 	.word	0x0800f27d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f17e:	685b      	ldr	r3, [r3, #4]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d00b      	beq.n	800f19c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f18a:	685b      	ldr	r3, [r3, #4]
 800f18c:	687a      	ldr	r2, [r7, #4]
 800f18e:	7c12      	ldrb	r2, [r2, #16]
 800f190:	f107 0108 	add.w	r1, r7, #8
 800f194:	4610      	mov	r0, r2
 800f196:	4798      	blx	r3
 800f198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f19a:	e091      	b.n	800f2c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f19c:	6839      	ldr	r1, [r7, #0]
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f000 fab2 	bl	800f708 <USBD_CtlError>
            err++;
 800f1a4:	7afb      	ldrb	r3, [r7, #11]
 800f1a6:	3301      	adds	r3, #1
 800f1a8:	72fb      	strb	r3, [r7, #11]
          break;
 800f1aa:	e089      	b.n	800f2c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1b2:	689b      	ldr	r3, [r3, #8]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d00b      	beq.n	800f1d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1be:	689b      	ldr	r3, [r3, #8]
 800f1c0:	687a      	ldr	r2, [r7, #4]
 800f1c2:	7c12      	ldrb	r2, [r2, #16]
 800f1c4:	f107 0108 	add.w	r1, r7, #8
 800f1c8:	4610      	mov	r0, r2
 800f1ca:	4798      	blx	r3
 800f1cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f1ce:	e077      	b.n	800f2c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f1d0:	6839      	ldr	r1, [r7, #0]
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f000 fa98 	bl	800f708 <USBD_CtlError>
            err++;
 800f1d8:	7afb      	ldrb	r3, [r7, #11]
 800f1da:	3301      	adds	r3, #1
 800f1dc:	72fb      	strb	r3, [r7, #11]
          break;
 800f1de:	e06f      	b.n	800f2c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1e6:	68db      	ldr	r3, [r3, #12]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d00b      	beq.n	800f204 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1f2:	68db      	ldr	r3, [r3, #12]
 800f1f4:	687a      	ldr	r2, [r7, #4]
 800f1f6:	7c12      	ldrb	r2, [r2, #16]
 800f1f8:	f107 0108 	add.w	r1, r7, #8
 800f1fc:	4610      	mov	r0, r2
 800f1fe:	4798      	blx	r3
 800f200:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f202:	e05d      	b.n	800f2c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f204:	6839      	ldr	r1, [r7, #0]
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f000 fa7e 	bl	800f708 <USBD_CtlError>
            err++;
 800f20c:	7afb      	ldrb	r3, [r7, #11]
 800f20e:	3301      	adds	r3, #1
 800f210:	72fb      	strb	r3, [r7, #11]
          break;
 800f212:	e055      	b.n	800f2c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f21a:	691b      	ldr	r3, [r3, #16]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d00b      	beq.n	800f238 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f226:	691b      	ldr	r3, [r3, #16]
 800f228:	687a      	ldr	r2, [r7, #4]
 800f22a:	7c12      	ldrb	r2, [r2, #16]
 800f22c:	f107 0108 	add.w	r1, r7, #8
 800f230:	4610      	mov	r0, r2
 800f232:	4798      	blx	r3
 800f234:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f236:	e043      	b.n	800f2c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f238:	6839      	ldr	r1, [r7, #0]
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f000 fa64 	bl	800f708 <USBD_CtlError>
            err++;
 800f240:	7afb      	ldrb	r3, [r7, #11]
 800f242:	3301      	adds	r3, #1
 800f244:	72fb      	strb	r3, [r7, #11]
          break;
 800f246:	e03b      	b.n	800f2c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f24e:	695b      	ldr	r3, [r3, #20]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d00b      	beq.n	800f26c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f25a:	695b      	ldr	r3, [r3, #20]
 800f25c:	687a      	ldr	r2, [r7, #4]
 800f25e:	7c12      	ldrb	r2, [r2, #16]
 800f260:	f107 0108 	add.w	r1, r7, #8
 800f264:	4610      	mov	r0, r2
 800f266:	4798      	blx	r3
 800f268:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f26a:	e029      	b.n	800f2c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f26c:	6839      	ldr	r1, [r7, #0]
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f000 fa4a 	bl	800f708 <USBD_CtlError>
            err++;
 800f274:	7afb      	ldrb	r3, [r7, #11]
 800f276:	3301      	adds	r3, #1
 800f278:	72fb      	strb	r3, [r7, #11]
          break;
 800f27a:	e021      	b.n	800f2c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f282:	699b      	ldr	r3, [r3, #24]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d00b      	beq.n	800f2a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f28e:	699b      	ldr	r3, [r3, #24]
 800f290:	687a      	ldr	r2, [r7, #4]
 800f292:	7c12      	ldrb	r2, [r2, #16]
 800f294:	f107 0108 	add.w	r1, r7, #8
 800f298:	4610      	mov	r0, r2
 800f29a:	4798      	blx	r3
 800f29c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f29e:	e00f      	b.n	800f2c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f2a0:	6839      	ldr	r1, [r7, #0]
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f000 fa30 	bl	800f708 <USBD_CtlError>
            err++;
 800f2a8:	7afb      	ldrb	r3, [r7, #11]
 800f2aa:	3301      	adds	r3, #1
 800f2ac:	72fb      	strb	r3, [r7, #11]
          break;
 800f2ae:	e007      	b.n	800f2c0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f2b0:	6839      	ldr	r1, [r7, #0]
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f000 fa28 	bl	800f708 <USBD_CtlError>
          err++;
 800f2b8:	7afb      	ldrb	r3, [r7, #11]
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f2be:	bf00      	nop
      }
      break;
 800f2c0:	e037      	b.n	800f332 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	7c1b      	ldrb	r3, [r3, #16]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d109      	bne.n	800f2de <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2d2:	f107 0208 	add.w	r2, r7, #8
 800f2d6:	4610      	mov	r0, r2
 800f2d8:	4798      	blx	r3
 800f2da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f2dc:	e029      	b.n	800f332 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f2de:	6839      	ldr	r1, [r7, #0]
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f000 fa11 	bl	800f708 <USBD_CtlError>
        err++;
 800f2e6:	7afb      	ldrb	r3, [r7, #11]
 800f2e8:	3301      	adds	r3, #1
 800f2ea:	72fb      	strb	r3, [r7, #11]
      break;
 800f2ec:	e021      	b.n	800f332 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	7c1b      	ldrb	r3, [r3, #16]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d10d      	bne.n	800f312 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2fe:	f107 0208 	add.w	r2, r7, #8
 800f302:	4610      	mov	r0, r2
 800f304:	4798      	blx	r3
 800f306:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	3301      	adds	r3, #1
 800f30c:	2207      	movs	r2, #7
 800f30e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f310:	e00f      	b.n	800f332 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f312:	6839      	ldr	r1, [r7, #0]
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f000 f9f7 	bl	800f708 <USBD_CtlError>
        err++;
 800f31a:	7afb      	ldrb	r3, [r7, #11]
 800f31c:	3301      	adds	r3, #1
 800f31e:	72fb      	strb	r3, [r7, #11]
      break;
 800f320:	e007      	b.n	800f332 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f322:	6839      	ldr	r1, [r7, #0]
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f000 f9ef 	bl	800f708 <USBD_CtlError>
      err++;
 800f32a:	7afb      	ldrb	r3, [r7, #11]
 800f32c:	3301      	adds	r3, #1
 800f32e:	72fb      	strb	r3, [r7, #11]
      break;
 800f330:	bf00      	nop
  }

  if (err != 0U)
 800f332:	7afb      	ldrb	r3, [r7, #11]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d11e      	bne.n	800f376 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	88db      	ldrh	r3, [r3, #6]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d016      	beq.n	800f36e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f340:	893b      	ldrh	r3, [r7, #8]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d00e      	beq.n	800f364 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	88da      	ldrh	r2, [r3, #6]
 800f34a:	893b      	ldrh	r3, [r7, #8]
 800f34c:	4293      	cmp	r3, r2
 800f34e:	bf28      	it	cs
 800f350:	4613      	movcs	r3, r2
 800f352:	b29b      	uxth	r3, r3
 800f354:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f356:	893b      	ldrh	r3, [r7, #8]
 800f358:	461a      	mov	r2, r3
 800f35a:	68f9      	ldr	r1, [r7, #12]
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f000 fa44 	bl	800f7ea <USBD_CtlSendData>
 800f362:	e009      	b.n	800f378 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f364:	6839      	ldr	r1, [r7, #0]
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f000 f9ce 	bl	800f708 <USBD_CtlError>
 800f36c:	e004      	b.n	800f378 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f000 fa95 	bl	800f89e <USBD_CtlSendStatus>
 800f374:	e000      	b.n	800f378 <USBD_GetDescriptor+0x2cc>
    return;
 800f376:	bf00      	nop
  }
}
 800f378:	3710      	adds	r7, #16
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}
 800f37e:	bf00      	nop

0800f380 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b084      	sub	sp, #16
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	889b      	ldrh	r3, [r3, #4]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d131      	bne.n	800f3f6 <USBD_SetAddress+0x76>
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	88db      	ldrh	r3, [r3, #6]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d12d      	bne.n	800f3f6 <USBD_SetAddress+0x76>
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	885b      	ldrh	r3, [r3, #2]
 800f39e:	2b7f      	cmp	r3, #127	; 0x7f
 800f3a0:	d829      	bhi.n	800f3f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	885b      	ldrh	r3, [r3, #2]
 800f3a6:	b2db      	uxtb	r3, r3
 800f3a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3b4:	b2db      	uxtb	r3, r3
 800f3b6:	2b03      	cmp	r3, #3
 800f3b8:	d104      	bne.n	800f3c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f3ba:	6839      	ldr	r1, [r7, #0]
 800f3bc:	6878      	ldr	r0, [r7, #4]
 800f3be:	f000 f9a3 	bl	800f708 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3c2:	e01d      	b.n	800f400 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	7bfa      	ldrb	r2, [r7, #15]
 800f3c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f3cc:	7bfb      	ldrb	r3, [r7, #15]
 800f3ce:	4619      	mov	r1, r3
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f004 fc0f 	bl	8013bf4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f000 fa61 	bl	800f89e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f3dc:	7bfb      	ldrb	r3, [r7, #15]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d004      	beq.n	800f3ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2202      	movs	r2, #2
 800f3e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3ea:	e009      	b.n	800f400 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2201      	movs	r2, #1
 800f3f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3f4:	e004      	b.n	800f400 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f3f6:	6839      	ldr	r1, [r7, #0]
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f000 f985 	bl	800f708 <USBD_CtlError>
  }
}
 800f3fe:	bf00      	nop
 800f400:	bf00      	nop
 800f402:	3710      	adds	r7, #16
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b084      	sub	sp, #16
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f412:	2300      	movs	r3, #0
 800f414:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	885b      	ldrh	r3, [r3, #2]
 800f41a:	b2da      	uxtb	r2, r3
 800f41c:	4b4c      	ldr	r3, [pc, #304]	; (800f550 <USBD_SetConfig+0x148>)
 800f41e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f420:	4b4b      	ldr	r3, [pc, #300]	; (800f550 <USBD_SetConfig+0x148>)
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	2b01      	cmp	r3, #1
 800f426:	d905      	bls.n	800f434 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f428:	6839      	ldr	r1, [r7, #0]
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f000 f96c 	bl	800f708 <USBD_CtlError>
    return USBD_FAIL;
 800f430:	2303      	movs	r3, #3
 800f432:	e088      	b.n	800f546 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f43a:	b2db      	uxtb	r3, r3
 800f43c:	2b02      	cmp	r3, #2
 800f43e:	d002      	beq.n	800f446 <USBD_SetConfig+0x3e>
 800f440:	2b03      	cmp	r3, #3
 800f442:	d025      	beq.n	800f490 <USBD_SetConfig+0x88>
 800f444:	e071      	b.n	800f52a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f446:	4b42      	ldr	r3, [pc, #264]	; (800f550 <USBD_SetConfig+0x148>)
 800f448:	781b      	ldrb	r3, [r3, #0]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d01c      	beq.n	800f488 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f44e:	4b40      	ldr	r3, [pc, #256]	; (800f550 <USBD_SetConfig+0x148>)
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	461a      	mov	r2, r3
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f458:	4b3d      	ldr	r3, [pc, #244]	; (800f550 <USBD_SetConfig+0x148>)
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	4619      	mov	r1, r3
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f7ff f948 	bl	800e6f4 <USBD_SetClassConfig>
 800f464:	4603      	mov	r3, r0
 800f466:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f468:	7bfb      	ldrb	r3, [r7, #15]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d004      	beq.n	800f478 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f46e:	6839      	ldr	r1, [r7, #0]
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f000 f949 	bl	800f708 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f476:	e065      	b.n	800f544 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f000 fa10 	bl	800f89e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2203      	movs	r2, #3
 800f482:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f486:	e05d      	b.n	800f544 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f000 fa08 	bl	800f89e <USBD_CtlSendStatus>
      break;
 800f48e:	e059      	b.n	800f544 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f490:	4b2f      	ldr	r3, [pc, #188]	; (800f550 <USBD_SetConfig+0x148>)
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d112      	bne.n	800f4be <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2202      	movs	r2, #2
 800f49c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f4a0:	4b2b      	ldr	r3, [pc, #172]	; (800f550 <USBD_SetConfig+0x148>)
 800f4a2:	781b      	ldrb	r3, [r3, #0]
 800f4a4:	461a      	mov	r2, r3
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f4aa:	4b29      	ldr	r3, [pc, #164]	; (800f550 <USBD_SetConfig+0x148>)
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	4619      	mov	r1, r3
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f7ff f93b 	bl	800e72c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f000 f9f1 	bl	800f89e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f4bc:	e042      	b.n	800f544 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f4be:	4b24      	ldr	r3, [pc, #144]	; (800f550 <USBD_SetConfig+0x148>)
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	685b      	ldr	r3, [r3, #4]
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d02a      	beq.n	800f522 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	685b      	ldr	r3, [r3, #4]
 800f4d0:	b2db      	uxtb	r3, r3
 800f4d2:	4619      	mov	r1, r3
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f7ff f929 	bl	800e72c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f4da:	4b1d      	ldr	r3, [pc, #116]	; (800f550 <USBD_SetConfig+0x148>)
 800f4dc:	781b      	ldrb	r3, [r3, #0]
 800f4de:	461a      	mov	r2, r3
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f4e4:	4b1a      	ldr	r3, [pc, #104]	; (800f550 <USBD_SetConfig+0x148>)
 800f4e6:	781b      	ldrb	r3, [r3, #0]
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f7ff f902 	bl	800e6f4 <USBD_SetClassConfig>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f4f4:	7bfb      	ldrb	r3, [r7, #15]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d00f      	beq.n	800f51a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f4fa:	6839      	ldr	r1, [r7, #0]
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f000 f903 	bl	800f708 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	685b      	ldr	r3, [r3, #4]
 800f506:	b2db      	uxtb	r3, r3
 800f508:	4619      	mov	r1, r3
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f7ff f90e 	bl	800e72c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2202      	movs	r2, #2
 800f514:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f518:	e014      	b.n	800f544 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f000 f9bf 	bl	800f89e <USBD_CtlSendStatus>
      break;
 800f520:	e010      	b.n	800f544 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f000 f9bb 	bl	800f89e <USBD_CtlSendStatus>
      break;
 800f528:	e00c      	b.n	800f544 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f52a:	6839      	ldr	r1, [r7, #0]
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f000 f8eb 	bl	800f708 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f532:	4b07      	ldr	r3, [pc, #28]	; (800f550 <USBD_SetConfig+0x148>)
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	4619      	mov	r1, r3
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f7ff f8f7 	bl	800e72c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f53e:	2303      	movs	r3, #3
 800f540:	73fb      	strb	r3, [r7, #15]
      break;
 800f542:	bf00      	nop
  }

  return ret;
 800f544:	7bfb      	ldrb	r3, [r7, #15]
}
 800f546:	4618      	mov	r0, r3
 800f548:	3710      	adds	r7, #16
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}
 800f54e:	bf00      	nop
 800f550:	20000388 	.word	0x20000388

0800f554 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b082      	sub	sp, #8
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
 800f55c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	88db      	ldrh	r3, [r3, #6]
 800f562:	2b01      	cmp	r3, #1
 800f564:	d004      	beq.n	800f570 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f566:	6839      	ldr	r1, [r7, #0]
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f000 f8cd 	bl	800f708 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f56e:	e023      	b.n	800f5b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f576:	b2db      	uxtb	r3, r3
 800f578:	2b02      	cmp	r3, #2
 800f57a:	dc02      	bgt.n	800f582 <USBD_GetConfig+0x2e>
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	dc03      	bgt.n	800f588 <USBD_GetConfig+0x34>
 800f580:	e015      	b.n	800f5ae <USBD_GetConfig+0x5a>
 800f582:	2b03      	cmp	r3, #3
 800f584:	d00b      	beq.n	800f59e <USBD_GetConfig+0x4a>
 800f586:	e012      	b.n	800f5ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2200      	movs	r2, #0
 800f58c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	3308      	adds	r3, #8
 800f592:	2201      	movs	r2, #1
 800f594:	4619      	mov	r1, r3
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f000 f927 	bl	800f7ea <USBD_CtlSendData>
        break;
 800f59c:	e00c      	b.n	800f5b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	3304      	adds	r3, #4
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	6878      	ldr	r0, [r7, #4]
 800f5a8:	f000 f91f 	bl	800f7ea <USBD_CtlSendData>
        break;
 800f5ac:	e004      	b.n	800f5b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f5ae:	6839      	ldr	r1, [r7, #0]
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	f000 f8a9 	bl	800f708 <USBD_CtlError>
        break;
 800f5b6:	bf00      	nop
}
 800f5b8:	bf00      	nop
 800f5ba:	3708      	adds	r7, #8
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}

0800f5c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b082      	sub	sp, #8
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5d0:	b2db      	uxtb	r3, r3
 800f5d2:	3b01      	subs	r3, #1
 800f5d4:	2b02      	cmp	r3, #2
 800f5d6:	d81e      	bhi.n	800f616 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	88db      	ldrh	r3, [r3, #6]
 800f5dc:	2b02      	cmp	r3, #2
 800f5de:	d004      	beq.n	800f5ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f5e0:	6839      	ldr	r1, [r7, #0]
 800f5e2:	6878      	ldr	r0, [r7, #4]
 800f5e4:	f000 f890 	bl	800f708 <USBD_CtlError>
        break;
 800f5e8:	e01a      	b.n	800f620 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2201      	movs	r2, #1
 800f5ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d005      	beq.n	800f606 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	68db      	ldr	r3, [r3, #12]
 800f5fe:	f043 0202 	orr.w	r2, r3, #2
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	330c      	adds	r3, #12
 800f60a:	2202      	movs	r2, #2
 800f60c:	4619      	mov	r1, r3
 800f60e:	6878      	ldr	r0, [r7, #4]
 800f610:	f000 f8eb 	bl	800f7ea <USBD_CtlSendData>
      break;
 800f614:	e004      	b.n	800f620 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f616:	6839      	ldr	r1, [r7, #0]
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f000 f875 	bl	800f708 <USBD_CtlError>
      break;
 800f61e:	bf00      	nop
  }
}
 800f620:	bf00      	nop
 800f622:	3708      	adds	r7, #8
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}

0800f628 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b082      	sub	sp, #8
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	885b      	ldrh	r3, [r3, #2]
 800f636:	2b01      	cmp	r3, #1
 800f638:	d106      	bne.n	800f648 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2201      	movs	r2, #1
 800f63e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f000 f92b 	bl	800f89e <USBD_CtlSendStatus>
  }
}
 800f648:	bf00      	nop
 800f64a:	3708      	adds	r7, #8
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}

0800f650 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b082      	sub	sp, #8
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f660:	b2db      	uxtb	r3, r3
 800f662:	3b01      	subs	r3, #1
 800f664:	2b02      	cmp	r3, #2
 800f666:	d80b      	bhi.n	800f680 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	885b      	ldrh	r3, [r3, #2]
 800f66c:	2b01      	cmp	r3, #1
 800f66e:	d10c      	bne.n	800f68a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2200      	movs	r2, #0
 800f674:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f000 f910 	bl	800f89e <USBD_CtlSendStatus>
      }
      break;
 800f67e:	e004      	b.n	800f68a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f680:	6839      	ldr	r1, [r7, #0]
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f000 f840 	bl	800f708 <USBD_CtlError>
      break;
 800f688:	e000      	b.n	800f68c <USBD_ClrFeature+0x3c>
      break;
 800f68a:	bf00      	nop
  }
}
 800f68c:	bf00      	nop
 800f68e:	3708      	adds	r7, #8
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}

0800f694 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b084      	sub	sp, #16
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
 800f69c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	781a      	ldrb	r2, [r3, #0]
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	3301      	adds	r3, #1
 800f6ae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	781a      	ldrb	r2, [r3, #0]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	3301      	adds	r3, #1
 800f6bc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f6be:	68f8      	ldr	r0, [r7, #12]
 800f6c0:	f7ff fabb 	bl	800ec3a <SWAPBYTE>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	461a      	mov	r2, r3
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	3301      	adds	r3, #1
 800f6d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	3301      	adds	r3, #1
 800f6d6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f6d8:	68f8      	ldr	r0, [r7, #12]
 800f6da:	f7ff faae 	bl	800ec3a <SWAPBYTE>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	461a      	mov	r2, r3
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	3301      	adds	r3, #1
 800f6ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	3301      	adds	r3, #1
 800f6f0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f6f2:	68f8      	ldr	r0, [r7, #12]
 800f6f4:	f7ff faa1 	bl	800ec3a <SWAPBYTE>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	80da      	strh	r2, [r3, #6]
}
 800f700:	bf00      	nop
 800f702:	3710      	adds	r7, #16
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}

0800f708 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b082      	sub	sp, #8
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
 800f710:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f712:	2180      	movs	r1, #128	; 0x80
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f004 fa03 	bl	8013b20 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f71a:	2100      	movs	r1, #0
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f004 f9ff 	bl	8013b20 <USBD_LL_StallEP>
}
 800f722:	bf00      	nop
 800f724:	3708      	adds	r7, #8
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}

0800f72a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f72a:	b580      	push	{r7, lr}
 800f72c:	b086      	sub	sp, #24
 800f72e:	af00      	add	r7, sp, #0
 800f730:	60f8      	str	r0, [r7, #12]
 800f732:	60b9      	str	r1, [r7, #8]
 800f734:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f736:	2300      	movs	r3, #0
 800f738:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d036      	beq.n	800f7ae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f744:	6938      	ldr	r0, [r7, #16]
 800f746:	f000 f836 	bl	800f7b6 <USBD_GetLen>
 800f74a:	4603      	mov	r3, r0
 800f74c:	3301      	adds	r3, #1
 800f74e:	b29b      	uxth	r3, r3
 800f750:	005b      	lsls	r3, r3, #1
 800f752:	b29a      	uxth	r2, r3
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f758:	7dfb      	ldrb	r3, [r7, #23]
 800f75a:	68ba      	ldr	r2, [r7, #8]
 800f75c:	4413      	add	r3, r2
 800f75e:	687a      	ldr	r2, [r7, #4]
 800f760:	7812      	ldrb	r2, [r2, #0]
 800f762:	701a      	strb	r2, [r3, #0]
  idx++;
 800f764:	7dfb      	ldrb	r3, [r7, #23]
 800f766:	3301      	adds	r3, #1
 800f768:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f76a:	7dfb      	ldrb	r3, [r7, #23]
 800f76c:	68ba      	ldr	r2, [r7, #8]
 800f76e:	4413      	add	r3, r2
 800f770:	2203      	movs	r2, #3
 800f772:	701a      	strb	r2, [r3, #0]
  idx++;
 800f774:	7dfb      	ldrb	r3, [r7, #23]
 800f776:	3301      	adds	r3, #1
 800f778:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f77a:	e013      	b.n	800f7a4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f77c:	7dfb      	ldrb	r3, [r7, #23]
 800f77e:	68ba      	ldr	r2, [r7, #8]
 800f780:	4413      	add	r3, r2
 800f782:	693a      	ldr	r2, [r7, #16]
 800f784:	7812      	ldrb	r2, [r2, #0]
 800f786:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f788:	693b      	ldr	r3, [r7, #16]
 800f78a:	3301      	adds	r3, #1
 800f78c:	613b      	str	r3, [r7, #16]
    idx++;
 800f78e:	7dfb      	ldrb	r3, [r7, #23]
 800f790:	3301      	adds	r3, #1
 800f792:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f794:	7dfb      	ldrb	r3, [r7, #23]
 800f796:	68ba      	ldr	r2, [r7, #8]
 800f798:	4413      	add	r3, r2
 800f79a:	2200      	movs	r2, #0
 800f79c:	701a      	strb	r2, [r3, #0]
    idx++;
 800f79e:	7dfb      	ldrb	r3, [r7, #23]
 800f7a0:	3301      	adds	r3, #1
 800f7a2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f7a4:	693b      	ldr	r3, [r7, #16]
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d1e7      	bne.n	800f77c <USBD_GetString+0x52>
 800f7ac:	e000      	b.n	800f7b0 <USBD_GetString+0x86>
    return;
 800f7ae:	bf00      	nop
  }
}
 800f7b0:	3718      	adds	r7, #24
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}

0800f7b6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f7b6:	b480      	push	{r7}
 800f7b8:	b085      	sub	sp, #20
 800f7ba:	af00      	add	r7, sp, #0
 800f7bc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f7c6:	e005      	b.n	800f7d4 <USBD_GetLen+0x1e>
  {
    len++;
 800f7c8:	7bfb      	ldrb	r3, [r7, #15]
 800f7ca:	3301      	adds	r3, #1
 800f7cc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d1f5      	bne.n	800f7c8 <USBD_GetLen+0x12>
  }

  return len;
 800f7dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3714      	adds	r7, #20
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e8:	4770      	bx	lr

0800f7ea <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f7ea:	b580      	push	{r7, lr}
 800f7ec:	b084      	sub	sp, #16
 800f7ee:	af00      	add	r7, sp, #0
 800f7f0:	60f8      	str	r0, [r7, #12]
 800f7f2:	60b9      	str	r1, [r7, #8]
 800f7f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	2202      	movs	r2, #2
 800f7fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	687a      	ldr	r2, [r7, #4]
 800f802:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	687a      	ldr	r2, [r7, #4]
 800f808:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	68ba      	ldr	r2, [r7, #8]
 800f80e:	2100      	movs	r1, #0
 800f810:	68f8      	ldr	r0, [r7, #12]
 800f812:	f004 fa0e 	bl	8013c32 <USBD_LL_Transmit>

  return USBD_OK;
 800f816:	2300      	movs	r3, #0
}
 800f818:	4618      	mov	r0, r3
 800f81a:	3710      	adds	r7, #16
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}

0800f820 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b084      	sub	sp, #16
 800f824:	af00      	add	r7, sp, #0
 800f826:	60f8      	str	r0, [r7, #12]
 800f828:	60b9      	str	r1, [r7, #8]
 800f82a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	68ba      	ldr	r2, [r7, #8]
 800f830:	2100      	movs	r1, #0
 800f832:	68f8      	ldr	r0, [r7, #12]
 800f834:	f004 f9fd 	bl	8013c32 <USBD_LL_Transmit>

  return USBD_OK;
 800f838:	2300      	movs	r3, #0
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	3710      	adds	r7, #16
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}

0800f842 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f842:	b580      	push	{r7, lr}
 800f844:	b084      	sub	sp, #16
 800f846:	af00      	add	r7, sp, #0
 800f848:	60f8      	str	r0, [r7, #12]
 800f84a:	60b9      	str	r1, [r7, #8]
 800f84c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	2203      	movs	r2, #3
 800f852:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	687a      	ldr	r2, [r7, #4]
 800f85a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	687a      	ldr	r2, [r7, #4]
 800f862:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	68ba      	ldr	r2, [r7, #8]
 800f86a:	2100      	movs	r1, #0
 800f86c:	68f8      	ldr	r0, [r7, #12]
 800f86e:	f004 fa01 	bl	8013c74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f872:	2300      	movs	r3, #0
}
 800f874:	4618      	mov	r0, r3
 800f876:	3710      	adds	r7, #16
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}

0800f87c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b084      	sub	sp, #16
 800f880:	af00      	add	r7, sp, #0
 800f882:	60f8      	str	r0, [r7, #12]
 800f884:	60b9      	str	r1, [r7, #8]
 800f886:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	68ba      	ldr	r2, [r7, #8]
 800f88c:	2100      	movs	r1, #0
 800f88e:	68f8      	ldr	r0, [r7, #12]
 800f890:	f004 f9f0 	bl	8013c74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f894:	2300      	movs	r3, #0
}
 800f896:	4618      	mov	r0, r3
 800f898:	3710      	adds	r7, #16
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}

0800f89e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f89e:	b580      	push	{r7, lr}
 800f8a0:	b082      	sub	sp, #8
 800f8a2:	af00      	add	r7, sp, #0
 800f8a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2204      	movs	r2, #4
 800f8aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	2100      	movs	r1, #0
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f004 f9bc 	bl	8013c32 <USBD_LL_Transmit>

  return USBD_OK;
 800f8ba:	2300      	movs	r3, #0
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3708      	adds	r7, #8
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}

0800f8c4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b082      	sub	sp, #8
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2205      	movs	r2, #5
 800f8d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	2100      	movs	r1, #0
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f004 f9ca 	bl	8013c74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f8e0:	2300      	movs	r3, #0
}
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	3708      	adds	r7, #8
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bd80      	pop	{r7, pc}
	...

0800f8ec <__NVIC_SetPriority>:
{
 800f8ec:	b480      	push	{r7}
 800f8ee:	b083      	sub	sp, #12
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	6039      	str	r1, [r7, #0]
 800f8f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f8f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	db0a      	blt.n	800f916 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	b2da      	uxtb	r2, r3
 800f904:	490c      	ldr	r1, [pc, #48]	; (800f938 <__NVIC_SetPriority+0x4c>)
 800f906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f90a:	0112      	lsls	r2, r2, #4
 800f90c:	b2d2      	uxtb	r2, r2
 800f90e:	440b      	add	r3, r1
 800f910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f914:	e00a      	b.n	800f92c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	b2da      	uxtb	r2, r3
 800f91a:	4908      	ldr	r1, [pc, #32]	; (800f93c <__NVIC_SetPriority+0x50>)
 800f91c:	79fb      	ldrb	r3, [r7, #7]
 800f91e:	f003 030f 	and.w	r3, r3, #15
 800f922:	3b04      	subs	r3, #4
 800f924:	0112      	lsls	r2, r2, #4
 800f926:	b2d2      	uxtb	r2, r2
 800f928:	440b      	add	r3, r1
 800f92a:	761a      	strb	r2, [r3, #24]
}
 800f92c:	bf00      	nop
 800f92e:	370c      	adds	r7, #12
 800f930:	46bd      	mov	sp, r7
 800f932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f936:	4770      	bx	lr
 800f938:	e000e100 	.word	0xe000e100
 800f93c:	e000ed00 	.word	0xe000ed00

0800f940 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f940:	b580      	push	{r7, lr}
 800f942:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f944:	4b05      	ldr	r3, [pc, #20]	; (800f95c <SysTick_Handler+0x1c>)
 800f946:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f948:	f002 fb5e 	bl	8012008 <xTaskGetSchedulerState>
 800f94c:	4603      	mov	r3, r0
 800f94e:	2b01      	cmp	r3, #1
 800f950:	d001      	beq.n	800f956 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f952:	f003 fa49 	bl	8012de8 <xPortSysTickHandler>
  }
}
 800f956:	bf00      	nop
 800f958:	bd80      	pop	{r7, pc}
 800f95a:	bf00      	nop
 800f95c:	e000e010 	.word	0xe000e010

0800f960 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f960:	b580      	push	{r7, lr}
 800f962:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f964:	2100      	movs	r1, #0
 800f966:	f06f 0004 	mvn.w	r0, #4
 800f96a:	f7ff ffbf 	bl	800f8ec <__NVIC_SetPriority>
#endif
}
 800f96e:	bf00      	nop
 800f970:	bd80      	pop	{r7, pc}
	...

0800f974 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f974:	b480      	push	{r7}
 800f976:	b083      	sub	sp, #12
 800f978:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f97a:	f3ef 8305 	mrs	r3, IPSR
 800f97e:	603b      	str	r3, [r7, #0]
  return(result);
 800f980:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f982:	2b00      	cmp	r3, #0
 800f984:	d003      	beq.n	800f98e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f986:	f06f 0305 	mvn.w	r3, #5
 800f98a:	607b      	str	r3, [r7, #4]
 800f98c:	e00c      	b.n	800f9a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f98e:	4b0a      	ldr	r3, [pc, #40]	; (800f9b8 <osKernelInitialize+0x44>)
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d105      	bne.n	800f9a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f996:	4b08      	ldr	r3, [pc, #32]	; (800f9b8 <osKernelInitialize+0x44>)
 800f998:	2201      	movs	r2, #1
 800f99a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f99c:	2300      	movs	r3, #0
 800f99e:	607b      	str	r3, [r7, #4]
 800f9a0:	e002      	b.n	800f9a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f9a2:	f04f 33ff 	mov.w	r3, #4294967295
 800f9a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f9a8:	687b      	ldr	r3, [r7, #4]
}
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	370c      	adds	r7, #12
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b4:	4770      	bx	lr
 800f9b6:	bf00      	nop
 800f9b8:	2000038c 	.word	0x2000038c

0800f9bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b082      	sub	sp, #8
 800f9c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f9c2:	f3ef 8305 	mrs	r3, IPSR
 800f9c6:	603b      	str	r3, [r7, #0]
  return(result);
 800f9c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d003      	beq.n	800f9d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800f9ce:	f06f 0305 	mvn.w	r3, #5
 800f9d2:	607b      	str	r3, [r7, #4]
 800f9d4:	e010      	b.n	800f9f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f9d6:	4b0b      	ldr	r3, [pc, #44]	; (800fa04 <osKernelStart+0x48>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	2b01      	cmp	r3, #1
 800f9dc:	d109      	bne.n	800f9f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f9de:	f7ff ffbf 	bl	800f960 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f9e2:	4b08      	ldr	r3, [pc, #32]	; (800fa04 <osKernelStart+0x48>)
 800f9e4:	2202      	movs	r2, #2
 800f9e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f9e8:	f001 fe6e 	bl	80116c8 <vTaskStartScheduler>
      stat = osOK;
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	607b      	str	r3, [r7, #4]
 800f9f0:	e002      	b.n	800f9f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f9f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f9f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f9f8:	687b      	ldr	r3, [r7, #4]
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	3708      	adds	r7, #8
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd80      	pop	{r7, pc}
 800fa02:	bf00      	nop
 800fa04:	2000038c 	.word	0x2000038c

0800fa08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b08e      	sub	sp, #56	; 0x38
 800fa0c:	af04      	add	r7, sp, #16
 800fa0e:	60f8      	str	r0, [r7, #12]
 800fa10:	60b9      	str	r1, [r7, #8]
 800fa12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800fa14:	2300      	movs	r3, #0
 800fa16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa18:	f3ef 8305 	mrs	r3, IPSR
 800fa1c:	617b      	str	r3, [r7, #20]
  return(result);
 800fa1e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d17e      	bne.n	800fb22 <osThreadNew+0x11a>
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d07b      	beq.n	800fb22 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800fa2a:	2380      	movs	r3, #128	; 0x80
 800fa2c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800fa2e:	2318      	movs	r3, #24
 800fa30:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800fa32:	2300      	movs	r3, #0
 800fa34:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800fa36:	f04f 33ff 	mov.w	r3, #4294967295
 800fa3a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d045      	beq.n	800face <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d002      	beq.n	800fa50 <osThreadNew+0x48>
        name = attr->name;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	699b      	ldr	r3, [r3, #24]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d002      	beq.n	800fa5e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	699b      	ldr	r3, [r3, #24]
 800fa5c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800fa5e:	69fb      	ldr	r3, [r7, #28]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d008      	beq.n	800fa76 <osThreadNew+0x6e>
 800fa64:	69fb      	ldr	r3, [r7, #28]
 800fa66:	2b38      	cmp	r3, #56	; 0x38
 800fa68:	d805      	bhi.n	800fa76 <osThreadNew+0x6e>
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	685b      	ldr	r3, [r3, #4]
 800fa6e:	f003 0301 	and.w	r3, r3, #1
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d001      	beq.n	800fa7a <osThreadNew+0x72>
        return (NULL);
 800fa76:	2300      	movs	r3, #0
 800fa78:	e054      	b.n	800fb24 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	695b      	ldr	r3, [r3, #20]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d003      	beq.n	800fa8a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	695b      	ldr	r3, [r3, #20]
 800fa86:	089b      	lsrs	r3, r3, #2
 800fa88:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	689b      	ldr	r3, [r3, #8]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d00e      	beq.n	800fab0 <osThreadNew+0xa8>
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	68db      	ldr	r3, [r3, #12]
 800fa96:	2b5b      	cmp	r3, #91	; 0x5b
 800fa98:	d90a      	bls.n	800fab0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d006      	beq.n	800fab0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	695b      	ldr	r3, [r3, #20]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d002      	beq.n	800fab0 <osThreadNew+0xa8>
        mem = 1;
 800faaa:	2301      	movs	r3, #1
 800faac:	61bb      	str	r3, [r7, #24]
 800faae:	e010      	b.n	800fad2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	689b      	ldr	r3, [r3, #8]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d10c      	bne.n	800fad2 <osThreadNew+0xca>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	68db      	ldr	r3, [r3, #12]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d108      	bne.n	800fad2 <osThreadNew+0xca>
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	691b      	ldr	r3, [r3, #16]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d104      	bne.n	800fad2 <osThreadNew+0xca>
          mem = 0;
 800fac8:	2300      	movs	r3, #0
 800faca:	61bb      	str	r3, [r7, #24]
 800facc:	e001      	b.n	800fad2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800face:	2300      	movs	r3, #0
 800fad0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fad2:	69bb      	ldr	r3, [r7, #24]
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	d110      	bne.n	800fafa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800fadc:	687a      	ldr	r2, [r7, #4]
 800fade:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fae0:	9202      	str	r2, [sp, #8]
 800fae2:	9301      	str	r3, [sp, #4]
 800fae4:	69fb      	ldr	r3, [r7, #28]
 800fae6:	9300      	str	r3, [sp, #0]
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	6a3a      	ldr	r2, [r7, #32]
 800faec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800faee:	68f8      	ldr	r0, [r7, #12]
 800faf0:	f001 fc10 	bl	8011314 <xTaskCreateStatic>
 800faf4:	4603      	mov	r3, r0
 800faf6:	613b      	str	r3, [r7, #16]
 800faf8:	e013      	b.n	800fb22 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800fafa:	69bb      	ldr	r3, [r7, #24]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d110      	bne.n	800fb22 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fb00:	6a3b      	ldr	r3, [r7, #32]
 800fb02:	b29a      	uxth	r2, r3
 800fb04:	f107 0310 	add.w	r3, r7, #16
 800fb08:	9301      	str	r3, [sp, #4]
 800fb0a:	69fb      	ldr	r3, [r7, #28]
 800fb0c:	9300      	str	r3, [sp, #0]
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb12:	68f8      	ldr	r0, [r7, #12]
 800fb14:	f001 fc5b 	bl	80113ce <xTaskCreate>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	d001      	beq.n	800fb22 <osThreadNew+0x11a>
            hTask = NULL;
 800fb1e:	2300      	movs	r3, #0
 800fb20:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fb22:	693b      	ldr	r3, [r7, #16]
}
 800fb24:	4618      	mov	r0, r3
 800fb26:	3728      	adds	r7, #40	; 0x28
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}

0800fb2c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb34:	f3ef 8305 	mrs	r3, IPSR
 800fb38:	60bb      	str	r3, [r7, #8]
  return(result);
 800fb3a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d003      	beq.n	800fb48 <osDelay+0x1c>
    stat = osErrorISR;
 800fb40:	f06f 0305 	mvn.w	r3, #5
 800fb44:	60fb      	str	r3, [r7, #12]
 800fb46:	e007      	b.n	800fb58 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800fb48:	2300      	movs	r3, #0
 800fb4a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d002      	beq.n	800fb58 <osDelay+0x2c>
      vTaskDelay(ticks);
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	f001 fd84 	bl	8011660 <vTaskDelay>
    }
  }

  return (stat);
 800fb58:	68fb      	ldr	r3, [r7, #12]
}
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	3710      	adds	r7, #16
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}

0800fb62 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800fb62:	b580      	push	{r7, lr}
 800fb64:	b088      	sub	sp, #32
 800fb66:	af00      	add	r7, sp, #0
 800fb68:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb6e:	f3ef 8305 	mrs	r3, IPSR
 800fb72:	60bb      	str	r3, [r7, #8]
  return(result);
 800fb74:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d174      	bne.n	800fc64 <osMutexNew+0x102>
    if (attr != NULL) {
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d003      	beq.n	800fb88 <osMutexNew+0x26>
      type = attr->attr_bits;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	685b      	ldr	r3, [r3, #4]
 800fb84:	61bb      	str	r3, [r7, #24]
 800fb86:	e001      	b.n	800fb8c <osMutexNew+0x2a>
    } else {
      type = 0U;
 800fb88:	2300      	movs	r3, #0
 800fb8a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800fb8c:	69bb      	ldr	r3, [r7, #24]
 800fb8e:	f003 0301 	and.w	r3, r3, #1
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d002      	beq.n	800fb9c <osMutexNew+0x3a>
      rmtx = 1U;
 800fb96:	2301      	movs	r3, #1
 800fb98:	617b      	str	r3, [r7, #20]
 800fb9a:	e001      	b.n	800fba0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800fba0:	69bb      	ldr	r3, [r7, #24]
 800fba2:	f003 0308 	and.w	r3, r3, #8
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d15c      	bne.n	800fc64 <osMutexNew+0x102>
      mem = -1;
 800fbaa:	f04f 33ff 	mov.w	r3, #4294967295
 800fbae:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d015      	beq.n	800fbe2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	689b      	ldr	r3, [r3, #8]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d006      	beq.n	800fbcc <osMutexNew+0x6a>
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	68db      	ldr	r3, [r3, #12]
 800fbc2:	2b4f      	cmp	r3, #79	; 0x4f
 800fbc4:	d902      	bls.n	800fbcc <osMutexNew+0x6a>
          mem = 1;
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	613b      	str	r3, [r7, #16]
 800fbca:	e00c      	b.n	800fbe6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	689b      	ldr	r3, [r3, #8]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d108      	bne.n	800fbe6 <osMutexNew+0x84>
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	68db      	ldr	r3, [r3, #12]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d104      	bne.n	800fbe6 <osMutexNew+0x84>
            mem = 0;
 800fbdc:	2300      	movs	r3, #0
 800fbde:	613b      	str	r3, [r7, #16]
 800fbe0:	e001      	b.n	800fbe6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	2b01      	cmp	r3, #1
 800fbea:	d112      	bne.n	800fc12 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d007      	beq.n	800fc02 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	689b      	ldr	r3, [r3, #8]
 800fbf6:	4619      	mov	r1, r3
 800fbf8:	2004      	movs	r0, #4
 800fbfa:	f000 fc36 	bl	801046a <xQueueCreateMutexStatic>
 800fbfe:	61f8      	str	r0, [r7, #28]
 800fc00:	e016      	b.n	800fc30 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	689b      	ldr	r3, [r3, #8]
 800fc06:	4619      	mov	r1, r3
 800fc08:	2001      	movs	r0, #1
 800fc0a:	f000 fc2e 	bl	801046a <xQueueCreateMutexStatic>
 800fc0e:	61f8      	str	r0, [r7, #28]
 800fc10:	e00e      	b.n	800fc30 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800fc12:	693b      	ldr	r3, [r7, #16]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d10b      	bne.n	800fc30 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d004      	beq.n	800fc28 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800fc1e:	2004      	movs	r0, #4
 800fc20:	f000 fc0b 	bl	801043a <xQueueCreateMutex>
 800fc24:	61f8      	str	r0, [r7, #28]
 800fc26:	e003      	b.n	800fc30 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800fc28:	2001      	movs	r0, #1
 800fc2a:	f000 fc06 	bl	801043a <xQueueCreateMutex>
 800fc2e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800fc30:	69fb      	ldr	r3, [r7, #28]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d00c      	beq.n	800fc50 <osMutexNew+0xee>
        if (attr != NULL) {
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d003      	beq.n	800fc44 <osMutexNew+0xe2>
          name = attr->name;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	60fb      	str	r3, [r7, #12]
 800fc42:	e001      	b.n	800fc48 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800fc44:	2300      	movs	r3, #0
 800fc46:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800fc48:	68f9      	ldr	r1, [r7, #12]
 800fc4a:	69f8      	ldr	r0, [r7, #28]
 800fc4c:	f001 fada 	bl	8011204 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800fc50:	69fb      	ldr	r3, [r7, #28]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d006      	beq.n	800fc64 <osMutexNew+0x102>
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d003      	beq.n	800fc64 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800fc5c:	69fb      	ldr	r3, [r7, #28]
 800fc5e:	f043 0301 	orr.w	r3, r3, #1
 800fc62:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800fc64:	69fb      	ldr	r3, [r7, #28]
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	3720      	adds	r7, #32
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd80      	pop	{r7, pc}

0800fc6e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800fc6e:	b580      	push	{r7, lr}
 800fc70:	b086      	sub	sp, #24
 800fc72:	af00      	add	r7, sp, #0
 800fc74:	6078      	str	r0, [r7, #4]
 800fc76:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f023 0301 	bic.w	r3, r3, #1
 800fc7e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f003 0301 	and.w	r3, r3, #1
 800fc86:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc8c:	f3ef 8305 	mrs	r3, IPSR
 800fc90:	60bb      	str	r3, [r7, #8]
  return(result);
 800fc92:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d003      	beq.n	800fca0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800fc98:	f06f 0305 	mvn.w	r3, #5
 800fc9c:	617b      	str	r3, [r7, #20]
 800fc9e:	e02c      	b.n	800fcfa <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800fca0:	693b      	ldr	r3, [r7, #16]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d103      	bne.n	800fcae <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800fca6:	f06f 0303 	mvn.w	r3, #3
 800fcaa:	617b      	str	r3, [r7, #20]
 800fcac:	e025      	b.n	800fcfa <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d011      	beq.n	800fcd8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800fcb4:	6839      	ldr	r1, [r7, #0]
 800fcb6:	6938      	ldr	r0, [r7, #16]
 800fcb8:	f000 fc26 	bl	8010508 <xQueueTakeMutexRecursive>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	2b01      	cmp	r3, #1
 800fcc0:	d01b      	beq.n	800fcfa <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d003      	beq.n	800fcd0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800fcc8:	f06f 0301 	mvn.w	r3, #1
 800fccc:	617b      	str	r3, [r7, #20]
 800fcce:	e014      	b.n	800fcfa <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800fcd0:	f06f 0302 	mvn.w	r3, #2
 800fcd4:	617b      	str	r3, [r7, #20]
 800fcd6:	e010      	b.n	800fcfa <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800fcd8:	6839      	ldr	r1, [r7, #0]
 800fcda:	6938      	ldr	r0, [r7, #16]
 800fcdc:	f000 ffba 	bl	8010c54 <xQueueSemaphoreTake>
 800fce0:	4603      	mov	r3, r0
 800fce2:	2b01      	cmp	r3, #1
 800fce4:	d009      	beq.n	800fcfa <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d003      	beq.n	800fcf4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800fcec:	f06f 0301 	mvn.w	r3, #1
 800fcf0:	617b      	str	r3, [r7, #20]
 800fcf2:	e002      	b.n	800fcfa <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800fcf4:	f06f 0302 	mvn.w	r3, #2
 800fcf8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800fcfa:	697b      	ldr	r3, [r7, #20]
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	3718      	adds	r7, #24
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}

0800fd04 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b086      	sub	sp, #24
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f023 0301 	bic.w	r3, r3, #1
 800fd12:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f003 0301 	and.w	r3, r3, #1
 800fd1a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd20:	f3ef 8305 	mrs	r3, IPSR
 800fd24:	60bb      	str	r3, [r7, #8]
  return(result);
 800fd26:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d003      	beq.n	800fd34 <osMutexRelease+0x30>
    stat = osErrorISR;
 800fd2c:	f06f 0305 	mvn.w	r3, #5
 800fd30:	617b      	str	r3, [r7, #20]
 800fd32:	e01f      	b.n	800fd74 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d103      	bne.n	800fd42 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800fd3a:	f06f 0303 	mvn.w	r3, #3
 800fd3e:	617b      	str	r3, [r7, #20]
 800fd40:	e018      	b.n	800fd74 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d009      	beq.n	800fd5c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800fd48:	6938      	ldr	r0, [r7, #16]
 800fd4a:	f000 fba9 	bl	80104a0 <xQueueGiveMutexRecursive>
 800fd4e:	4603      	mov	r3, r0
 800fd50:	2b01      	cmp	r3, #1
 800fd52:	d00f      	beq.n	800fd74 <osMutexRelease+0x70>
        stat = osErrorResource;
 800fd54:	f06f 0302 	mvn.w	r3, #2
 800fd58:	617b      	str	r3, [r7, #20]
 800fd5a:	e00b      	b.n	800fd74 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	2200      	movs	r2, #0
 800fd60:	2100      	movs	r1, #0
 800fd62:	6938      	ldr	r0, [r7, #16]
 800fd64:	f000 fc70 	bl	8010648 <xQueueGenericSend>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	2b01      	cmp	r3, #1
 800fd6c:	d002      	beq.n	800fd74 <osMutexRelease+0x70>
        stat = osErrorResource;
 800fd6e:	f06f 0302 	mvn.w	r3, #2
 800fd72:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800fd74:	697b      	ldr	r3, [r7, #20]
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3718      	adds	r7, #24
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}

0800fd7e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800fd7e:	b580      	push	{r7, lr}
 800fd80:	b08a      	sub	sp, #40	; 0x28
 800fd82:	af02      	add	r7, sp, #8
 800fd84:	60f8      	str	r0, [r7, #12]
 800fd86:	60b9      	str	r1, [r7, #8]
 800fd88:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd8e:	f3ef 8305 	mrs	r3, IPSR
 800fd92:	613b      	str	r3, [r7, #16]
  return(result);
 800fd94:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d175      	bne.n	800fe86 <osSemaphoreNew+0x108>
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d072      	beq.n	800fe86 <osSemaphoreNew+0x108>
 800fda0:	68ba      	ldr	r2, [r7, #8]
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	429a      	cmp	r2, r3
 800fda6:	d86e      	bhi.n	800fe86 <osSemaphoreNew+0x108>
    mem = -1;
 800fda8:	f04f 33ff 	mov.w	r3, #4294967295
 800fdac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d015      	beq.n	800fde0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	689b      	ldr	r3, [r3, #8]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d006      	beq.n	800fdca <osSemaphoreNew+0x4c>
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	68db      	ldr	r3, [r3, #12]
 800fdc0:	2b4f      	cmp	r3, #79	; 0x4f
 800fdc2:	d902      	bls.n	800fdca <osSemaphoreNew+0x4c>
        mem = 1;
 800fdc4:	2301      	movs	r3, #1
 800fdc6:	61bb      	str	r3, [r7, #24]
 800fdc8:	e00c      	b.n	800fde4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	689b      	ldr	r3, [r3, #8]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d108      	bne.n	800fde4 <osSemaphoreNew+0x66>
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	68db      	ldr	r3, [r3, #12]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d104      	bne.n	800fde4 <osSemaphoreNew+0x66>
          mem = 0;
 800fdda:	2300      	movs	r3, #0
 800fddc:	61bb      	str	r3, [r7, #24]
 800fdde:	e001      	b.n	800fde4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800fde0:	2300      	movs	r3, #0
 800fde2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800fde4:	69bb      	ldr	r3, [r7, #24]
 800fde6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdea:	d04c      	beq.n	800fe86 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	2b01      	cmp	r3, #1
 800fdf0:	d128      	bne.n	800fe44 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800fdf2:	69bb      	ldr	r3, [r7, #24]
 800fdf4:	2b01      	cmp	r3, #1
 800fdf6:	d10a      	bne.n	800fe0e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	689b      	ldr	r3, [r3, #8]
 800fdfc:	2203      	movs	r2, #3
 800fdfe:	9200      	str	r2, [sp, #0]
 800fe00:	2200      	movs	r2, #0
 800fe02:	2100      	movs	r1, #0
 800fe04:	2001      	movs	r0, #1
 800fe06:	f000 fa29 	bl	801025c <xQueueGenericCreateStatic>
 800fe0a:	61f8      	str	r0, [r7, #28]
 800fe0c:	e005      	b.n	800fe1a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800fe0e:	2203      	movs	r2, #3
 800fe10:	2100      	movs	r1, #0
 800fe12:	2001      	movs	r0, #1
 800fe14:	f000 fa9a 	bl	801034c <xQueueGenericCreate>
 800fe18:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800fe1a:	69fb      	ldr	r3, [r7, #28]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d022      	beq.n	800fe66 <osSemaphoreNew+0xe8>
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d01f      	beq.n	800fe66 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800fe26:	2300      	movs	r3, #0
 800fe28:	2200      	movs	r2, #0
 800fe2a:	2100      	movs	r1, #0
 800fe2c:	69f8      	ldr	r0, [r7, #28]
 800fe2e:	f000 fc0b 	bl	8010648 <xQueueGenericSend>
 800fe32:	4603      	mov	r3, r0
 800fe34:	2b01      	cmp	r3, #1
 800fe36:	d016      	beq.n	800fe66 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800fe38:	69f8      	ldr	r0, [r7, #28]
 800fe3a:	f001 f897 	bl	8010f6c <vQueueDelete>
            hSemaphore = NULL;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	61fb      	str	r3, [r7, #28]
 800fe42:	e010      	b.n	800fe66 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800fe44:	69bb      	ldr	r3, [r7, #24]
 800fe46:	2b01      	cmp	r3, #1
 800fe48:	d108      	bne.n	800fe5c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	689b      	ldr	r3, [r3, #8]
 800fe4e:	461a      	mov	r2, r3
 800fe50:	68b9      	ldr	r1, [r7, #8]
 800fe52:	68f8      	ldr	r0, [r7, #12]
 800fe54:	f000 fb8e 	bl	8010574 <xQueueCreateCountingSemaphoreStatic>
 800fe58:	61f8      	str	r0, [r7, #28]
 800fe5a:	e004      	b.n	800fe66 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800fe5c:	68b9      	ldr	r1, [r7, #8]
 800fe5e:	68f8      	ldr	r0, [r7, #12]
 800fe60:	f000 fbbf 	bl	80105e2 <xQueueCreateCountingSemaphore>
 800fe64:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800fe66:	69fb      	ldr	r3, [r7, #28]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d00c      	beq.n	800fe86 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d003      	beq.n	800fe7a <osSemaphoreNew+0xfc>
          name = attr->name;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	617b      	str	r3, [r7, #20]
 800fe78:	e001      	b.n	800fe7e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800fe7e:	6979      	ldr	r1, [r7, #20]
 800fe80:	69f8      	ldr	r0, [r7, #28]
 800fe82:	f001 f9bf 	bl	8011204 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800fe86:	69fb      	ldr	r3, [r7, #28]
}
 800fe88:	4618      	mov	r0, r3
 800fe8a:	3720      	adds	r7, #32
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}

0800fe90 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b086      	sub	sp, #24
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800fe9e:	2300      	movs	r3, #0
 800fea0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800fea2:	693b      	ldr	r3, [r7, #16]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d103      	bne.n	800feb0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800fea8:	f06f 0303 	mvn.w	r3, #3
 800feac:	617b      	str	r3, [r7, #20]
 800feae:	e039      	b.n	800ff24 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800feb0:	f3ef 8305 	mrs	r3, IPSR
 800feb4:	60fb      	str	r3, [r7, #12]
  return(result);
 800feb6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d022      	beq.n	800ff02 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d003      	beq.n	800feca <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800fec2:	f06f 0303 	mvn.w	r3, #3
 800fec6:	617b      	str	r3, [r7, #20]
 800fec8:	e02c      	b.n	800ff24 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800feca:	2300      	movs	r3, #0
 800fecc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800fece:	f107 0308 	add.w	r3, r7, #8
 800fed2:	461a      	mov	r2, r3
 800fed4:	2100      	movs	r1, #0
 800fed6:	6938      	ldr	r0, [r7, #16]
 800fed8:	f000 ffc8 	bl	8010e6c <xQueueReceiveFromISR>
 800fedc:	4603      	mov	r3, r0
 800fede:	2b01      	cmp	r3, #1
 800fee0:	d003      	beq.n	800feea <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800fee2:	f06f 0302 	mvn.w	r3, #2
 800fee6:	617b      	str	r3, [r7, #20]
 800fee8:	e01c      	b.n	800ff24 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800feea:	68bb      	ldr	r3, [r7, #8]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d019      	beq.n	800ff24 <osSemaphoreAcquire+0x94>
 800fef0:	4b0f      	ldr	r3, [pc, #60]	; (800ff30 <osSemaphoreAcquire+0xa0>)
 800fef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fef6:	601a      	str	r2, [r3, #0]
 800fef8:	f3bf 8f4f 	dsb	sy
 800fefc:	f3bf 8f6f 	isb	sy
 800ff00:	e010      	b.n	800ff24 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ff02:	6839      	ldr	r1, [r7, #0]
 800ff04:	6938      	ldr	r0, [r7, #16]
 800ff06:	f000 fea5 	bl	8010c54 <xQueueSemaphoreTake>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	2b01      	cmp	r3, #1
 800ff0e:	d009      	beq.n	800ff24 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d003      	beq.n	800ff1e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800ff16:	f06f 0301 	mvn.w	r3, #1
 800ff1a:	617b      	str	r3, [r7, #20]
 800ff1c:	e002      	b.n	800ff24 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800ff1e:	f06f 0302 	mvn.w	r3, #2
 800ff22:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ff24:	697b      	ldr	r3, [r7, #20]
}
 800ff26:	4618      	mov	r0, r3
 800ff28:	3718      	adds	r7, #24
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}
 800ff2e:	bf00      	nop
 800ff30:	e000ed04 	.word	0xe000ed04

0800ff34 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b086      	sub	sp, #24
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ff40:	2300      	movs	r3, #0
 800ff42:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ff44:	693b      	ldr	r3, [r7, #16]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d103      	bne.n	800ff52 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ff4a:	f06f 0303 	mvn.w	r3, #3
 800ff4e:	617b      	str	r3, [r7, #20]
 800ff50:	e02c      	b.n	800ffac <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff52:	f3ef 8305 	mrs	r3, IPSR
 800ff56:	60fb      	str	r3, [r7, #12]
  return(result);
 800ff58:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d01a      	beq.n	800ff94 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ff62:	f107 0308 	add.w	r3, r7, #8
 800ff66:	4619      	mov	r1, r3
 800ff68:	6938      	ldr	r0, [r7, #16]
 800ff6a:	f000 fd06 	bl	801097a <xQueueGiveFromISR>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b01      	cmp	r3, #1
 800ff72:	d003      	beq.n	800ff7c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800ff74:	f06f 0302 	mvn.w	r3, #2
 800ff78:	617b      	str	r3, [r7, #20]
 800ff7a:	e017      	b.n	800ffac <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d014      	beq.n	800ffac <osSemaphoreRelease+0x78>
 800ff82:	4b0d      	ldr	r3, [pc, #52]	; (800ffb8 <osSemaphoreRelease+0x84>)
 800ff84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff88:	601a      	str	r2, [r3, #0]
 800ff8a:	f3bf 8f4f 	dsb	sy
 800ff8e:	f3bf 8f6f 	isb	sy
 800ff92:	e00b      	b.n	800ffac <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ff94:	2300      	movs	r3, #0
 800ff96:	2200      	movs	r2, #0
 800ff98:	2100      	movs	r1, #0
 800ff9a:	6938      	ldr	r0, [r7, #16]
 800ff9c:	f000 fb54 	bl	8010648 <xQueueGenericSend>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	2b01      	cmp	r3, #1
 800ffa4:	d002      	beq.n	800ffac <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800ffa6:	f06f 0302 	mvn.w	r3, #2
 800ffaa:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ffac:	697b      	ldr	r3, [r7, #20]
}
 800ffae:	4618      	mov	r0, r3
 800ffb0:	3718      	adds	r7, #24
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bd80      	pop	{r7, pc}
 800ffb6:	bf00      	nop
 800ffb8:	e000ed04 	.word	0xe000ed04

0800ffbc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ffbc:	b480      	push	{r7}
 800ffbe:	b085      	sub	sp, #20
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	60f8      	str	r0, [r7, #12]
 800ffc4:	60b9      	str	r1, [r7, #8]
 800ffc6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	4a07      	ldr	r2, [pc, #28]	; (800ffe8 <vApplicationGetIdleTaskMemory+0x2c>)
 800ffcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	4a06      	ldr	r2, [pc, #24]	; (800ffec <vApplicationGetIdleTaskMemory+0x30>)
 800ffd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2280      	movs	r2, #128	; 0x80
 800ffd8:	601a      	str	r2, [r3, #0]
}
 800ffda:	bf00      	nop
 800ffdc:	3714      	adds	r7, #20
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe4:	4770      	bx	lr
 800ffe6:	bf00      	nop
 800ffe8:	20000390 	.word	0x20000390
 800ffec:	200003ec 	.word	0x200003ec

0800fff0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800fff0:	b480      	push	{r7}
 800fff2:	b085      	sub	sp, #20
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	60f8      	str	r0, [r7, #12]
 800fff8:	60b9      	str	r1, [r7, #8]
 800fffa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	4a07      	ldr	r2, [pc, #28]	; (801001c <vApplicationGetTimerTaskMemory+0x2c>)
 8010000:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	4a06      	ldr	r2, [pc, #24]	; (8010020 <vApplicationGetTimerTaskMemory+0x30>)
 8010006:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801000e:	601a      	str	r2, [r3, #0]
}
 8010010:	bf00      	nop
 8010012:	3714      	adds	r7, #20
 8010014:	46bd      	mov	sp, r7
 8010016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001a:	4770      	bx	lr
 801001c:	200005ec 	.word	0x200005ec
 8010020:	20000648 	.word	0x20000648

08010024 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010024:	b480      	push	{r7}
 8010026:	b083      	sub	sp, #12
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	f103 0208 	add.w	r2, r3, #8
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f04f 32ff 	mov.w	r2, #4294967295
 801003c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f103 0208 	add.w	r2, r3, #8
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f103 0208 	add.w	r2, r3, #8
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	2200      	movs	r2, #0
 8010056:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010058:	bf00      	nop
 801005a:	370c      	adds	r7, #12
 801005c:	46bd      	mov	sp, r7
 801005e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010062:	4770      	bx	lr

08010064 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010064:	b480      	push	{r7}
 8010066:	b083      	sub	sp, #12
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2200      	movs	r2, #0
 8010070:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010072:	bf00      	nop
 8010074:	370c      	adds	r7, #12
 8010076:	46bd      	mov	sp, r7
 8010078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007c:	4770      	bx	lr

0801007e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801007e:	b480      	push	{r7}
 8010080:	b085      	sub	sp, #20
 8010082:	af00      	add	r7, sp, #0
 8010084:	6078      	str	r0, [r7, #4]
 8010086:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	685b      	ldr	r3, [r3, #4]
 801008c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	68fa      	ldr	r2, [r7, #12]
 8010092:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	689a      	ldr	r2, [r3, #8]
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	689b      	ldr	r3, [r3, #8]
 80100a0:	683a      	ldr	r2, [r7, #0]
 80100a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	683a      	ldr	r2, [r7, #0]
 80100a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	687a      	ldr	r2, [r7, #4]
 80100ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	1c5a      	adds	r2, r3, #1
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	601a      	str	r2, [r3, #0]
}
 80100ba:	bf00      	nop
 80100bc:	3714      	adds	r7, #20
 80100be:	46bd      	mov	sp, r7
 80100c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c4:	4770      	bx	lr

080100c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80100c6:	b480      	push	{r7}
 80100c8:	b085      	sub	sp, #20
 80100ca:	af00      	add	r7, sp, #0
 80100cc:	6078      	str	r0, [r7, #4]
 80100ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80100d6:	68bb      	ldr	r3, [r7, #8]
 80100d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100dc:	d103      	bne.n	80100e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	691b      	ldr	r3, [r3, #16]
 80100e2:	60fb      	str	r3, [r7, #12]
 80100e4:	e00c      	b.n	8010100 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	3308      	adds	r3, #8
 80100ea:	60fb      	str	r3, [r7, #12]
 80100ec:	e002      	b.n	80100f4 <vListInsert+0x2e>
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	685b      	ldr	r3, [r3, #4]
 80100f2:	60fb      	str	r3, [r7, #12]
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	685b      	ldr	r3, [r3, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	68ba      	ldr	r2, [r7, #8]
 80100fc:	429a      	cmp	r2, r3
 80100fe:	d2f6      	bcs.n	80100ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	685a      	ldr	r2, [r3, #4]
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	685b      	ldr	r3, [r3, #4]
 801010c:	683a      	ldr	r2, [r7, #0]
 801010e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	68fa      	ldr	r2, [r7, #12]
 8010114:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	683a      	ldr	r2, [r7, #0]
 801011a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	687a      	ldr	r2, [r7, #4]
 8010120:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	1c5a      	adds	r2, r3, #1
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	601a      	str	r2, [r3, #0]
}
 801012c:	bf00      	nop
 801012e:	3714      	adds	r7, #20
 8010130:	46bd      	mov	sp, r7
 8010132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010136:	4770      	bx	lr

08010138 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010138:	b480      	push	{r7}
 801013a:	b085      	sub	sp, #20
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	691b      	ldr	r3, [r3, #16]
 8010144:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	685b      	ldr	r3, [r3, #4]
 801014a:	687a      	ldr	r2, [r7, #4]
 801014c:	6892      	ldr	r2, [r2, #8]
 801014e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	689b      	ldr	r3, [r3, #8]
 8010154:	687a      	ldr	r2, [r7, #4]
 8010156:	6852      	ldr	r2, [r2, #4]
 8010158:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	685b      	ldr	r3, [r3, #4]
 801015e:	687a      	ldr	r2, [r7, #4]
 8010160:	429a      	cmp	r2, r3
 8010162:	d103      	bne.n	801016c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	689a      	ldr	r2, [r3, #8]
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	2200      	movs	r2, #0
 8010170:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	1e5a      	subs	r2, r3, #1
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	681b      	ldr	r3, [r3, #0]
}
 8010180:	4618      	mov	r0, r3
 8010182:	3714      	adds	r7, #20
 8010184:	46bd      	mov	sp, r7
 8010186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018a:	4770      	bx	lr

0801018c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b084      	sub	sp, #16
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
 8010194:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d10a      	bne.n	80101b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80101a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a4:	f383 8811 	msr	BASEPRI, r3
 80101a8:	f3bf 8f6f 	isb	sy
 80101ac:	f3bf 8f4f 	dsb	sy
 80101b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80101b2:	bf00      	nop
 80101b4:	e7fe      	b.n	80101b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80101b6:	f002 fd85 	bl	8012cc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	681a      	ldr	r2, [r3, #0]
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101c2:	68f9      	ldr	r1, [r7, #12]
 80101c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80101c6:	fb01 f303 	mul.w	r3, r1, r3
 80101ca:	441a      	add	r2, r3
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	2200      	movs	r2, #0
 80101d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	681a      	ldr	r2, [r3, #0]
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	681a      	ldr	r2, [r3, #0]
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101e6:	3b01      	subs	r3, #1
 80101e8:	68f9      	ldr	r1, [r7, #12]
 80101ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80101ec:	fb01 f303 	mul.w	r3, r1, r3
 80101f0:	441a      	add	r2, r3
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	22ff      	movs	r2, #255	; 0xff
 80101fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	22ff      	movs	r2, #255	; 0xff
 8010202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d114      	bne.n	8010236 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	691b      	ldr	r3, [r3, #16]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d01a      	beq.n	801024a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	3310      	adds	r3, #16
 8010218:	4618      	mov	r0, r3
 801021a:	f001 fcdf 	bl	8011bdc <xTaskRemoveFromEventList>
 801021e:	4603      	mov	r3, r0
 8010220:	2b00      	cmp	r3, #0
 8010222:	d012      	beq.n	801024a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010224:	4b0c      	ldr	r3, [pc, #48]	; (8010258 <xQueueGenericReset+0xcc>)
 8010226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801022a:	601a      	str	r2, [r3, #0]
 801022c:	f3bf 8f4f 	dsb	sy
 8010230:	f3bf 8f6f 	isb	sy
 8010234:	e009      	b.n	801024a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	3310      	adds	r3, #16
 801023a:	4618      	mov	r0, r3
 801023c:	f7ff fef2 	bl	8010024 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	3324      	adds	r3, #36	; 0x24
 8010244:	4618      	mov	r0, r3
 8010246:	f7ff feed 	bl	8010024 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801024a:	f002 fd6b 	bl	8012d24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801024e:	2301      	movs	r3, #1
}
 8010250:	4618      	mov	r0, r3
 8010252:	3710      	adds	r7, #16
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}
 8010258:	e000ed04 	.word	0xe000ed04

0801025c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801025c:	b580      	push	{r7, lr}
 801025e:	b08e      	sub	sp, #56	; 0x38
 8010260:	af02      	add	r7, sp, #8
 8010262:	60f8      	str	r0, [r7, #12]
 8010264:	60b9      	str	r1, [r7, #8]
 8010266:	607a      	str	r2, [r7, #4]
 8010268:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d10a      	bne.n	8010286 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010274:	f383 8811 	msr	BASEPRI, r3
 8010278:	f3bf 8f6f 	isb	sy
 801027c:	f3bf 8f4f 	dsb	sy
 8010280:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010282:	bf00      	nop
 8010284:	e7fe      	b.n	8010284 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010286:	683b      	ldr	r3, [r7, #0]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d10a      	bne.n	80102a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801028c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010290:	f383 8811 	msr	BASEPRI, r3
 8010294:	f3bf 8f6f 	isb	sy
 8010298:	f3bf 8f4f 	dsb	sy
 801029c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801029e:	bf00      	nop
 80102a0:	e7fe      	b.n	80102a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d002      	beq.n	80102ae <xQueueGenericCreateStatic+0x52>
 80102a8:	68bb      	ldr	r3, [r7, #8]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d001      	beq.n	80102b2 <xQueueGenericCreateStatic+0x56>
 80102ae:	2301      	movs	r3, #1
 80102b0:	e000      	b.n	80102b4 <xQueueGenericCreateStatic+0x58>
 80102b2:	2300      	movs	r3, #0
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d10a      	bne.n	80102ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80102b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102bc:	f383 8811 	msr	BASEPRI, r3
 80102c0:	f3bf 8f6f 	isb	sy
 80102c4:	f3bf 8f4f 	dsb	sy
 80102c8:	623b      	str	r3, [r7, #32]
}
 80102ca:	bf00      	nop
 80102cc:	e7fe      	b.n	80102cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d102      	bne.n	80102da <xQueueGenericCreateStatic+0x7e>
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d101      	bne.n	80102de <xQueueGenericCreateStatic+0x82>
 80102da:	2301      	movs	r3, #1
 80102dc:	e000      	b.n	80102e0 <xQueueGenericCreateStatic+0x84>
 80102de:	2300      	movs	r3, #0
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d10a      	bne.n	80102fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80102e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102e8:	f383 8811 	msr	BASEPRI, r3
 80102ec:	f3bf 8f6f 	isb	sy
 80102f0:	f3bf 8f4f 	dsb	sy
 80102f4:	61fb      	str	r3, [r7, #28]
}
 80102f6:	bf00      	nop
 80102f8:	e7fe      	b.n	80102f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80102fa:	2350      	movs	r3, #80	; 0x50
 80102fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80102fe:	697b      	ldr	r3, [r7, #20]
 8010300:	2b50      	cmp	r3, #80	; 0x50
 8010302:	d00a      	beq.n	801031a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010308:	f383 8811 	msr	BASEPRI, r3
 801030c:	f3bf 8f6f 	isb	sy
 8010310:	f3bf 8f4f 	dsb	sy
 8010314:	61bb      	str	r3, [r7, #24]
}
 8010316:	bf00      	nop
 8010318:	e7fe      	b.n	8010318 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801031a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010322:	2b00      	cmp	r3, #0
 8010324:	d00d      	beq.n	8010342 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010328:	2201      	movs	r2, #1
 801032a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801032e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010334:	9300      	str	r3, [sp, #0]
 8010336:	4613      	mov	r3, r2
 8010338:	687a      	ldr	r2, [r7, #4]
 801033a:	68b9      	ldr	r1, [r7, #8]
 801033c:	68f8      	ldr	r0, [r7, #12]
 801033e:	f000 f83f 	bl	80103c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010344:	4618      	mov	r0, r3
 8010346:	3730      	adds	r7, #48	; 0x30
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}

0801034c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801034c:	b580      	push	{r7, lr}
 801034e:	b08a      	sub	sp, #40	; 0x28
 8010350:	af02      	add	r7, sp, #8
 8010352:	60f8      	str	r0, [r7, #12]
 8010354:	60b9      	str	r1, [r7, #8]
 8010356:	4613      	mov	r3, r2
 8010358:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d10a      	bne.n	8010376 <xQueueGenericCreate+0x2a>
	__asm volatile
 8010360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010364:	f383 8811 	msr	BASEPRI, r3
 8010368:	f3bf 8f6f 	isb	sy
 801036c:	f3bf 8f4f 	dsb	sy
 8010370:	613b      	str	r3, [r7, #16]
}
 8010372:	bf00      	nop
 8010374:	e7fe      	b.n	8010374 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	68ba      	ldr	r2, [r7, #8]
 801037a:	fb02 f303 	mul.w	r3, r2, r3
 801037e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010380:	69fb      	ldr	r3, [r7, #28]
 8010382:	3350      	adds	r3, #80	; 0x50
 8010384:	4618      	mov	r0, r3
 8010386:	f002 fdbf 	bl	8012f08 <pvPortMalloc>
 801038a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801038c:	69bb      	ldr	r3, [r7, #24]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d011      	beq.n	80103b6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010392:	69bb      	ldr	r3, [r7, #24]
 8010394:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010396:	697b      	ldr	r3, [r7, #20]
 8010398:	3350      	adds	r3, #80	; 0x50
 801039a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801039c:	69bb      	ldr	r3, [r7, #24]
 801039e:	2200      	movs	r2, #0
 80103a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80103a4:	79fa      	ldrb	r2, [r7, #7]
 80103a6:	69bb      	ldr	r3, [r7, #24]
 80103a8:	9300      	str	r3, [sp, #0]
 80103aa:	4613      	mov	r3, r2
 80103ac:	697a      	ldr	r2, [r7, #20]
 80103ae:	68b9      	ldr	r1, [r7, #8]
 80103b0:	68f8      	ldr	r0, [r7, #12]
 80103b2:	f000 f805 	bl	80103c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80103b6:	69bb      	ldr	r3, [r7, #24]
	}
 80103b8:	4618      	mov	r0, r3
 80103ba:	3720      	adds	r7, #32
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}

080103c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b084      	sub	sp, #16
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	60f8      	str	r0, [r7, #12]
 80103c8:	60b9      	str	r1, [r7, #8]
 80103ca:	607a      	str	r2, [r7, #4]
 80103cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d103      	bne.n	80103dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80103d4:	69bb      	ldr	r3, [r7, #24]
 80103d6:	69ba      	ldr	r2, [r7, #24]
 80103d8:	601a      	str	r2, [r3, #0]
 80103da:	e002      	b.n	80103e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80103dc:	69bb      	ldr	r3, [r7, #24]
 80103de:	687a      	ldr	r2, [r7, #4]
 80103e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80103e2:	69bb      	ldr	r3, [r7, #24]
 80103e4:	68fa      	ldr	r2, [r7, #12]
 80103e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80103e8:	69bb      	ldr	r3, [r7, #24]
 80103ea:	68ba      	ldr	r2, [r7, #8]
 80103ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80103ee:	2101      	movs	r1, #1
 80103f0:	69b8      	ldr	r0, [r7, #24]
 80103f2:	f7ff fecb 	bl	801018c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80103f6:	69bb      	ldr	r3, [r7, #24]
 80103f8:	78fa      	ldrb	r2, [r7, #3]
 80103fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80103fe:	bf00      	nop
 8010400:	3710      	adds	r7, #16
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}

08010406 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8010406:	b580      	push	{r7, lr}
 8010408:	b082      	sub	sp, #8
 801040a:	af00      	add	r7, sp, #0
 801040c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d00e      	beq.n	8010432 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2200      	movs	r2, #0
 8010418:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	2200      	movs	r2, #0
 801041e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2200      	movs	r2, #0
 8010424:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010426:	2300      	movs	r3, #0
 8010428:	2200      	movs	r2, #0
 801042a:	2100      	movs	r1, #0
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f000 f90b 	bl	8010648 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010432:	bf00      	nop
 8010434:	3708      	adds	r7, #8
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}

0801043a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801043a:	b580      	push	{r7, lr}
 801043c:	b086      	sub	sp, #24
 801043e:	af00      	add	r7, sp, #0
 8010440:	4603      	mov	r3, r0
 8010442:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010444:	2301      	movs	r3, #1
 8010446:	617b      	str	r3, [r7, #20]
 8010448:	2300      	movs	r3, #0
 801044a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801044c:	79fb      	ldrb	r3, [r7, #7]
 801044e:	461a      	mov	r2, r3
 8010450:	6939      	ldr	r1, [r7, #16]
 8010452:	6978      	ldr	r0, [r7, #20]
 8010454:	f7ff ff7a 	bl	801034c <xQueueGenericCreate>
 8010458:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801045a:	68f8      	ldr	r0, [r7, #12]
 801045c:	f7ff ffd3 	bl	8010406 <prvInitialiseMutex>

		return xNewQueue;
 8010460:	68fb      	ldr	r3, [r7, #12]
	}
 8010462:	4618      	mov	r0, r3
 8010464:	3718      	adds	r7, #24
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}

0801046a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801046a:	b580      	push	{r7, lr}
 801046c:	b088      	sub	sp, #32
 801046e:	af02      	add	r7, sp, #8
 8010470:	4603      	mov	r3, r0
 8010472:	6039      	str	r1, [r7, #0]
 8010474:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010476:	2301      	movs	r3, #1
 8010478:	617b      	str	r3, [r7, #20]
 801047a:	2300      	movs	r3, #0
 801047c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801047e:	79fb      	ldrb	r3, [r7, #7]
 8010480:	9300      	str	r3, [sp, #0]
 8010482:	683b      	ldr	r3, [r7, #0]
 8010484:	2200      	movs	r2, #0
 8010486:	6939      	ldr	r1, [r7, #16]
 8010488:	6978      	ldr	r0, [r7, #20]
 801048a:	f7ff fee7 	bl	801025c <xQueueGenericCreateStatic>
 801048e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010490:	68f8      	ldr	r0, [r7, #12]
 8010492:	f7ff ffb8 	bl	8010406 <prvInitialiseMutex>

		return xNewQueue;
 8010496:	68fb      	ldr	r3, [r7, #12]
	}
 8010498:	4618      	mov	r0, r3
 801049a:	3718      	adds	r7, #24
 801049c:	46bd      	mov	sp, r7
 801049e:	bd80      	pop	{r7, pc}

080104a0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80104a0:	b590      	push	{r4, r7, lr}
 80104a2:	b087      	sub	sp, #28
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80104ac:	693b      	ldr	r3, [r7, #16]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d10a      	bne.n	80104c8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80104b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104b6:	f383 8811 	msr	BASEPRI, r3
 80104ba:	f3bf 8f6f 	isb	sy
 80104be:	f3bf 8f4f 	dsb	sy
 80104c2:	60fb      	str	r3, [r7, #12]
}
 80104c4:	bf00      	nop
 80104c6:	e7fe      	b.n	80104c6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80104c8:	693b      	ldr	r3, [r7, #16]
 80104ca:	689c      	ldr	r4, [r3, #8]
 80104cc:	f001 fd8c 	bl	8011fe8 <xTaskGetCurrentTaskHandle>
 80104d0:	4603      	mov	r3, r0
 80104d2:	429c      	cmp	r4, r3
 80104d4:	d111      	bne.n	80104fa <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80104d6:	693b      	ldr	r3, [r7, #16]
 80104d8:	68db      	ldr	r3, [r3, #12]
 80104da:	1e5a      	subs	r2, r3, #1
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80104e0:	693b      	ldr	r3, [r7, #16]
 80104e2:	68db      	ldr	r3, [r3, #12]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d105      	bne.n	80104f4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80104e8:	2300      	movs	r3, #0
 80104ea:	2200      	movs	r2, #0
 80104ec:	2100      	movs	r1, #0
 80104ee:	6938      	ldr	r0, [r7, #16]
 80104f0:	f000 f8aa 	bl	8010648 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80104f4:	2301      	movs	r3, #1
 80104f6:	617b      	str	r3, [r7, #20]
 80104f8:	e001      	b.n	80104fe <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80104fa:	2300      	movs	r3, #0
 80104fc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80104fe:	697b      	ldr	r3, [r7, #20]
	}
 8010500:	4618      	mov	r0, r3
 8010502:	371c      	adds	r7, #28
 8010504:	46bd      	mov	sp, r7
 8010506:	bd90      	pop	{r4, r7, pc}

08010508 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8010508:	b590      	push	{r4, r7, lr}
 801050a:	b087      	sub	sp, #28
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8010516:	693b      	ldr	r3, [r7, #16]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d10a      	bne.n	8010532 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 801051c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010520:	f383 8811 	msr	BASEPRI, r3
 8010524:	f3bf 8f6f 	isb	sy
 8010528:	f3bf 8f4f 	dsb	sy
 801052c:	60fb      	str	r3, [r7, #12]
}
 801052e:	bf00      	nop
 8010530:	e7fe      	b.n	8010530 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	689c      	ldr	r4, [r3, #8]
 8010536:	f001 fd57 	bl	8011fe8 <xTaskGetCurrentTaskHandle>
 801053a:	4603      	mov	r3, r0
 801053c:	429c      	cmp	r4, r3
 801053e:	d107      	bne.n	8010550 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010540:	693b      	ldr	r3, [r7, #16]
 8010542:	68db      	ldr	r3, [r3, #12]
 8010544:	1c5a      	adds	r2, r3, #1
 8010546:	693b      	ldr	r3, [r7, #16]
 8010548:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 801054a:	2301      	movs	r3, #1
 801054c:	617b      	str	r3, [r7, #20]
 801054e:	e00c      	b.n	801056a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8010550:	6839      	ldr	r1, [r7, #0]
 8010552:	6938      	ldr	r0, [r7, #16]
 8010554:	f000 fb7e 	bl	8010c54 <xQueueSemaphoreTake>
 8010558:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 801055a:	697b      	ldr	r3, [r7, #20]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d004      	beq.n	801056a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010560:	693b      	ldr	r3, [r7, #16]
 8010562:	68db      	ldr	r3, [r3, #12]
 8010564:	1c5a      	adds	r2, r3, #1
 8010566:	693b      	ldr	r3, [r7, #16]
 8010568:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801056a:	697b      	ldr	r3, [r7, #20]
	}
 801056c:	4618      	mov	r0, r3
 801056e:	371c      	adds	r7, #28
 8010570:	46bd      	mov	sp, r7
 8010572:	bd90      	pop	{r4, r7, pc}

08010574 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010574:	b580      	push	{r7, lr}
 8010576:	b08a      	sub	sp, #40	; 0x28
 8010578:	af02      	add	r7, sp, #8
 801057a:	60f8      	str	r0, [r7, #12]
 801057c:	60b9      	str	r1, [r7, #8]
 801057e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d10a      	bne.n	801059c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8010586:	f04f 0350 	mov.w	r3, #80	; 0x50
 801058a:	f383 8811 	msr	BASEPRI, r3
 801058e:	f3bf 8f6f 	isb	sy
 8010592:	f3bf 8f4f 	dsb	sy
 8010596:	61bb      	str	r3, [r7, #24]
}
 8010598:	bf00      	nop
 801059a:	e7fe      	b.n	801059a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801059c:	68ba      	ldr	r2, [r7, #8]
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	429a      	cmp	r2, r3
 80105a2:	d90a      	bls.n	80105ba <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80105a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105a8:	f383 8811 	msr	BASEPRI, r3
 80105ac:	f3bf 8f6f 	isb	sy
 80105b0:	f3bf 8f4f 	dsb	sy
 80105b4:	617b      	str	r3, [r7, #20]
}
 80105b6:	bf00      	nop
 80105b8:	e7fe      	b.n	80105b8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80105ba:	2302      	movs	r3, #2
 80105bc:	9300      	str	r3, [sp, #0]
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	2200      	movs	r2, #0
 80105c2:	2100      	movs	r1, #0
 80105c4:	68f8      	ldr	r0, [r7, #12]
 80105c6:	f7ff fe49 	bl	801025c <xQueueGenericCreateStatic>
 80105ca:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80105cc:	69fb      	ldr	r3, [r7, #28]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d002      	beq.n	80105d8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80105d2:	69fb      	ldr	r3, [r7, #28]
 80105d4:	68ba      	ldr	r2, [r7, #8]
 80105d6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80105d8:	69fb      	ldr	r3, [r7, #28]
	}
 80105da:	4618      	mov	r0, r3
 80105dc:	3720      	adds	r7, #32
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}

080105e2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80105e2:	b580      	push	{r7, lr}
 80105e4:	b086      	sub	sp, #24
 80105e6:	af00      	add	r7, sp, #0
 80105e8:	6078      	str	r0, [r7, #4]
 80105ea:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d10a      	bne.n	8010608 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80105f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105f6:	f383 8811 	msr	BASEPRI, r3
 80105fa:	f3bf 8f6f 	isb	sy
 80105fe:	f3bf 8f4f 	dsb	sy
 8010602:	613b      	str	r3, [r7, #16]
}
 8010604:	bf00      	nop
 8010606:	e7fe      	b.n	8010606 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010608:	683a      	ldr	r2, [r7, #0]
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	429a      	cmp	r2, r3
 801060e:	d90a      	bls.n	8010626 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8010610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010614:	f383 8811 	msr	BASEPRI, r3
 8010618:	f3bf 8f6f 	isb	sy
 801061c:	f3bf 8f4f 	dsb	sy
 8010620:	60fb      	str	r3, [r7, #12]
}
 8010622:	bf00      	nop
 8010624:	e7fe      	b.n	8010624 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010626:	2202      	movs	r2, #2
 8010628:	2100      	movs	r1, #0
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f7ff fe8e 	bl	801034c <xQueueGenericCreate>
 8010630:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8010632:	697b      	ldr	r3, [r7, #20]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d002      	beq.n	801063e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010638:	697b      	ldr	r3, [r7, #20]
 801063a:	683a      	ldr	r2, [r7, #0]
 801063c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801063e:	697b      	ldr	r3, [r7, #20]
	}
 8010640:	4618      	mov	r0, r3
 8010642:	3718      	adds	r7, #24
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}

08010648 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b08e      	sub	sp, #56	; 0x38
 801064c:	af00      	add	r7, sp, #0
 801064e:	60f8      	str	r0, [r7, #12]
 8010650:	60b9      	str	r1, [r7, #8]
 8010652:	607a      	str	r2, [r7, #4]
 8010654:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010656:	2300      	movs	r3, #0
 8010658:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801065e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010660:	2b00      	cmp	r3, #0
 8010662:	d10a      	bne.n	801067a <xQueueGenericSend+0x32>
	__asm volatile
 8010664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010668:	f383 8811 	msr	BASEPRI, r3
 801066c:	f3bf 8f6f 	isb	sy
 8010670:	f3bf 8f4f 	dsb	sy
 8010674:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010676:	bf00      	nop
 8010678:	e7fe      	b.n	8010678 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d103      	bne.n	8010688 <xQueueGenericSend+0x40>
 8010680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010684:	2b00      	cmp	r3, #0
 8010686:	d101      	bne.n	801068c <xQueueGenericSend+0x44>
 8010688:	2301      	movs	r3, #1
 801068a:	e000      	b.n	801068e <xQueueGenericSend+0x46>
 801068c:	2300      	movs	r3, #0
 801068e:	2b00      	cmp	r3, #0
 8010690:	d10a      	bne.n	80106a8 <xQueueGenericSend+0x60>
	__asm volatile
 8010692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010696:	f383 8811 	msr	BASEPRI, r3
 801069a:	f3bf 8f6f 	isb	sy
 801069e:	f3bf 8f4f 	dsb	sy
 80106a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80106a4:	bf00      	nop
 80106a6:	e7fe      	b.n	80106a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80106a8:	683b      	ldr	r3, [r7, #0]
 80106aa:	2b02      	cmp	r3, #2
 80106ac:	d103      	bne.n	80106b6 <xQueueGenericSend+0x6e>
 80106ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106b2:	2b01      	cmp	r3, #1
 80106b4:	d101      	bne.n	80106ba <xQueueGenericSend+0x72>
 80106b6:	2301      	movs	r3, #1
 80106b8:	e000      	b.n	80106bc <xQueueGenericSend+0x74>
 80106ba:	2300      	movs	r3, #0
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d10a      	bne.n	80106d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80106c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c4:	f383 8811 	msr	BASEPRI, r3
 80106c8:	f3bf 8f6f 	isb	sy
 80106cc:	f3bf 8f4f 	dsb	sy
 80106d0:	623b      	str	r3, [r7, #32]
}
 80106d2:	bf00      	nop
 80106d4:	e7fe      	b.n	80106d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80106d6:	f001 fc97 	bl	8012008 <xTaskGetSchedulerState>
 80106da:	4603      	mov	r3, r0
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d102      	bne.n	80106e6 <xQueueGenericSend+0x9e>
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d101      	bne.n	80106ea <xQueueGenericSend+0xa2>
 80106e6:	2301      	movs	r3, #1
 80106e8:	e000      	b.n	80106ec <xQueueGenericSend+0xa4>
 80106ea:	2300      	movs	r3, #0
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d10a      	bne.n	8010706 <xQueueGenericSend+0xbe>
	__asm volatile
 80106f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106f4:	f383 8811 	msr	BASEPRI, r3
 80106f8:	f3bf 8f6f 	isb	sy
 80106fc:	f3bf 8f4f 	dsb	sy
 8010700:	61fb      	str	r3, [r7, #28]
}
 8010702:	bf00      	nop
 8010704:	e7fe      	b.n	8010704 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010706:	f002 fadd 	bl	8012cc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801070a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801070c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801070e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010712:	429a      	cmp	r2, r3
 8010714:	d302      	bcc.n	801071c <xQueueGenericSend+0xd4>
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	2b02      	cmp	r3, #2
 801071a:	d129      	bne.n	8010770 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801071c:	683a      	ldr	r2, [r7, #0]
 801071e:	68b9      	ldr	r1, [r7, #8]
 8010720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010722:	f000 fc5e 	bl	8010fe2 <prvCopyDataToQueue>
 8010726:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801072a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801072c:	2b00      	cmp	r3, #0
 801072e:	d010      	beq.n	8010752 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010732:	3324      	adds	r3, #36	; 0x24
 8010734:	4618      	mov	r0, r3
 8010736:	f001 fa51 	bl	8011bdc <xTaskRemoveFromEventList>
 801073a:	4603      	mov	r3, r0
 801073c:	2b00      	cmp	r3, #0
 801073e:	d013      	beq.n	8010768 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010740:	4b3f      	ldr	r3, [pc, #252]	; (8010840 <xQueueGenericSend+0x1f8>)
 8010742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010746:	601a      	str	r2, [r3, #0]
 8010748:	f3bf 8f4f 	dsb	sy
 801074c:	f3bf 8f6f 	isb	sy
 8010750:	e00a      	b.n	8010768 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010754:	2b00      	cmp	r3, #0
 8010756:	d007      	beq.n	8010768 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010758:	4b39      	ldr	r3, [pc, #228]	; (8010840 <xQueueGenericSend+0x1f8>)
 801075a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801075e:	601a      	str	r2, [r3, #0]
 8010760:	f3bf 8f4f 	dsb	sy
 8010764:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010768:	f002 fadc 	bl	8012d24 <vPortExitCritical>
				return pdPASS;
 801076c:	2301      	movs	r3, #1
 801076e:	e063      	b.n	8010838 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d103      	bne.n	801077e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010776:	f002 fad5 	bl	8012d24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801077a:	2300      	movs	r3, #0
 801077c:	e05c      	b.n	8010838 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801077e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010780:	2b00      	cmp	r3, #0
 8010782:	d106      	bne.n	8010792 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010784:	f107 0314 	add.w	r3, r7, #20
 8010788:	4618      	mov	r0, r3
 801078a:	f001 fa8b 	bl	8011ca4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801078e:	2301      	movs	r3, #1
 8010790:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010792:	f002 fac7 	bl	8012d24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010796:	f000 fffd 	bl	8011794 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801079a:	f002 fa93 	bl	8012cc4 <vPortEnterCritical>
 801079e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80107a4:	b25b      	sxtb	r3, r3
 80107a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107aa:	d103      	bne.n	80107b4 <xQueueGenericSend+0x16c>
 80107ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ae:	2200      	movs	r2, #0
 80107b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80107b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80107ba:	b25b      	sxtb	r3, r3
 80107bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107c0:	d103      	bne.n	80107ca <xQueueGenericSend+0x182>
 80107c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c4:	2200      	movs	r2, #0
 80107c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80107ca:	f002 faab 	bl	8012d24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80107ce:	1d3a      	adds	r2, r7, #4
 80107d0:	f107 0314 	add.w	r3, r7, #20
 80107d4:	4611      	mov	r1, r2
 80107d6:	4618      	mov	r0, r3
 80107d8:	f001 fa7a 	bl	8011cd0 <xTaskCheckForTimeOut>
 80107dc:	4603      	mov	r3, r0
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d124      	bne.n	801082c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80107e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107e4:	f000 fcf5 	bl	80111d2 <prvIsQueueFull>
 80107e8:	4603      	mov	r3, r0
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d018      	beq.n	8010820 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80107ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107f0:	3310      	adds	r3, #16
 80107f2:	687a      	ldr	r2, [r7, #4]
 80107f4:	4611      	mov	r1, r2
 80107f6:	4618      	mov	r0, r3
 80107f8:	f001 f9a0 	bl	8011b3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80107fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107fe:	f000 fc80 	bl	8011102 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010802:	f000 ffd5 	bl	80117b0 <xTaskResumeAll>
 8010806:	4603      	mov	r3, r0
 8010808:	2b00      	cmp	r3, #0
 801080a:	f47f af7c 	bne.w	8010706 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801080e:	4b0c      	ldr	r3, [pc, #48]	; (8010840 <xQueueGenericSend+0x1f8>)
 8010810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010814:	601a      	str	r2, [r3, #0]
 8010816:	f3bf 8f4f 	dsb	sy
 801081a:	f3bf 8f6f 	isb	sy
 801081e:	e772      	b.n	8010706 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010822:	f000 fc6e 	bl	8011102 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010826:	f000 ffc3 	bl	80117b0 <xTaskResumeAll>
 801082a:	e76c      	b.n	8010706 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801082c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801082e:	f000 fc68 	bl	8011102 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010832:	f000 ffbd 	bl	80117b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010836:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010838:	4618      	mov	r0, r3
 801083a:	3738      	adds	r7, #56	; 0x38
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}
 8010840:	e000ed04 	.word	0xe000ed04

08010844 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b090      	sub	sp, #64	; 0x40
 8010848:	af00      	add	r7, sp, #0
 801084a:	60f8      	str	r0, [r7, #12]
 801084c:	60b9      	str	r1, [r7, #8]
 801084e:	607a      	str	r2, [r7, #4]
 8010850:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8010856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010858:	2b00      	cmp	r3, #0
 801085a:	d10a      	bne.n	8010872 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801085c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010860:	f383 8811 	msr	BASEPRI, r3
 8010864:	f3bf 8f6f 	isb	sy
 8010868:	f3bf 8f4f 	dsb	sy
 801086c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801086e:	bf00      	nop
 8010870:	e7fe      	b.n	8010870 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010872:	68bb      	ldr	r3, [r7, #8]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d103      	bne.n	8010880 <xQueueGenericSendFromISR+0x3c>
 8010878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801087c:	2b00      	cmp	r3, #0
 801087e:	d101      	bne.n	8010884 <xQueueGenericSendFromISR+0x40>
 8010880:	2301      	movs	r3, #1
 8010882:	e000      	b.n	8010886 <xQueueGenericSendFromISR+0x42>
 8010884:	2300      	movs	r3, #0
 8010886:	2b00      	cmp	r3, #0
 8010888:	d10a      	bne.n	80108a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801088a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801088e:	f383 8811 	msr	BASEPRI, r3
 8010892:	f3bf 8f6f 	isb	sy
 8010896:	f3bf 8f4f 	dsb	sy
 801089a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801089c:	bf00      	nop
 801089e:	e7fe      	b.n	801089e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80108a0:	683b      	ldr	r3, [r7, #0]
 80108a2:	2b02      	cmp	r3, #2
 80108a4:	d103      	bne.n	80108ae <xQueueGenericSendFromISR+0x6a>
 80108a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108aa:	2b01      	cmp	r3, #1
 80108ac:	d101      	bne.n	80108b2 <xQueueGenericSendFromISR+0x6e>
 80108ae:	2301      	movs	r3, #1
 80108b0:	e000      	b.n	80108b4 <xQueueGenericSendFromISR+0x70>
 80108b2:	2300      	movs	r3, #0
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d10a      	bne.n	80108ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80108b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108bc:	f383 8811 	msr	BASEPRI, r3
 80108c0:	f3bf 8f6f 	isb	sy
 80108c4:	f3bf 8f4f 	dsb	sy
 80108c8:	623b      	str	r3, [r7, #32]
}
 80108ca:	bf00      	nop
 80108cc:	e7fe      	b.n	80108cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80108ce:	f002 fadb 	bl	8012e88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80108d2:	f3ef 8211 	mrs	r2, BASEPRI
 80108d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108da:	f383 8811 	msr	BASEPRI, r3
 80108de:	f3bf 8f6f 	isb	sy
 80108e2:	f3bf 8f4f 	dsb	sy
 80108e6:	61fa      	str	r2, [r7, #28]
 80108e8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80108ea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80108ec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80108ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80108f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108f6:	429a      	cmp	r2, r3
 80108f8:	d302      	bcc.n	8010900 <xQueueGenericSendFromISR+0xbc>
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	2b02      	cmp	r3, #2
 80108fe:	d12f      	bne.n	8010960 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010902:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801090a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801090c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801090e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010910:	683a      	ldr	r2, [r7, #0]
 8010912:	68b9      	ldr	r1, [r7, #8]
 8010914:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010916:	f000 fb64 	bl	8010fe2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801091a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801091e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010922:	d112      	bne.n	801094a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010928:	2b00      	cmp	r3, #0
 801092a:	d016      	beq.n	801095a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801092c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801092e:	3324      	adds	r3, #36	; 0x24
 8010930:	4618      	mov	r0, r3
 8010932:	f001 f953 	bl	8011bdc <xTaskRemoveFromEventList>
 8010936:	4603      	mov	r3, r0
 8010938:	2b00      	cmp	r3, #0
 801093a:	d00e      	beq.n	801095a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d00b      	beq.n	801095a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	2201      	movs	r2, #1
 8010946:	601a      	str	r2, [r3, #0]
 8010948:	e007      	b.n	801095a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801094a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801094e:	3301      	adds	r3, #1
 8010950:	b2db      	uxtb	r3, r3
 8010952:	b25a      	sxtb	r2, r3
 8010954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801095a:	2301      	movs	r3, #1
 801095c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801095e:	e001      	b.n	8010964 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010960:	2300      	movs	r3, #0
 8010962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010966:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010968:	697b      	ldr	r3, [r7, #20]
 801096a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801096e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010972:	4618      	mov	r0, r3
 8010974:	3740      	adds	r7, #64	; 0x40
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}

0801097a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801097a:	b580      	push	{r7, lr}
 801097c:	b08e      	sub	sp, #56	; 0x38
 801097e:	af00      	add	r7, sp, #0
 8010980:	6078      	str	r0, [r7, #4]
 8010982:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801098a:	2b00      	cmp	r3, #0
 801098c:	d10a      	bne.n	80109a4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801098e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010992:	f383 8811 	msr	BASEPRI, r3
 8010996:	f3bf 8f6f 	isb	sy
 801099a:	f3bf 8f4f 	dsb	sy
 801099e:	623b      	str	r3, [r7, #32]
}
 80109a0:	bf00      	nop
 80109a2:	e7fe      	b.n	80109a2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80109a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d00a      	beq.n	80109c2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80109ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109b0:	f383 8811 	msr	BASEPRI, r3
 80109b4:	f3bf 8f6f 	isb	sy
 80109b8:	f3bf 8f4f 	dsb	sy
 80109bc:	61fb      	str	r3, [r7, #28]
}
 80109be:	bf00      	nop
 80109c0:	e7fe      	b.n	80109c0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80109c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d103      	bne.n	80109d2 <xQueueGiveFromISR+0x58>
 80109ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109cc:	689b      	ldr	r3, [r3, #8]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d101      	bne.n	80109d6 <xQueueGiveFromISR+0x5c>
 80109d2:	2301      	movs	r3, #1
 80109d4:	e000      	b.n	80109d8 <xQueueGiveFromISR+0x5e>
 80109d6:	2300      	movs	r3, #0
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d10a      	bne.n	80109f2 <xQueueGiveFromISR+0x78>
	__asm volatile
 80109dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109e0:	f383 8811 	msr	BASEPRI, r3
 80109e4:	f3bf 8f6f 	isb	sy
 80109e8:	f3bf 8f4f 	dsb	sy
 80109ec:	61bb      	str	r3, [r7, #24]
}
 80109ee:	bf00      	nop
 80109f0:	e7fe      	b.n	80109f0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80109f2:	f002 fa49 	bl	8012e88 <vPortValidateInterruptPriority>
	__asm volatile
 80109f6:	f3ef 8211 	mrs	r2, BASEPRI
 80109fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109fe:	f383 8811 	msr	BASEPRI, r3
 8010a02:	f3bf 8f6f 	isb	sy
 8010a06:	f3bf 8f4f 	dsb	sy
 8010a0a:	617a      	str	r2, [r7, #20]
 8010a0c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010a0e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010a10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a1e:	429a      	cmp	r2, r3
 8010a20:	d22b      	bcs.n	8010a7a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a2e:	1c5a      	adds	r2, r3, #1
 8010a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a32:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010a34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a3c:	d112      	bne.n	8010a64 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d016      	beq.n	8010a74 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a48:	3324      	adds	r3, #36	; 0x24
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f001 f8c6 	bl	8011bdc <xTaskRemoveFromEventList>
 8010a50:	4603      	mov	r3, r0
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d00e      	beq.n	8010a74 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d00b      	beq.n	8010a74 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010a5c:	683b      	ldr	r3, [r7, #0]
 8010a5e:	2201      	movs	r2, #1
 8010a60:	601a      	str	r2, [r3, #0]
 8010a62:	e007      	b.n	8010a74 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a68:	3301      	adds	r3, #1
 8010a6a:	b2db      	uxtb	r3, r3
 8010a6c:	b25a      	sxtb	r2, r3
 8010a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010a74:	2301      	movs	r3, #1
 8010a76:	637b      	str	r3, [r7, #52]	; 0x34
 8010a78:	e001      	b.n	8010a7e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8010a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a80:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	f383 8811 	msr	BASEPRI, r3
}
 8010a88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3738      	adds	r7, #56	; 0x38
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}

08010a94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b08c      	sub	sp, #48	; 0x30
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	60f8      	str	r0, [r7, #12]
 8010a9c:	60b9      	str	r1, [r7, #8]
 8010a9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d10a      	bne.n	8010ac4 <xQueueReceive+0x30>
	__asm volatile
 8010aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab2:	f383 8811 	msr	BASEPRI, r3
 8010ab6:	f3bf 8f6f 	isb	sy
 8010aba:	f3bf 8f4f 	dsb	sy
 8010abe:	623b      	str	r3, [r7, #32]
}
 8010ac0:	bf00      	nop
 8010ac2:	e7fe      	b.n	8010ac2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d103      	bne.n	8010ad2 <xQueueReceive+0x3e>
 8010aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d101      	bne.n	8010ad6 <xQueueReceive+0x42>
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	e000      	b.n	8010ad8 <xQueueReceive+0x44>
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d10a      	bne.n	8010af2 <xQueueReceive+0x5e>
	__asm volatile
 8010adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae0:	f383 8811 	msr	BASEPRI, r3
 8010ae4:	f3bf 8f6f 	isb	sy
 8010ae8:	f3bf 8f4f 	dsb	sy
 8010aec:	61fb      	str	r3, [r7, #28]
}
 8010aee:	bf00      	nop
 8010af0:	e7fe      	b.n	8010af0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010af2:	f001 fa89 	bl	8012008 <xTaskGetSchedulerState>
 8010af6:	4603      	mov	r3, r0
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d102      	bne.n	8010b02 <xQueueReceive+0x6e>
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d101      	bne.n	8010b06 <xQueueReceive+0x72>
 8010b02:	2301      	movs	r3, #1
 8010b04:	e000      	b.n	8010b08 <xQueueReceive+0x74>
 8010b06:	2300      	movs	r3, #0
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d10a      	bne.n	8010b22 <xQueueReceive+0x8e>
	__asm volatile
 8010b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b10:	f383 8811 	msr	BASEPRI, r3
 8010b14:	f3bf 8f6f 	isb	sy
 8010b18:	f3bf 8f4f 	dsb	sy
 8010b1c:	61bb      	str	r3, [r7, #24]
}
 8010b1e:	bf00      	nop
 8010b20:	e7fe      	b.n	8010b20 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010b22:	f002 f8cf 	bl	8012cc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d01f      	beq.n	8010b72 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010b32:	68b9      	ldr	r1, [r7, #8]
 8010b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b36:	f000 fabe 	bl	80110b6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b3c:	1e5a      	subs	r2, r3, #1
 8010b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b44:	691b      	ldr	r3, [r3, #16]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d00f      	beq.n	8010b6a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b4c:	3310      	adds	r3, #16
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f001 f844 	bl	8011bdc <xTaskRemoveFromEventList>
 8010b54:	4603      	mov	r3, r0
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d007      	beq.n	8010b6a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010b5a:	4b3d      	ldr	r3, [pc, #244]	; (8010c50 <xQueueReceive+0x1bc>)
 8010b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b60:	601a      	str	r2, [r3, #0]
 8010b62:	f3bf 8f4f 	dsb	sy
 8010b66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010b6a:	f002 f8db 	bl	8012d24 <vPortExitCritical>
				return pdPASS;
 8010b6e:	2301      	movs	r3, #1
 8010b70:	e069      	b.n	8010c46 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d103      	bne.n	8010b80 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010b78:	f002 f8d4 	bl	8012d24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	e062      	b.n	8010c46 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d106      	bne.n	8010b94 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010b86:	f107 0310 	add.w	r3, r7, #16
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f001 f88a 	bl	8011ca4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010b90:	2301      	movs	r3, #1
 8010b92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010b94:	f002 f8c6 	bl	8012d24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010b98:	f000 fdfc 	bl	8011794 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010b9c:	f002 f892 	bl	8012cc4 <vPortEnterCritical>
 8010ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010ba6:	b25b      	sxtb	r3, r3
 8010ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bac:	d103      	bne.n	8010bb6 <xQueueReceive+0x122>
 8010bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010bbc:	b25b      	sxtb	r3, r3
 8010bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bc2:	d103      	bne.n	8010bcc <xQueueReceive+0x138>
 8010bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010bcc:	f002 f8aa 	bl	8012d24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010bd0:	1d3a      	adds	r2, r7, #4
 8010bd2:	f107 0310 	add.w	r3, r7, #16
 8010bd6:	4611      	mov	r1, r2
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f001 f879 	bl	8011cd0 <xTaskCheckForTimeOut>
 8010bde:	4603      	mov	r3, r0
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d123      	bne.n	8010c2c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010be4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010be6:	f000 fade 	bl	80111a6 <prvIsQueueEmpty>
 8010bea:	4603      	mov	r3, r0
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d017      	beq.n	8010c20 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bf2:	3324      	adds	r3, #36	; 0x24
 8010bf4:	687a      	ldr	r2, [r7, #4]
 8010bf6:	4611      	mov	r1, r2
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f000 ff9f 	bl	8011b3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010bfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c00:	f000 fa7f 	bl	8011102 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010c04:	f000 fdd4 	bl	80117b0 <xTaskResumeAll>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d189      	bne.n	8010b22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010c0e:	4b10      	ldr	r3, [pc, #64]	; (8010c50 <xQueueReceive+0x1bc>)
 8010c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c14:	601a      	str	r2, [r3, #0]
 8010c16:	f3bf 8f4f 	dsb	sy
 8010c1a:	f3bf 8f6f 	isb	sy
 8010c1e:	e780      	b.n	8010b22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010c20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c22:	f000 fa6e 	bl	8011102 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010c26:	f000 fdc3 	bl	80117b0 <xTaskResumeAll>
 8010c2a:	e77a      	b.n	8010b22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c2e:	f000 fa68 	bl	8011102 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010c32:	f000 fdbd 	bl	80117b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c38:	f000 fab5 	bl	80111a6 <prvIsQueueEmpty>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	f43f af6f 	beq.w	8010b22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010c44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	3730      	adds	r7, #48	; 0x30
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
 8010c4e:	bf00      	nop
 8010c50:	e000ed04 	.word	0xe000ed04

08010c54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b08e      	sub	sp, #56	; 0x38
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
 8010c5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010c66:	2300      	movs	r3, #0
 8010c68:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d10a      	bne.n	8010c86 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c74:	f383 8811 	msr	BASEPRI, r3
 8010c78:	f3bf 8f6f 	isb	sy
 8010c7c:	f3bf 8f4f 	dsb	sy
 8010c80:	623b      	str	r3, [r7, #32]
}
 8010c82:	bf00      	nop
 8010c84:	e7fe      	b.n	8010c84 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d00a      	beq.n	8010ca4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8010c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c92:	f383 8811 	msr	BASEPRI, r3
 8010c96:	f3bf 8f6f 	isb	sy
 8010c9a:	f3bf 8f4f 	dsb	sy
 8010c9e:	61fb      	str	r3, [r7, #28]
}
 8010ca0:	bf00      	nop
 8010ca2:	e7fe      	b.n	8010ca2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010ca4:	f001 f9b0 	bl	8012008 <xTaskGetSchedulerState>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d102      	bne.n	8010cb4 <xQueueSemaphoreTake+0x60>
 8010cae:	683b      	ldr	r3, [r7, #0]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d101      	bne.n	8010cb8 <xQueueSemaphoreTake+0x64>
 8010cb4:	2301      	movs	r3, #1
 8010cb6:	e000      	b.n	8010cba <xQueueSemaphoreTake+0x66>
 8010cb8:	2300      	movs	r3, #0
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d10a      	bne.n	8010cd4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8010cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc2:	f383 8811 	msr	BASEPRI, r3
 8010cc6:	f3bf 8f6f 	isb	sy
 8010cca:	f3bf 8f4f 	dsb	sy
 8010cce:	61bb      	str	r3, [r7, #24]
}
 8010cd0:	bf00      	nop
 8010cd2:	e7fe      	b.n	8010cd2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010cd4:	f001 fff6 	bl	8012cc4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cdc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d024      	beq.n	8010d2e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce6:	1e5a      	subs	r2, r3, #1
 8010ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d104      	bne.n	8010cfe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010cf4:	f001 fafe 	bl	80122f4 <pvTaskIncrementMutexHeldCount>
 8010cf8:	4602      	mov	r2, r0
 8010cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cfc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d00:	691b      	ldr	r3, [r3, #16]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d00f      	beq.n	8010d26 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d08:	3310      	adds	r3, #16
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f000 ff66 	bl	8011bdc <xTaskRemoveFromEventList>
 8010d10:	4603      	mov	r3, r0
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d007      	beq.n	8010d26 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010d16:	4b54      	ldr	r3, [pc, #336]	; (8010e68 <xQueueSemaphoreTake+0x214>)
 8010d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d1c:	601a      	str	r2, [r3, #0]
 8010d1e:	f3bf 8f4f 	dsb	sy
 8010d22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010d26:	f001 fffd 	bl	8012d24 <vPortExitCritical>
				return pdPASS;
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	e097      	b.n	8010e5e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d111      	bne.n	8010d58 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d00a      	beq.n	8010d50 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d3e:	f383 8811 	msr	BASEPRI, r3
 8010d42:	f3bf 8f6f 	isb	sy
 8010d46:	f3bf 8f4f 	dsb	sy
 8010d4a:	617b      	str	r3, [r7, #20]
}
 8010d4c:	bf00      	nop
 8010d4e:	e7fe      	b.n	8010d4e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010d50:	f001 ffe8 	bl	8012d24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010d54:	2300      	movs	r3, #0
 8010d56:	e082      	b.n	8010e5e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d106      	bne.n	8010d6c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010d5e:	f107 030c 	add.w	r3, r7, #12
 8010d62:	4618      	mov	r0, r3
 8010d64:	f000 ff9e 	bl	8011ca4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010d68:	2301      	movs	r3, #1
 8010d6a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010d6c:	f001 ffda 	bl	8012d24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010d70:	f000 fd10 	bl	8011794 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010d74:	f001 ffa6 	bl	8012cc4 <vPortEnterCritical>
 8010d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010d7e:	b25b      	sxtb	r3, r3
 8010d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d84:	d103      	bne.n	8010d8e <xQueueSemaphoreTake+0x13a>
 8010d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d88:	2200      	movs	r2, #0
 8010d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d94:	b25b      	sxtb	r3, r3
 8010d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d9a:	d103      	bne.n	8010da4 <xQueueSemaphoreTake+0x150>
 8010d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d9e:	2200      	movs	r2, #0
 8010da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010da4:	f001 ffbe 	bl	8012d24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010da8:	463a      	mov	r2, r7
 8010daa:	f107 030c 	add.w	r3, r7, #12
 8010dae:	4611      	mov	r1, r2
 8010db0:	4618      	mov	r0, r3
 8010db2:	f000 ff8d 	bl	8011cd0 <xTaskCheckForTimeOut>
 8010db6:	4603      	mov	r3, r0
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d132      	bne.n	8010e22 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010dbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010dbe:	f000 f9f2 	bl	80111a6 <prvIsQueueEmpty>
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d026      	beq.n	8010e16 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d109      	bne.n	8010de4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8010dd0:	f001 ff78 	bl	8012cc4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dd6:	689b      	ldr	r3, [r3, #8]
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f001 f933 	bl	8012044 <xTaskPriorityInherit>
 8010dde:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010de0:	f001 ffa0 	bl	8012d24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010de6:	3324      	adds	r3, #36	; 0x24
 8010de8:	683a      	ldr	r2, [r7, #0]
 8010dea:	4611      	mov	r1, r2
 8010dec:	4618      	mov	r0, r3
 8010dee:	f000 fea5 	bl	8011b3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010df2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010df4:	f000 f985 	bl	8011102 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010df8:	f000 fcda 	bl	80117b0 <xTaskResumeAll>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	f47f af68 	bne.w	8010cd4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010e04:	4b18      	ldr	r3, [pc, #96]	; (8010e68 <xQueueSemaphoreTake+0x214>)
 8010e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e0a:	601a      	str	r2, [r3, #0]
 8010e0c:	f3bf 8f4f 	dsb	sy
 8010e10:	f3bf 8f6f 	isb	sy
 8010e14:	e75e      	b.n	8010cd4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010e16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e18:	f000 f973 	bl	8011102 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010e1c:	f000 fcc8 	bl	80117b0 <xTaskResumeAll>
 8010e20:	e758      	b.n	8010cd4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010e22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e24:	f000 f96d 	bl	8011102 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010e28:	f000 fcc2 	bl	80117b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e2e:	f000 f9ba 	bl	80111a6 <prvIsQueueEmpty>
 8010e32:	4603      	mov	r3, r0
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	f43f af4d 	beq.w	8010cd4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d00d      	beq.n	8010e5c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8010e40:	f001 ff40 	bl	8012cc4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010e44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e46:	f000 f8b4 	bl	8010fb2 <prvGetDisinheritPriorityAfterTimeout>
 8010e4a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e4e:	689b      	ldr	r3, [r3, #8]
 8010e50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010e52:	4618      	mov	r0, r3
 8010e54:	f001 f9cc 	bl	80121f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010e58:	f001 ff64 	bl	8012d24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010e5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010e5e:	4618      	mov	r0, r3
 8010e60:	3738      	adds	r7, #56	; 0x38
 8010e62:	46bd      	mov	sp, r7
 8010e64:	bd80      	pop	{r7, pc}
 8010e66:	bf00      	nop
 8010e68:	e000ed04 	.word	0xe000ed04

08010e6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b08e      	sub	sp, #56	; 0x38
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	60f8      	str	r0, [r7, #12]
 8010e74:	60b9      	str	r1, [r7, #8]
 8010e76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d10a      	bne.n	8010e98 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e86:	f383 8811 	msr	BASEPRI, r3
 8010e8a:	f3bf 8f6f 	isb	sy
 8010e8e:	f3bf 8f4f 	dsb	sy
 8010e92:	623b      	str	r3, [r7, #32]
}
 8010e94:	bf00      	nop
 8010e96:	e7fe      	b.n	8010e96 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d103      	bne.n	8010ea6 <xQueueReceiveFromISR+0x3a>
 8010e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d101      	bne.n	8010eaa <xQueueReceiveFromISR+0x3e>
 8010ea6:	2301      	movs	r3, #1
 8010ea8:	e000      	b.n	8010eac <xQueueReceiveFromISR+0x40>
 8010eaa:	2300      	movs	r3, #0
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d10a      	bne.n	8010ec6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eb4:	f383 8811 	msr	BASEPRI, r3
 8010eb8:	f3bf 8f6f 	isb	sy
 8010ebc:	f3bf 8f4f 	dsb	sy
 8010ec0:	61fb      	str	r3, [r7, #28]
}
 8010ec2:	bf00      	nop
 8010ec4:	e7fe      	b.n	8010ec4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010ec6:	f001 ffdf 	bl	8012e88 <vPortValidateInterruptPriority>
	__asm volatile
 8010eca:	f3ef 8211 	mrs	r2, BASEPRI
 8010ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ed2:	f383 8811 	msr	BASEPRI, r3
 8010ed6:	f3bf 8f6f 	isb	sy
 8010eda:	f3bf 8f4f 	dsb	sy
 8010ede:	61ba      	str	r2, [r7, #24]
 8010ee0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010ee2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010eea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d02f      	beq.n	8010f52 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ef4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010efc:	68b9      	ldr	r1, [r7, #8]
 8010efe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f00:	f000 f8d9 	bl	80110b6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f06:	1e5a      	subs	r2, r3, #1
 8010f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f0a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010f0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f14:	d112      	bne.n	8010f3c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f18:	691b      	ldr	r3, [r3, #16]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d016      	beq.n	8010f4c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f20:	3310      	adds	r3, #16
 8010f22:	4618      	mov	r0, r3
 8010f24:	f000 fe5a 	bl	8011bdc <xTaskRemoveFromEventList>
 8010f28:	4603      	mov	r3, r0
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d00e      	beq.n	8010f4c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d00b      	beq.n	8010f4c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2201      	movs	r2, #1
 8010f38:	601a      	str	r2, [r3, #0]
 8010f3a:	e007      	b.n	8010f4c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f40:	3301      	adds	r3, #1
 8010f42:	b2db      	uxtb	r3, r3
 8010f44:	b25a      	sxtb	r2, r3
 8010f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010f4c:	2301      	movs	r3, #1
 8010f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8010f50:	e001      	b.n	8010f56 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010f52:	2300      	movs	r3, #0
 8010f54:	637b      	str	r3, [r7, #52]	; 0x34
 8010f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f58:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010f5a:	693b      	ldr	r3, [r7, #16]
 8010f5c:	f383 8811 	msr	BASEPRI, r3
}
 8010f60:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010f64:	4618      	mov	r0, r3
 8010f66:	3738      	adds	r7, #56	; 0x38
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}

08010f6c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b084      	sub	sp, #16
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d10a      	bne.n	8010f94 <vQueueDelete+0x28>
	__asm volatile
 8010f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f82:	f383 8811 	msr	BASEPRI, r3
 8010f86:	f3bf 8f6f 	isb	sy
 8010f8a:	f3bf 8f4f 	dsb	sy
 8010f8e:	60bb      	str	r3, [r7, #8]
}
 8010f90:	bf00      	nop
 8010f92:	e7fe      	b.n	8010f92 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010f94:	68f8      	ldr	r0, [r7, #12]
 8010f96:	f000 f95f 	bl	8011258 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d102      	bne.n	8010faa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010fa4:	68f8      	ldr	r0, [r7, #12]
 8010fa6:	f002 f87b 	bl	80130a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010faa:	bf00      	nop
 8010fac:	3710      	adds	r7, #16
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd80      	pop	{r7, pc}

08010fb2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010fb2:	b480      	push	{r7}
 8010fb4:	b085      	sub	sp, #20
 8010fb6:	af00      	add	r7, sp, #0
 8010fb8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d006      	beq.n	8010fd0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8010fcc:	60fb      	str	r3, [r7, #12]
 8010fce:	e001      	b.n	8010fd4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
	}
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	3714      	adds	r7, #20
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe0:	4770      	bx	lr

08010fe2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010fe2:	b580      	push	{r7, lr}
 8010fe4:	b086      	sub	sp, #24
 8010fe6:	af00      	add	r7, sp, #0
 8010fe8:	60f8      	str	r0, [r7, #12]
 8010fea:	60b9      	str	r1, [r7, #8]
 8010fec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ff6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d10d      	bne.n	801101c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d14d      	bne.n	80110a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	689b      	ldr	r3, [r3, #8]
 801100c:	4618      	mov	r0, r3
 801100e:	f001 f881 	bl	8012114 <xTaskPriorityDisinherit>
 8011012:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	2200      	movs	r2, #0
 8011018:	609a      	str	r2, [r3, #8]
 801101a:	e043      	b.n	80110a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d119      	bne.n	8011056 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	6858      	ldr	r0, [r3, #4]
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801102a:	461a      	mov	r2, r3
 801102c:	68b9      	ldr	r1, [r7, #8]
 801102e:	f002 ff65 	bl	8013efc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	685a      	ldr	r2, [r3, #4]
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801103a:	441a      	add	r2, r3
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	685a      	ldr	r2, [r3, #4]
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	689b      	ldr	r3, [r3, #8]
 8011048:	429a      	cmp	r2, r3
 801104a:	d32b      	bcc.n	80110a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	681a      	ldr	r2, [r3, #0]
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	605a      	str	r2, [r3, #4]
 8011054:	e026      	b.n	80110a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	68d8      	ldr	r0, [r3, #12]
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801105e:	461a      	mov	r2, r3
 8011060:	68b9      	ldr	r1, [r7, #8]
 8011062:	f002 ff4b 	bl	8013efc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	68da      	ldr	r2, [r3, #12]
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801106e:	425b      	negs	r3, r3
 8011070:	441a      	add	r2, r3
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	68da      	ldr	r2, [r3, #12]
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	429a      	cmp	r2, r3
 8011080:	d207      	bcs.n	8011092 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	689a      	ldr	r2, [r3, #8]
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801108a:	425b      	negs	r3, r3
 801108c:	441a      	add	r2, r3
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	2b02      	cmp	r3, #2
 8011096:	d105      	bne.n	80110a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011098:	693b      	ldr	r3, [r7, #16]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d002      	beq.n	80110a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801109e:	693b      	ldr	r3, [r7, #16]
 80110a0:	3b01      	subs	r3, #1
 80110a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80110a4:	693b      	ldr	r3, [r7, #16]
 80110a6:	1c5a      	adds	r2, r3, #1
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80110ac:	697b      	ldr	r3, [r7, #20]
}
 80110ae:	4618      	mov	r0, r3
 80110b0:	3718      	adds	r7, #24
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bd80      	pop	{r7, pc}

080110b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80110b6:	b580      	push	{r7, lr}
 80110b8:	b082      	sub	sp, #8
 80110ba:	af00      	add	r7, sp, #0
 80110bc:	6078      	str	r0, [r7, #4]
 80110be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d018      	beq.n	80110fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	68da      	ldr	r2, [r3, #12]
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110d0:	441a      	add	r2, r3
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	68da      	ldr	r2, [r3, #12]
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	689b      	ldr	r3, [r3, #8]
 80110de:	429a      	cmp	r2, r3
 80110e0:	d303      	bcc.n	80110ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681a      	ldr	r2, [r3, #0]
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	68d9      	ldr	r1, [r3, #12]
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110f2:	461a      	mov	r2, r3
 80110f4:	6838      	ldr	r0, [r7, #0]
 80110f6:	f002 ff01 	bl	8013efc <memcpy>
	}
}
 80110fa:	bf00      	nop
 80110fc:	3708      	adds	r7, #8
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}

08011102 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011102:	b580      	push	{r7, lr}
 8011104:	b084      	sub	sp, #16
 8011106:	af00      	add	r7, sp, #0
 8011108:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801110a:	f001 fddb 	bl	8012cc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011114:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011116:	e011      	b.n	801113c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801111c:	2b00      	cmp	r3, #0
 801111e:	d012      	beq.n	8011146 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	3324      	adds	r3, #36	; 0x24
 8011124:	4618      	mov	r0, r3
 8011126:	f000 fd59 	bl	8011bdc <xTaskRemoveFromEventList>
 801112a:	4603      	mov	r3, r0
 801112c:	2b00      	cmp	r3, #0
 801112e:	d001      	beq.n	8011134 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011130:	f000 fe40 	bl	8011db4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011134:	7bfb      	ldrb	r3, [r7, #15]
 8011136:	3b01      	subs	r3, #1
 8011138:	b2db      	uxtb	r3, r3
 801113a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801113c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011140:	2b00      	cmp	r3, #0
 8011142:	dce9      	bgt.n	8011118 <prvUnlockQueue+0x16>
 8011144:	e000      	b.n	8011148 <prvUnlockQueue+0x46>
					break;
 8011146:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	22ff      	movs	r2, #255	; 0xff
 801114c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011150:	f001 fde8 	bl	8012d24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011154:	f001 fdb6 	bl	8012cc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801115e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011160:	e011      	b.n	8011186 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	691b      	ldr	r3, [r3, #16]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d012      	beq.n	8011190 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	3310      	adds	r3, #16
 801116e:	4618      	mov	r0, r3
 8011170:	f000 fd34 	bl	8011bdc <xTaskRemoveFromEventList>
 8011174:	4603      	mov	r3, r0
 8011176:	2b00      	cmp	r3, #0
 8011178:	d001      	beq.n	801117e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801117a:	f000 fe1b 	bl	8011db4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801117e:	7bbb      	ldrb	r3, [r7, #14]
 8011180:	3b01      	subs	r3, #1
 8011182:	b2db      	uxtb	r3, r3
 8011184:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011186:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801118a:	2b00      	cmp	r3, #0
 801118c:	dce9      	bgt.n	8011162 <prvUnlockQueue+0x60>
 801118e:	e000      	b.n	8011192 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011190:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	22ff      	movs	r2, #255	; 0xff
 8011196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801119a:	f001 fdc3 	bl	8012d24 <vPortExitCritical>
}
 801119e:	bf00      	nop
 80111a0:	3710      	adds	r7, #16
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}

080111a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80111a6:	b580      	push	{r7, lr}
 80111a8:	b084      	sub	sp, #16
 80111aa:	af00      	add	r7, sp, #0
 80111ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80111ae:	f001 fd89 	bl	8012cc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d102      	bne.n	80111c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80111ba:	2301      	movs	r3, #1
 80111bc:	60fb      	str	r3, [r7, #12]
 80111be:	e001      	b.n	80111c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80111c0:	2300      	movs	r3, #0
 80111c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80111c4:	f001 fdae 	bl	8012d24 <vPortExitCritical>

	return xReturn;
 80111c8:	68fb      	ldr	r3, [r7, #12]
}
 80111ca:	4618      	mov	r0, r3
 80111cc:	3710      	adds	r7, #16
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}

080111d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80111d2:	b580      	push	{r7, lr}
 80111d4:	b084      	sub	sp, #16
 80111d6:	af00      	add	r7, sp, #0
 80111d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80111da:	f001 fd73 	bl	8012cc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111e6:	429a      	cmp	r2, r3
 80111e8:	d102      	bne.n	80111f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80111ea:	2301      	movs	r3, #1
 80111ec:	60fb      	str	r3, [r7, #12]
 80111ee:	e001      	b.n	80111f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80111f0:	2300      	movs	r3, #0
 80111f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80111f4:	f001 fd96 	bl	8012d24 <vPortExitCritical>

	return xReturn;
 80111f8:	68fb      	ldr	r3, [r7, #12]
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3710      	adds	r7, #16
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}
	...

08011204 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011204:	b480      	push	{r7}
 8011206:	b085      	sub	sp, #20
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
 801120c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801120e:	2300      	movs	r3, #0
 8011210:	60fb      	str	r3, [r7, #12]
 8011212:	e014      	b.n	801123e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011214:	4a0f      	ldr	r2, [pc, #60]	; (8011254 <vQueueAddToRegistry+0x50>)
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d10b      	bne.n	8011238 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011220:	490c      	ldr	r1, [pc, #48]	; (8011254 <vQueueAddToRegistry+0x50>)
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	683a      	ldr	r2, [r7, #0]
 8011226:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801122a:	4a0a      	ldr	r2, [pc, #40]	; (8011254 <vQueueAddToRegistry+0x50>)
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	00db      	lsls	r3, r3, #3
 8011230:	4413      	add	r3, r2
 8011232:	687a      	ldr	r2, [r7, #4]
 8011234:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011236:	e006      	b.n	8011246 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	3301      	adds	r3, #1
 801123c:	60fb      	str	r3, [r7, #12]
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	2b07      	cmp	r3, #7
 8011242:	d9e7      	bls.n	8011214 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011244:	bf00      	nop
 8011246:	bf00      	nop
 8011248:	3714      	adds	r7, #20
 801124a:	46bd      	mov	sp, r7
 801124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011250:	4770      	bx	lr
 8011252:	bf00      	nop
 8011254:	20005bf0 	.word	0x20005bf0

08011258 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011258:	b480      	push	{r7}
 801125a:	b085      	sub	sp, #20
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011260:	2300      	movs	r3, #0
 8011262:	60fb      	str	r3, [r7, #12]
 8011264:	e016      	b.n	8011294 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011266:	4a10      	ldr	r2, [pc, #64]	; (80112a8 <vQueueUnregisterQueue+0x50>)
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	00db      	lsls	r3, r3, #3
 801126c:	4413      	add	r3, r2
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	687a      	ldr	r2, [r7, #4]
 8011272:	429a      	cmp	r2, r3
 8011274:	d10b      	bne.n	801128e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011276:	4a0c      	ldr	r2, [pc, #48]	; (80112a8 <vQueueUnregisterQueue+0x50>)
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	2100      	movs	r1, #0
 801127c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011280:	4a09      	ldr	r2, [pc, #36]	; (80112a8 <vQueueUnregisterQueue+0x50>)
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	00db      	lsls	r3, r3, #3
 8011286:	4413      	add	r3, r2
 8011288:	2200      	movs	r2, #0
 801128a:	605a      	str	r2, [r3, #4]
				break;
 801128c:	e006      	b.n	801129c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	3301      	adds	r3, #1
 8011292:	60fb      	str	r3, [r7, #12]
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	2b07      	cmp	r3, #7
 8011298:	d9e5      	bls.n	8011266 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801129a:	bf00      	nop
 801129c:	bf00      	nop
 801129e:	3714      	adds	r7, #20
 80112a0:	46bd      	mov	sp, r7
 80112a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a6:	4770      	bx	lr
 80112a8:	20005bf0 	.word	0x20005bf0

080112ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b086      	sub	sp, #24
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	60f8      	str	r0, [r7, #12]
 80112b4:	60b9      	str	r1, [r7, #8]
 80112b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80112bc:	f001 fd02 	bl	8012cc4 <vPortEnterCritical>
 80112c0:	697b      	ldr	r3, [r7, #20]
 80112c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80112c6:	b25b      	sxtb	r3, r3
 80112c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112cc:	d103      	bne.n	80112d6 <vQueueWaitForMessageRestricted+0x2a>
 80112ce:	697b      	ldr	r3, [r7, #20]
 80112d0:	2200      	movs	r2, #0
 80112d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80112dc:	b25b      	sxtb	r3, r3
 80112de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112e2:	d103      	bne.n	80112ec <vQueueWaitForMessageRestricted+0x40>
 80112e4:	697b      	ldr	r3, [r7, #20]
 80112e6:	2200      	movs	r2, #0
 80112e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80112ec:	f001 fd1a 	bl	8012d24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80112f0:	697b      	ldr	r3, [r7, #20]
 80112f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d106      	bne.n	8011306 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80112f8:	697b      	ldr	r3, [r7, #20]
 80112fa:	3324      	adds	r3, #36	; 0x24
 80112fc:	687a      	ldr	r2, [r7, #4]
 80112fe:	68b9      	ldr	r1, [r7, #8]
 8011300:	4618      	mov	r0, r3
 8011302:	f000 fc3f 	bl	8011b84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011306:	6978      	ldr	r0, [r7, #20]
 8011308:	f7ff fefb 	bl	8011102 <prvUnlockQueue>
	}
 801130c:	bf00      	nop
 801130e:	3718      	adds	r7, #24
 8011310:	46bd      	mov	sp, r7
 8011312:	bd80      	pop	{r7, pc}

08011314 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011314:	b580      	push	{r7, lr}
 8011316:	b08e      	sub	sp, #56	; 0x38
 8011318:	af04      	add	r7, sp, #16
 801131a:	60f8      	str	r0, [r7, #12]
 801131c:	60b9      	str	r1, [r7, #8]
 801131e:	607a      	str	r2, [r7, #4]
 8011320:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011324:	2b00      	cmp	r3, #0
 8011326:	d10a      	bne.n	801133e <xTaskCreateStatic+0x2a>
	__asm volatile
 8011328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801132c:	f383 8811 	msr	BASEPRI, r3
 8011330:	f3bf 8f6f 	isb	sy
 8011334:	f3bf 8f4f 	dsb	sy
 8011338:	623b      	str	r3, [r7, #32]
}
 801133a:	bf00      	nop
 801133c:	e7fe      	b.n	801133c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801133e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011340:	2b00      	cmp	r3, #0
 8011342:	d10a      	bne.n	801135a <xTaskCreateStatic+0x46>
	__asm volatile
 8011344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011348:	f383 8811 	msr	BASEPRI, r3
 801134c:	f3bf 8f6f 	isb	sy
 8011350:	f3bf 8f4f 	dsb	sy
 8011354:	61fb      	str	r3, [r7, #28]
}
 8011356:	bf00      	nop
 8011358:	e7fe      	b.n	8011358 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801135a:	235c      	movs	r3, #92	; 0x5c
 801135c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801135e:	693b      	ldr	r3, [r7, #16]
 8011360:	2b5c      	cmp	r3, #92	; 0x5c
 8011362:	d00a      	beq.n	801137a <xTaskCreateStatic+0x66>
	__asm volatile
 8011364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011368:	f383 8811 	msr	BASEPRI, r3
 801136c:	f3bf 8f6f 	isb	sy
 8011370:	f3bf 8f4f 	dsb	sy
 8011374:	61bb      	str	r3, [r7, #24]
}
 8011376:	bf00      	nop
 8011378:	e7fe      	b.n	8011378 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801137a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801137c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801137e:	2b00      	cmp	r3, #0
 8011380:	d01e      	beq.n	80113c0 <xTaskCreateStatic+0xac>
 8011382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011384:	2b00      	cmp	r3, #0
 8011386:	d01b      	beq.n	80113c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801138a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801138e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011390:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011394:	2202      	movs	r2, #2
 8011396:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801139a:	2300      	movs	r3, #0
 801139c:	9303      	str	r3, [sp, #12]
 801139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a0:	9302      	str	r3, [sp, #8]
 80113a2:	f107 0314 	add.w	r3, r7, #20
 80113a6:	9301      	str	r3, [sp, #4]
 80113a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113aa:	9300      	str	r3, [sp, #0]
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	687a      	ldr	r2, [r7, #4]
 80113b0:	68b9      	ldr	r1, [r7, #8]
 80113b2:	68f8      	ldr	r0, [r7, #12]
 80113b4:	f000 f850 	bl	8011458 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80113b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80113ba:	f000 f8e1 	bl	8011580 <prvAddNewTaskToReadyList>
 80113be:	e001      	b.n	80113c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80113c0:	2300      	movs	r3, #0
 80113c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80113c4:	697b      	ldr	r3, [r7, #20]
	}
 80113c6:	4618      	mov	r0, r3
 80113c8:	3728      	adds	r7, #40	; 0x28
 80113ca:	46bd      	mov	sp, r7
 80113cc:	bd80      	pop	{r7, pc}

080113ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80113ce:	b580      	push	{r7, lr}
 80113d0:	b08c      	sub	sp, #48	; 0x30
 80113d2:	af04      	add	r7, sp, #16
 80113d4:	60f8      	str	r0, [r7, #12]
 80113d6:	60b9      	str	r1, [r7, #8]
 80113d8:	603b      	str	r3, [r7, #0]
 80113da:	4613      	mov	r3, r2
 80113dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80113de:	88fb      	ldrh	r3, [r7, #6]
 80113e0:	009b      	lsls	r3, r3, #2
 80113e2:	4618      	mov	r0, r3
 80113e4:	f001 fd90 	bl	8012f08 <pvPortMalloc>
 80113e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d00e      	beq.n	801140e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80113f0:	205c      	movs	r0, #92	; 0x5c
 80113f2:	f001 fd89 	bl	8012f08 <pvPortMalloc>
 80113f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80113f8:	69fb      	ldr	r3, [r7, #28]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d003      	beq.n	8011406 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80113fe:	69fb      	ldr	r3, [r7, #28]
 8011400:	697a      	ldr	r2, [r7, #20]
 8011402:	631a      	str	r2, [r3, #48]	; 0x30
 8011404:	e005      	b.n	8011412 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011406:	6978      	ldr	r0, [r7, #20]
 8011408:	f001 fe4a 	bl	80130a0 <vPortFree>
 801140c:	e001      	b.n	8011412 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801140e:	2300      	movs	r3, #0
 8011410:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011412:	69fb      	ldr	r3, [r7, #28]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d017      	beq.n	8011448 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011418:	69fb      	ldr	r3, [r7, #28]
 801141a:	2200      	movs	r2, #0
 801141c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011420:	88fa      	ldrh	r2, [r7, #6]
 8011422:	2300      	movs	r3, #0
 8011424:	9303      	str	r3, [sp, #12]
 8011426:	69fb      	ldr	r3, [r7, #28]
 8011428:	9302      	str	r3, [sp, #8]
 801142a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801142c:	9301      	str	r3, [sp, #4]
 801142e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011430:	9300      	str	r3, [sp, #0]
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	68b9      	ldr	r1, [r7, #8]
 8011436:	68f8      	ldr	r0, [r7, #12]
 8011438:	f000 f80e 	bl	8011458 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801143c:	69f8      	ldr	r0, [r7, #28]
 801143e:	f000 f89f 	bl	8011580 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011442:	2301      	movs	r3, #1
 8011444:	61bb      	str	r3, [r7, #24]
 8011446:	e002      	b.n	801144e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011448:	f04f 33ff 	mov.w	r3, #4294967295
 801144c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801144e:	69bb      	ldr	r3, [r7, #24]
	}
 8011450:	4618      	mov	r0, r3
 8011452:	3720      	adds	r7, #32
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}

08011458 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b088      	sub	sp, #32
 801145c:	af00      	add	r7, sp, #0
 801145e:	60f8      	str	r0, [r7, #12]
 8011460:	60b9      	str	r1, [r7, #8]
 8011462:	607a      	str	r2, [r7, #4]
 8011464:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011468:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	009b      	lsls	r3, r3, #2
 801146e:	461a      	mov	r2, r3
 8011470:	21a5      	movs	r1, #165	; 0xa5
 8011472:	f002 fd51 	bl	8013f18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011480:	3b01      	subs	r3, #1
 8011482:	009b      	lsls	r3, r3, #2
 8011484:	4413      	add	r3, r2
 8011486:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011488:	69bb      	ldr	r3, [r7, #24]
 801148a:	f023 0307 	bic.w	r3, r3, #7
 801148e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011490:	69bb      	ldr	r3, [r7, #24]
 8011492:	f003 0307 	and.w	r3, r3, #7
 8011496:	2b00      	cmp	r3, #0
 8011498:	d00a      	beq.n	80114b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 801149a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801149e:	f383 8811 	msr	BASEPRI, r3
 80114a2:	f3bf 8f6f 	isb	sy
 80114a6:	f3bf 8f4f 	dsb	sy
 80114aa:	617b      	str	r3, [r7, #20]
}
 80114ac:	bf00      	nop
 80114ae:	e7fe      	b.n	80114ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d01f      	beq.n	80114f6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80114b6:	2300      	movs	r3, #0
 80114b8:	61fb      	str	r3, [r7, #28]
 80114ba:	e012      	b.n	80114e2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80114bc:	68ba      	ldr	r2, [r7, #8]
 80114be:	69fb      	ldr	r3, [r7, #28]
 80114c0:	4413      	add	r3, r2
 80114c2:	7819      	ldrb	r1, [r3, #0]
 80114c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114c6:	69fb      	ldr	r3, [r7, #28]
 80114c8:	4413      	add	r3, r2
 80114ca:	3334      	adds	r3, #52	; 0x34
 80114cc:	460a      	mov	r2, r1
 80114ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80114d0:	68ba      	ldr	r2, [r7, #8]
 80114d2:	69fb      	ldr	r3, [r7, #28]
 80114d4:	4413      	add	r3, r2
 80114d6:	781b      	ldrb	r3, [r3, #0]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d006      	beq.n	80114ea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80114dc:	69fb      	ldr	r3, [r7, #28]
 80114de:	3301      	adds	r3, #1
 80114e0:	61fb      	str	r3, [r7, #28]
 80114e2:	69fb      	ldr	r3, [r7, #28]
 80114e4:	2b0f      	cmp	r3, #15
 80114e6:	d9e9      	bls.n	80114bc <prvInitialiseNewTask+0x64>
 80114e8:	e000      	b.n	80114ec <prvInitialiseNewTask+0x94>
			{
				break;
 80114ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80114ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114ee:	2200      	movs	r2, #0
 80114f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80114f4:	e003      	b.n	80114fe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80114f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114f8:	2200      	movs	r2, #0
 80114fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80114fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011500:	2b37      	cmp	r3, #55	; 0x37
 8011502:	d901      	bls.n	8011508 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011504:	2337      	movs	r3, #55	; 0x37
 8011506:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801150a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801150c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801150e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011512:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011516:	2200      	movs	r2, #0
 8011518:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801151a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801151c:	3304      	adds	r3, #4
 801151e:	4618      	mov	r0, r3
 8011520:	f7fe fda0 	bl	8010064 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011526:	3318      	adds	r3, #24
 8011528:	4618      	mov	r0, r3
 801152a:	f7fe fd9b 	bl	8010064 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801152e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011532:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011536:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801153a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801153c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801153e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011542:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011546:	2200      	movs	r2, #0
 8011548:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801154a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801154c:	2200      	movs	r2, #0
 801154e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8011552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011554:	2200      	movs	r2, #0
 8011556:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801155a:	683a      	ldr	r2, [r7, #0]
 801155c:	68f9      	ldr	r1, [r7, #12]
 801155e:	69b8      	ldr	r0, [r7, #24]
 8011560:	f001 fa84 	bl	8012a6c <pxPortInitialiseStack>
 8011564:	4602      	mov	r2, r0
 8011566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011568:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801156a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801156c:	2b00      	cmp	r3, #0
 801156e:	d002      	beq.n	8011576 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011576:	bf00      	nop
 8011578:	3720      	adds	r7, #32
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}
	...

08011580 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b082      	sub	sp, #8
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011588:	f001 fb9c 	bl	8012cc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801158c:	4b2d      	ldr	r3, [pc, #180]	; (8011644 <prvAddNewTaskToReadyList+0xc4>)
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	3301      	adds	r3, #1
 8011592:	4a2c      	ldr	r2, [pc, #176]	; (8011644 <prvAddNewTaskToReadyList+0xc4>)
 8011594:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011596:	4b2c      	ldr	r3, [pc, #176]	; (8011648 <prvAddNewTaskToReadyList+0xc8>)
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d109      	bne.n	80115b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801159e:	4a2a      	ldr	r2, [pc, #168]	; (8011648 <prvAddNewTaskToReadyList+0xc8>)
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80115a4:	4b27      	ldr	r3, [pc, #156]	; (8011644 <prvAddNewTaskToReadyList+0xc4>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	2b01      	cmp	r3, #1
 80115aa:	d110      	bne.n	80115ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80115ac:	f000 fc26 	bl	8011dfc <prvInitialiseTaskLists>
 80115b0:	e00d      	b.n	80115ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80115b2:	4b26      	ldr	r3, [pc, #152]	; (801164c <prvAddNewTaskToReadyList+0xcc>)
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d109      	bne.n	80115ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80115ba:	4b23      	ldr	r3, [pc, #140]	; (8011648 <prvAddNewTaskToReadyList+0xc8>)
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115c4:	429a      	cmp	r2, r3
 80115c6:	d802      	bhi.n	80115ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80115c8:	4a1f      	ldr	r2, [pc, #124]	; (8011648 <prvAddNewTaskToReadyList+0xc8>)
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80115ce:	4b20      	ldr	r3, [pc, #128]	; (8011650 <prvAddNewTaskToReadyList+0xd0>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	3301      	adds	r3, #1
 80115d4:	4a1e      	ldr	r2, [pc, #120]	; (8011650 <prvAddNewTaskToReadyList+0xd0>)
 80115d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80115d8:	4b1d      	ldr	r3, [pc, #116]	; (8011650 <prvAddNewTaskToReadyList+0xd0>)
 80115da:	681a      	ldr	r2, [r3, #0]
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115e4:	4b1b      	ldr	r3, [pc, #108]	; (8011654 <prvAddNewTaskToReadyList+0xd4>)
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	429a      	cmp	r2, r3
 80115ea:	d903      	bls.n	80115f4 <prvAddNewTaskToReadyList+0x74>
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115f0:	4a18      	ldr	r2, [pc, #96]	; (8011654 <prvAddNewTaskToReadyList+0xd4>)
 80115f2:	6013      	str	r3, [r2, #0]
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115f8:	4613      	mov	r3, r2
 80115fa:	009b      	lsls	r3, r3, #2
 80115fc:	4413      	add	r3, r2
 80115fe:	009b      	lsls	r3, r3, #2
 8011600:	4a15      	ldr	r2, [pc, #84]	; (8011658 <prvAddNewTaskToReadyList+0xd8>)
 8011602:	441a      	add	r2, r3
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	3304      	adds	r3, #4
 8011608:	4619      	mov	r1, r3
 801160a:	4610      	mov	r0, r2
 801160c:	f7fe fd37 	bl	801007e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011610:	f001 fb88 	bl	8012d24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011614:	4b0d      	ldr	r3, [pc, #52]	; (801164c <prvAddNewTaskToReadyList+0xcc>)
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d00e      	beq.n	801163a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801161c:	4b0a      	ldr	r3, [pc, #40]	; (8011648 <prvAddNewTaskToReadyList+0xc8>)
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011626:	429a      	cmp	r2, r3
 8011628:	d207      	bcs.n	801163a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801162a:	4b0c      	ldr	r3, [pc, #48]	; (801165c <prvAddNewTaskToReadyList+0xdc>)
 801162c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011630:	601a      	str	r2, [r3, #0]
 8011632:	f3bf 8f4f 	dsb	sy
 8011636:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801163a:	bf00      	nop
 801163c:	3708      	adds	r7, #8
 801163e:	46bd      	mov	sp, r7
 8011640:	bd80      	pop	{r7, pc}
 8011642:	bf00      	nop
 8011644:	20000f1c 	.word	0x20000f1c
 8011648:	20000a48 	.word	0x20000a48
 801164c:	20000f28 	.word	0x20000f28
 8011650:	20000f38 	.word	0x20000f38
 8011654:	20000f24 	.word	0x20000f24
 8011658:	20000a4c 	.word	0x20000a4c
 801165c:	e000ed04 	.word	0xe000ed04

08011660 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011660:	b580      	push	{r7, lr}
 8011662:	b084      	sub	sp, #16
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011668:	2300      	movs	r3, #0
 801166a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d017      	beq.n	80116a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011672:	4b13      	ldr	r3, [pc, #76]	; (80116c0 <vTaskDelay+0x60>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d00a      	beq.n	8011690 <vTaskDelay+0x30>
	__asm volatile
 801167a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801167e:	f383 8811 	msr	BASEPRI, r3
 8011682:	f3bf 8f6f 	isb	sy
 8011686:	f3bf 8f4f 	dsb	sy
 801168a:	60bb      	str	r3, [r7, #8]
}
 801168c:	bf00      	nop
 801168e:	e7fe      	b.n	801168e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011690:	f000 f880 	bl	8011794 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011694:	2100      	movs	r1, #0
 8011696:	6878      	ldr	r0, [r7, #4]
 8011698:	f000 fe40 	bl	801231c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801169c:	f000 f888 	bl	80117b0 <xTaskResumeAll>
 80116a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d107      	bne.n	80116b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80116a8:	4b06      	ldr	r3, [pc, #24]	; (80116c4 <vTaskDelay+0x64>)
 80116aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116ae:	601a      	str	r2, [r3, #0]
 80116b0:	f3bf 8f4f 	dsb	sy
 80116b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80116b8:	bf00      	nop
 80116ba:	3710      	adds	r7, #16
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd80      	pop	{r7, pc}
 80116c0:	20000f44 	.word	0x20000f44
 80116c4:	e000ed04 	.word	0xe000ed04

080116c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b08a      	sub	sp, #40	; 0x28
 80116cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80116ce:	2300      	movs	r3, #0
 80116d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80116d2:	2300      	movs	r3, #0
 80116d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80116d6:	463a      	mov	r2, r7
 80116d8:	1d39      	adds	r1, r7, #4
 80116da:	f107 0308 	add.w	r3, r7, #8
 80116de:	4618      	mov	r0, r3
 80116e0:	f7fe fc6c 	bl	800ffbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80116e4:	6839      	ldr	r1, [r7, #0]
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	68ba      	ldr	r2, [r7, #8]
 80116ea:	9202      	str	r2, [sp, #8]
 80116ec:	9301      	str	r3, [sp, #4]
 80116ee:	2300      	movs	r3, #0
 80116f0:	9300      	str	r3, [sp, #0]
 80116f2:	2300      	movs	r3, #0
 80116f4:	460a      	mov	r2, r1
 80116f6:	4921      	ldr	r1, [pc, #132]	; (801177c <vTaskStartScheduler+0xb4>)
 80116f8:	4821      	ldr	r0, [pc, #132]	; (8011780 <vTaskStartScheduler+0xb8>)
 80116fa:	f7ff fe0b 	bl	8011314 <xTaskCreateStatic>
 80116fe:	4603      	mov	r3, r0
 8011700:	4a20      	ldr	r2, [pc, #128]	; (8011784 <vTaskStartScheduler+0xbc>)
 8011702:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011704:	4b1f      	ldr	r3, [pc, #124]	; (8011784 <vTaskStartScheduler+0xbc>)
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d002      	beq.n	8011712 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801170c:	2301      	movs	r3, #1
 801170e:	617b      	str	r3, [r7, #20]
 8011710:	e001      	b.n	8011716 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011712:	2300      	movs	r3, #0
 8011714:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011716:	697b      	ldr	r3, [r7, #20]
 8011718:	2b01      	cmp	r3, #1
 801171a:	d102      	bne.n	8011722 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801171c:	f000 fe58 	bl	80123d0 <xTimerCreateTimerTask>
 8011720:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011722:	697b      	ldr	r3, [r7, #20]
 8011724:	2b01      	cmp	r3, #1
 8011726:	d116      	bne.n	8011756 <vTaskStartScheduler+0x8e>
	__asm volatile
 8011728:	f04f 0350 	mov.w	r3, #80	; 0x50
 801172c:	f383 8811 	msr	BASEPRI, r3
 8011730:	f3bf 8f6f 	isb	sy
 8011734:	f3bf 8f4f 	dsb	sy
 8011738:	613b      	str	r3, [r7, #16]
}
 801173a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801173c:	4b12      	ldr	r3, [pc, #72]	; (8011788 <vTaskStartScheduler+0xc0>)
 801173e:	f04f 32ff 	mov.w	r2, #4294967295
 8011742:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011744:	4b11      	ldr	r3, [pc, #68]	; (801178c <vTaskStartScheduler+0xc4>)
 8011746:	2201      	movs	r2, #1
 8011748:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801174a:	4b11      	ldr	r3, [pc, #68]	; (8011790 <vTaskStartScheduler+0xc8>)
 801174c:	2200      	movs	r2, #0
 801174e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011750:	f001 fa16 	bl	8012b80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011754:	e00e      	b.n	8011774 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011756:	697b      	ldr	r3, [r7, #20]
 8011758:	f1b3 3fff 	cmp.w	r3, #4294967295
 801175c:	d10a      	bne.n	8011774 <vTaskStartScheduler+0xac>
	__asm volatile
 801175e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011762:	f383 8811 	msr	BASEPRI, r3
 8011766:	f3bf 8f6f 	isb	sy
 801176a:	f3bf 8f4f 	dsb	sy
 801176e:	60fb      	str	r3, [r7, #12]
}
 8011770:	bf00      	nop
 8011772:	e7fe      	b.n	8011772 <vTaskStartScheduler+0xaa>
}
 8011774:	bf00      	nop
 8011776:	3718      	adds	r7, #24
 8011778:	46bd      	mov	sp, r7
 801177a:	bd80      	pop	{r7, pc}
 801177c:	08014888 	.word	0x08014888
 8011780:	08011dcd 	.word	0x08011dcd
 8011784:	20000f40 	.word	0x20000f40
 8011788:	20000f3c 	.word	0x20000f3c
 801178c:	20000f28 	.word	0x20000f28
 8011790:	20000f20 	.word	0x20000f20

08011794 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011794:	b480      	push	{r7}
 8011796:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011798:	4b04      	ldr	r3, [pc, #16]	; (80117ac <vTaskSuspendAll+0x18>)
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	3301      	adds	r3, #1
 801179e:	4a03      	ldr	r2, [pc, #12]	; (80117ac <vTaskSuspendAll+0x18>)
 80117a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80117a2:	bf00      	nop
 80117a4:	46bd      	mov	sp, r7
 80117a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117aa:	4770      	bx	lr
 80117ac:	20000f44 	.word	0x20000f44

080117b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b084      	sub	sp, #16
 80117b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80117b6:	2300      	movs	r3, #0
 80117b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80117ba:	2300      	movs	r3, #0
 80117bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80117be:	4b42      	ldr	r3, [pc, #264]	; (80118c8 <xTaskResumeAll+0x118>)
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d10a      	bne.n	80117dc <xTaskResumeAll+0x2c>
	__asm volatile
 80117c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117ca:	f383 8811 	msr	BASEPRI, r3
 80117ce:	f3bf 8f6f 	isb	sy
 80117d2:	f3bf 8f4f 	dsb	sy
 80117d6:	603b      	str	r3, [r7, #0]
}
 80117d8:	bf00      	nop
 80117da:	e7fe      	b.n	80117da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80117dc:	f001 fa72 	bl	8012cc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80117e0:	4b39      	ldr	r3, [pc, #228]	; (80118c8 <xTaskResumeAll+0x118>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	3b01      	subs	r3, #1
 80117e6:	4a38      	ldr	r2, [pc, #224]	; (80118c8 <xTaskResumeAll+0x118>)
 80117e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80117ea:	4b37      	ldr	r3, [pc, #220]	; (80118c8 <xTaskResumeAll+0x118>)
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d162      	bne.n	80118b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80117f2:	4b36      	ldr	r3, [pc, #216]	; (80118cc <xTaskResumeAll+0x11c>)
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d05e      	beq.n	80118b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80117fa:	e02f      	b.n	801185c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80117fc:	4b34      	ldr	r3, [pc, #208]	; (80118d0 <xTaskResumeAll+0x120>)
 80117fe:	68db      	ldr	r3, [r3, #12]
 8011800:	68db      	ldr	r3, [r3, #12]
 8011802:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	3318      	adds	r3, #24
 8011808:	4618      	mov	r0, r3
 801180a:	f7fe fc95 	bl	8010138 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	3304      	adds	r3, #4
 8011812:	4618      	mov	r0, r3
 8011814:	f7fe fc90 	bl	8010138 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801181c:	4b2d      	ldr	r3, [pc, #180]	; (80118d4 <xTaskResumeAll+0x124>)
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	429a      	cmp	r2, r3
 8011822:	d903      	bls.n	801182c <xTaskResumeAll+0x7c>
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011828:	4a2a      	ldr	r2, [pc, #168]	; (80118d4 <xTaskResumeAll+0x124>)
 801182a:	6013      	str	r3, [r2, #0]
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011830:	4613      	mov	r3, r2
 8011832:	009b      	lsls	r3, r3, #2
 8011834:	4413      	add	r3, r2
 8011836:	009b      	lsls	r3, r3, #2
 8011838:	4a27      	ldr	r2, [pc, #156]	; (80118d8 <xTaskResumeAll+0x128>)
 801183a:	441a      	add	r2, r3
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	3304      	adds	r3, #4
 8011840:	4619      	mov	r1, r3
 8011842:	4610      	mov	r0, r2
 8011844:	f7fe fc1b 	bl	801007e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801184c:	4b23      	ldr	r3, [pc, #140]	; (80118dc <xTaskResumeAll+0x12c>)
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011852:	429a      	cmp	r2, r3
 8011854:	d302      	bcc.n	801185c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011856:	4b22      	ldr	r3, [pc, #136]	; (80118e0 <xTaskResumeAll+0x130>)
 8011858:	2201      	movs	r2, #1
 801185a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801185c:	4b1c      	ldr	r3, [pc, #112]	; (80118d0 <xTaskResumeAll+0x120>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d1cb      	bne.n	80117fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d001      	beq.n	801186e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801186a:	f000 fb9d 	bl	8011fa8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801186e:	4b1d      	ldr	r3, [pc, #116]	; (80118e4 <xTaskResumeAll+0x134>)
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d010      	beq.n	801189c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801187a:	f000 f847 	bl	801190c <xTaskIncrementTick>
 801187e:	4603      	mov	r3, r0
 8011880:	2b00      	cmp	r3, #0
 8011882:	d002      	beq.n	801188a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011884:	4b16      	ldr	r3, [pc, #88]	; (80118e0 <xTaskResumeAll+0x130>)
 8011886:	2201      	movs	r2, #1
 8011888:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	3b01      	subs	r3, #1
 801188e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d1f1      	bne.n	801187a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011896:	4b13      	ldr	r3, [pc, #76]	; (80118e4 <xTaskResumeAll+0x134>)
 8011898:	2200      	movs	r2, #0
 801189a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801189c:	4b10      	ldr	r3, [pc, #64]	; (80118e0 <xTaskResumeAll+0x130>)
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d009      	beq.n	80118b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80118a4:	2301      	movs	r3, #1
 80118a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80118a8:	4b0f      	ldr	r3, [pc, #60]	; (80118e8 <xTaskResumeAll+0x138>)
 80118aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118ae:	601a      	str	r2, [r3, #0]
 80118b0:	f3bf 8f4f 	dsb	sy
 80118b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80118b8:	f001 fa34 	bl	8012d24 <vPortExitCritical>

	return xAlreadyYielded;
 80118bc:	68bb      	ldr	r3, [r7, #8]
}
 80118be:	4618      	mov	r0, r3
 80118c0:	3710      	adds	r7, #16
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bd80      	pop	{r7, pc}
 80118c6:	bf00      	nop
 80118c8:	20000f44 	.word	0x20000f44
 80118cc:	20000f1c 	.word	0x20000f1c
 80118d0:	20000edc 	.word	0x20000edc
 80118d4:	20000f24 	.word	0x20000f24
 80118d8:	20000a4c 	.word	0x20000a4c
 80118dc:	20000a48 	.word	0x20000a48
 80118e0:	20000f30 	.word	0x20000f30
 80118e4:	20000f2c 	.word	0x20000f2c
 80118e8:	e000ed04 	.word	0xe000ed04

080118ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80118ec:	b480      	push	{r7}
 80118ee:	b083      	sub	sp, #12
 80118f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80118f2:	4b05      	ldr	r3, [pc, #20]	; (8011908 <xTaskGetTickCount+0x1c>)
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80118f8:	687b      	ldr	r3, [r7, #4]
}
 80118fa:	4618      	mov	r0, r3
 80118fc:	370c      	adds	r7, #12
 80118fe:	46bd      	mov	sp, r7
 8011900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011904:	4770      	bx	lr
 8011906:	bf00      	nop
 8011908:	20000f20 	.word	0x20000f20

0801190c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b086      	sub	sp, #24
 8011910:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011912:	2300      	movs	r3, #0
 8011914:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011916:	4b4f      	ldr	r3, [pc, #316]	; (8011a54 <xTaskIncrementTick+0x148>)
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	2b00      	cmp	r3, #0
 801191c:	f040 808f 	bne.w	8011a3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011920:	4b4d      	ldr	r3, [pc, #308]	; (8011a58 <xTaskIncrementTick+0x14c>)
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	3301      	adds	r3, #1
 8011926:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011928:	4a4b      	ldr	r2, [pc, #300]	; (8011a58 <xTaskIncrementTick+0x14c>)
 801192a:	693b      	ldr	r3, [r7, #16]
 801192c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801192e:	693b      	ldr	r3, [r7, #16]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d120      	bne.n	8011976 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011934:	4b49      	ldr	r3, [pc, #292]	; (8011a5c <xTaskIncrementTick+0x150>)
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d00a      	beq.n	8011954 <xTaskIncrementTick+0x48>
	__asm volatile
 801193e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011942:	f383 8811 	msr	BASEPRI, r3
 8011946:	f3bf 8f6f 	isb	sy
 801194a:	f3bf 8f4f 	dsb	sy
 801194e:	603b      	str	r3, [r7, #0]
}
 8011950:	bf00      	nop
 8011952:	e7fe      	b.n	8011952 <xTaskIncrementTick+0x46>
 8011954:	4b41      	ldr	r3, [pc, #260]	; (8011a5c <xTaskIncrementTick+0x150>)
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	60fb      	str	r3, [r7, #12]
 801195a:	4b41      	ldr	r3, [pc, #260]	; (8011a60 <xTaskIncrementTick+0x154>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	4a3f      	ldr	r2, [pc, #252]	; (8011a5c <xTaskIncrementTick+0x150>)
 8011960:	6013      	str	r3, [r2, #0]
 8011962:	4a3f      	ldr	r2, [pc, #252]	; (8011a60 <xTaskIncrementTick+0x154>)
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	6013      	str	r3, [r2, #0]
 8011968:	4b3e      	ldr	r3, [pc, #248]	; (8011a64 <xTaskIncrementTick+0x158>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	3301      	adds	r3, #1
 801196e:	4a3d      	ldr	r2, [pc, #244]	; (8011a64 <xTaskIncrementTick+0x158>)
 8011970:	6013      	str	r3, [r2, #0]
 8011972:	f000 fb19 	bl	8011fa8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011976:	4b3c      	ldr	r3, [pc, #240]	; (8011a68 <xTaskIncrementTick+0x15c>)
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	693a      	ldr	r2, [r7, #16]
 801197c:	429a      	cmp	r2, r3
 801197e:	d349      	bcc.n	8011a14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011980:	4b36      	ldr	r3, [pc, #216]	; (8011a5c <xTaskIncrementTick+0x150>)
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d104      	bne.n	8011994 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801198a:	4b37      	ldr	r3, [pc, #220]	; (8011a68 <xTaskIncrementTick+0x15c>)
 801198c:	f04f 32ff 	mov.w	r2, #4294967295
 8011990:	601a      	str	r2, [r3, #0]
					break;
 8011992:	e03f      	b.n	8011a14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011994:	4b31      	ldr	r3, [pc, #196]	; (8011a5c <xTaskIncrementTick+0x150>)
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	68db      	ldr	r3, [r3, #12]
 801199a:	68db      	ldr	r3, [r3, #12]
 801199c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	685b      	ldr	r3, [r3, #4]
 80119a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80119a4:	693a      	ldr	r2, [r7, #16]
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	429a      	cmp	r2, r3
 80119aa:	d203      	bcs.n	80119b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80119ac:	4a2e      	ldr	r2, [pc, #184]	; (8011a68 <xTaskIncrementTick+0x15c>)
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80119b2:	e02f      	b.n	8011a14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80119b4:	68bb      	ldr	r3, [r7, #8]
 80119b6:	3304      	adds	r3, #4
 80119b8:	4618      	mov	r0, r3
 80119ba:	f7fe fbbd 	bl	8010138 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80119be:	68bb      	ldr	r3, [r7, #8]
 80119c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d004      	beq.n	80119d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80119c6:	68bb      	ldr	r3, [r7, #8]
 80119c8:	3318      	adds	r3, #24
 80119ca:	4618      	mov	r0, r3
 80119cc:	f7fe fbb4 	bl	8010138 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80119d0:	68bb      	ldr	r3, [r7, #8]
 80119d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119d4:	4b25      	ldr	r3, [pc, #148]	; (8011a6c <xTaskIncrementTick+0x160>)
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	429a      	cmp	r2, r3
 80119da:	d903      	bls.n	80119e4 <xTaskIncrementTick+0xd8>
 80119dc:	68bb      	ldr	r3, [r7, #8]
 80119de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119e0:	4a22      	ldr	r2, [pc, #136]	; (8011a6c <xTaskIncrementTick+0x160>)
 80119e2:	6013      	str	r3, [r2, #0]
 80119e4:	68bb      	ldr	r3, [r7, #8]
 80119e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119e8:	4613      	mov	r3, r2
 80119ea:	009b      	lsls	r3, r3, #2
 80119ec:	4413      	add	r3, r2
 80119ee:	009b      	lsls	r3, r3, #2
 80119f0:	4a1f      	ldr	r2, [pc, #124]	; (8011a70 <xTaskIncrementTick+0x164>)
 80119f2:	441a      	add	r2, r3
 80119f4:	68bb      	ldr	r3, [r7, #8]
 80119f6:	3304      	adds	r3, #4
 80119f8:	4619      	mov	r1, r3
 80119fa:	4610      	mov	r0, r2
 80119fc:	f7fe fb3f 	bl	801007e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011a00:	68bb      	ldr	r3, [r7, #8]
 8011a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a04:	4b1b      	ldr	r3, [pc, #108]	; (8011a74 <xTaskIncrementTick+0x168>)
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a0a:	429a      	cmp	r2, r3
 8011a0c:	d3b8      	bcc.n	8011980 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011a0e:	2301      	movs	r3, #1
 8011a10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a12:	e7b5      	b.n	8011980 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011a14:	4b17      	ldr	r3, [pc, #92]	; (8011a74 <xTaskIncrementTick+0x168>)
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a1a:	4915      	ldr	r1, [pc, #84]	; (8011a70 <xTaskIncrementTick+0x164>)
 8011a1c:	4613      	mov	r3, r2
 8011a1e:	009b      	lsls	r3, r3, #2
 8011a20:	4413      	add	r3, r2
 8011a22:	009b      	lsls	r3, r3, #2
 8011a24:	440b      	add	r3, r1
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	2b01      	cmp	r3, #1
 8011a2a:	d901      	bls.n	8011a30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011a2c:	2301      	movs	r3, #1
 8011a2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011a30:	4b11      	ldr	r3, [pc, #68]	; (8011a78 <xTaskIncrementTick+0x16c>)
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d007      	beq.n	8011a48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011a38:	2301      	movs	r3, #1
 8011a3a:	617b      	str	r3, [r7, #20]
 8011a3c:	e004      	b.n	8011a48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011a3e:	4b0f      	ldr	r3, [pc, #60]	; (8011a7c <xTaskIncrementTick+0x170>)
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	3301      	adds	r3, #1
 8011a44:	4a0d      	ldr	r2, [pc, #52]	; (8011a7c <xTaskIncrementTick+0x170>)
 8011a46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011a48:	697b      	ldr	r3, [r7, #20]
}
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	3718      	adds	r7, #24
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}
 8011a52:	bf00      	nop
 8011a54:	20000f44 	.word	0x20000f44
 8011a58:	20000f20 	.word	0x20000f20
 8011a5c:	20000ed4 	.word	0x20000ed4
 8011a60:	20000ed8 	.word	0x20000ed8
 8011a64:	20000f34 	.word	0x20000f34
 8011a68:	20000f3c 	.word	0x20000f3c
 8011a6c:	20000f24 	.word	0x20000f24
 8011a70:	20000a4c 	.word	0x20000a4c
 8011a74:	20000a48 	.word	0x20000a48
 8011a78:	20000f30 	.word	0x20000f30
 8011a7c:	20000f2c 	.word	0x20000f2c

08011a80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011a80:	b480      	push	{r7}
 8011a82:	b085      	sub	sp, #20
 8011a84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011a86:	4b28      	ldr	r3, [pc, #160]	; (8011b28 <vTaskSwitchContext+0xa8>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d003      	beq.n	8011a96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011a8e:	4b27      	ldr	r3, [pc, #156]	; (8011b2c <vTaskSwitchContext+0xac>)
 8011a90:	2201      	movs	r2, #1
 8011a92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011a94:	e041      	b.n	8011b1a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8011a96:	4b25      	ldr	r3, [pc, #148]	; (8011b2c <vTaskSwitchContext+0xac>)
 8011a98:	2200      	movs	r2, #0
 8011a9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a9c:	4b24      	ldr	r3, [pc, #144]	; (8011b30 <vTaskSwitchContext+0xb0>)
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	60fb      	str	r3, [r7, #12]
 8011aa2:	e010      	b.n	8011ac6 <vTaskSwitchContext+0x46>
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d10a      	bne.n	8011ac0 <vTaskSwitchContext+0x40>
	__asm volatile
 8011aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aae:	f383 8811 	msr	BASEPRI, r3
 8011ab2:	f3bf 8f6f 	isb	sy
 8011ab6:	f3bf 8f4f 	dsb	sy
 8011aba:	607b      	str	r3, [r7, #4]
}
 8011abc:	bf00      	nop
 8011abe:	e7fe      	b.n	8011abe <vTaskSwitchContext+0x3e>
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	3b01      	subs	r3, #1
 8011ac4:	60fb      	str	r3, [r7, #12]
 8011ac6:	491b      	ldr	r1, [pc, #108]	; (8011b34 <vTaskSwitchContext+0xb4>)
 8011ac8:	68fa      	ldr	r2, [r7, #12]
 8011aca:	4613      	mov	r3, r2
 8011acc:	009b      	lsls	r3, r3, #2
 8011ace:	4413      	add	r3, r2
 8011ad0:	009b      	lsls	r3, r3, #2
 8011ad2:	440b      	add	r3, r1
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d0e4      	beq.n	8011aa4 <vTaskSwitchContext+0x24>
 8011ada:	68fa      	ldr	r2, [r7, #12]
 8011adc:	4613      	mov	r3, r2
 8011ade:	009b      	lsls	r3, r3, #2
 8011ae0:	4413      	add	r3, r2
 8011ae2:	009b      	lsls	r3, r3, #2
 8011ae4:	4a13      	ldr	r2, [pc, #76]	; (8011b34 <vTaskSwitchContext+0xb4>)
 8011ae6:	4413      	add	r3, r2
 8011ae8:	60bb      	str	r3, [r7, #8]
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	685b      	ldr	r3, [r3, #4]
 8011aee:	685a      	ldr	r2, [r3, #4]
 8011af0:	68bb      	ldr	r3, [r7, #8]
 8011af2:	605a      	str	r2, [r3, #4]
 8011af4:	68bb      	ldr	r3, [r7, #8]
 8011af6:	685a      	ldr	r2, [r3, #4]
 8011af8:	68bb      	ldr	r3, [r7, #8]
 8011afa:	3308      	adds	r3, #8
 8011afc:	429a      	cmp	r2, r3
 8011afe:	d104      	bne.n	8011b0a <vTaskSwitchContext+0x8a>
 8011b00:	68bb      	ldr	r3, [r7, #8]
 8011b02:	685b      	ldr	r3, [r3, #4]
 8011b04:	685a      	ldr	r2, [r3, #4]
 8011b06:	68bb      	ldr	r3, [r7, #8]
 8011b08:	605a      	str	r2, [r3, #4]
 8011b0a:	68bb      	ldr	r3, [r7, #8]
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	68db      	ldr	r3, [r3, #12]
 8011b10:	4a09      	ldr	r2, [pc, #36]	; (8011b38 <vTaskSwitchContext+0xb8>)
 8011b12:	6013      	str	r3, [r2, #0]
 8011b14:	4a06      	ldr	r2, [pc, #24]	; (8011b30 <vTaskSwitchContext+0xb0>)
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	6013      	str	r3, [r2, #0]
}
 8011b1a:	bf00      	nop
 8011b1c:	3714      	adds	r7, #20
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr
 8011b26:	bf00      	nop
 8011b28:	20000f44 	.word	0x20000f44
 8011b2c:	20000f30 	.word	0x20000f30
 8011b30:	20000f24 	.word	0x20000f24
 8011b34:	20000a4c 	.word	0x20000a4c
 8011b38:	20000a48 	.word	0x20000a48

08011b3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b084      	sub	sp, #16
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
 8011b44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d10a      	bne.n	8011b62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b50:	f383 8811 	msr	BASEPRI, r3
 8011b54:	f3bf 8f6f 	isb	sy
 8011b58:	f3bf 8f4f 	dsb	sy
 8011b5c:	60fb      	str	r3, [r7, #12]
}
 8011b5e:	bf00      	nop
 8011b60:	e7fe      	b.n	8011b60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011b62:	4b07      	ldr	r3, [pc, #28]	; (8011b80 <vTaskPlaceOnEventList+0x44>)
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	3318      	adds	r3, #24
 8011b68:	4619      	mov	r1, r3
 8011b6a:	6878      	ldr	r0, [r7, #4]
 8011b6c:	f7fe faab 	bl	80100c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011b70:	2101      	movs	r1, #1
 8011b72:	6838      	ldr	r0, [r7, #0]
 8011b74:	f000 fbd2 	bl	801231c <prvAddCurrentTaskToDelayedList>
}
 8011b78:	bf00      	nop
 8011b7a:	3710      	adds	r7, #16
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd80      	pop	{r7, pc}
 8011b80:	20000a48 	.word	0x20000a48

08011b84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b086      	sub	sp, #24
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	60f8      	str	r0, [r7, #12]
 8011b8c:	60b9      	str	r1, [r7, #8]
 8011b8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d10a      	bne.n	8011bac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b9a:	f383 8811 	msr	BASEPRI, r3
 8011b9e:	f3bf 8f6f 	isb	sy
 8011ba2:	f3bf 8f4f 	dsb	sy
 8011ba6:	617b      	str	r3, [r7, #20]
}
 8011ba8:	bf00      	nop
 8011baa:	e7fe      	b.n	8011baa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011bac:	4b0a      	ldr	r3, [pc, #40]	; (8011bd8 <vTaskPlaceOnEventListRestricted+0x54>)
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	3318      	adds	r3, #24
 8011bb2:	4619      	mov	r1, r3
 8011bb4:	68f8      	ldr	r0, [r7, #12]
 8011bb6:	f7fe fa62 	bl	801007e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d002      	beq.n	8011bc6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8011bc4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011bc6:	6879      	ldr	r1, [r7, #4]
 8011bc8:	68b8      	ldr	r0, [r7, #8]
 8011bca:	f000 fba7 	bl	801231c <prvAddCurrentTaskToDelayedList>
	}
 8011bce:	bf00      	nop
 8011bd0:	3718      	adds	r7, #24
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	bd80      	pop	{r7, pc}
 8011bd6:	bf00      	nop
 8011bd8:	20000a48 	.word	0x20000a48

08011bdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b086      	sub	sp, #24
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	68db      	ldr	r3, [r3, #12]
 8011be8:	68db      	ldr	r3, [r3, #12]
 8011bea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011bec:	693b      	ldr	r3, [r7, #16]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d10a      	bne.n	8011c08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bf6:	f383 8811 	msr	BASEPRI, r3
 8011bfa:	f3bf 8f6f 	isb	sy
 8011bfe:	f3bf 8f4f 	dsb	sy
 8011c02:	60fb      	str	r3, [r7, #12]
}
 8011c04:	bf00      	nop
 8011c06:	e7fe      	b.n	8011c06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011c08:	693b      	ldr	r3, [r7, #16]
 8011c0a:	3318      	adds	r3, #24
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f7fe fa93 	bl	8010138 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011c12:	4b1e      	ldr	r3, [pc, #120]	; (8011c8c <xTaskRemoveFromEventList+0xb0>)
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d11d      	bne.n	8011c56 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011c1a:	693b      	ldr	r3, [r7, #16]
 8011c1c:	3304      	adds	r3, #4
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f7fe fa8a 	bl	8010138 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011c24:	693b      	ldr	r3, [r7, #16]
 8011c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c28:	4b19      	ldr	r3, [pc, #100]	; (8011c90 <xTaskRemoveFromEventList+0xb4>)
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	429a      	cmp	r2, r3
 8011c2e:	d903      	bls.n	8011c38 <xTaskRemoveFromEventList+0x5c>
 8011c30:	693b      	ldr	r3, [r7, #16]
 8011c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c34:	4a16      	ldr	r2, [pc, #88]	; (8011c90 <xTaskRemoveFromEventList+0xb4>)
 8011c36:	6013      	str	r3, [r2, #0]
 8011c38:	693b      	ldr	r3, [r7, #16]
 8011c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c3c:	4613      	mov	r3, r2
 8011c3e:	009b      	lsls	r3, r3, #2
 8011c40:	4413      	add	r3, r2
 8011c42:	009b      	lsls	r3, r3, #2
 8011c44:	4a13      	ldr	r2, [pc, #76]	; (8011c94 <xTaskRemoveFromEventList+0xb8>)
 8011c46:	441a      	add	r2, r3
 8011c48:	693b      	ldr	r3, [r7, #16]
 8011c4a:	3304      	adds	r3, #4
 8011c4c:	4619      	mov	r1, r3
 8011c4e:	4610      	mov	r0, r2
 8011c50:	f7fe fa15 	bl	801007e <vListInsertEnd>
 8011c54:	e005      	b.n	8011c62 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011c56:	693b      	ldr	r3, [r7, #16]
 8011c58:	3318      	adds	r3, #24
 8011c5a:	4619      	mov	r1, r3
 8011c5c:	480e      	ldr	r0, [pc, #56]	; (8011c98 <xTaskRemoveFromEventList+0xbc>)
 8011c5e:	f7fe fa0e 	bl	801007e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011c62:	693b      	ldr	r3, [r7, #16]
 8011c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c66:	4b0d      	ldr	r3, [pc, #52]	; (8011c9c <xTaskRemoveFromEventList+0xc0>)
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c6c:	429a      	cmp	r2, r3
 8011c6e:	d905      	bls.n	8011c7c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011c70:	2301      	movs	r3, #1
 8011c72:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011c74:	4b0a      	ldr	r3, [pc, #40]	; (8011ca0 <xTaskRemoveFromEventList+0xc4>)
 8011c76:	2201      	movs	r2, #1
 8011c78:	601a      	str	r2, [r3, #0]
 8011c7a:	e001      	b.n	8011c80 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011c80:	697b      	ldr	r3, [r7, #20]
}
 8011c82:	4618      	mov	r0, r3
 8011c84:	3718      	adds	r7, #24
 8011c86:	46bd      	mov	sp, r7
 8011c88:	bd80      	pop	{r7, pc}
 8011c8a:	bf00      	nop
 8011c8c:	20000f44 	.word	0x20000f44
 8011c90:	20000f24 	.word	0x20000f24
 8011c94:	20000a4c 	.word	0x20000a4c
 8011c98:	20000edc 	.word	0x20000edc
 8011c9c:	20000a48 	.word	0x20000a48
 8011ca0:	20000f30 	.word	0x20000f30

08011ca4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011ca4:	b480      	push	{r7}
 8011ca6:	b083      	sub	sp, #12
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011cac:	4b06      	ldr	r3, [pc, #24]	; (8011cc8 <vTaskInternalSetTimeOutState+0x24>)
 8011cae:	681a      	ldr	r2, [r3, #0]
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011cb4:	4b05      	ldr	r3, [pc, #20]	; (8011ccc <vTaskInternalSetTimeOutState+0x28>)
 8011cb6:	681a      	ldr	r2, [r3, #0]
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	605a      	str	r2, [r3, #4]
}
 8011cbc:	bf00      	nop
 8011cbe:	370c      	adds	r7, #12
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc6:	4770      	bx	lr
 8011cc8:	20000f34 	.word	0x20000f34
 8011ccc:	20000f20 	.word	0x20000f20

08011cd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b088      	sub	sp, #32
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
 8011cd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d10a      	bne.n	8011cf6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ce4:	f383 8811 	msr	BASEPRI, r3
 8011ce8:	f3bf 8f6f 	isb	sy
 8011cec:	f3bf 8f4f 	dsb	sy
 8011cf0:	613b      	str	r3, [r7, #16]
}
 8011cf2:	bf00      	nop
 8011cf4:	e7fe      	b.n	8011cf4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011cf6:	683b      	ldr	r3, [r7, #0]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d10a      	bne.n	8011d12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d00:	f383 8811 	msr	BASEPRI, r3
 8011d04:	f3bf 8f6f 	isb	sy
 8011d08:	f3bf 8f4f 	dsb	sy
 8011d0c:	60fb      	str	r3, [r7, #12]
}
 8011d0e:	bf00      	nop
 8011d10:	e7fe      	b.n	8011d10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011d12:	f000 ffd7 	bl	8012cc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011d16:	4b24      	ldr	r3, [pc, #144]	; (8011da8 <xTaskCheckForTimeOut+0xd8>)
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	685b      	ldr	r3, [r3, #4]
 8011d20:	69ba      	ldr	r2, [r7, #24]
 8011d22:	1ad3      	subs	r3, r2, r3
 8011d24:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8011d26:	4b21      	ldr	r3, [pc, #132]	; (8011dac <xTaskCheckForTimeOut+0xdc>)
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d007      	beq.n	8011d42 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8011d32:	4b1e      	ldr	r3, [pc, #120]	; (8011dac <xTaskCheckForTimeOut+0xdc>)
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	2200      	movs	r2, #0
 8011d38:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
				xReturn = pdTRUE;
 8011d3c:	2301      	movs	r3, #1
 8011d3e:	61fb      	str	r3, [r7, #28]
 8011d40:	e02b      	b.n	8011d9a <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d4a:	d102      	bne.n	8011d52 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	61fb      	str	r3, [r7, #28]
 8011d50:	e023      	b.n	8011d9a <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	681a      	ldr	r2, [r3, #0]
 8011d56:	4b16      	ldr	r3, [pc, #88]	; (8011db0 <xTaskCheckForTimeOut+0xe0>)
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	429a      	cmp	r2, r3
 8011d5c:	d007      	beq.n	8011d6e <xTaskCheckForTimeOut+0x9e>
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	685b      	ldr	r3, [r3, #4]
 8011d62:	69ba      	ldr	r2, [r7, #24]
 8011d64:	429a      	cmp	r2, r3
 8011d66:	d302      	bcc.n	8011d6e <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011d68:	2301      	movs	r3, #1
 8011d6a:	61fb      	str	r3, [r7, #28]
 8011d6c:	e015      	b.n	8011d9a <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011d6e:	683b      	ldr	r3, [r7, #0]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	697a      	ldr	r2, [r7, #20]
 8011d74:	429a      	cmp	r2, r3
 8011d76:	d20b      	bcs.n	8011d90 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	681a      	ldr	r2, [r3, #0]
 8011d7c:	697b      	ldr	r3, [r7, #20]
 8011d7e:	1ad2      	subs	r2, r2, r3
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011d84:	6878      	ldr	r0, [r7, #4]
 8011d86:	f7ff ff8d 	bl	8011ca4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	61fb      	str	r3, [r7, #28]
 8011d8e:	e004      	b.n	8011d9a <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 8011d90:	683b      	ldr	r3, [r7, #0]
 8011d92:	2200      	movs	r2, #0
 8011d94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011d96:	2301      	movs	r3, #1
 8011d98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011d9a:	f000 ffc3 	bl	8012d24 <vPortExitCritical>

	return xReturn;
 8011d9e:	69fb      	ldr	r3, [r7, #28]
}
 8011da0:	4618      	mov	r0, r3
 8011da2:	3720      	adds	r7, #32
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd80      	pop	{r7, pc}
 8011da8:	20000f20 	.word	0x20000f20
 8011dac:	20000a48 	.word	0x20000a48
 8011db0:	20000f34 	.word	0x20000f34

08011db4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011db4:	b480      	push	{r7}
 8011db6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011db8:	4b03      	ldr	r3, [pc, #12]	; (8011dc8 <vTaskMissedYield+0x14>)
 8011dba:	2201      	movs	r2, #1
 8011dbc:	601a      	str	r2, [r3, #0]
}
 8011dbe:	bf00      	nop
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc6:	4770      	bx	lr
 8011dc8:	20000f30 	.word	0x20000f30

08011dcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b082      	sub	sp, #8
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011dd4:	f000 f852 	bl	8011e7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011dd8:	4b06      	ldr	r3, [pc, #24]	; (8011df4 <prvIdleTask+0x28>)
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	2b01      	cmp	r3, #1
 8011dde:	d9f9      	bls.n	8011dd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011de0:	4b05      	ldr	r3, [pc, #20]	; (8011df8 <prvIdleTask+0x2c>)
 8011de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011de6:	601a      	str	r2, [r3, #0]
 8011de8:	f3bf 8f4f 	dsb	sy
 8011dec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011df0:	e7f0      	b.n	8011dd4 <prvIdleTask+0x8>
 8011df2:	bf00      	nop
 8011df4:	20000a4c 	.word	0x20000a4c
 8011df8:	e000ed04 	.word	0xe000ed04

08011dfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b082      	sub	sp, #8
 8011e00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011e02:	2300      	movs	r3, #0
 8011e04:	607b      	str	r3, [r7, #4]
 8011e06:	e00c      	b.n	8011e22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011e08:	687a      	ldr	r2, [r7, #4]
 8011e0a:	4613      	mov	r3, r2
 8011e0c:	009b      	lsls	r3, r3, #2
 8011e0e:	4413      	add	r3, r2
 8011e10:	009b      	lsls	r3, r3, #2
 8011e12:	4a12      	ldr	r2, [pc, #72]	; (8011e5c <prvInitialiseTaskLists+0x60>)
 8011e14:	4413      	add	r3, r2
 8011e16:	4618      	mov	r0, r3
 8011e18:	f7fe f904 	bl	8010024 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	3301      	adds	r3, #1
 8011e20:	607b      	str	r3, [r7, #4]
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	2b37      	cmp	r3, #55	; 0x37
 8011e26:	d9ef      	bls.n	8011e08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011e28:	480d      	ldr	r0, [pc, #52]	; (8011e60 <prvInitialiseTaskLists+0x64>)
 8011e2a:	f7fe f8fb 	bl	8010024 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011e2e:	480d      	ldr	r0, [pc, #52]	; (8011e64 <prvInitialiseTaskLists+0x68>)
 8011e30:	f7fe f8f8 	bl	8010024 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011e34:	480c      	ldr	r0, [pc, #48]	; (8011e68 <prvInitialiseTaskLists+0x6c>)
 8011e36:	f7fe f8f5 	bl	8010024 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011e3a:	480c      	ldr	r0, [pc, #48]	; (8011e6c <prvInitialiseTaskLists+0x70>)
 8011e3c:	f7fe f8f2 	bl	8010024 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011e40:	480b      	ldr	r0, [pc, #44]	; (8011e70 <prvInitialiseTaskLists+0x74>)
 8011e42:	f7fe f8ef 	bl	8010024 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011e46:	4b0b      	ldr	r3, [pc, #44]	; (8011e74 <prvInitialiseTaskLists+0x78>)
 8011e48:	4a05      	ldr	r2, [pc, #20]	; (8011e60 <prvInitialiseTaskLists+0x64>)
 8011e4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011e4c:	4b0a      	ldr	r3, [pc, #40]	; (8011e78 <prvInitialiseTaskLists+0x7c>)
 8011e4e:	4a05      	ldr	r2, [pc, #20]	; (8011e64 <prvInitialiseTaskLists+0x68>)
 8011e50:	601a      	str	r2, [r3, #0]
}
 8011e52:	bf00      	nop
 8011e54:	3708      	adds	r7, #8
 8011e56:	46bd      	mov	sp, r7
 8011e58:	bd80      	pop	{r7, pc}
 8011e5a:	bf00      	nop
 8011e5c:	20000a4c 	.word	0x20000a4c
 8011e60:	20000eac 	.word	0x20000eac
 8011e64:	20000ec0 	.word	0x20000ec0
 8011e68:	20000edc 	.word	0x20000edc
 8011e6c:	20000ef0 	.word	0x20000ef0
 8011e70:	20000f08 	.word	0x20000f08
 8011e74:	20000ed4 	.word	0x20000ed4
 8011e78:	20000ed8 	.word	0x20000ed8

08011e7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b082      	sub	sp, #8
 8011e80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011e82:	e019      	b.n	8011eb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011e84:	f000 ff1e 	bl	8012cc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e88:	4b10      	ldr	r3, [pc, #64]	; (8011ecc <prvCheckTasksWaitingTermination+0x50>)
 8011e8a:	68db      	ldr	r3, [r3, #12]
 8011e8c:	68db      	ldr	r3, [r3, #12]
 8011e8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	3304      	adds	r3, #4
 8011e94:	4618      	mov	r0, r3
 8011e96:	f7fe f94f 	bl	8010138 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011e9a:	4b0d      	ldr	r3, [pc, #52]	; (8011ed0 <prvCheckTasksWaitingTermination+0x54>)
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	3b01      	subs	r3, #1
 8011ea0:	4a0b      	ldr	r2, [pc, #44]	; (8011ed0 <prvCheckTasksWaitingTermination+0x54>)
 8011ea2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011ea4:	4b0b      	ldr	r3, [pc, #44]	; (8011ed4 <prvCheckTasksWaitingTermination+0x58>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	3b01      	subs	r3, #1
 8011eaa:	4a0a      	ldr	r2, [pc, #40]	; (8011ed4 <prvCheckTasksWaitingTermination+0x58>)
 8011eac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011eae:	f000 ff39 	bl	8012d24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011eb2:	6878      	ldr	r0, [r7, #4]
 8011eb4:	f000 f848 	bl	8011f48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011eb8:	4b06      	ldr	r3, [pc, #24]	; (8011ed4 <prvCheckTasksWaitingTermination+0x58>)
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d1e1      	bne.n	8011e84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011ec0:	bf00      	nop
 8011ec2:	bf00      	nop
 8011ec4:	3708      	adds	r7, #8
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	bd80      	pop	{r7, pc}
 8011eca:	bf00      	nop
 8011ecc:	20000ef0 	.word	0x20000ef0
 8011ed0:	20000f1c 	.word	0x20000f1c
 8011ed4:	20000f04 	.word	0x20000f04

08011ed8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8011ed8:	b480      	push	{r7}
 8011eda:	b085      	sub	sp, #20
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8011ee4:	e005      	b.n	8011ef2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	3301      	adds	r3, #1
 8011eea:	607b      	str	r3, [r7, #4]
			ulCount++;
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	3301      	adds	r3, #1
 8011ef0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	781b      	ldrb	r3, [r3, #0]
 8011ef6:	2ba5      	cmp	r3, #165	; 0xa5
 8011ef8:	d0f5      	beq.n	8011ee6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	089b      	lsrs	r3, r3, #2
 8011efe:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	b29b      	uxth	r3, r3
	}
 8011f04:	4618      	mov	r0, r3
 8011f06:	3714      	adds	r7, #20
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0e:	4770      	bx	lr

08011f10 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b086      	sub	sp, #24
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d102      	bne.n	8011f24 <uxTaskGetStackHighWaterMark+0x14>
 8011f1e:	4b09      	ldr	r3, [pc, #36]	; (8011f44 <uxTaskGetStackHighWaterMark+0x34>)
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	e000      	b.n	8011f26 <uxTaskGetStackHighWaterMark+0x16>
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8011f28:	697b      	ldr	r3, [r7, #20]
 8011f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f2c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8011f2e:	6938      	ldr	r0, [r7, #16]
 8011f30:	f7ff ffd2 	bl	8011ed8 <prvTaskCheckFreeStackSpace>
 8011f34:	4603      	mov	r3, r0
 8011f36:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8011f38:	68fb      	ldr	r3, [r7, #12]
	}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	3718      	adds	r7, #24
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}
 8011f42:	bf00      	nop
 8011f44:	20000a48 	.word	0x20000a48

08011f48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b084      	sub	sp, #16
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d108      	bne.n	8011f6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f001 f89e 	bl	80130a0 <vPortFree>
				vPortFree( pxTCB );
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	f001 f89b 	bl	80130a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011f6a:	e018      	b.n	8011f9e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011f72:	2b01      	cmp	r3, #1
 8011f74:	d103      	bne.n	8011f7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	f001 f892 	bl	80130a0 <vPortFree>
	}
 8011f7c:	e00f      	b.n	8011f9e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011f84:	2b02      	cmp	r3, #2
 8011f86:	d00a      	beq.n	8011f9e <prvDeleteTCB+0x56>
	__asm volatile
 8011f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f8c:	f383 8811 	msr	BASEPRI, r3
 8011f90:	f3bf 8f6f 	isb	sy
 8011f94:	f3bf 8f4f 	dsb	sy
 8011f98:	60fb      	str	r3, [r7, #12]
}
 8011f9a:	bf00      	nop
 8011f9c:	e7fe      	b.n	8011f9c <prvDeleteTCB+0x54>
	}
 8011f9e:	bf00      	nop
 8011fa0:	3710      	adds	r7, #16
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	bd80      	pop	{r7, pc}
	...

08011fa8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011fa8:	b480      	push	{r7}
 8011faa:	b083      	sub	sp, #12
 8011fac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011fae:	4b0c      	ldr	r3, [pc, #48]	; (8011fe0 <prvResetNextTaskUnblockTime+0x38>)
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d104      	bne.n	8011fc2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011fb8:	4b0a      	ldr	r3, [pc, #40]	; (8011fe4 <prvResetNextTaskUnblockTime+0x3c>)
 8011fba:	f04f 32ff 	mov.w	r2, #4294967295
 8011fbe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011fc0:	e008      	b.n	8011fd4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011fc2:	4b07      	ldr	r3, [pc, #28]	; (8011fe0 <prvResetNextTaskUnblockTime+0x38>)
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	68db      	ldr	r3, [r3, #12]
 8011fc8:	68db      	ldr	r3, [r3, #12]
 8011fca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	685b      	ldr	r3, [r3, #4]
 8011fd0:	4a04      	ldr	r2, [pc, #16]	; (8011fe4 <prvResetNextTaskUnblockTime+0x3c>)
 8011fd2:	6013      	str	r3, [r2, #0]
}
 8011fd4:	bf00      	nop
 8011fd6:	370c      	adds	r7, #12
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fde:	4770      	bx	lr
 8011fe0:	20000ed4 	.word	0x20000ed4
 8011fe4:	20000f3c 	.word	0x20000f3c

08011fe8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8011fe8:	b480      	push	{r7}
 8011fea:	b083      	sub	sp, #12
 8011fec:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8011fee:	4b05      	ldr	r3, [pc, #20]	; (8012004 <xTaskGetCurrentTaskHandle+0x1c>)
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8011ff4:	687b      	ldr	r3, [r7, #4]
	}
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	370c      	adds	r7, #12
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012000:	4770      	bx	lr
 8012002:	bf00      	nop
 8012004:	20000a48 	.word	0x20000a48

08012008 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012008:	b480      	push	{r7}
 801200a:	b083      	sub	sp, #12
 801200c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801200e:	4b0b      	ldr	r3, [pc, #44]	; (801203c <xTaskGetSchedulerState+0x34>)
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d102      	bne.n	801201c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012016:	2301      	movs	r3, #1
 8012018:	607b      	str	r3, [r7, #4]
 801201a:	e008      	b.n	801202e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801201c:	4b08      	ldr	r3, [pc, #32]	; (8012040 <xTaskGetSchedulerState+0x38>)
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d102      	bne.n	801202a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012024:	2302      	movs	r3, #2
 8012026:	607b      	str	r3, [r7, #4]
 8012028:	e001      	b.n	801202e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801202a:	2300      	movs	r3, #0
 801202c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801202e:	687b      	ldr	r3, [r7, #4]
	}
 8012030:	4618      	mov	r0, r3
 8012032:	370c      	adds	r7, #12
 8012034:	46bd      	mov	sp, r7
 8012036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203a:	4770      	bx	lr
 801203c:	20000f28 	.word	0x20000f28
 8012040:	20000f44 	.word	0x20000f44

08012044 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012044:	b580      	push	{r7, lr}
 8012046:	b084      	sub	sp, #16
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012050:	2300      	movs	r3, #0
 8012052:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d051      	beq.n	80120fe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801205a:	68bb      	ldr	r3, [r7, #8]
 801205c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801205e:	4b2a      	ldr	r3, [pc, #168]	; (8012108 <xTaskPriorityInherit+0xc4>)
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012064:	429a      	cmp	r2, r3
 8012066:	d241      	bcs.n	80120ec <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012068:	68bb      	ldr	r3, [r7, #8]
 801206a:	699b      	ldr	r3, [r3, #24]
 801206c:	2b00      	cmp	r3, #0
 801206e:	db06      	blt.n	801207e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012070:	4b25      	ldr	r3, [pc, #148]	; (8012108 <xTaskPriorityInherit+0xc4>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012076:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801207a:	68bb      	ldr	r3, [r7, #8]
 801207c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801207e:	68bb      	ldr	r3, [r7, #8]
 8012080:	6959      	ldr	r1, [r3, #20]
 8012082:	68bb      	ldr	r3, [r7, #8]
 8012084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012086:	4613      	mov	r3, r2
 8012088:	009b      	lsls	r3, r3, #2
 801208a:	4413      	add	r3, r2
 801208c:	009b      	lsls	r3, r3, #2
 801208e:	4a1f      	ldr	r2, [pc, #124]	; (801210c <xTaskPriorityInherit+0xc8>)
 8012090:	4413      	add	r3, r2
 8012092:	4299      	cmp	r1, r3
 8012094:	d122      	bne.n	80120dc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012096:	68bb      	ldr	r3, [r7, #8]
 8012098:	3304      	adds	r3, #4
 801209a:	4618      	mov	r0, r3
 801209c:	f7fe f84c 	bl	8010138 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80120a0:	4b19      	ldr	r3, [pc, #100]	; (8012108 <xTaskPriorityInherit+0xc4>)
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120a6:	68bb      	ldr	r3, [r7, #8]
 80120a8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120ae:	4b18      	ldr	r3, [pc, #96]	; (8012110 <xTaskPriorityInherit+0xcc>)
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	429a      	cmp	r2, r3
 80120b4:	d903      	bls.n	80120be <xTaskPriorityInherit+0x7a>
 80120b6:	68bb      	ldr	r3, [r7, #8]
 80120b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120ba:	4a15      	ldr	r2, [pc, #84]	; (8012110 <xTaskPriorityInherit+0xcc>)
 80120bc:	6013      	str	r3, [r2, #0]
 80120be:	68bb      	ldr	r3, [r7, #8]
 80120c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120c2:	4613      	mov	r3, r2
 80120c4:	009b      	lsls	r3, r3, #2
 80120c6:	4413      	add	r3, r2
 80120c8:	009b      	lsls	r3, r3, #2
 80120ca:	4a10      	ldr	r2, [pc, #64]	; (801210c <xTaskPriorityInherit+0xc8>)
 80120cc:	441a      	add	r2, r3
 80120ce:	68bb      	ldr	r3, [r7, #8]
 80120d0:	3304      	adds	r3, #4
 80120d2:	4619      	mov	r1, r3
 80120d4:	4610      	mov	r0, r2
 80120d6:	f7fd ffd2 	bl	801007e <vListInsertEnd>
 80120da:	e004      	b.n	80120e6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80120dc:	4b0a      	ldr	r3, [pc, #40]	; (8012108 <xTaskPriorityInherit+0xc4>)
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120e2:	68bb      	ldr	r3, [r7, #8]
 80120e4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80120e6:	2301      	movs	r3, #1
 80120e8:	60fb      	str	r3, [r7, #12]
 80120ea:	e008      	b.n	80120fe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80120ec:	68bb      	ldr	r3, [r7, #8]
 80120ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80120f0:	4b05      	ldr	r3, [pc, #20]	; (8012108 <xTaskPriorityInherit+0xc4>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120f6:	429a      	cmp	r2, r3
 80120f8:	d201      	bcs.n	80120fe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80120fa:	2301      	movs	r3, #1
 80120fc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80120fe:	68fb      	ldr	r3, [r7, #12]
	}
 8012100:	4618      	mov	r0, r3
 8012102:	3710      	adds	r7, #16
 8012104:	46bd      	mov	sp, r7
 8012106:	bd80      	pop	{r7, pc}
 8012108:	20000a48 	.word	0x20000a48
 801210c:	20000a4c 	.word	0x20000a4c
 8012110:	20000f24 	.word	0x20000f24

08012114 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012114:	b580      	push	{r7, lr}
 8012116:	b086      	sub	sp, #24
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012120:	2300      	movs	r3, #0
 8012122:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d056      	beq.n	80121d8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801212a:	4b2e      	ldr	r3, [pc, #184]	; (80121e4 <xTaskPriorityDisinherit+0xd0>)
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	693a      	ldr	r2, [r7, #16]
 8012130:	429a      	cmp	r2, r3
 8012132:	d00a      	beq.n	801214a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012138:	f383 8811 	msr	BASEPRI, r3
 801213c:	f3bf 8f6f 	isb	sy
 8012140:	f3bf 8f4f 	dsb	sy
 8012144:	60fb      	str	r3, [r7, #12]
}
 8012146:	bf00      	nop
 8012148:	e7fe      	b.n	8012148 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801214a:	693b      	ldr	r3, [r7, #16]
 801214c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801214e:	2b00      	cmp	r3, #0
 8012150:	d10a      	bne.n	8012168 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012156:	f383 8811 	msr	BASEPRI, r3
 801215a:	f3bf 8f6f 	isb	sy
 801215e:	f3bf 8f4f 	dsb	sy
 8012162:	60bb      	str	r3, [r7, #8]
}
 8012164:	bf00      	nop
 8012166:	e7fe      	b.n	8012166 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012168:	693b      	ldr	r3, [r7, #16]
 801216a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801216c:	1e5a      	subs	r2, r3, #1
 801216e:	693b      	ldr	r3, [r7, #16]
 8012170:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012172:	693b      	ldr	r3, [r7, #16]
 8012174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801217a:	429a      	cmp	r2, r3
 801217c:	d02c      	beq.n	80121d8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801217e:	693b      	ldr	r3, [r7, #16]
 8012180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012182:	2b00      	cmp	r3, #0
 8012184:	d128      	bne.n	80121d8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012186:	693b      	ldr	r3, [r7, #16]
 8012188:	3304      	adds	r3, #4
 801218a:	4618      	mov	r0, r3
 801218c:	f7fd ffd4 	bl	8010138 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012190:	693b      	ldr	r3, [r7, #16]
 8012192:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012194:	693b      	ldr	r3, [r7, #16]
 8012196:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012198:	693b      	ldr	r3, [r7, #16]
 801219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801219c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80121a0:	693b      	ldr	r3, [r7, #16]
 80121a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80121a4:	693b      	ldr	r3, [r7, #16]
 80121a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121a8:	4b0f      	ldr	r3, [pc, #60]	; (80121e8 <xTaskPriorityDisinherit+0xd4>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	429a      	cmp	r2, r3
 80121ae:	d903      	bls.n	80121b8 <xTaskPriorityDisinherit+0xa4>
 80121b0:	693b      	ldr	r3, [r7, #16]
 80121b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121b4:	4a0c      	ldr	r2, [pc, #48]	; (80121e8 <xTaskPriorityDisinherit+0xd4>)
 80121b6:	6013      	str	r3, [r2, #0]
 80121b8:	693b      	ldr	r3, [r7, #16]
 80121ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121bc:	4613      	mov	r3, r2
 80121be:	009b      	lsls	r3, r3, #2
 80121c0:	4413      	add	r3, r2
 80121c2:	009b      	lsls	r3, r3, #2
 80121c4:	4a09      	ldr	r2, [pc, #36]	; (80121ec <xTaskPriorityDisinherit+0xd8>)
 80121c6:	441a      	add	r2, r3
 80121c8:	693b      	ldr	r3, [r7, #16]
 80121ca:	3304      	adds	r3, #4
 80121cc:	4619      	mov	r1, r3
 80121ce:	4610      	mov	r0, r2
 80121d0:	f7fd ff55 	bl	801007e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80121d4:	2301      	movs	r3, #1
 80121d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80121d8:	697b      	ldr	r3, [r7, #20]
	}
 80121da:	4618      	mov	r0, r3
 80121dc:	3718      	adds	r7, #24
 80121de:	46bd      	mov	sp, r7
 80121e0:	bd80      	pop	{r7, pc}
 80121e2:	bf00      	nop
 80121e4:	20000a48 	.word	0x20000a48
 80121e8:	20000f24 	.word	0x20000f24
 80121ec:	20000a4c 	.word	0x20000a4c

080121f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b088      	sub	sp, #32
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
 80121f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80121fe:	2301      	movs	r3, #1
 8012200:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d06a      	beq.n	80122de <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012208:	69bb      	ldr	r3, [r7, #24]
 801220a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801220c:	2b00      	cmp	r3, #0
 801220e:	d10a      	bne.n	8012226 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8012210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012214:	f383 8811 	msr	BASEPRI, r3
 8012218:	f3bf 8f6f 	isb	sy
 801221c:	f3bf 8f4f 	dsb	sy
 8012220:	60fb      	str	r3, [r7, #12]
}
 8012222:	bf00      	nop
 8012224:	e7fe      	b.n	8012224 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012226:	69bb      	ldr	r3, [r7, #24]
 8012228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801222a:	683a      	ldr	r2, [r7, #0]
 801222c:	429a      	cmp	r2, r3
 801222e:	d902      	bls.n	8012236 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	61fb      	str	r3, [r7, #28]
 8012234:	e002      	b.n	801223c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012236:	69bb      	ldr	r3, [r7, #24]
 8012238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801223a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801223c:	69bb      	ldr	r3, [r7, #24]
 801223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012240:	69fa      	ldr	r2, [r7, #28]
 8012242:	429a      	cmp	r2, r3
 8012244:	d04b      	beq.n	80122de <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012246:	69bb      	ldr	r3, [r7, #24]
 8012248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801224a:	697a      	ldr	r2, [r7, #20]
 801224c:	429a      	cmp	r2, r3
 801224e:	d146      	bne.n	80122de <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012250:	4b25      	ldr	r3, [pc, #148]	; (80122e8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	69ba      	ldr	r2, [r7, #24]
 8012256:	429a      	cmp	r2, r3
 8012258:	d10a      	bne.n	8012270 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801225a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801225e:	f383 8811 	msr	BASEPRI, r3
 8012262:	f3bf 8f6f 	isb	sy
 8012266:	f3bf 8f4f 	dsb	sy
 801226a:	60bb      	str	r3, [r7, #8]
}
 801226c:	bf00      	nop
 801226e:	e7fe      	b.n	801226e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012270:	69bb      	ldr	r3, [r7, #24]
 8012272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012274:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012276:	69bb      	ldr	r3, [r7, #24]
 8012278:	69fa      	ldr	r2, [r7, #28]
 801227a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801227c:	69bb      	ldr	r3, [r7, #24]
 801227e:	699b      	ldr	r3, [r3, #24]
 8012280:	2b00      	cmp	r3, #0
 8012282:	db04      	blt.n	801228e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012284:	69fb      	ldr	r3, [r7, #28]
 8012286:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801228a:	69bb      	ldr	r3, [r7, #24]
 801228c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801228e:	69bb      	ldr	r3, [r7, #24]
 8012290:	6959      	ldr	r1, [r3, #20]
 8012292:	693a      	ldr	r2, [r7, #16]
 8012294:	4613      	mov	r3, r2
 8012296:	009b      	lsls	r3, r3, #2
 8012298:	4413      	add	r3, r2
 801229a:	009b      	lsls	r3, r3, #2
 801229c:	4a13      	ldr	r2, [pc, #76]	; (80122ec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801229e:	4413      	add	r3, r2
 80122a0:	4299      	cmp	r1, r3
 80122a2:	d11c      	bne.n	80122de <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80122a4:	69bb      	ldr	r3, [r7, #24]
 80122a6:	3304      	adds	r3, #4
 80122a8:	4618      	mov	r0, r3
 80122aa:	f7fd ff45 	bl	8010138 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80122ae:	69bb      	ldr	r3, [r7, #24]
 80122b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122b2:	4b0f      	ldr	r3, [pc, #60]	; (80122f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	429a      	cmp	r2, r3
 80122b8:	d903      	bls.n	80122c2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80122ba:	69bb      	ldr	r3, [r7, #24]
 80122bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122be:	4a0c      	ldr	r2, [pc, #48]	; (80122f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80122c0:	6013      	str	r3, [r2, #0]
 80122c2:	69bb      	ldr	r3, [r7, #24]
 80122c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122c6:	4613      	mov	r3, r2
 80122c8:	009b      	lsls	r3, r3, #2
 80122ca:	4413      	add	r3, r2
 80122cc:	009b      	lsls	r3, r3, #2
 80122ce:	4a07      	ldr	r2, [pc, #28]	; (80122ec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80122d0:	441a      	add	r2, r3
 80122d2:	69bb      	ldr	r3, [r7, #24]
 80122d4:	3304      	adds	r3, #4
 80122d6:	4619      	mov	r1, r3
 80122d8:	4610      	mov	r0, r2
 80122da:	f7fd fed0 	bl	801007e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80122de:	bf00      	nop
 80122e0:	3720      	adds	r7, #32
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}
 80122e6:	bf00      	nop
 80122e8:	20000a48 	.word	0x20000a48
 80122ec:	20000a4c 	.word	0x20000a4c
 80122f0:	20000f24 	.word	0x20000f24

080122f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80122f4:	b480      	push	{r7}
 80122f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80122f8:	4b07      	ldr	r3, [pc, #28]	; (8012318 <pvTaskIncrementMutexHeldCount+0x24>)
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d004      	beq.n	801230a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012300:	4b05      	ldr	r3, [pc, #20]	; (8012318 <pvTaskIncrementMutexHeldCount+0x24>)
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012306:	3201      	adds	r2, #1
 8012308:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801230a:	4b03      	ldr	r3, [pc, #12]	; (8012318 <pvTaskIncrementMutexHeldCount+0x24>)
 801230c:	681b      	ldr	r3, [r3, #0]
	}
 801230e:	4618      	mov	r0, r3
 8012310:	46bd      	mov	sp, r7
 8012312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012316:	4770      	bx	lr
 8012318:	20000a48 	.word	0x20000a48

0801231c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b084      	sub	sp, #16
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
 8012324:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012326:	4b24      	ldr	r3, [pc, #144]	; (80123b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 801232c:	4b23      	ldr	r3, [pc, #140]	; (80123bc <prvAddCurrentTaskToDelayedList+0xa0>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	2200      	movs	r2, #0
 8012332:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012336:	4b21      	ldr	r3, [pc, #132]	; (80123bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	3304      	adds	r3, #4
 801233c:	4618      	mov	r0, r3
 801233e:	f7fd fefb 	bl	8010138 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012348:	d10a      	bne.n	8012360 <prvAddCurrentTaskToDelayedList+0x44>
 801234a:	683b      	ldr	r3, [r7, #0]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d007      	beq.n	8012360 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012350:	4b1a      	ldr	r3, [pc, #104]	; (80123bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	3304      	adds	r3, #4
 8012356:	4619      	mov	r1, r3
 8012358:	4819      	ldr	r0, [pc, #100]	; (80123c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 801235a:	f7fd fe90 	bl	801007e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801235e:	e026      	b.n	80123ae <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012360:	68fa      	ldr	r2, [r7, #12]
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	4413      	add	r3, r2
 8012366:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012368:	4b14      	ldr	r3, [pc, #80]	; (80123bc <prvAddCurrentTaskToDelayedList+0xa0>)
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	68ba      	ldr	r2, [r7, #8]
 801236e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012370:	68ba      	ldr	r2, [r7, #8]
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	429a      	cmp	r2, r3
 8012376:	d209      	bcs.n	801238c <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012378:	4b12      	ldr	r3, [pc, #72]	; (80123c4 <prvAddCurrentTaskToDelayedList+0xa8>)
 801237a:	681a      	ldr	r2, [r3, #0]
 801237c:	4b0f      	ldr	r3, [pc, #60]	; (80123bc <prvAddCurrentTaskToDelayedList+0xa0>)
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	3304      	adds	r3, #4
 8012382:	4619      	mov	r1, r3
 8012384:	4610      	mov	r0, r2
 8012386:	f7fd fe9e 	bl	80100c6 <vListInsert>
}
 801238a:	e010      	b.n	80123ae <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801238c:	4b0e      	ldr	r3, [pc, #56]	; (80123c8 <prvAddCurrentTaskToDelayedList+0xac>)
 801238e:	681a      	ldr	r2, [r3, #0]
 8012390:	4b0a      	ldr	r3, [pc, #40]	; (80123bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	3304      	adds	r3, #4
 8012396:	4619      	mov	r1, r3
 8012398:	4610      	mov	r0, r2
 801239a:	f7fd fe94 	bl	80100c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801239e:	4b0b      	ldr	r3, [pc, #44]	; (80123cc <prvAddCurrentTaskToDelayedList+0xb0>)
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	68ba      	ldr	r2, [r7, #8]
 80123a4:	429a      	cmp	r2, r3
 80123a6:	d202      	bcs.n	80123ae <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 80123a8:	4a08      	ldr	r2, [pc, #32]	; (80123cc <prvAddCurrentTaskToDelayedList+0xb0>)
 80123aa:	68bb      	ldr	r3, [r7, #8]
 80123ac:	6013      	str	r3, [r2, #0]
}
 80123ae:	bf00      	nop
 80123b0:	3710      	adds	r7, #16
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}
 80123b6:	bf00      	nop
 80123b8:	20000f20 	.word	0x20000f20
 80123bc:	20000a48 	.word	0x20000a48
 80123c0:	20000f08 	.word	0x20000f08
 80123c4:	20000ed8 	.word	0x20000ed8
 80123c8:	20000ed4 	.word	0x20000ed4
 80123cc:	20000f3c 	.word	0x20000f3c

080123d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b08a      	sub	sp, #40	; 0x28
 80123d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80123d6:	2300      	movs	r3, #0
 80123d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80123da:	f000 fb07 	bl	80129ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80123de:	4b1c      	ldr	r3, [pc, #112]	; (8012450 <xTimerCreateTimerTask+0x80>)
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d021      	beq.n	801242a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80123e6:	2300      	movs	r3, #0
 80123e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80123ea:	2300      	movs	r3, #0
 80123ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80123ee:	1d3a      	adds	r2, r7, #4
 80123f0:	f107 0108 	add.w	r1, r7, #8
 80123f4:	f107 030c 	add.w	r3, r7, #12
 80123f8:	4618      	mov	r0, r3
 80123fa:	f7fd fdf9 	bl	800fff0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80123fe:	6879      	ldr	r1, [r7, #4]
 8012400:	68bb      	ldr	r3, [r7, #8]
 8012402:	68fa      	ldr	r2, [r7, #12]
 8012404:	9202      	str	r2, [sp, #8]
 8012406:	9301      	str	r3, [sp, #4]
 8012408:	2302      	movs	r3, #2
 801240a:	9300      	str	r3, [sp, #0]
 801240c:	2300      	movs	r3, #0
 801240e:	460a      	mov	r2, r1
 8012410:	4910      	ldr	r1, [pc, #64]	; (8012454 <xTimerCreateTimerTask+0x84>)
 8012412:	4811      	ldr	r0, [pc, #68]	; (8012458 <xTimerCreateTimerTask+0x88>)
 8012414:	f7fe ff7e 	bl	8011314 <xTaskCreateStatic>
 8012418:	4603      	mov	r3, r0
 801241a:	4a10      	ldr	r2, [pc, #64]	; (801245c <xTimerCreateTimerTask+0x8c>)
 801241c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801241e:	4b0f      	ldr	r3, [pc, #60]	; (801245c <xTimerCreateTimerTask+0x8c>)
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d001      	beq.n	801242a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012426:	2301      	movs	r3, #1
 8012428:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801242a:	697b      	ldr	r3, [r7, #20]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d10a      	bne.n	8012446 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8012430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012434:	f383 8811 	msr	BASEPRI, r3
 8012438:	f3bf 8f6f 	isb	sy
 801243c:	f3bf 8f4f 	dsb	sy
 8012440:	613b      	str	r3, [r7, #16]
}
 8012442:	bf00      	nop
 8012444:	e7fe      	b.n	8012444 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012446:	697b      	ldr	r3, [r7, #20]
}
 8012448:	4618      	mov	r0, r3
 801244a:	3718      	adds	r7, #24
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}
 8012450:	20000f78 	.word	0x20000f78
 8012454:	08014890 	.word	0x08014890
 8012458:	08012595 	.word	0x08012595
 801245c:	20000f7c 	.word	0x20000f7c

08012460 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b08a      	sub	sp, #40	; 0x28
 8012464:	af00      	add	r7, sp, #0
 8012466:	60f8      	str	r0, [r7, #12]
 8012468:	60b9      	str	r1, [r7, #8]
 801246a:	607a      	str	r2, [r7, #4]
 801246c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801246e:	2300      	movs	r3, #0
 8012470:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d10a      	bne.n	801248e <xTimerGenericCommand+0x2e>
	__asm volatile
 8012478:	f04f 0350 	mov.w	r3, #80	; 0x50
 801247c:	f383 8811 	msr	BASEPRI, r3
 8012480:	f3bf 8f6f 	isb	sy
 8012484:	f3bf 8f4f 	dsb	sy
 8012488:	623b      	str	r3, [r7, #32]
}
 801248a:	bf00      	nop
 801248c:	e7fe      	b.n	801248c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801248e:	4b1a      	ldr	r3, [pc, #104]	; (80124f8 <xTimerGenericCommand+0x98>)
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d02a      	beq.n	80124ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012496:	68bb      	ldr	r3, [r7, #8]
 8012498:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80124a2:	68bb      	ldr	r3, [r7, #8]
 80124a4:	2b05      	cmp	r3, #5
 80124a6:	dc18      	bgt.n	80124da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80124a8:	f7ff fdae 	bl	8012008 <xTaskGetSchedulerState>
 80124ac:	4603      	mov	r3, r0
 80124ae:	2b02      	cmp	r3, #2
 80124b0:	d109      	bne.n	80124c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80124b2:	4b11      	ldr	r3, [pc, #68]	; (80124f8 <xTimerGenericCommand+0x98>)
 80124b4:	6818      	ldr	r0, [r3, #0]
 80124b6:	f107 0110 	add.w	r1, r7, #16
 80124ba:	2300      	movs	r3, #0
 80124bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80124be:	f7fe f8c3 	bl	8010648 <xQueueGenericSend>
 80124c2:	6278      	str	r0, [r7, #36]	; 0x24
 80124c4:	e012      	b.n	80124ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80124c6:	4b0c      	ldr	r3, [pc, #48]	; (80124f8 <xTimerGenericCommand+0x98>)
 80124c8:	6818      	ldr	r0, [r3, #0]
 80124ca:	f107 0110 	add.w	r1, r7, #16
 80124ce:	2300      	movs	r3, #0
 80124d0:	2200      	movs	r2, #0
 80124d2:	f7fe f8b9 	bl	8010648 <xQueueGenericSend>
 80124d6:	6278      	str	r0, [r7, #36]	; 0x24
 80124d8:	e008      	b.n	80124ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80124da:	4b07      	ldr	r3, [pc, #28]	; (80124f8 <xTimerGenericCommand+0x98>)
 80124dc:	6818      	ldr	r0, [r3, #0]
 80124de:	f107 0110 	add.w	r1, r7, #16
 80124e2:	2300      	movs	r3, #0
 80124e4:	683a      	ldr	r2, [r7, #0]
 80124e6:	f7fe f9ad 	bl	8010844 <xQueueGenericSendFromISR>
 80124ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80124ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80124ee:	4618      	mov	r0, r3
 80124f0:	3728      	adds	r7, #40	; 0x28
 80124f2:	46bd      	mov	sp, r7
 80124f4:	bd80      	pop	{r7, pc}
 80124f6:	bf00      	nop
 80124f8:	20000f78 	.word	0x20000f78

080124fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b088      	sub	sp, #32
 8012500:	af02      	add	r7, sp, #8
 8012502:	6078      	str	r0, [r7, #4]
 8012504:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012506:	4b22      	ldr	r3, [pc, #136]	; (8012590 <prvProcessExpiredTimer+0x94>)
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	68db      	ldr	r3, [r3, #12]
 801250c:	68db      	ldr	r3, [r3, #12]
 801250e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012510:	697b      	ldr	r3, [r7, #20]
 8012512:	3304      	adds	r3, #4
 8012514:	4618      	mov	r0, r3
 8012516:	f7fd fe0f 	bl	8010138 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801251a:	697b      	ldr	r3, [r7, #20]
 801251c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012520:	f003 0304 	and.w	r3, r3, #4
 8012524:	2b00      	cmp	r3, #0
 8012526:	d022      	beq.n	801256e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012528:	697b      	ldr	r3, [r7, #20]
 801252a:	699a      	ldr	r2, [r3, #24]
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	18d1      	adds	r1, r2, r3
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	683a      	ldr	r2, [r7, #0]
 8012534:	6978      	ldr	r0, [r7, #20]
 8012536:	f000 f8d1 	bl	80126dc <prvInsertTimerInActiveList>
 801253a:	4603      	mov	r3, r0
 801253c:	2b00      	cmp	r3, #0
 801253e:	d01f      	beq.n	8012580 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012540:	2300      	movs	r3, #0
 8012542:	9300      	str	r3, [sp, #0]
 8012544:	2300      	movs	r3, #0
 8012546:	687a      	ldr	r2, [r7, #4]
 8012548:	2100      	movs	r1, #0
 801254a:	6978      	ldr	r0, [r7, #20]
 801254c:	f7ff ff88 	bl	8012460 <xTimerGenericCommand>
 8012550:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012552:	693b      	ldr	r3, [r7, #16]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d113      	bne.n	8012580 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8012558:	f04f 0350 	mov.w	r3, #80	; 0x50
 801255c:	f383 8811 	msr	BASEPRI, r3
 8012560:	f3bf 8f6f 	isb	sy
 8012564:	f3bf 8f4f 	dsb	sy
 8012568:	60fb      	str	r3, [r7, #12]
}
 801256a:	bf00      	nop
 801256c:	e7fe      	b.n	801256c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801256e:	697b      	ldr	r3, [r7, #20]
 8012570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012574:	f023 0301 	bic.w	r3, r3, #1
 8012578:	b2da      	uxtb	r2, r3
 801257a:	697b      	ldr	r3, [r7, #20]
 801257c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012580:	697b      	ldr	r3, [r7, #20]
 8012582:	6a1b      	ldr	r3, [r3, #32]
 8012584:	6978      	ldr	r0, [r7, #20]
 8012586:	4798      	blx	r3
}
 8012588:	bf00      	nop
 801258a:	3718      	adds	r7, #24
 801258c:	46bd      	mov	sp, r7
 801258e:	bd80      	pop	{r7, pc}
 8012590:	20000f70 	.word	0x20000f70

08012594 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b084      	sub	sp, #16
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801259c:	f107 0308 	add.w	r3, r7, #8
 80125a0:	4618      	mov	r0, r3
 80125a2:	f000 f857 	bl	8012654 <prvGetNextExpireTime>
 80125a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80125a8:	68bb      	ldr	r3, [r7, #8]
 80125aa:	4619      	mov	r1, r3
 80125ac:	68f8      	ldr	r0, [r7, #12]
 80125ae:	f000 f803 	bl	80125b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80125b2:	f000 f8d5 	bl	8012760 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80125b6:	e7f1      	b.n	801259c <prvTimerTask+0x8>

080125b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b084      	sub	sp, #16
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
 80125c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80125c2:	f7ff f8e7 	bl	8011794 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80125c6:	f107 0308 	add.w	r3, r7, #8
 80125ca:	4618      	mov	r0, r3
 80125cc:	f000 f866 	bl	801269c <prvSampleTimeNow>
 80125d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80125d2:	68bb      	ldr	r3, [r7, #8]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d130      	bne.n	801263a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80125d8:	683b      	ldr	r3, [r7, #0]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d10a      	bne.n	80125f4 <prvProcessTimerOrBlockTask+0x3c>
 80125de:	687a      	ldr	r2, [r7, #4]
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	429a      	cmp	r2, r3
 80125e4:	d806      	bhi.n	80125f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80125e6:	f7ff f8e3 	bl	80117b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80125ea:	68f9      	ldr	r1, [r7, #12]
 80125ec:	6878      	ldr	r0, [r7, #4]
 80125ee:	f7ff ff85 	bl	80124fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80125f2:	e024      	b.n	801263e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80125f4:	683b      	ldr	r3, [r7, #0]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d008      	beq.n	801260c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80125fa:	4b13      	ldr	r3, [pc, #76]	; (8012648 <prvProcessTimerOrBlockTask+0x90>)
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d101      	bne.n	8012608 <prvProcessTimerOrBlockTask+0x50>
 8012604:	2301      	movs	r3, #1
 8012606:	e000      	b.n	801260a <prvProcessTimerOrBlockTask+0x52>
 8012608:	2300      	movs	r3, #0
 801260a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801260c:	4b0f      	ldr	r3, [pc, #60]	; (801264c <prvProcessTimerOrBlockTask+0x94>)
 801260e:	6818      	ldr	r0, [r3, #0]
 8012610:	687a      	ldr	r2, [r7, #4]
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	1ad3      	subs	r3, r2, r3
 8012616:	683a      	ldr	r2, [r7, #0]
 8012618:	4619      	mov	r1, r3
 801261a:	f7fe fe47 	bl	80112ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801261e:	f7ff f8c7 	bl	80117b0 <xTaskResumeAll>
 8012622:	4603      	mov	r3, r0
 8012624:	2b00      	cmp	r3, #0
 8012626:	d10a      	bne.n	801263e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012628:	4b09      	ldr	r3, [pc, #36]	; (8012650 <prvProcessTimerOrBlockTask+0x98>)
 801262a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801262e:	601a      	str	r2, [r3, #0]
 8012630:	f3bf 8f4f 	dsb	sy
 8012634:	f3bf 8f6f 	isb	sy
}
 8012638:	e001      	b.n	801263e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801263a:	f7ff f8b9 	bl	80117b0 <xTaskResumeAll>
}
 801263e:	bf00      	nop
 8012640:	3710      	adds	r7, #16
 8012642:	46bd      	mov	sp, r7
 8012644:	bd80      	pop	{r7, pc}
 8012646:	bf00      	nop
 8012648:	20000f74 	.word	0x20000f74
 801264c:	20000f78 	.word	0x20000f78
 8012650:	e000ed04 	.word	0xe000ed04

08012654 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012654:	b480      	push	{r7}
 8012656:	b085      	sub	sp, #20
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801265c:	4b0e      	ldr	r3, [pc, #56]	; (8012698 <prvGetNextExpireTime+0x44>)
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d101      	bne.n	801266a <prvGetNextExpireTime+0x16>
 8012666:	2201      	movs	r2, #1
 8012668:	e000      	b.n	801266c <prvGetNextExpireTime+0x18>
 801266a:	2200      	movs	r2, #0
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d105      	bne.n	8012684 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012678:	4b07      	ldr	r3, [pc, #28]	; (8012698 <prvGetNextExpireTime+0x44>)
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	68db      	ldr	r3, [r3, #12]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	60fb      	str	r3, [r7, #12]
 8012682:	e001      	b.n	8012688 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012684:	2300      	movs	r3, #0
 8012686:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012688:	68fb      	ldr	r3, [r7, #12]
}
 801268a:	4618      	mov	r0, r3
 801268c:	3714      	adds	r7, #20
 801268e:	46bd      	mov	sp, r7
 8012690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012694:	4770      	bx	lr
 8012696:	bf00      	nop
 8012698:	20000f70 	.word	0x20000f70

0801269c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b084      	sub	sp, #16
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80126a4:	f7ff f922 	bl	80118ec <xTaskGetTickCount>
 80126a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80126aa:	4b0b      	ldr	r3, [pc, #44]	; (80126d8 <prvSampleTimeNow+0x3c>)
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	68fa      	ldr	r2, [r7, #12]
 80126b0:	429a      	cmp	r2, r3
 80126b2:	d205      	bcs.n	80126c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80126b4:	f000 f936 	bl	8012924 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	2201      	movs	r2, #1
 80126bc:	601a      	str	r2, [r3, #0]
 80126be:	e002      	b.n	80126c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2200      	movs	r2, #0
 80126c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80126c6:	4a04      	ldr	r2, [pc, #16]	; (80126d8 <prvSampleTimeNow+0x3c>)
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80126cc:	68fb      	ldr	r3, [r7, #12]
}
 80126ce:	4618      	mov	r0, r3
 80126d0:	3710      	adds	r7, #16
 80126d2:	46bd      	mov	sp, r7
 80126d4:	bd80      	pop	{r7, pc}
 80126d6:	bf00      	nop
 80126d8:	20000f80 	.word	0x20000f80

080126dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b086      	sub	sp, #24
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	60f8      	str	r0, [r7, #12]
 80126e4:	60b9      	str	r1, [r7, #8]
 80126e6:	607a      	str	r2, [r7, #4]
 80126e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80126ea:	2300      	movs	r3, #0
 80126ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	68ba      	ldr	r2, [r7, #8]
 80126f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	68fa      	ldr	r2, [r7, #12]
 80126f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80126fa:	68ba      	ldr	r2, [r7, #8]
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	429a      	cmp	r2, r3
 8012700:	d812      	bhi.n	8012728 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012702:	687a      	ldr	r2, [r7, #4]
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	1ad2      	subs	r2, r2, r3
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	699b      	ldr	r3, [r3, #24]
 801270c:	429a      	cmp	r2, r3
 801270e:	d302      	bcc.n	8012716 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012710:	2301      	movs	r3, #1
 8012712:	617b      	str	r3, [r7, #20]
 8012714:	e01b      	b.n	801274e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012716:	4b10      	ldr	r3, [pc, #64]	; (8012758 <prvInsertTimerInActiveList+0x7c>)
 8012718:	681a      	ldr	r2, [r3, #0]
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	3304      	adds	r3, #4
 801271e:	4619      	mov	r1, r3
 8012720:	4610      	mov	r0, r2
 8012722:	f7fd fcd0 	bl	80100c6 <vListInsert>
 8012726:	e012      	b.n	801274e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012728:	687a      	ldr	r2, [r7, #4]
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	429a      	cmp	r2, r3
 801272e:	d206      	bcs.n	801273e <prvInsertTimerInActiveList+0x62>
 8012730:	68ba      	ldr	r2, [r7, #8]
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	429a      	cmp	r2, r3
 8012736:	d302      	bcc.n	801273e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012738:	2301      	movs	r3, #1
 801273a:	617b      	str	r3, [r7, #20]
 801273c:	e007      	b.n	801274e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801273e:	4b07      	ldr	r3, [pc, #28]	; (801275c <prvInsertTimerInActiveList+0x80>)
 8012740:	681a      	ldr	r2, [r3, #0]
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	3304      	adds	r3, #4
 8012746:	4619      	mov	r1, r3
 8012748:	4610      	mov	r0, r2
 801274a:	f7fd fcbc 	bl	80100c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801274e:	697b      	ldr	r3, [r7, #20]
}
 8012750:	4618      	mov	r0, r3
 8012752:	3718      	adds	r7, #24
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}
 8012758:	20000f74 	.word	0x20000f74
 801275c:	20000f70 	.word	0x20000f70

08012760 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b08e      	sub	sp, #56	; 0x38
 8012764:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012766:	e0ca      	b.n	80128fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2b00      	cmp	r3, #0
 801276c:	da18      	bge.n	80127a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801276e:	1d3b      	adds	r3, r7, #4
 8012770:	3304      	adds	r3, #4
 8012772:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012776:	2b00      	cmp	r3, #0
 8012778:	d10a      	bne.n	8012790 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801277a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801277e:	f383 8811 	msr	BASEPRI, r3
 8012782:	f3bf 8f6f 	isb	sy
 8012786:	f3bf 8f4f 	dsb	sy
 801278a:	61fb      	str	r3, [r7, #28]
}
 801278c:	bf00      	nop
 801278e:	e7fe      	b.n	801278e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012796:	6850      	ldr	r0, [r2, #4]
 8012798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801279a:	6892      	ldr	r2, [r2, #8]
 801279c:	4611      	mov	r1, r2
 801279e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	f2c0 80aa 	blt.w	80128fc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80127ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ae:	695b      	ldr	r3, [r3, #20]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d004      	beq.n	80127be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80127b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b6:	3304      	adds	r3, #4
 80127b8:	4618      	mov	r0, r3
 80127ba:	f7fd fcbd 	bl	8010138 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80127be:	463b      	mov	r3, r7
 80127c0:	4618      	mov	r0, r3
 80127c2:	f7ff ff6b 	bl	801269c <prvSampleTimeNow>
 80127c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	2b09      	cmp	r3, #9
 80127cc:	f200 8097 	bhi.w	80128fe <prvProcessReceivedCommands+0x19e>
 80127d0:	a201      	add	r2, pc, #4	; (adr r2, 80127d8 <prvProcessReceivedCommands+0x78>)
 80127d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127d6:	bf00      	nop
 80127d8:	08012801 	.word	0x08012801
 80127dc:	08012801 	.word	0x08012801
 80127e0:	08012801 	.word	0x08012801
 80127e4:	08012875 	.word	0x08012875
 80127e8:	08012889 	.word	0x08012889
 80127ec:	080128d3 	.word	0x080128d3
 80127f0:	08012801 	.word	0x08012801
 80127f4:	08012801 	.word	0x08012801
 80127f8:	08012875 	.word	0x08012875
 80127fc:	08012889 	.word	0x08012889
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012802:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012806:	f043 0301 	orr.w	r3, r3, #1
 801280a:	b2da      	uxtb	r2, r3
 801280c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801280e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012812:	68ba      	ldr	r2, [r7, #8]
 8012814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012816:	699b      	ldr	r3, [r3, #24]
 8012818:	18d1      	adds	r1, r2, r3
 801281a:	68bb      	ldr	r3, [r7, #8]
 801281c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801281e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012820:	f7ff ff5c 	bl	80126dc <prvInsertTimerInActiveList>
 8012824:	4603      	mov	r3, r0
 8012826:	2b00      	cmp	r3, #0
 8012828:	d069      	beq.n	80128fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801282a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801282c:	6a1b      	ldr	r3, [r3, #32]
 801282e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012830:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012834:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012838:	f003 0304 	and.w	r3, r3, #4
 801283c:	2b00      	cmp	r3, #0
 801283e:	d05e      	beq.n	80128fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012840:	68ba      	ldr	r2, [r7, #8]
 8012842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012844:	699b      	ldr	r3, [r3, #24]
 8012846:	441a      	add	r2, r3
 8012848:	2300      	movs	r3, #0
 801284a:	9300      	str	r3, [sp, #0]
 801284c:	2300      	movs	r3, #0
 801284e:	2100      	movs	r1, #0
 8012850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012852:	f7ff fe05 	bl	8012460 <xTimerGenericCommand>
 8012856:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012858:	6a3b      	ldr	r3, [r7, #32]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d14f      	bne.n	80128fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801285e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012862:	f383 8811 	msr	BASEPRI, r3
 8012866:	f3bf 8f6f 	isb	sy
 801286a:	f3bf 8f4f 	dsb	sy
 801286e:	61bb      	str	r3, [r7, #24]
}
 8012870:	bf00      	nop
 8012872:	e7fe      	b.n	8012872 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801287a:	f023 0301 	bic.w	r3, r3, #1
 801287e:	b2da      	uxtb	r2, r3
 8012880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012886:	e03a      	b.n	80128fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801288a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801288e:	f043 0301 	orr.w	r3, r3, #1
 8012892:	b2da      	uxtb	r2, r3
 8012894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012896:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801289a:	68ba      	ldr	r2, [r7, #8]
 801289c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801289e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80128a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128a2:	699b      	ldr	r3, [r3, #24]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d10a      	bne.n	80128be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80128a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128ac:	f383 8811 	msr	BASEPRI, r3
 80128b0:	f3bf 8f6f 	isb	sy
 80128b4:	f3bf 8f4f 	dsb	sy
 80128b8:	617b      	str	r3, [r7, #20]
}
 80128ba:	bf00      	nop
 80128bc:	e7fe      	b.n	80128bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80128be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128c0:	699a      	ldr	r2, [r3, #24]
 80128c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128c4:	18d1      	adds	r1, r2, r3
 80128c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128cc:	f7ff ff06 	bl	80126dc <prvInsertTimerInActiveList>
					break;
 80128d0:	e015      	b.n	80128fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80128d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80128d8:	f003 0302 	and.w	r3, r3, #2
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d103      	bne.n	80128e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80128e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128e2:	f000 fbdd 	bl	80130a0 <vPortFree>
 80128e6:	e00a      	b.n	80128fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80128e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80128ee:	f023 0301 	bic.w	r3, r3, #1
 80128f2:	b2da      	uxtb	r2, r3
 80128f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80128fa:	e000      	b.n	80128fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80128fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80128fe:	4b08      	ldr	r3, [pc, #32]	; (8012920 <prvProcessReceivedCommands+0x1c0>)
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	1d39      	adds	r1, r7, #4
 8012904:	2200      	movs	r2, #0
 8012906:	4618      	mov	r0, r3
 8012908:	f7fe f8c4 	bl	8010a94 <xQueueReceive>
 801290c:	4603      	mov	r3, r0
 801290e:	2b00      	cmp	r3, #0
 8012910:	f47f af2a 	bne.w	8012768 <prvProcessReceivedCommands+0x8>
	}
}
 8012914:	bf00      	nop
 8012916:	bf00      	nop
 8012918:	3730      	adds	r7, #48	; 0x30
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}
 801291e:	bf00      	nop
 8012920:	20000f78 	.word	0x20000f78

08012924 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b088      	sub	sp, #32
 8012928:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801292a:	e048      	b.n	80129be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801292c:	4b2d      	ldr	r3, [pc, #180]	; (80129e4 <prvSwitchTimerLists+0xc0>)
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	68db      	ldr	r3, [r3, #12]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012936:	4b2b      	ldr	r3, [pc, #172]	; (80129e4 <prvSwitchTimerLists+0xc0>)
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	68db      	ldr	r3, [r3, #12]
 801293c:	68db      	ldr	r3, [r3, #12]
 801293e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	3304      	adds	r3, #4
 8012944:	4618      	mov	r0, r3
 8012946:	f7fd fbf7 	bl	8010138 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	6a1b      	ldr	r3, [r3, #32]
 801294e:	68f8      	ldr	r0, [r7, #12]
 8012950:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012958:	f003 0304 	and.w	r3, r3, #4
 801295c:	2b00      	cmp	r3, #0
 801295e:	d02e      	beq.n	80129be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	699b      	ldr	r3, [r3, #24]
 8012964:	693a      	ldr	r2, [r7, #16]
 8012966:	4413      	add	r3, r2
 8012968:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801296a:	68ba      	ldr	r2, [r7, #8]
 801296c:	693b      	ldr	r3, [r7, #16]
 801296e:	429a      	cmp	r2, r3
 8012970:	d90e      	bls.n	8012990 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	68ba      	ldr	r2, [r7, #8]
 8012976:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	68fa      	ldr	r2, [r7, #12]
 801297c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801297e:	4b19      	ldr	r3, [pc, #100]	; (80129e4 <prvSwitchTimerLists+0xc0>)
 8012980:	681a      	ldr	r2, [r3, #0]
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	3304      	adds	r3, #4
 8012986:	4619      	mov	r1, r3
 8012988:	4610      	mov	r0, r2
 801298a:	f7fd fb9c 	bl	80100c6 <vListInsert>
 801298e:	e016      	b.n	80129be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012990:	2300      	movs	r3, #0
 8012992:	9300      	str	r3, [sp, #0]
 8012994:	2300      	movs	r3, #0
 8012996:	693a      	ldr	r2, [r7, #16]
 8012998:	2100      	movs	r1, #0
 801299a:	68f8      	ldr	r0, [r7, #12]
 801299c:	f7ff fd60 	bl	8012460 <xTimerGenericCommand>
 80129a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d10a      	bne.n	80129be <prvSwitchTimerLists+0x9a>
	__asm volatile
 80129a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ac:	f383 8811 	msr	BASEPRI, r3
 80129b0:	f3bf 8f6f 	isb	sy
 80129b4:	f3bf 8f4f 	dsb	sy
 80129b8:	603b      	str	r3, [r7, #0]
}
 80129ba:	bf00      	nop
 80129bc:	e7fe      	b.n	80129bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80129be:	4b09      	ldr	r3, [pc, #36]	; (80129e4 <prvSwitchTimerLists+0xc0>)
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d1b1      	bne.n	801292c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80129c8:	4b06      	ldr	r3, [pc, #24]	; (80129e4 <prvSwitchTimerLists+0xc0>)
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80129ce:	4b06      	ldr	r3, [pc, #24]	; (80129e8 <prvSwitchTimerLists+0xc4>)
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	4a04      	ldr	r2, [pc, #16]	; (80129e4 <prvSwitchTimerLists+0xc0>)
 80129d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80129d6:	4a04      	ldr	r2, [pc, #16]	; (80129e8 <prvSwitchTimerLists+0xc4>)
 80129d8:	697b      	ldr	r3, [r7, #20]
 80129da:	6013      	str	r3, [r2, #0]
}
 80129dc:	bf00      	nop
 80129de:	3718      	adds	r7, #24
 80129e0:	46bd      	mov	sp, r7
 80129e2:	bd80      	pop	{r7, pc}
 80129e4:	20000f70 	.word	0x20000f70
 80129e8:	20000f74 	.word	0x20000f74

080129ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80129ec:	b580      	push	{r7, lr}
 80129ee:	b082      	sub	sp, #8
 80129f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80129f2:	f000 f967 	bl	8012cc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80129f6:	4b15      	ldr	r3, [pc, #84]	; (8012a4c <prvCheckForValidListAndQueue+0x60>)
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d120      	bne.n	8012a40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80129fe:	4814      	ldr	r0, [pc, #80]	; (8012a50 <prvCheckForValidListAndQueue+0x64>)
 8012a00:	f7fd fb10 	bl	8010024 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012a04:	4813      	ldr	r0, [pc, #76]	; (8012a54 <prvCheckForValidListAndQueue+0x68>)
 8012a06:	f7fd fb0d 	bl	8010024 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012a0a:	4b13      	ldr	r3, [pc, #76]	; (8012a58 <prvCheckForValidListAndQueue+0x6c>)
 8012a0c:	4a10      	ldr	r2, [pc, #64]	; (8012a50 <prvCheckForValidListAndQueue+0x64>)
 8012a0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012a10:	4b12      	ldr	r3, [pc, #72]	; (8012a5c <prvCheckForValidListAndQueue+0x70>)
 8012a12:	4a10      	ldr	r2, [pc, #64]	; (8012a54 <prvCheckForValidListAndQueue+0x68>)
 8012a14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012a16:	2300      	movs	r3, #0
 8012a18:	9300      	str	r3, [sp, #0]
 8012a1a:	4b11      	ldr	r3, [pc, #68]	; (8012a60 <prvCheckForValidListAndQueue+0x74>)
 8012a1c:	4a11      	ldr	r2, [pc, #68]	; (8012a64 <prvCheckForValidListAndQueue+0x78>)
 8012a1e:	2110      	movs	r1, #16
 8012a20:	200a      	movs	r0, #10
 8012a22:	f7fd fc1b 	bl	801025c <xQueueGenericCreateStatic>
 8012a26:	4603      	mov	r3, r0
 8012a28:	4a08      	ldr	r2, [pc, #32]	; (8012a4c <prvCheckForValidListAndQueue+0x60>)
 8012a2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012a2c:	4b07      	ldr	r3, [pc, #28]	; (8012a4c <prvCheckForValidListAndQueue+0x60>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d005      	beq.n	8012a40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012a34:	4b05      	ldr	r3, [pc, #20]	; (8012a4c <prvCheckForValidListAndQueue+0x60>)
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	490b      	ldr	r1, [pc, #44]	; (8012a68 <prvCheckForValidListAndQueue+0x7c>)
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7fe fbe2 	bl	8011204 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012a40:	f000 f970 	bl	8012d24 <vPortExitCritical>
}
 8012a44:	bf00      	nop
 8012a46:	46bd      	mov	sp, r7
 8012a48:	bd80      	pop	{r7, pc}
 8012a4a:	bf00      	nop
 8012a4c:	20000f78 	.word	0x20000f78
 8012a50:	20000f48 	.word	0x20000f48
 8012a54:	20000f5c 	.word	0x20000f5c
 8012a58:	20000f70 	.word	0x20000f70
 8012a5c:	20000f74 	.word	0x20000f74
 8012a60:	20001024 	.word	0x20001024
 8012a64:	20000f84 	.word	0x20000f84
 8012a68:	08014898 	.word	0x08014898

08012a6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012a6c:	b480      	push	{r7}
 8012a6e:	b085      	sub	sp, #20
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	60f8      	str	r0, [r7, #12]
 8012a74:	60b9      	str	r1, [r7, #8]
 8012a76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	3b04      	subs	r3, #4
 8012a7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012a84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	3b04      	subs	r3, #4
 8012a8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012a8c:	68bb      	ldr	r3, [r7, #8]
 8012a8e:	f023 0201 	bic.w	r2, r3, #1
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	3b04      	subs	r3, #4
 8012a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012a9c:	4a0c      	ldr	r2, [pc, #48]	; (8012ad0 <pxPortInitialiseStack+0x64>)
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	3b14      	subs	r3, #20
 8012aa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012aa8:	687a      	ldr	r2, [r7, #4]
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	3b04      	subs	r3, #4
 8012ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	f06f 0202 	mvn.w	r2, #2
 8012aba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	3b20      	subs	r3, #32
 8012ac0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012ac2:	68fb      	ldr	r3, [r7, #12]
}
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	3714      	adds	r7, #20
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ace:	4770      	bx	lr
 8012ad0:	08012ad5 	.word	0x08012ad5

08012ad4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012ad4:	b480      	push	{r7}
 8012ad6:	b085      	sub	sp, #20
 8012ad8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012ada:	2300      	movs	r3, #0
 8012adc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012ade:	4b12      	ldr	r3, [pc, #72]	; (8012b28 <prvTaskExitError+0x54>)
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ae6:	d00a      	beq.n	8012afe <prvTaskExitError+0x2a>
	__asm volatile
 8012ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aec:	f383 8811 	msr	BASEPRI, r3
 8012af0:	f3bf 8f6f 	isb	sy
 8012af4:	f3bf 8f4f 	dsb	sy
 8012af8:	60fb      	str	r3, [r7, #12]
}
 8012afa:	bf00      	nop
 8012afc:	e7fe      	b.n	8012afc <prvTaskExitError+0x28>
	__asm volatile
 8012afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b02:	f383 8811 	msr	BASEPRI, r3
 8012b06:	f3bf 8f6f 	isb	sy
 8012b0a:	f3bf 8f4f 	dsb	sy
 8012b0e:	60bb      	str	r3, [r7, #8]
}
 8012b10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012b12:	bf00      	nop
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d0fc      	beq.n	8012b14 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012b1a:	bf00      	nop
 8012b1c:	bf00      	nop
 8012b1e:	3714      	adds	r7, #20
 8012b20:	46bd      	mov	sp, r7
 8012b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b26:	4770      	bx	lr
 8012b28:	20000124 	.word	0x20000124
 8012b2c:	00000000 	.word	0x00000000

08012b30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012b30:	4b07      	ldr	r3, [pc, #28]	; (8012b50 <pxCurrentTCBConst2>)
 8012b32:	6819      	ldr	r1, [r3, #0]
 8012b34:	6808      	ldr	r0, [r1, #0]
 8012b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b3a:	f380 8809 	msr	PSP, r0
 8012b3e:	f3bf 8f6f 	isb	sy
 8012b42:	f04f 0000 	mov.w	r0, #0
 8012b46:	f380 8811 	msr	BASEPRI, r0
 8012b4a:	4770      	bx	lr
 8012b4c:	f3af 8000 	nop.w

08012b50 <pxCurrentTCBConst2>:
 8012b50:	20000a48 	.word	0x20000a48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012b54:	bf00      	nop
 8012b56:	bf00      	nop

08012b58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012b58:	4808      	ldr	r0, [pc, #32]	; (8012b7c <prvPortStartFirstTask+0x24>)
 8012b5a:	6800      	ldr	r0, [r0, #0]
 8012b5c:	6800      	ldr	r0, [r0, #0]
 8012b5e:	f380 8808 	msr	MSP, r0
 8012b62:	f04f 0000 	mov.w	r0, #0
 8012b66:	f380 8814 	msr	CONTROL, r0
 8012b6a:	b662      	cpsie	i
 8012b6c:	b661      	cpsie	f
 8012b6e:	f3bf 8f4f 	dsb	sy
 8012b72:	f3bf 8f6f 	isb	sy
 8012b76:	df00      	svc	0
 8012b78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012b7a:	bf00      	nop
 8012b7c:	e000ed08 	.word	0xe000ed08

08012b80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b086      	sub	sp, #24
 8012b84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012b86:	4b46      	ldr	r3, [pc, #280]	; (8012ca0 <xPortStartScheduler+0x120>)
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	4a46      	ldr	r2, [pc, #280]	; (8012ca4 <xPortStartScheduler+0x124>)
 8012b8c:	4293      	cmp	r3, r2
 8012b8e:	d10a      	bne.n	8012ba6 <xPortStartScheduler+0x26>
	__asm volatile
 8012b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b94:	f383 8811 	msr	BASEPRI, r3
 8012b98:	f3bf 8f6f 	isb	sy
 8012b9c:	f3bf 8f4f 	dsb	sy
 8012ba0:	613b      	str	r3, [r7, #16]
}
 8012ba2:	bf00      	nop
 8012ba4:	e7fe      	b.n	8012ba4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012ba6:	4b3e      	ldr	r3, [pc, #248]	; (8012ca0 <xPortStartScheduler+0x120>)
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	4a3f      	ldr	r2, [pc, #252]	; (8012ca8 <xPortStartScheduler+0x128>)
 8012bac:	4293      	cmp	r3, r2
 8012bae:	d10a      	bne.n	8012bc6 <xPortStartScheduler+0x46>
	__asm volatile
 8012bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bb4:	f383 8811 	msr	BASEPRI, r3
 8012bb8:	f3bf 8f6f 	isb	sy
 8012bbc:	f3bf 8f4f 	dsb	sy
 8012bc0:	60fb      	str	r3, [r7, #12]
}
 8012bc2:	bf00      	nop
 8012bc4:	e7fe      	b.n	8012bc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012bc6:	4b39      	ldr	r3, [pc, #228]	; (8012cac <xPortStartScheduler+0x12c>)
 8012bc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012bca:	697b      	ldr	r3, [r7, #20]
 8012bcc:	781b      	ldrb	r3, [r3, #0]
 8012bce:	b2db      	uxtb	r3, r3
 8012bd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012bd2:	697b      	ldr	r3, [r7, #20]
 8012bd4:	22ff      	movs	r2, #255	; 0xff
 8012bd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012bd8:	697b      	ldr	r3, [r7, #20]
 8012bda:	781b      	ldrb	r3, [r3, #0]
 8012bdc:	b2db      	uxtb	r3, r3
 8012bde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012be0:	78fb      	ldrb	r3, [r7, #3]
 8012be2:	b2db      	uxtb	r3, r3
 8012be4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012be8:	b2da      	uxtb	r2, r3
 8012bea:	4b31      	ldr	r3, [pc, #196]	; (8012cb0 <xPortStartScheduler+0x130>)
 8012bec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012bee:	4b31      	ldr	r3, [pc, #196]	; (8012cb4 <xPortStartScheduler+0x134>)
 8012bf0:	2207      	movs	r2, #7
 8012bf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012bf4:	e009      	b.n	8012c0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012bf6:	4b2f      	ldr	r3, [pc, #188]	; (8012cb4 <xPortStartScheduler+0x134>)
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	3b01      	subs	r3, #1
 8012bfc:	4a2d      	ldr	r2, [pc, #180]	; (8012cb4 <xPortStartScheduler+0x134>)
 8012bfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012c00:	78fb      	ldrb	r3, [r7, #3]
 8012c02:	b2db      	uxtb	r3, r3
 8012c04:	005b      	lsls	r3, r3, #1
 8012c06:	b2db      	uxtb	r3, r3
 8012c08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012c0a:	78fb      	ldrb	r3, [r7, #3]
 8012c0c:	b2db      	uxtb	r3, r3
 8012c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c12:	2b80      	cmp	r3, #128	; 0x80
 8012c14:	d0ef      	beq.n	8012bf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012c16:	4b27      	ldr	r3, [pc, #156]	; (8012cb4 <xPortStartScheduler+0x134>)
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	f1c3 0307 	rsb	r3, r3, #7
 8012c1e:	2b04      	cmp	r3, #4
 8012c20:	d00a      	beq.n	8012c38 <xPortStartScheduler+0xb8>
	__asm volatile
 8012c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c26:	f383 8811 	msr	BASEPRI, r3
 8012c2a:	f3bf 8f6f 	isb	sy
 8012c2e:	f3bf 8f4f 	dsb	sy
 8012c32:	60bb      	str	r3, [r7, #8]
}
 8012c34:	bf00      	nop
 8012c36:	e7fe      	b.n	8012c36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012c38:	4b1e      	ldr	r3, [pc, #120]	; (8012cb4 <xPortStartScheduler+0x134>)
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	021b      	lsls	r3, r3, #8
 8012c3e:	4a1d      	ldr	r2, [pc, #116]	; (8012cb4 <xPortStartScheduler+0x134>)
 8012c40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012c42:	4b1c      	ldr	r3, [pc, #112]	; (8012cb4 <xPortStartScheduler+0x134>)
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012c4a:	4a1a      	ldr	r2, [pc, #104]	; (8012cb4 <xPortStartScheduler+0x134>)
 8012c4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	b2da      	uxtb	r2, r3
 8012c52:	697b      	ldr	r3, [r7, #20]
 8012c54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012c56:	4b18      	ldr	r3, [pc, #96]	; (8012cb8 <xPortStartScheduler+0x138>)
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	4a17      	ldr	r2, [pc, #92]	; (8012cb8 <xPortStartScheduler+0x138>)
 8012c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012c60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012c62:	4b15      	ldr	r3, [pc, #84]	; (8012cb8 <xPortStartScheduler+0x138>)
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	4a14      	ldr	r2, [pc, #80]	; (8012cb8 <xPortStartScheduler+0x138>)
 8012c68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012c6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012c6e:	f000 f8dd 	bl	8012e2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012c72:	4b12      	ldr	r3, [pc, #72]	; (8012cbc <xPortStartScheduler+0x13c>)
 8012c74:	2200      	movs	r2, #0
 8012c76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012c78:	f000 f8fc 	bl	8012e74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012c7c:	4b10      	ldr	r3, [pc, #64]	; (8012cc0 <xPortStartScheduler+0x140>)
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	4a0f      	ldr	r2, [pc, #60]	; (8012cc0 <xPortStartScheduler+0x140>)
 8012c82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012c86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012c88:	f7ff ff66 	bl	8012b58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012c8c:	f7fe fef8 	bl	8011a80 <vTaskSwitchContext>
	prvTaskExitError();
 8012c90:	f7ff ff20 	bl	8012ad4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012c94:	2300      	movs	r3, #0
}
 8012c96:	4618      	mov	r0, r3
 8012c98:	3718      	adds	r7, #24
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	bd80      	pop	{r7, pc}
 8012c9e:	bf00      	nop
 8012ca0:	e000ed00 	.word	0xe000ed00
 8012ca4:	410fc271 	.word	0x410fc271
 8012ca8:	410fc270 	.word	0x410fc270
 8012cac:	e000e400 	.word	0xe000e400
 8012cb0:	20001074 	.word	0x20001074
 8012cb4:	20001078 	.word	0x20001078
 8012cb8:	e000ed20 	.word	0xe000ed20
 8012cbc:	20000124 	.word	0x20000124
 8012cc0:	e000ef34 	.word	0xe000ef34

08012cc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012cc4:	b480      	push	{r7}
 8012cc6:	b083      	sub	sp, #12
 8012cc8:	af00      	add	r7, sp, #0
	__asm volatile
 8012cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cce:	f383 8811 	msr	BASEPRI, r3
 8012cd2:	f3bf 8f6f 	isb	sy
 8012cd6:	f3bf 8f4f 	dsb	sy
 8012cda:	607b      	str	r3, [r7, #4]
}
 8012cdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012cde:	4b0f      	ldr	r3, [pc, #60]	; (8012d1c <vPortEnterCritical+0x58>)
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	3301      	adds	r3, #1
 8012ce4:	4a0d      	ldr	r2, [pc, #52]	; (8012d1c <vPortEnterCritical+0x58>)
 8012ce6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012ce8:	4b0c      	ldr	r3, [pc, #48]	; (8012d1c <vPortEnterCritical+0x58>)
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	2b01      	cmp	r3, #1
 8012cee:	d10f      	bne.n	8012d10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012cf0:	4b0b      	ldr	r3, [pc, #44]	; (8012d20 <vPortEnterCritical+0x5c>)
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	b2db      	uxtb	r3, r3
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d00a      	beq.n	8012d10 <vPortEnterCritical+0x4c>
	__asm volatile
 8012cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cfe:	f383 8811 	msr	BASEPRI, r3
 8012d02:	f3bf 8f6f 	isb	sy
 8012d06:	f3bf 8f4f 	dsb	sy
 8012d0a:	603b      	str	r3, [r7, #0]
}
 8012d0c:	bf00      	nop
 8012d0e:	e7fe      	b.n	8012d0e <vPortEnterCritical+0x4a>
	}
}
 8012d10:	bf00      	nop
 8012d12:	370c      	adds	r7, #12
 8012d14:	46bd      	mov	sp, r7
 8012d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1a:	4770      	bx	lr
 8012d1c:	20000124 	.word	0x20000124
 8012d20:	e000ed04 	.word	0xe000ed04

08012d24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012d24:	b480      	push	{r7}
 8012d26:	b083      	sub	sp, #12
 8012d28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012d2a:	4b12      	ldr	r3, [pc, #72]	; (8012d74 <vPortExitCritical+0x50>)
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d10a      	bne.n	8012d48 <vPortExitCritical+0x24>
	__asm volatile
 8012d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d36:	f383 8811 	msr	BASEPRI, r3
 8012d3a:	f3bf 8f6f 	isb	sy
 8012d3e:	f3bf 8f4f 	dsb	sy
 8012d42:	607b      	str	r3, [r7, #4]
}
 8012d44:	bf00      	nop
 8012d46:	e7fe      	b.n	8012d46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012d48:	4b0a      	ldr	r3, [pc, #40]	; (8012d74 <vPortExitCritical+0x50>)
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	3b01      	subs	r3, #1
 8012d4e:	4a09      	ldr	r2, [pc, #36]	; (8012d74 <vPortExitCritical+0x50>)
 8012d50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012d52:	4b08      	ldr	r3, [pc, #32]	; (8012d74 <vPortExitCritical+0x50>)
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d105      	bne.n	8012d66 <vPortExitCritical+0x42>
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012d5e:	683b      	ldr	r3, [r7, #0]
 8012d60:	f383 8811 	msr	BASEPRI, r3
}
 8012d64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012d66:	bf00      	nop
 8012d68:	370c      	adds	r7, #12
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d70:	4770      	bx	lr
 8012d72:	bf00      	nop
 8012d74:	20000124 	.word	0x20000124
	...

08012d80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012d80:	f3ef 8009 	mrs	r0, PSP
 8012d84:	f3bf 8f6f 	isb	sy
 8012d88:	4b15      	ldr	r3, [pc, #84]	; (8012de0 <pxCurrentTCBConst>)
 8012d8a:	681a      	ldr	r2, [r3, #0]
 8012d8c:	f01e 0f10 	tst.w	lr, #16
 8012d90:	bf08      	it	eq
 8012d92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012d96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d9a:	6010      	str	r0, [r2, #0]
 8012d9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012da0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012da4:	f380 8811 	msr	BASEPRI, r0
 8012da8:	f3bf 8f4f 	dsb	sy
 8012dac:	f3bf 8f6f 	isb	sy
 8012db0:	f7fe fe66 	bl	8011a80 <vTaskSwitchContext>
 8012db4:	f04f 0000 	mov.w	r0, #0
 8012db8:	f380 8811 	msr	BASEPRI, r0
 8012dbc:	bc09      	pop	{r0, r3}
 8012dbe:	6819      	ldr	r1, [r3, #0]
 8012dc0:	6808      	ldr	r0, [r1, #0]
 8012dc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dc6:	f01e 0f10 	tst.w	lr, #16
 8012dca:	bf08      	it	eq
 8012dcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012dd0:	f380 8809 	msr	PSP, r0
 8012dd4:	f3bf 8f6f 	isb	sy
 8012dd8:	4770      	bx	lr
 8012dda:	bf00      	nop
 8012ddc:	f3af 8000 	nop.w

08012de0 <pxCurrentTCBConst>:
 8012de0:	20000a48 	.word	0x20000a48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012de4:	bf00      	nop
 8012de6:	bf00      	nop

08012de8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b082      	sub	sp, #8
 8012dec:	af00      	add	r7, sp, #0
	__asm volatile
 8012dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012df2:	f383 8811 	msr	BASEPRI, r3
 8012df6:	f3bf 8f6f 	isb	sy
 8012dfa:	f3bf 8f4f 	dsb	sy
 8012dfe:	607b      	str	r3, [r7, #4]
}
 8012e00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012e02:	f7fe fd83 	bl	801190c <xTaskIncrementTick>
 8012e06:	4603      	mov	r3, r0
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d003      	beq.n	8012e14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012e0c:	4b06      	ldr	r3, [pc, #24]	; (8012e28 <xPortSysTickHandler+0x40>)
 8012e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e12:	601a      	str	r2, [r3, #0]
 8012e14:	2300      	movs	r3, #0
 8012e16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012e18:	683b      	ldr	r3, [r7, #0]
 8012e1a:	f383 8811 	msr	BASEPRI, r3
}
 8012e1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012e20:	bf00      	nop
 8012e22:	3708      	adds	r7, #8
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}
 8012e28:	e000ed04 	.word	0xe000ed04

08012e2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012e2c:	b480      	push	{r7}
 8012e2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012e30:	4b0b      	ldr	r3, [pc, #44]	; (8012e60 <vPortSetupTimerInterrupt+0x34>)
 8012e32:	2200      	movs	r2, #0
 8012e34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012e36:	4b0b      	ldr	r3, [pc, #44]	; (8012e64 <vPortSetupTimerInterrupt+0x38>)
 8012e38:	2200      	movs	r2, #0
 8012e3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012e3c:	4b0a      	ldr	r3, [pc, #40]	; (8012e68 <vPortSetupTimerInterrupt+0x3c>)
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	4a0a      	ldr	r2, [pc, #40]	; (8012e6c <vPortSetupTimerInterrupt+0x40>)
 8012e42:	fba2 2303 	umull	r2, r3, r2, r3
 8012e46:	099b      	lsrs	r3, r3, #6
 8012e48:	4a09      	ldr	r2, [pc, #36]	; (8012e70 <vPortSetupTimerInterrupt+0x44>)
 8012e4a:	3b01      	subs	r3, #1
 8012e4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012e4e:	4b04      	ldr	r3, [pc, #16]	; (8012e60 <vPortSetupTimerInterrupt+0x34>)
 8012e50:	2207      	movs	r2, #7
 8012e52:	601a      	str	r2, [r3, #0]
}
 8012e54:	bf00      	nop
 8012e56:	46bd      	mov	sp, r7
 8012e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5c:	4770      	bx	lr
 8012e5e:	bf00      	nop
 8012e60:	e000e010 	.word	0xe000e010
 8012e64:	e000e018 	.word	0xe000e018
 8012e68:	20000008 	.word	0x20000008
 8012e6c:	10624dd3 	.word	0x10624dd3
 8012e70:	e000e014 	.word	0xe000e014

08012e74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012e74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012e84 <vPortEnableVFP+0x10>
 8012e78:	6801      	ldr	r1, [r0, #0]
 8012e7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012e7e:	6001      	str	r1, [r0, #0]
 8012e80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012e82:	bf00      	nop
 8012e84:	e000ed88 	.word	0xe000ed88

08012e88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012e88:	b480      	push	{r7}
 8012e8a:	b085      	sub	sp, #20
 8012e8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012e8e:	f3ef 8305 	mrs	r3, IPSR
 8012e92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	2b0f      	cmp	r3, #15
 8012e98:	d914      	bls.n	8012ec4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012e9a:	4a17      	ldr	r2, [pc, #92]	; (8012ef8 <vPortValidateInterruptPriority+0x70>)
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	4413      	add	r3, r2
 8012ea0:	781b      	ldrb	r3, [r3, #0]
 8012ea2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012ea4:	4b15      	ldr	r3, [pc, #84]	; (8012efc <vPortValidateInterruptPriority+0x74>)
 8012ea6:	781b      	ldrb	r3, [r3, #0]
 8012ea8:	7afa      	ldrb	r2, [r7, #11]
 8012eaa:	429a      	cmp	r2, r3
 8012eac:	d20a      	bcs.n	8012ec4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eb2:	f383 8811 	msr	BASEPRI, r3
 8012eb6:	f3bf 8f6f 	isb	sy
 8012eba:	f3bf 8f4f 	dsb	sy
 8012ebe:	607b      	str	r3, [r7, #4]
}
 8012ec0:	bf00      	nop
 8012ec2:	e7fe      	b.n	8012ec2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012ec4:	4b0e      	ldr	r3, [pc, #56]	; (8012f00 <vPortValidateInterruptPriority+0x78>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012ecc:	4b0d      	ldr	r3, [pc, #52]	; (8012f04 <vPortValidateInterruptPriority+0x7c>)
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	429a      	cmp	r2, r3
 8012ed2:	d90a      	bls.n	8012eea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ed8:	f383 8811 	msr	BASEPRI, r3
 8012edc:	f3bf 8f6f 	isb	sy
 8012ee0:	f3bf 8f4f 	dsb	sy
 8012ee4:	603b      	str	r3, [r7, #0]
}
 8012ee6:	bf00      	nop
 8012ee8:	e7fe      	b.n	8012ee8 <vPortValidateInterruptPriority+0x60>
	}
 8012eea:	bf00      	nop
 8012eec:	3714      	adds	r7, #20
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef4:	4770      	bx	lr
 8012ef6:	bf00      	nop
 8012ef8:	e000e3f0 	.word	0xe000e3f0
 8012efc:	20001074 	.word	0x20001074
 8012f00:	e000ed0c 	.word	0xe000ed0c
 8012f04:	20001078 	.word	0x20001078

08012f08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	b08a      	sub	sp, #40	; 0x28
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012f10:	2300      	movs	r3, #0
 8012f12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012f14:	f7fe fc3e 	bl	8011794 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012f18:	4b5b      	ldr	r3, [pc, #364]	; (8013088 <pvPortMalloc+0x180>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d101      	bne.n	8012f24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012f20:	f000 f920 	bl	8013164 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012f24:	4b59      	ldr	r3, [pc, #356]	; (801308c <pvPortMalloc+0x184>)
 8012f26:	681a      	ldr	r2, [r3, #0]
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	4013      	ands	r3, r2
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	f040 8093 	bne.w	8013058 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d01d      	beq.n	8012f74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012f38:	2208      	movs	r2, #8
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	4413      	add	r3, r2
 8012f3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	f003 0307 	and.w	r3, r3, #7
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d014      	beq.n	8012f74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	f023 0307 	bic.w	r3, r3, #7
 8012f50:	3308      	adds	r3, #8
 8012f52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	f003 0307 	and.w	r3, r3, #7
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d00a      	beq.n	8012f74 <pvPortMalloc+0x6c>
	__asm volatile
 8012f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f62:	f383 8811 	msr	BASEPRI, r3
 8012f66:	f3bf 8f6f 	isb	sy
 8012f6a:	f3bf 8f4f 	dsb	sy
 8012f6e:	617b      	str	r3, [r7, #20]
}
 8012f70:	bf00      	nop
 8012f72:	e7fe      	b.n	8012f72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d06e      	beq.n	8013058 <pvPortMalloc+0x150>
 8012f7a:	4b45      	ldr	r3, [pc, #276]	; (8013090 <pvPortMalloc+0x188>)
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	687a      	ldr	r2, [r7, #4]
 8012f80:	429a      	cmp	r2, r3
 8012f82:	d869      	bhi.n	8013058 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012f84:	4b43      	ldr	r3, [pc, #268]	; (8013094 <pvPortMalloc+0x18c>)
 8012f86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012f88:	4b42      	ldr	r3, [pc, #264]	; (8013094 <pvPortMalloc+0x18c>)
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012f8e:	e004      	b.n	8012f9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f9c:	685b      	ldr	r3, [r3, #4]
 8012f9e:	687a      	ldr	r2, [r7, #4]
 8012fa0:	429a      	cmp	r2, r3
 8012fa2:	d903      	bls.n	8012fac <pvPortMalloc+0xa4>
 8012fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d1f1      	bne.n	8012f90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012fac:	4b36      	ldr	r3, [pc, #216]	; (8013088 <pvPortMalloc+0x180>)
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fb2:	429a      	cmp	r2, r3
 8012fb4:	d050      	beq.n	8013058 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012fb6:	6a3b      	ldr	r3, [r7, #32]
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	2208      	movs	r2, #8
 8012fbc:	4413      	add	r3, r2
 8012fbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fc2:	681a      	ldr	r2, [r3, #0]
 8012fc4:	6a3b      	ldr	r3, [r7, #32]
 8012fc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fca:	685a      	ldr	r2, [r3, #4]
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	1ad2      	subs	r2, r2, r3
 8012fd0:	2308      	movs	r3, #8
 8012fd2:	005b      	lsls	r3, r3, #1
 8012fd4:	429a      	cmp	r2, r3
 8012fd6:	d91f      	bls.n	8013018 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	4413      	add	r3, r2
 8012fde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012fe0:	69bb      	ldr	r3, [r7, #24]
 8012fe2:	f003 0307 	and.w	r3, r3, #7
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d00a      	beq.n	8013000 <pvPortMalloc+0xf8>
	__asm volatile
 8012fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fee:	f383 8811 	msr	BASEPRI, r3
 8012ff2:	f3bf 8f6f 	isb	sy
 8012ff6:	f3bf 8f4f 	dsb	sy
 8012ffa:	613b      	str	r3, [r7, #16]
}
 8012ffc:	bf00      	nop
 8012ffe:	e7fe      	b.n	8012ffe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013002:	685a      	ldr	r2, [r3, #4]
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	1ad2      	subs	r2, r2, r3
 8013008:	69bb      	ldr	r3, [r7, #24]
 801300a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801300e:	687a      	ldr	r2, [r7, #4]
 8013010:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013012:	69b8      	ldr	r0, [r7, #24]
 8013014:	f000 f908 	bl	8013228 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013018:	4b1d      	ldr	r3, [pc, #116]	; (8013090 <pvPortMalloc+0x188>)
 801301a:	681a      	ldr	r2, [r3, #0]
 801301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801301e:	685b      	ldr	r3, [r3, #4]
 8013020:	1ad3      	subs	r3, r2, r3
 8013022:	4a1b      	ldr	r2, [pc, #108]	; (8013090 <pvPortMalloc+0x188>)
 8013024:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013026:	4b1a      	ldr	r3, [pc, #104]	; (8013090 <pvPortMalloc+0x188>)
 8013028:	681a      	ldr	r2, [r3, #0]
 801302a:	4b1b      	ldr	r3, [pc, #108]	; (8013098 <pvPortMalloc+0x190>)
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	429a      	cmp	r2, r3
 8013030:	d203      	bcs.n	801303a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013032:	4b17      	ldr	r3, [pc, #92]	; (8013090 <pvPortMalloc+0x188>)
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	4a18      	ldr	r2, [pc, #96]	; (8013098 <pvPortMalloc+0x190>)
 8013038:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801303c:	685a      	ldr	r2, [r3, #4]
 801303e:	4b13      	ldr	r3, [pc, #76]	; (801308c <pvPortMalloc+0x184>)
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	431a      	orrs	r2, r3
 8013044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013046:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801304a:	2200      	movs	r2, #0
 801304c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801304e:	4b13      	ldr	r3, [pc, #76]	; (801309c <pvPortMalloc+0x194>)
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	3301      	adds	r3, #1
 8013054:	4a11      	ldr	r2, [pc, #68]	; (801309c <pvPortMalloc+0x194>)
 8013056:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013058:	f7fe fbaa 	bl	80117b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801305c:	69fb      	ldr	r3, [r7, #28]
 801305e:	f003 0307 	and.w	r3, r3, #7
 8013062:	2b00      	cmp	r3, #0
 8013064:	d00a      	beq.n	801307c <pvPortMalloc+0x174>
	__asm volatile
 8013066:	f04f 0350 	mov.w	r3, #80	; 0x50
 801306a:	f383 8811 	msr	BASEPRI, r3
 801306e:	f3bf 8f6f 	isb	sy
 8013072:	f3bf 8f4f 	dsb	sy
 8013076:	60fb      	str	r3, [r7, #12]
}
 8013078:	bf00      	nop
 801307a:	e7fe      	b.n	801307a <pvPortMalloc+0x172>
	return pvReturn;
 801307c:	69fb      	ldr	r3, [r7, #28]
}
 801307e:	4618      	mov	r0, r3
 8013080:	3728      	adds	r7, #40	; 0x28
 8013082:	46bd      	mov	sp, r7
 8013084:	bd80      	pop	{r7, pc}
 8013086:	bf00      	nop
 8013088:	20004c84 	.word	0x20004c84
 801308c:	20004c98 	.word	0x20004c98
 8013090:	20004c88 	.word	0x20004c88
 8013094:	20004c7c 	.word	0x20004c7c
 8013098:	20004c8c 	.word	0x20004c8c
 801309c:	20004c90 	.word	0x20004c90

080130a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b086      	sub	sp, #24
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d04d      	beq.n	801314e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80130b2:	2308      	movs	r3, #8
 80130b4:	425b      	negs	r3, r3
 80130b6:	697a      	ldr	r2, [r7, #20]
 80130b8:	4413      	add	r3, r2
 80130ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80130bc:	697b      	ldr	r3, [r7, #20]
 80130be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80130c0:	693b      	ldr	r3, [r7, #16]
 80130c2:	685a      	ldr	r2, [r3, #4]
 80130c4:	4b24      	ldr	r3, [pc, #144]	; (8013158 <vPortFree+0xb8>)
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	4013      	ands	r3, r2
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d10a      	bne.n	80130e4 <vPortFree+0x44>
	__asm volatile
 80130ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130d2:	f383 8811 	msr	BASEPRI, r3
 80130d6:	f3bf 8f6f 	isb	sy
 80130da:	f3bf 8f4f 	dsb	sy
 80130de:	60fb      	str	r3, [r7, #12]
}
 80130e0:	bf00      	nop
 80130e2:	e7fe      	b.n	80130e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80130e4:	693b      	ldr	r3, [r7, #16]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d00a      	beq.n	8013102 <vPortFree+0x62>
	__asm volatile
 80130ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130f0:	f383 8811 	msr	BASEPRI, r3
 80130f4:	f3bf 8f6f 	isb	sy
 80130f8:	f3bf 8f4f 	dsb	sy
 80130fc:	60bb      	str	r3, [r7, #8]
}
 80130fe:	bf00      	nop
 8013100:	e7fe      	b.n	8013100 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013102:	693b      	ldr	r3, [r7, #16]
 8013104:	685a      	ldr	r2, [r3, #4]
 8013106:	4b14      	ldr	r3, [pc, #80]	; (8013158 <vPortFree+0xb8>)
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	4013      	ands	r3, r2
 801310c:	2b00      	cmp	r3, #0
 801310e:	d01e      	beq.n	801314e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013110:	693b      	ldr	r3, [r7, #16]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d11a      	bne.n	801314e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013118:	693b      	ldr	r3, [r7, #16]
 801311a:	685a      	ldr	r2, [r3, #4]
 801311c:	4b0e      	ldr	r3, [pc, #56]	; (8013158 <vPortFree+0xb8>)
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	43db      	mvns	r3, r3
 8013122:	401a      	ands	r2, r3
 8013124:	693b      	ldr	r3, [r7, #16]
 8013126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013128:	f7fe fb34 	bl	8011794 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801312c:	693b      	ldr	r3, [r7, #16]
 801312e:	685a      	ldr	r2, [r3, #4]
 8013130:	4b0a      	ldr	r3, [pc, #40]	; (801315c <vPortFree+0xbc>)
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	4413      	add	r3, r2
 8013136:	4a09      	ldr	r2, [pc, #36]	; (801315c <vPortFree+0xbc>)
 8013138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801313a:	6938      	ldr	r0, [r7, #16]
 801313c:	f000 f874 	bl	8013228 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013140:	4b07      	ldr	r3, [pc, #28]	; (8013160 <vPortFree+0xc0>)
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	3301      	adds	r3, #1
 8013146:	4a06      	ldr	r2, [pc, #24]	; (8013160 <vPortFree+0xc0>)
 8013148:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801314a:	f7fe fb31 	bl	80117b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801314e:	bf00      	nop
 8013150:	3718      	adds	r7, #24
 8013152:	46bd      	mov	sp, r7
 8013154:	bd80      	pop	{r7, pc}
 8013156:	bf00      	nop
 8013158:	20004c98 	.word	0x20004c98
 801315c:	20004c88 	.word	0x20004c88
 8013160:	20004c94 	.word	0x20004c94

08013164 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013164:	b480      	push	{r7}
 8013166:	b085      	sub	sp, #20
 8013168:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801316a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801316e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013170:	4b27      	ldr	r3, [pc, #156]	; (8013210 <prvHeapInit+0xac>)
 8013172:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	f003 0307 	and.w	r3, r3, #7
 801317a:	2b00      	cmp	r3, #0
 801317c:	d00c      	beq.n	8013198 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	3307      	adds	r3, #7
 8013182:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	f023 0307 	bic.w	r3, r3, #7
 801318a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801318c:	68ba      	ldr	r2, [r7, #8]
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	1ad3      	subs	r3, r2, r3
 8013192:	4a1f      	ldr	r2, [pc, #124]	; (8013210 <prvHeapInit+0xac>)
 8013194:	4413      	add	r3, r2
 8013196:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801319c:	4a1d      	ldr	r2, [pc, #116]	; (8013214 <prvHeapInit+0xb0>)
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80131a2:	4b1c      	ldr	r3, [pc, #112]	; (8013214 <prvHeapInit+0xb0>)
 80131a4:	2200      	movs	r2, #0
 80131a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	68ba      	ldr	r2, [r7, #8]
 80131ac:	4413      	add	r3, r2
 80131ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80131b0:	2208      	movs	r2, #8
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	1a9b      	subs	r3, r3, r2
 80131b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	f023 0307 	bic.w	r3, r3, #7
 80131be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	4a15      	ldr	r2, [pc, #84]	; (8013218 <prvHeapInit+0xb4>)
 80131c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80131c6:	4b14      	ldr	r3, [pc, #80]	; (8013218 <prvHeapInit+0xb4>)
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	2200      	movs	r2, #0
 80131cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80131ce:	4b12      	ldr	r3, [pc, #72]	; (8013218 <prvHeapInit+0xb4>)
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	2200      	movs	r2, #0
 80131d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80131da:	683b      	ldr	r3, [r7, #0]
 80131dc:	68fa      	ldr	r2, [r7, #12]
 80131de:	1ad2      	subs	r2, r2, r3
 80131e0:	683b      	ldr	r3, [r7, #0]
 80131e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80131e4:	4b0c      	ldr	r3, [pc, #48]	; (8013218 <prvHeapInit+0xb4>)
 80131e6:	681a      	ldr	r2, [r3, #0]
 80131e8:	683b      	ldr	r3, [r7, #0]
 80131ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80131ec:	683b      	ldr	r3, [r7, #0]
 80131ee:	685b      	ldr	r3, [r3, #4]
 80131f0:	4a0a      	ldr	r2, [pc, #40]	; (801321c <prvHeapInit+0xb8>)
 80131f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80131f4:	683b      	ldr	r3, [r7, #0]
 80131f6:	685b      	ldr	r3, [r3, #4]
 80131f8:	4a09      	ldr	r2, [pc, #36]	; (8013220 <prvHeapInit+0xbc>)
 80131fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80131fc:	4b09      	ldr	r3, [pc, #36]	; (8013224 <prvHeapInit+0xc0>)
 80131fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013202:	601a      	str	r2, [r3, #0]
}
 8013204:	bf00      	nop
 8013206:	3714      	adds	r7, #20
 8013208:	46bd      	mov	sp, r7
 801320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801320e:	4770      	bx	lr
 8013210:	2000107c 	.word	0x2000107c
 8013214:	20004c7c 	.word	0x20004c7c
 8013218:	20004c84 	.word	0x20004c84
 801321c:	20004c8c 	.word	0x20004c8c
 8013220:	20004c88 	.word	0x20004c88
 8013224:	20004c98 	.word	0x20004c98

08013228 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013228:	b480      	push	{r7}
 801322a:	b085      	sub	sp, #20
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013230:	4b28      	ldr	r3, [pc, #160]	; (80132d4 <prvInsertBlockIntoFreeList+0xac>)
 8013232:	60fb      	str	r3, [r7, #12]
 8013234:	e002      	b.n	801323c <prvInsertBlockIntoFreeList+0x14>
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	60fb      	str	r3, [r7, #12]
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	687a      	ldr	r2, [r7, #4]
 8013242:	429a      	cmp	r2, r3
 8013244:	d8f7      	bhi.n	8013236 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	685b      	ldr	r3, [r3, #4]
 801324e:	68ba      	ldr	r2, [r7, #8]
 8013250:	4413      	add	r3, r2
 8013252:	687a      	ldr	r2, [r7, #4]
 8013254:	429a      	cmp	r2, r3
 8013256:	d108      	bne.n	801326a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	685a      	ldr	r2, [r3, #4]
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	685b      	ldr	r3, [r3, #4]
 8013260:	441a      	add	r2, r3
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	685b      	ldr	r3, [r3, #4]
 8013272:	68ba      	ldr	r2, [r7, #8]
 8013274:	441a      	add	r2, r3
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	429a      	cmp	r2, r3
 801327c:	d118      	bne.n	80132b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	681a      	ldr	r2, [r3, #0]
 8013282:	4b15      	ldr	r3, [pc, #84]	; (80132d8 <prvInsertBlockIntoFreeList+0xb0>)
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	429a      	cmp	r2, r3
 8013288:	d00d      	beq.n	80132a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	685a      	ldr	r2, [r3, #4]
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	685b      	ldr	r3, [r3, #4]
 8013294:	441a      	add	r2, r3
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	681a      	ldr	r2, [r3, #0]
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	601a      	str	r2, [r3, #0]
 80132a4:	e008      	b.n	80132b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80132a6:	4b0c      	ldr	r3, [pc, #48]	; (80132d8 <prvInsertBlockIntoFreeList+0xb0>)
 80132a8:	681a      	ldr	r2, [r3, #0]
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	601a      	str	r2, [r3, #0]
 80132ae:	e003      	b.n	80132b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	681a      	ldr	r2, [r3, #0]
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80132b8:	68fa      	ldr	r2, [r7, #12]
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	429a      	cmp	r2, r3
 80132be:	d002      	beq.n	80132c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	687a      	ldr	r2, [r7, #4]
 80132c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80132c6:	bf00      	nop
 80132c8:	3714      	adds	r7, #20
 80132ca:	46bd      	mov	sp, r7
 80132cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d0:	4770      	bx	lr
 80132d2:	bf00      	nop
 80132d4:	20004c7c 	.word	0x20004c7c
 80132d8:	20004c84 	.word	0x20004c84

080132dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80132e0:	2200      	movs	r2, #0
 80132e2:	4912      	ldr	r1, [pc, #72]	; (801332c <MX_USB_DEVICE_Init+0x50>)
 80132e4:	4812      	ldr	r0, [pc, #72]	; (8013330 <MX_USB_DEVICE_Init+0x54>)
 80132e6:	f7fb f997 	bl	800e618 <USBD_Init>
 80132ea:	4603      	mov	r3, r0
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d001      	beq.n	80132f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80132f0:	f7f2 fc9c 	bl	8005c2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80132f4:	490f      	ldr	r1, [pc, #60]	; (8013334 <MX_USB_DEVICE_Init+0x58>)
 80132f6:	480e      	ldr	r0, [pc, #56]	; (8013330 <MX_USB_DEVICE_Init+0x54>)
 80132f8:	f7fb f9be 	bl	800e678 <USBD_RegisterClass>
 80132fc:	4603      	mov	r3, r0
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d001      	beq.n	8013306 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013302:	f7f2 fc93 	bl	8005c2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8013306:	490c      	ldr	r1, [pc, #48]	; (8013338 <MX_USB_DEVICE_Init+0x5c>)
 8013308:	4809      	ldr	r0, [pc, #36]	; (8013330 <MX_USB_DEVICE_Init+0x54>)
 801330a:	f7fb f90f 	bl	800e52c <USBD_CDC_RegisterInterface>
 801330e:	4603      	mov	r3, r0
 8013310:	2b00      	cmp	r3, #0
 8013312:	d001      	beq.n	8013318 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013314:	f7f2 fc8a 	bl	8005c2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013318:	4805      	ldr	r0, [pc, #20]	; (8013330 <MX_USB_DEVICE_Init+0x54>)
 801331a:	f7fb f9d4 	bl	800e6c6 <USBD_Start>
 801331e:	4603      	mov	r3, r0
 8013320:	2b00      	cmp	r3, #0
 8013322:	d001      	beq.n	8013328 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013324:	f7f2 fc82 	bl	8005c2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013328:	bf00      	nop
 801332a:	bd80      	pop	{r7, pc}
 801332c:	20000144 	.word	0x20000144
 8013330:	20005c30 	.word	0x20005c30
 8013334:	20000020 	.word	0x20000020
 8013338:	20000130 	.word	0x20000130

0801333c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013340:	2200      	movs	r2, #0
 8013342:	4905      	ldr	r1, [pc, #20]	; (8013358 <CDC_Init_FS+0x1c>)
 8013344:	4805      	ldr	r0, [pc, #20]	; (801335c <CDC_Init_FS+0x20>)
 8013346:	f7fb f906 	bl	800e556 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801334a:	4905      	ldr	r1, [pc, #20]	; (8013360 <CDC_Init_FS+0x24>)
 801334c:	4803      	ldr	r0, [pc, #12]	; (801335c <CDC_Init_FS+0x20>)
 801334e:	f7fb f920 	bl	800e592 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8013352:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013354:	4618      	mov	r0, r3
 8013356:	bd80      	pop	{r7, pc}
 8013358:	20006700 	.word	0x20006700
 801335c:	20005c30 	.word	0x20005c30
 8013360:	20005f00 	.word	0x20005f00

08013364 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013364:	b480      	push	{r7}
 8013366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8013368:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801336a:	4618      	mov	r0, r3
 801336c:	46bd      	mov	sp, r7
 801336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013372:	4770      	bx	lr

08013374 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013374:	b480      	push	{r7}
 8013376:	b083      	sub	sp, #12
 8013378:	af00      	add	r7, sp, #0
 801337a:	4603      	mov	r3, r0
 801337c:	6039      	str	r1, [r7, #0]
 801337e:	71fb      	strb	r3, [r7, #7]
 8013380:	4613      	mov	r3, r2
 8013382:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 8013384:	79fb      	ldrb	r3, [r7, #7]
 8013386:	2b23      	cmp	r3, #35	; 0x23
 8013388:	f200 8098 	bhi.w	80134bc <CDC_Control_FS+0x148>
 801338c:	a201      	add	r2, pc, #4	; (adr r2, 8013394 <CDC_Control_FS+0x20>)
 801338e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013392:	bf00      	nop
 8013394:	080134bd 	.word	0x080134bd
 8013398:	080134bd 	.word	0x080134bd
 801339c:	080134bd 	.word	0x080134bd
 80133a0:	080134bd 	.word	0x080134bd
 80133a4:	080134bd 	.word	0x080134bd
 80133a8:	080134bd 	.word	0x080134bd
 80133ac:	080134bd 	.word	0x080134bd
 80133b0:	080134bd 	.word	0x080134bd
 80133b4:	080134bd 	.word	0x080134bd
 80133b8:	080134bd 	.word	0x080134bd
 80133bc:	080134bd 	.word	0x080134bd
 80133c0:	080134bd 	.word	0x080134bd
 80133c4:	080134bd 	.word	0x080134bd
 80133c8:	080134bd 	.word	0x080134bd
 80133cc:	080134bd 	.word	0x080134bd
 80133d0:	080134bd 	.word	0x080134bd
 80133d4:	080134bd 	.word	0x080134bd
 80133d8:	080134bd 	.word	0x080134bd
 80133dc:	080134bd 	.word	0x080134bd
 80133e0:	080134bd 	.word	0x080134bd
 80133e4:	080134bd 	.word	0x080134bd
 80133e8:	080134bd 	.word	0x080134bd
 80133ec:	080134bd 	.word	0x080134bd
 80133f0:	080134bd 	.word	0x080134bd
 80133f4:	080134bd 	.word	0x080134bd
 80133f8:	080134bd 	.word	0x080134bd
 80133fc:	080134bd 	.word	0x080134bd
 8013400:	080134bd 	.word	0x080134bd
 8013404:	080134bd 	.word	0x080134bd
 8013408:	080134bd 	.word	0x080134bd
 801340c:	080134bd 	.word	0x080134bd
 8013410:	080134bd 	.word	0x080134bd
 8013414:	08013425 	.word	0x08013425
 8013418:	08013469 	.word	0x08013469
 801341c:	080134bd 	.word	0x080134bd
 8013420:	080134bd 	.word	0x080134bd
		/*                                        3 - Mark                             */
		/*                                        4 - Space                            */
		/* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
		/*******************************************************************************/
	case CDC_SET_LINE_CODING:
		LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8)
 8013424:	683b      	ldr	r3, [r7, #0]
 8013426:	781b      	ldrb	r3, [r3, #0]
 8013428:	461a      	mov	r2, r3
 801342a:	683b      	ldr	r3, [r7, #0]
 801342c:	3301      	adds	r3, #1
 801342e:	781b      	ldrb	r3, [r3, #0]
 8013430:	021b      	lsls	r3, r3, #8
 8013432:	431a      	orrs	r2, r3
				| (pbuf[2] << 16) | (pbuf[3] << 24));
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	3302      	adds	r3, #2
 8013438:	781b      	ldrb	r3, [r3, #0]
 801343a:	041b      	lsls	r3, r3, #16
 801343c:	431a      	orrs	r2, r3
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	3303      	adds	r3, #3
 8013442:	781b      	ldrb	r3, [r3, #0]
 8013444:	061b      	lsls	r3, r3, #24
 8013446:	4313      	orrs	r3, r2
		LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8)
 8013448:	461a      	mov	r2, r3
 801344a:	4b20      	ldr	r3, [pc, #128]	; (80134cc <CDC_Control_FS+0x158>)
 801344c:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 801344e:	683b      	ldr	r3, [r7, #0]
 8013450:	791a      	ldrb	r2, [r3, #4]
 8013452:	4b1e      	ldr	r3, [pc, #120]	; (80134cc <CDC_Control_FS+0x158>)
 8013454:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 8013456:	683b      	ldr	r3, [r7, #0]
 8013458:	795a      	ldrb	r2, [r3, #5]
 801345a:	4b1c      	ldr	r3, [pc, #112]	; (80134cc <CDC_Control_FS+0x158>)
 801345c:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	799a      	ldrb	r2, [r3, #6]
 8013462:	4b1a      	ldr	r3, [pc, #104]	; (80134cc <CDC_Control_FS+0x158>)
 8013464:	719a      	strb	r2, [r3, #6]
		break;
 8013466:	e02a      	b.n	80134be <CDC_Control_FS+0x14a>

	case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t) (LineCoding.bitrate);
 8013468:	4b18      	ldr	r3, [pc, #96]	; (80134cc <CDC_Control_FS+0x158>)
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	b2da      	uxtb	r2, r3
 801346e:	683b      	ldr	r3, [r7, #0]
 8013470:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 8013472:	4b16      	ldr	r3, [pc, #88]	; (80134cc <CDC_Control_FS+0x158>)
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	0a1a      	lsrs	r2, r3, #8
 8013478:	683b      	ldr	r3, [r7, #0]
 801347a:	3301      	adds	r3, #1
 801347c:	b2d2      	uxtb	r2, r2
 801347e:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 8013480:	4b12      	ldr	r3, [pc, #72]	; (80134cc <CDC_Control_FS+0x158>)
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	0c1a      	lsrs	r2, r3, #16
 8013486:	683b      	ldr	r3, [r7, #0]
 8013488:	3302      	adds	r3, #2
 801348a:	b2d2      	uxtb	r2, r2
 801348c:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 801348e:	4b0f      	ldr	r3, [pc, #60]	; (80134cc <CDC_Control_FS+0x158>)
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	0e1a      	lsrs	r2, r3, #24
 8013494:	683b      	ldr	r3, [r7, #0]
 8013496:	3303      	adds	r3, #3
 8013498:	b2d2      	uxtb	r2, r2
 801349a:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 801349c:	683b      	ldr	r3, [r7, #0]
 801349e:	3304      	adds	r3, #4
 80134a0:	4a0a      	ldr	r2, [pc, #40]	; (80134cc <CDC_Control_FS+0x158>)
 80134a2:	7912      	ldrb	r2, [r2, #4]
 80134a4:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 80134a6:	683b      	ldr	r3, [r7, #0]
 80134a8:	3305      	adds	r3, #5
 80134aa:	4a08      	ldr	r2, [pc, #32]	; (80134cc <CDC_Control_FS+0x158>)
 80134ac:	7952      	ldrb	r2, [r2, #5]
 80134ae:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 80134b0:	683b      	ldr	r3, [r7, #0]
 80134b2:	3306      	adds	r3, #6
 80134b4:	4a05      	ldr	r2, [pc, #20]	; (80134cc <CDC_Control_FS+0x158>)
 80134b6:	7992      	ldrb	r2, [r2, #6]
 80134b8:	701a      	strb	r2, [r3, #0]
		break;
 80134ba:	e000      	b.n	80134be <CDC_Control_FS+0x14a>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80134bc:	bf00      	nop
	}

	return (USBD_OK);
 80134be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80134c0:	4618      	mov	r0, r3
 80134c2:	370c      	adds	r7, #12
 80134c4:	46bd      	mov	sp, r7
 80134c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ca:	4770      	bx	lr
 80134cc:	20000128 	.word	0x20000128

080134d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b082      	sub	sp, #8
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
 80134d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80134da:	6879      	ldr	r1, [r7, #4]
 80134dc:	4805      	ldr	r0, [pc, #20]	; (80134f4 <CDC_Receive_FS+0x24>)
 80134de:	f7fb f858 	bl	800e592 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80134e2:	4804      	ldr	r0, [pc, #16]	; (80134f4 <CDC_Receive_FS+0x24>)
 80134e4:	f7fb f86e 	bl	800e5c4 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 80134e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80134ea:	4618      	mov	r0, r3
 80134ec:	3708      	adds	r7, #8
 80134ee:	46bd      	mov	sp, r7
 80134f0:	bd80      	pop	{r7, pc}
 80134f2:	bf00      	nop
 80134f4:	20005c30 	.word	0x20005c30

080134f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80134f8:	b480      	push	{r7}
 80134fa:	b087      	sub	sp, #28
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	60f8      	str	r0, [r7, #12]
 8013500:	60b9      	str	r1, [r7, #8]
 8013502:	4613      	mov	r3, r2
 8013504:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8013506:	2300      	movs	r3, #0
 8013508:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801350a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801350e:	4618      	mov	r0, r3
 8013510:	371c      	adds	r7, #28
 8013512:	46bd      	mov	sp, r7
 8013514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013518:	4770      	bx	lr
	...

0801351c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801351c:	b480      	push	{r7}
 801351e:	b083      	sub	sp, #12
 8013520:	af00      	add	r7, sp, #0
 8013522:	4603      	mov	r3, r0
 8013524:	6039      	str	r1, [r7, #0]
 8013526:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	2212      	movs	r2, #18
 801352c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801352e:	4b03      	ldr	r3, [pc, #12]	; (801353c <USBD_FS_DeviceDescriptor+0x20>)
}
 8013530:	4618      	mov	r0, r3
 8013532:	370c      	adds	r7, #12
 8013534:	46bd      	mov	sp, r7
 8013536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353a:	4770      	bx	lr
 801353c:	20000160 	.word	0x20000160

08013540 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013540:	b480      	push	{r7}
 8013542:	b083      	sub	sp, #12
 8013544:	af00      	add	r7, sp, #0
 8013546:	4603      	mov	r3, r0
 8013548:	6039      	str	r1, [r7, #0]
 801354a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801354c:	683b      	ldr	r3, [r7, #0]
 801354e:	2204      	movs	r2, #4
 8013550:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013552:	4b03      	ldr	r3, [pc, #12]	; (8013560 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8013554:	4618      	mov	r0, r3
 8013556:	370c      	adds	r7, #12
 8013558:	46bd      	mov	sp, r7
 801355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801355e:	4770      	bx	lr
 8013560:	20000174 	.word	0x20000174

08013564 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013564:	b580      	push	{r7, lr}
 8013566:	b082      	sub	sp, #8
 8013568:	af00      	add	r7, sp, #0
 801356a:	4603      	mov	r3, r0
 801356c:	6039      	str	r1, [r7, #0]
 801356e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013570:	79fb      	ldrb	r3, [r7, #7]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d105      	bne.n	8013582 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013576:	683a      	ldr	r2, [r7, #0]
 8013578:	4907      	ldr	r1, [pc, #28]	; (8013598 <USBD_FS_ProductStrDescriptor+0x34>)
 801357a:	4808      	ldr	r0, [pc, #32]	; (801359c <USBD_FS_ProductStrDescriptor+0x38>)
 801357c:	f7fc f8d5 	bl	800f72a <USBD_GetString>
 8013580:	e004      	b.n	801358c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013582:	683a      	ldr	r2, [r7, #0]
 8013584:	4904      	ldr	r1, [pc, #16]	; (8013598 <USBD_FS_ProductStrDescriptor+0x34>)
 8013586:	4805      	ldr	r0, [pc, #20]	; (801359c <USBD_FS_ProductStrDescriptor+0x38>)
 8013588:	f7fc f8cf 	bl	800f72a <USBD_GetString>
  }
  return USBD_StrDesc;
 801358c:	4b02      	ldr	r3, [pc, #8]	; (8013598 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801358e:	4618      	mov	r0, r3
 8013590:	3708      	adds	r7, #8
 8013592:	46bd      	mov	sp, r7
 8013594:	bd80      	pop	{r7, pc}
 8013596:	bf00      	nop
 8013598:	20006f00 	.word	0x20006f00
 801359c:	080148a0 	.word	0x080148a0

080135a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b082      	sub	sp, #8
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	4603      	mov	r3, r0
 80135a8:	6039      	str	r1, [r7, #0]
 80135aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80135ac:	683a      	ldr	r2, [r7, #0]
 80135ae:	4904      	ldr	r1, [pc, #16]	; (80135c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80135b0:	4804      	ldr	r0, [pc, #16]	; (80135c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80135b2:	f7fc f8ba 	bl	800f72a <USBD_GetString>
  return USBD_StrDesc;
 80135b6:	4b02      	ldr	r3, [pc, #8]	; (80135c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80135b8:	4618      	mov	r0, r3
 80135ba:	3708      	adds	r7, #8
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}
 80135c0:	20006f00 	.word	0x20006f00
 80135c4:	080148b8 	.word	0x080148b8

080135c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b082      	sub	sp, #8
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	4603      	mov	r3, r0
 80135d0:	6039      	str	r1, [r7, #0]
 80135d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80135d4:	683b      	ldr	r3, [r7, #0]
 80135d6:	221a      	movs	r2, #26
 80135d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80135da:	f000 f843 	bl	8013664 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80135de:	4b02      	ldr	r3, [pc, #8]	; (80135e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80135e0:	4618      	mov	r0, r3
 80135e2:	3708      	adds	r7, #8
 80135e4:	46bd      	mov	sp, r7
 80135e6:	bd80      	pop	{r7, pc}
 80135e8:	20000178 	.word	0x20000178

080135ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b082      	sub	sp, #8
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	4603      	mov	r3, r0
 80135f4:	6039      	str	r1, [r7, #0]
 80135f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80135f8:	79fb      	ldrb	r3, [r7, #7]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d105      	bne.n	801360a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80135fe:	683a      	ldr	r2, [r7, #0]
 8013600:	4907      	ldr	r1, [pc, #28]	; (8013620 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013602:	4808      	ldr	r0, [pc, #32]	; (8013624 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013604:	f7fc f891 	bl	800f72a <USBD_GetString>
 8013608:	e004      	b.n	8013614 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801360a:	683a      	ldr	r2, [r7, #0]
 801360c:	4904      	ldr	r1, [pc, #16]	; (8013620 <USBD_FS_ConfigStrDescriptor+0x34>)
 801360e:	4805      	ldr	r0, [pc, #20]	; (8013624 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013610:	f7fc f88b 	bl	800f72a <USBD_GetString>
  }
  return USBD_StrDesc;
 8013614:	4b02      	ldr	r3, [pc, #8]	; (8013620 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8013616:	4618      	mov	r0, r3
 8013618:	3708      	adds	r7, #8
 801361a:	46bd      	mov	sp, r7
 801361c:	bd80      	pop	{r7, pc}
 801361e:	bf00      	nop
 8013620:	20006f00 	.word	0x20006f00
 8013624:	080148cc 	.word	0x080148cc

08013628 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013628:	b580      	push	{r7, lr}
 801362a:	b082      	sub	sp, #8
 801362c:	af00      	add	r7, sp, #0
 801362e:	4603      	mov	r3, r0
 8013630:	6039      	str	r1, [r7, #0]
 8013632:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013634:	79fb      	ldrb	r3, [r7, #7]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d105      	bne.n	8013646 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801363a:	683a      	ldr	r2, [r7, #0]
 801363c:	4907      	ldr	r1, [pc, #28]	; (801365c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801363e:	4808      	ldr	r0, [pc, #32]	; (8013660 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013640:	f7fc f873 	bl	800f72a <USBD_GetString>
 8013644:	e004      	b.n	8013650 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013646:	683a      	ldr	r2, [r7, #0]
 8013648:	4904      	ldr	r1, [pc, #16]	; (801365c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801364a:	4805      	ldr	r0, [pc, #20]	; (8013660 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801364c:	f7fc f86d 	bl	800f72a <USBD_GetString>
  }
  return USBD_StrDesc;
 8013650:	4b02      	ldr	r3, [pc, #8]	; (801365c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8013652:	4618      	mov	r0, r3
 8013654:	3708      	adds	r7, #8
 8013656:	46bd      	mov	sp, r7
 8013658:	bd80      	pop	{r7, pc}
 801365a:	bf00      	nop
 801365c:	20006f00 	.word	0x20006f00
 8013660:	080148d8 	.word	0x080148d8

08013664 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013664:	b580      	push	{r7, lr}
 8013666:	b084      	sub	sp, #16
 8013668:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801366a:	4b0f      	ldr	r3, [pc, #60]	; (80136a8 <Get_SerialNum+0x44>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013670:	4b0e      	ldr	r3, [pc, #56]	; (80136ac <Get_SerialNum+0x48>)
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013676:	4b0e      	ldr	r3, [pc, #56]	; (80136b0 <Get_SerialNum+0x4c>)
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801367c:	68fa      	ldr	r2, [r7, #12]
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	4413      	add	r3, r2
 8013682:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d009      	beq.n	801369e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801368a:	2208      	movs	r2, #8
 801368c:	4909      	ldr	r1, [pc, #36]	; (80136b4 <Get_SerialNum+0x50>)
 801368e:	68f8      	ldr	r0, [r7, #12]
 8013690:	f000 f814 	bl	80136bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013694:	2204      	movs	r2, #4
 8013696:	4908      	ldr	r1, [pc, #32]	; (80136b8 <Get_SerialNum+0x54>)
 8013698:	68b8      	ldr	r0, [r7, #8]
 801369a:	f000 f80f 	bl	80136bc <IntToUnicode>
  }
}
 801369e:	bf00      	nop
 80136a0:	3710      	adds	r7, #16
 80136a2:	46bd      	mov	sp, r7
 80136a4:	bd80      	pop	{r7, pc}
 80136a6:	bf00      	nop
 80136a8:	1fff7a10 	.word	0x1fff7a10
 80136ac:	1fff7a14 	.word	0x1fff7a14
 80136b0:	1fff7a18 	.word	0x1fff7a18
 80136b4:	2000017a 	.word	0x2000017a
 80136b8:	2000018a 	.word	0x2000018a

080136bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80136bc:	b480      	push	{r7}
 80136be:	b087      	sub	sp, #28
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	60f8      	str	r0, [r7, #12]
 80136c4:	60b9      	str	r1, [r7, #8]
 80136c6:	4613      	mov	r3, r2
 80136c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80136ca:	2300      	movs	r3, #0
 80136cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80136ce:	2300      	movs	r3, #0
 80136d0:	75fb      	strb	r3, [r7, #23]
 80136d2:	e027      	b.n	8013724 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	0f1b      	lsrs	r3, r3, #28
 80136d8:	2b09      	cmp	r3, #9
 80136da:	d80b      	bhi.n	80136f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	0f1b      	lsrs	r3, r3, #28
 80136e0:	b2da      	uxtb	r2, r3
 80136e2:	7dfb      	ldrb	r3, [r7, #23]
 80136e4:	005b      	lsls	r3, r3, #1
 80136e6:	4619      	mov	r1, r3
 80136e8:	68bb      	ldr	r3, [r7, #8]
 80136ea:	440b      	add	r3, r1
 80136ec:	3230      	adds	r2, #48	; 0x30
 80136ee:	b2d2      	uxtb	r2, r2
 80136f0:	701a      	strb	r2, [r3, #0]
 80136f2:	e00a      	b.n	801370a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	0f1b      	lsrs	r3, r3, #28
 80136f8:	b2da      	uxtb	r2, r3
 80136fa:	7dfb      	ldrb	r3, [r7, #23]
 80136fc:	005b      	lsls	r3, r3, #1
 80136fe:	4619      	mov	r1, r3
 8013700:	68bb      	ldr	r3, [r7, #8]
 8013702:	440b      	add	r3, r1
 8013704:	3237      	adds	r2, #55	; 0x37
 8013706:	b2d2      	uxtb	r2, r2
 8013708:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	011b      	lsls	r3, r3, #4
 801370e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013710:	7dfb      	ldrb	r3, [r7, #23]
 8013712:	005b      	lsls	r3, r3, #1
 8013714:	3301      	adds	r3, #1
 8013716:	68ba      	ldr	r2, [r7, #8]
 8013718:	4413      	add	r3, r2
 801371a:	2200      	movs	r2, #0
 801371c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801371e:	7dfb      	ldrb	r3, [r7, #23]
 8013720:	3301      	adds	r3, #1
 8013722:	75fb      	strb	r3, [r7, #23]
 8013724:	7dfa      	ldrb	r2, [r7, #23]
 8013726:	79fb      	ldrb	r3, [r7, #7]
 8013728:	429a      	cmp	r2, r3
 801372a:	d3d3      	bcc.n	80136d4 <IntToUnicode+0x18>
  }
}
 801372c:	bf00      	nop
 801372e:	bf00      	nop
 8013730:	371c      	adds	r7, #28
 8013732:	46bd      	mov	sp, r7
 8013734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013738:	4770      	bx	lr
	...

0801373c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801373c:	b580      	push	{r7, lr}
 801373e:	b08a      	sub	sp, #40	; 0x28
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013744:	f107 0314 	add.w	r3, r7, #20
 8013748:	2200      	movs	r2, #0
 801374a:	601a      	str	r2, [r3, #0]
 801374c:	605a      	str	r2, [r3, #4]
 801374e:	609a      	str	r2, [r3, #8]
 8013750:	60da      	str	r2, [r3, #12]
 8013752:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801375c:	d13a      	bne.n	80137d4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801375e:	2300      	movs	r3, #0
 8013760:	613b      	str	r3, [r7, #16]
 8013762:	4b1e      	ldr	r3, [pc, #120]	; (80137dc <HAL_PCD_MspInit+0xa0>)
 8013764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013766:	4a1d      	ldr	r2, [pc, #116]	; (80137dc <HAL_PCD_MspInit+0xa0>)
 8013768:	f043 0301 	orr.w	r3, r3, #1
 801376c:	6313      	str	r3, [r2, #48]	; 0x30
 801376e:	4b1b      	ldr	r3, [pc, #108]	; (80137dc <HAL_PCD_MspInit+0xa0>)
 8013770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013772:	f003 0301 	and.w	r3, r3, #1
 8013776:	613b      	str	r3, [r7, #16]
 8013778:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 801377a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801377e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013780:	2302      	movs	r3, #2
 8013782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013784:	2300      	movs	r3, #0
 8013786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013788:	2303      	movs	r3, #3
 801378a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801378c:	230a      	movs	r3, #10
 801378e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013790:	f107 0314 	add.w	r3, r7, #20
 8013794:	4619      	mov	r1, r3
 8013796:	4812      	ldr	r0, [pc, #72]	; (80137e0 <HAL_PCD_MspInit+0xa4>)
 8013798:	f7f4 fdc4 	bl	8008324 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801379c:	4b0f      	ldr	r3, [pc, #60]	; (80137dc <HAL_PCD_MspInit+0xa0>)
 801379e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137a0:	4a0e      	ldr	r2, [pc, #56]	; (80137dc <HAL_PCD_MspInit+0xa0>)
 80137a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80137a6:	6353      	str	r3, [r2, #52]	; 0x34
 80137a8:	2300      	movs	r3, #0
 80137aa:	60fb      	str	r3, [r7, #12]
 80137ac:	4b0b      	ldr	r3, [pc, #44]	; (80137dc <HAL_PCD_MspInit+0xa0>)
 80137ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137b0:	4a0a      	ldr	r2, [pc, #40]	; (80137dc <HAL_PCD_MspInit+0xa0>)
 80137b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80137b6:	6453      	str	r3, [r2, #68]	; 0x44
 80137b8:	4b08      	ldr	r3, [pc, #32]	; (80137dc <HAL_PCD_MspInit+0xa0>)
 80137ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80137c0:	60fb      	str	r3, [r7, #12]
 80137c2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80137c4:	2200      	movs	r2, #0
 80137c6:	2105      	movs	r1, #5
 80137c8:	2043      	movs	r0, #67	; 0x43
 80137ca:	f7f4 f97f 	bl	8007acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80137ce:	2043      	movs	r0, #67	; 0x43
 80137d0:	f7f4 f998 	bl	8007b04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80137d4:	bf00      	nop
 80137d6:	3728      	adds	r7, #40	; 0x28
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}
 80137dc:	40023800 	.word	0x40023800
 80137e0:	40020000 	.word	0x40020000

080137e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b082      	sub	sp, #8
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80137f8:	4619      	mov	r1, r3
 80137fa:	4610      	mov	r0, r2
 80137fc:	f7fa ffae 	bl	800e75c <USBD_LL_SetupStage>
}
 8013800:	bf00      	nop
 8013802:	3708      	adds	r7, #8
 8013804:	46bd      	mov	sp, r7
 8013806:	bd80      	pop	{r7, pc}

08013808 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b082      	sub	sp, #8
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
 8013810:	460b      	mov	r3, r1
 8013812:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801381a:	78fa      	ldrb	r2, [r7, #3]
 801381c:	6879      	ldr	r1, [r7, #4]
 801381e:	4613      	mov	r3, r2
 8013820:	00db      	lsls	r3, r3, #3
 8013822:	1a9b      	subs	r3, r3, r2
 8013824:	009b      	lsls	r3, r3, #2
 8013826:	440b      	add	r3, r1
 8013828:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801382c:	681a      	ldr	r2, [r3, #0]
 801382e:	78fb      	ldrb	r3, [r7, #3]
 8013830:	4619      	mov	r1, r3
 8013832:	f7fa ffe8 	bl	800e806 <USBD_LL_DataOutStage>
}
 8013836:	bf00      	nop
 8013838:	3708      	adds	r7, #8
 801383a:	46bd      	mov	sp, r7
 801383c:	bd80      	pop	{r7, pc}

0801383e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801383e:	b580      	push	{r7, lr}
 8013840:	b082      	sub	sp, #8
 8013842:	af00      	add	r7, sp, #0
 8013844:	6078      	str	r0, [r7, #4]
 8013846:	460b      	mov	r3, r1
 8013848:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8013850:	78fa      	ldrb	r2, [r7, #3]
 8013852:	6879      	ldr	r1, [r7, #4]
 8013854:	4613      	mov	r3, r2
 8013856:	00db      	lsls	r3, r3, #3
 8013858:	1a9b      	subs	r3, r3, r2
 801385a:	009b      	lsls	r3, r3, #2
 801385c:	440b      	add	r3, r1
 801385e:	3348      	adds	r3, #72	; 0x48
 8013860:	681a      	ldr	r2, [r3, #0]
 8013862:	78fb      	ldrb	r3, [r7, #3]
 8013864:	4619      	mov	r1, r3
 8013866:	f7fb f831 	bl	800e8cc <USBD_LL_DataInStage>
}
 801386a:	bf00      	nop
 801386c:	3708      	adds	r7, #8
 801386e:	46bd      	mov	sp, r7
 8013870:	bd80      	pop	{r7, pc}

08013872 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013872:	b580      	push	{r7, lr}
 8013874:	b082      	sub	sp, #8
 8013876:	af00      	add	r7, sp, #0
 8013878:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013880:	4618      	mov	r0, r3
 8013882:	f7fb f945 	bl	800eb10 <USBD_LL_SOF>
}
 8013886:	bf00      	nop
 8013888:	3708      	adds	r7, #8
 801388a:	46bd      	mov	sp, r7
 801388c:	bd80      	pop	{r7, pc}

0801388e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801388e:	b580      	push	{r7, lr}
 8013890:	b084      	sub	sp, #16
 8013892:	af00      	add	r7, sp, #0
 8013894:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013896:	2301      	movs	r3, #1
 8013898:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	68db      	ldr	r3, [r3, #12]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d102      	bne.n	80138a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80138a2:	2300      	movs	r3, #0
 80138a4:	73fb      	strb	r3, [r7, #15]
 80138a6:	e008      	b.n	80138ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	68db      	ldr	r3, [r3, #12]
 80138ac:	2b02      	cmp	r3, #2
 80138ae:	d102      	bne.n	80138b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80138b0:	2301      	movs	r3, #1
 80138b2:	73fb      	strb	r3, [r7, #15]
 80138b4:	e001      	b.n	80138ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80138b6:	f7f2 f9b9 	bl	8005c2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80138c0:	7bfa      	ldrb	r2, [r7, #15]
 80138c2:	4611      	mov	r1, r2
 80138c4:	4618      	mov	r0, r3
 80138c6:	f7fb f8e5 	bl	800ea94 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80138d0:	4618      	mov	r0, r3
 80138d2:	f7fb f891 	bl	800e9f8 <USBD_LL_Reset>
}
 80138d6:	bf00      	nop
 80138d8:	3710      	adds	r7, #16
 80138da:	46bd      	mov	sp, r7
 80138dc:	bd80      	pop	{r7, pc}
	...

080138e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b082      	sub	sp, #8
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80138ee:	4618      	mov	r0, r3
 80138f0:	f7fb f8e0 	bl	800eab4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	687a      	ldr	r2, [r7, #4]
 8013900:	6812      	ldr	r2, [r2, #0]
 8013902:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013906:	f043 0301 	orr.w	r3, r3, #1
 801390a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	6a1b      	ldr	r3, [r3, #32]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d005      	beq.n	8013920 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013914:	4b04      	ldr	r3, [pc, #16]	; (8013928 <HAL_PCD_SuspendCallback+0x48>)
 8013916:	691b      	ldr	r3, [r3, #16]
 8013918:	4a03      	ldr	r2, [pc, #12]	; (8013928 <HAL_PCD_SuspendCallback+0x48>)
 801391a:	f043 0306 	orr.w	r3, r3, #6
 801391e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013920:	bf00      	nop
 8013922:	3708      	adds	r7, #8
 8013924:	46bd      	mov	sp, r7
 8013926:	bd80      	pop	{r7, pc}
 8013928:	e000ed00 	.word	0xe000ed00

0801392c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801392c:	b580      	push	{r7, lr}
 801392e:	b082      	sub	sp, #8
 8013930:	af00      	add	r7, sp, #0
 8013932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801393a:	4618      	mov	r0, r3
 801393c:	f7fb f8d0 	bl	800eae0 <USBD_LL_Resume>
}
 8013940:	bf00      	nop
 8013942:	3708      	adds	r7, #8
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}

08013948 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b082      	sub	sp, #8
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
 8013950:	460b      	mov	r3, r1
 8013952:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801395a:	78fa      	ldrb	r2, [r7, #3]
 801395c:	4611      	mov	r1, r2
 801395e:	4618      	mov	r0, r3
 8013960:	f7fb f91e 	bl	800eba0 <USBD_LL_IsoOUTIncomplete>
}
 8013964:	bf00      	nop
 8013966:	3708      	adds	r7, #8
 8013968:	46bd      	mov	sp, r7
 801396a:	bd80      	pop	{r7, pc}

0801396c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b082      	sub	sp, #8
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
 8013974:	460b      	mov	r3, r1
 8013976:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801397e:	78fa      	ldrb	r2, [r7, #3]
 8013980:	4611      	mov	r1, r2
 8013982:	4618      	mov	r0, r3
 8013984:	f7fb f8e6 	bl	800eb54 <USBD_LL_IsoINIncomplete>
}
 8013988:	bf00      	nop
 801398a:	3708      	adds	r7, #8
 801398c:	46bd      	mov	sp, r7
 801398e:	bd80      	pop	{r7, pc}

08013990 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b082      	sub	sp, #8
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801399e:	4618      	mov	r0, r3
 80139a0:	f7fb f924 	bl	800ebec <USBD_LL_DevConnected>
}
 80139a4:	bf00      	nop
 80139a6:	3708      	adds	r7, #8
 80139a8:	46bd      	mov	sp, r7
 80139aa:	bd80      	pop	{r7, pc}

080139ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b082      	sub	sp, #8
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80139ba:	4618      	mov	r0, r3
 80139bc:	f7fb f921 	bl	800ec02 <USBD_LL_DevDisconnected>
}
 80139c0:	bf00      	nop
 80139c2:	3708      	adds	r7, #8
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd80      	pop	{r7, pc}

080139c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b082      	sub	sp, #8
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	781b      	ldrb	r3, [r3, #0]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d13c      	bne.n	8013a52 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80139d8:	4a20      	ldr	r2, [pc, #128]	; (8013a5c <USBD_LL_Init+0x94>)
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	4a1e      	ldr	r2, [pc, #120]	; (8013a5c <USBD_LL_Init+0x94>)
 80139e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80139e8:	4b1c      	ldr	r3, [pc, #112]	; (8013a5c <USBD_LL_Init+0x94>)
 80139ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80139ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80139f0:	4b1a      	ldr	r3, [pc, #104]	; (8013a5c <USBD_LL_Init+0x94>)
 80139f2:	2204      	movs	r2, #4
 80139f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80139f6:	4b19      	ldr	r3, [pc, #100]	; (8013a5c <USBD_LL_Init+0x94>)
 80139f8:	2202      	movs	r2, #2
 80139fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80139fc:	4b17      	ldr	r3, [pc, #92]	; (8013a5c <USBD_LL_Init+0x94>)
 80139fe:	2200      	movs	r2, #0
 8013a00:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013a02:	4b16      	ldr	r3, [pc, #88]	; (8013a5c <USBD_LL_Init+0x94>)
 8013a04:	2202      	movs	r2, #2
 8013a06:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013a08:	4b14      	ldr	r3, [pc, #80]	; (8013a5c <USBD_LL_Init+0x94>)
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8013a0e:	4b13      	ldr	r3, [pc, #76]	; (8013a5c <USBD_LL_Init+0x94>)
 8013a10:	2200      	movs	r2, #0
 8013a12:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8013a14:	4b11      	ldr	r3, [pc, #68]	; (8013a5c <USBD_LL_Init+0x94>)
 8013a16:	2200      	movs	r2, #0
 8013a18:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8013a1a:	4b10      	ldr	r3, [pc, #64]	; (8013a5c <USBD_LL_Init+0x94>)
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8013a20:	4b0e      	ldr	r3, [pc, #56]	; (8013a5c <USBD_LL_Init+0x94>)
 8013a22:	2200      	movs	r2, #0
 8013a24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013a26:	480d      	ldr	r0, [pc, #52]	; (8013a5c <USBD_LL_Init+0x94>)
 8013a28:	f7f4 fe59 	bl	80086de <HAL_PCD_Init>
 8013a2c:	4603      	mov	r3, r0
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d001      	beq.n	8013a36 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8013a32:	f7f2 f8fb 	bl	8005c2c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013a36:	2180      	movs	r1, #128	; 0x80
 8013a38:	4808      	ldr	r0, [pc, #32]	; (8013a5c <USBD_LL_Init+0x94>)
 8013a3a:	f7f5 ffb6 	bl	80099aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8013a3e:	2240      	movs	r2, #64	; 0x40
 8013a40:	2100      	movs	r1, #0
 8013a42:	4806      	ldr	r0, [pc, #24]	; (8013a5c <USBD_LL_Init+0x94>)
 8013a44:	f7f5 ff6a 	bl	800991c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013a48:	2280      	movs	r2, #128	; 0x80
 8013a4a:	2101      	movs	r1, #1
 8013a4c:	4803      	ldr	r0, [pc, #12]	; (8013a5c <USBD_LL_Init+0x94>)
 8013a4e:	f7f5 ff65 	bl	800991c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013a52:	2300      	movs	r3, #0
}
 8013a54:	4618      	mov	r0, r3
 8013a56:	3708      	adds	r7, #8
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	bd80      	pop	{r7, pc}
 8013a5c:	20007100 	.word	0x20007100

08013a60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b084      	sub	sp, #16
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a68:	2300      	movs	r3, #0
 8013a6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013a76:	4618      	mov	r0, r3
 8013a78:	f7f4 ff4e 	bl	8008918 <HAL_PCD_Start>
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013a80:	7bfb      	ldrb	r3, [r7, #15]
 8013a82:	4618      	mov	r0, r3
 8013a84:	f000 f942 	bl	8013d0c <USBD_Get_USB_Status>
 8013a88:	4603      	mov	r3, r0
 8013a8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013a8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8013a8e:	4618      	mov	r0, r3
 8013a90:	3710      	adds	r7, #16
 8013a92:	46bd      	mov	sp, r7
 8013a94:	bd80      	pop	{r7, pc}

08013a96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013a96:	b580      	push	{r7, lr}
 8013a98:	b084      	sub	sp, #16
 8013a9a:	af00      	add	r7, sp, #0
 8013a9c:	6078      	str	r0, [r7, #4]
 8013a9e:	4608      	mov	r0, r1
 8013aa0:	4611      	mov	r1, r2
 8013aa2:	461a      	mov	r2, r3
 8013aa4:	4603      	mov	r3, r0
 8013aa6:	70fb      	strb	r3, [r7, #3]
 8013aa8:	460b      	mov	r3, r1
 8013aaa:	70bb      	strb	r3, [r7, #2]
 8013aac:	4613      	mov	r3, r2
 8013aae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013abe:	78bb      	ldrb	r3, [r7, #2]
 8013ac0:	883a      	ldrh	r2, [r7, #0]
 8013ac2:	78f9      	ldrb	r1, [r7, #3]
 8013ac4:	f7f5 fb32 	bl	800912c <HAL_PCD_EP_Open>
 8013ac8:	4603      	mov	r3, r0
 8013aca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013acc:	7bfb      	ldrb	r3, [r7, #15]
 8013ace:	4618      	mov	r0, r3
 8013ad0:	f000 f91c 	bl	8013d0c <USBD_Get_USB_Status>
 8013ad4:	4603      	mov	r3, r0
 8013ad6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013ad8:	7bbb      	ldrb	r3, [r7, #14]
}
 8013ada:	4618      	mov	r0, r3
 8013adc:	3710      	adds	r7, #16
 8013ade:	46bd      	mov	sp, r7
 8013ae0:	bd80      	pop	{r7, pc}

08013ae2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013ae2:	b580      	push	{r7, lr}
 8013ae4:	b084      	sub	sp, #16
 8013ae6:	af00      	add	r7, sp, #0
 8013ae8:	6078      	str	r0, [r7, #4]
 8013aea:	460b      	mov	r3, r1
 8013aec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013aee:	2300      	movs	r3, #0
 8013af0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013af2:	2300      	movs	r3, #0
 8013af4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013afc:	78fa      	ldrb	r2, [r7, #3]
 8013afe:	4611      	mov	r1, r2
 8013b00:	4618      	mov	r0, r3
 8013b02:	f7f5 fb7b 	bl	80091fc <HAL_PCD_EP_Close>
 8013b06:	4603      	mov	r3, r0
 8013b08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013b0a:	7bfb      	ldrb	r3, [r7, #15]
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f000 f8fd 	bl	8013d0c <USBD_Get_USB_Status>
 8013b12:	4603      	mov	r3, r0
 8013b14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013b16:	7bbb      	ldrb	r3, [r7, #14]
}
 8013b18:	4618      	mov	r0, r3
 8013b1a:	3710      	adds	r7, #16
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	bd80      	pop	{r7, pc}

08013b20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b084      	sub	sp, #16
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	6078      	str	r0, [r7, #4]
 8013b28:	460b      	mov	r3, r1
 8013b2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b30:	2300      	movs	r3, #0
 8013b32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013b3a:	78fa      	ldrb	r2, [r7, #3]
 8013b3c:	4611      	mov	r1, r2
 8013b3e:	4618      	mov	r0, r3
 8013b40:	f7f5 fc53 	bl	80093ea <HAL_PCD_EP_SetStall>
 8013b44:	4603      	mov	r3, r0
 8013b46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013b48:	7bfb      	ldrb	r3, [r7, #15]
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f000 f8de 	bl	8013d0c <USBD_Get_USB_Status>
 8013b50:	4603      	mov	r3, r0
 8013b52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013b54:	7bbb      	ldrb	r3, [r7, #14]
}
 8013b56:	4618      	mov	r0, r3
 8013b58:	3710      	adds	r7, #16
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	bd80      	pop	{r7, pc}

08013b5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013b5e:	b580      	push	{r7, lr}
 8013b60:	b084      	sub	sp, #16
 8013b62:	af00      	add	r7, sp, #0
 8013b64:	6078      	str	r0, [r7, #4]
 8013b66:	460b      	mov	r3, r1
 8013b68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b6e:	2300      	movs	r3, #0
 8013b70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013b78:	78fa      	ldrb	r2, [r7, #3]
 8013b7a:	4611      	mov	r1, r2
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	f7f5 fc98 	bl	80094b2 <HAL_PCD_EP_ClrStall>
 8013b82:	4603      	mov	r3, r0
 8013b84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013b86:	7bfb      	ldrb	r3, [r7, #15]
 8013b88:	4618      	mov	r0, r3
 8013b8a:	f000 f8bf 	bl	8013d0c <USBD_Get_USB_Status>
 8013b8e:	4603      	mov	r3, r0
 8013b90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013b92:	7bbb      	ldrb	r3, [r7, #14]
}
 8013b94:	4618      	mov	r0, r3
 8013b96:	3710      	adds	r7, #16
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	bd80      	pop	{r7, pc}

08013b9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013b9c:	b480      	push	{r7}
 8013b9e:	b085      	sub	sp, #20
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
 8013ba4:	460b      	mov	r3, r1
 8013ba6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013bae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013bb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	da0b      	bge.n	8013bd0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013bb8:	78fb      	ldrb	r3, [r7, #3]
 8013bba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013bbe:	68f9      	ldr	r1, [r7, #12]
 8013bc0:	4613      	mov	r3, r2
 8013bc2:	00db      	lsls	r3, r3, #3
 8013bc4:	1a9b      	subs	r3, r3, r2
 8013bc6:	009b      	lsls	r3, r3, #2
 8013bc8:	440b      	add	r3, r1
 8013bca:	333e      	adds	r3, #62	; 0x3e
 8013bcc:	781b      	ldrb	r3, [r3, #0]
 8013bce:	e00b      	b.n	8013be8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013bd0:	78fb      	ldrb	r3, [r7, #3]
 8013bd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013bd6:	68f9      	ldr	r1, [r7, #12]
 8013bd8:	4613      	mov	r3, r2
 8013bda:	00db      	lsls	r3, r3, #3
 8013bdc:	1a9b      	subs	r3, r3, r2
 8013bde:	009b      	lsls	r3, r3, #2
 8013be0:	440b      	add	r3, r1
 8013be2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013be6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013be8:	4618      	mov	r0, r3
 8013bea:	3714      	adds	r7, #20
 8013bec:	46bd      	mov	sp, r7
 8013bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf2:	4770      	bx	lr

08013bf4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b084      	sub	sp, #16
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
 8013bfc:	460b      	mov	r3, r1
 8013bfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c00:	2300      	movs	r3, #0
 8013c02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c04:	2300      	movs	r3, #0
 8013c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013c0e:	78fa      	ldrb	r2, [r7, #3]
 8013c10:	4611      	mov	r1, r2
 8013c12:	4618      	mov	r0, r3
 8013c14:	f7f5 fa65 	bl	80090e2 <HAL_PCD_SetAddress>
 8013c18:	4603      	mov	r3, r0
 8013c1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013c1c:	7bfb      	ldrb	r3, [r7, #15]
 8013c1e:	4618      	mov	r0, r3
 8013c20:	f000 f874 	bl	8013d0c <USBD_Get_USB_Status>
 8013c24:	4603      	mov	r3, r0
 8013c26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013c28:	7bbb      	ldrb	r3, [r7, #14]
}
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	3710      	adds	r7, #16
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	bd80      	pop	{r7, pc}

08013c32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013c32:	b580      	push	{r7, lr}
 8013c34:	b086      	sub	sp, #24
 8013c36:	af00      	add	r7, sp, #0
 8013c38:	60f8      	str	r0, [r7, #12]
 8013c3a:	607a      	str	r2, [r7, #4]
 8013c3c:	603b      	str	r3, [r7, #0]
 8013c3e:	460b      	mov	r3, r1
 8013c40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c42:	2300      	movs	r3, #0
 8013c44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c46:	2300      	movs	r3, #0
 8013c48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013c50:	7af9      	ldrb	r1, [r7, #11]
 8013c52:	683b      	ldr	r3, [r7, #0]
 8013c54:	687a      	ldr	r2, [r7, #4]
 8013c56:	f7f5 fb7e 	bl	8009356 <HAL_PCD_EP_Transmit>
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013c5e:	7dfb      	ldrb	r3, [r7, #23]
 8013c60:	4618      	mov	r0, r3
 8013c62:	f000 f853 	bl	8013d0c <USBD_Get_USB_Status>
 8013c66:	4603      	mov	r3, r0
 8013c68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013c6a:	7dbb      	ldrb	r3, [r7, #22]
}
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	3718      	adds	r7, #24
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd80      	pop	{r7, pc}

08013c74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b086      	sub	sp, #24
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	60f8      	str	r0, [r7, #12]
 8013c7c:	607a      	str	r2, [r7, #4]
 8013c7e:	603b      	str	r3, [r7, #0]
 8013c80:	460b      	mov	r3, r1
 8013c82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c84:	2300      	movs	r3, #0
 8013c86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c88:	2300      	movs	r3, #0
 8013c8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013c92:	7af9      	ldrb	r1, [r7, #11]
 8013c94:	683b      	ldr	r3, [r7, #0]
 8013c96:	687a      	ldr	r2, [r7, #4]
 8013c98:	f7f5 fafa 	bl	8009290 <HAL_PCD_EP_Receive>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013ca0:	7dfb      	ldrb	r3, [r7, #23]
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	f000 f832 	bl	8013d0c <USBD_Get_USB_Status>
 8013ca8:	4603      	mov	r3, r0
 8013caa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013cac:	7dbb      	ldrb	r3, [r7, #22]
}
 8013cae:	4618      	mov	r0, r3
 8013cb0:	3718      	adds	r7, #24
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	bd80      	pop	{r7, pc}

08013cb6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013cb6:	b580      	push	{r7, lr}
 8013cb8:	b082      	sub	sp, #8
 8013cba:	af00      	add	r7, sp, #0
 8013cbc:	6078      	str	r0, [r7, #4]
 8013cbe:	460b      	mov	r3, r1
 8013cc0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013cc8:	78fa      	ldrb	r2, [r7, #3]
 8013cca:	4611      	mov	r1, r2
 8013ccc:	4618      	mov	r0, r3
 8013cce:	f7f5 fb2a 	bl	8009326 <HAL_PCD_EP_GetRxCount>
 8013cd2:	4603      	mov	r3, r0
}
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	3708      	adds	r7, #8
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	bd80      	pop	{r7, pc}

08013cdc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013cdc:	b480      	push	{r7}
 8013cde:	b083      	sub	sp, #12
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013ce4:	4b03      	ldr	r3, [pc, #12]	; (8013cf4 <USBD_static_malloc+0x18>)
}
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	370c      	adds	r7, #12
 8013cea:	46bd      	mov	sp, r7
 8013cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf0:	4770      	bx	lr
 8013cf2:	bf00      	nop
 8013cf4:	20004c9c 	.word	0x20004c9c

08013cf8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013cf8:	b480      	push	{r7}
 8013cfa:	b083      	sub	sp, #12
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]

}
 8013d00:	bf00      	nop
 8013d02:	370c      	adds	r7, #12
 8013d04:	46bd      	mov	sp, r7
 8013d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0a:	4770      	bx	lr

08013d0c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013d0c:	b480      	push	{r7}
 8013d0e:	b085      	sub	sp, #20
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	4603      	mov	r3, r0
 8013d14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d16:	2300      	movs	r3, #0
 8013d18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013d1a:	79fb      	ldrb	r3, [r7, #7]
 8013d1c:	2b03      	cmp	r3, #3
 8013d1e:	d817      	bhi.n	8013d50 <USBD_Get_USB_Status+0x44>
 8013d20:	a201      	add	r2, pc, #4	; (adr r2, 8013d28 <USBD_Get_USB_Status+0x1c>)
 8013d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d26:	bf00      	nop
 8013d28:	08013d39 	.word	0x08013d39
 8013d2c:	08013d3f 	.word	0x08013d3f
 8013d30:	08013d45 	.word	0x08013d45
 8013d34:	08013d4b 	.word	0x08013d4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013d38:	2300      	movs	r3, #0
 8013d3a:	73fb      	strb	r3, [r7, #15]
    break;
 8013d3c:	e00b      	b.n	8013d56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013d3e:	2303      	movs	r3, #3
 8013d40:	73fb      	strb	r3, [r7, #15]
    break;
 8013d42:	e008      	b.n	8013d56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013d44:	2301      	movs	r3, #1
 8013d46:	73fb      	strb	r3, [r7, #15]
    break;
 8013d48:	e005      	b.n	8013d56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013d4a:	2303      	movs	r3, #3
 8013d4c:	73fb      	strb	r3, [r7, #15]
    break;
 8013d4e:	e002      	b.n	8013d56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013d50:	2303      	movs	r3, #3
 8013d52:	73fb      	strb	r3, [r7, #15]
    break;
 8013d54:	bf00      	nop
  }
  return usb_status;
 8013d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d58:	4618      	mov	r0, r3
 8013d5a:	3714      	adds	r7, #20
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d62:	4770      	bx	lr

08013d64 <arm_sin_f32>:
 8013d64:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d6c:	d42c      	bmi.n	8013dc8 <arm_sin_f32+0x64>
 8013d6e:	eddf 7a20 	vldr	s15, [pc, #128]	; 8013df0 <arm_sin_f32+0x8c>
 8013d72:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013d76:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013d7a:	d432      	bmi.n	8013de2 <arm_sin_f32+0x7e>
 8013d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d80:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8013df4 <arm_sin_f32+0x90>
 8013d84:	4a1c      	ldr	r2, [pc, #112]	; (8013df8 <arm_sin_f32+0x94>)
 8013d86:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013d8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013d8e:	ee20 0a26 	vmul.f32	s0, s0, s13
 8013d92:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013d96:	ee17 3a90 	vmov	r3, s15
 8013d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d9e:	ee07 3a90 	vmov	s15, r3
 8013da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013da6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8013daa:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013dae:	edd1 6a01 	vldr	s13, [r1, #4]
 8013db2:	ed91 0a00 	vldr	s0, [r1]
 8013db6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013dba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013dbe:	ee27 0a00 	vmul.f32	s0, s14, s0
 8013dc2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013dc6:	4770      	bx	lr
 8013dc8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8013dfc <arm_sin_f32+0x98>
 8013dcc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dd4:	da0b      	bge.n	8013dee <arm_sin_f32+0x8a>
 8013dd6:	eddf 7a06 	vldr	s15, [pc, #24]	; 8013df0 <arm_sin_f32+0x8c>
 8013dda:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013dde:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013de2:	ee17 3a90 	vmov	r3, s15
 8013de6:	3b01      	subs	r3, #1
 8013de8:	ee07 3a90 	vmov	s15, r3
 8013dec:	e7c6      	b.n	8013d7c <arm_sin_f32+0x18>
 8013dee:	4770      	bx	lr
 8013df0:	3e22f983 	.word	0x3e22f983
 8013df4:	44000000 	.word	0x44000000
 8013df8:	08014a40 	.word	0x08014a40
 8013dfc:	b44c02cd 	.word	0xb44c02cd

08013e00 <arm_cos_f32>:
 8013e00:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8013e74 <arm_cos_f32+0x74>
 8013e04:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013e08:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8013e0c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013e10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e18:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013e1c:	d504      	bpl.n	8013e28 <arm_cos_f32+0x28>
 8013e1e:	ee17 3a90 	vmov	r3, s15
 8013e22:	3b01      	subs	r3, #1
 8013e24:	ee07 3a90 	vmov	s15, r3
 8013e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e2c:	eddf 6a12 	vldr	s13, [pc, #72]	; 8013e78 <arm_cos_f32+0x78>
 8013e30:	4a12      	ldr	r2, [pc, #72]	; (8013e7c <arm_cos_f32+0x7c>)
 8013e32:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013e36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013e3a:	ee20 0a26 	vmul.f32	s0, s0, s13
 8013e3e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013e42:	ee17 3a90 	vmov	r3, s15
 8013e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e4a:	ee07 3a90 	vmov	s15, r3
 8013e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e52:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8013e56:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013e5a:	edd1 6a01 	vldr	s13, [r1, #4]
 8013e5e:	ed91 0a00 	vldr	s0, [r1]
 8013e62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013e66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013e6a:	ee27 0a00 	vmul.f32	s0, s14, s0
 8013e6e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013e72:	4770      	bx	lr
 8013e74:	3e22f983 	.word	0x3e22f983
 8013e78:	44000000 	.word	0x44000000
 8013e7c:	08014a40 	.word	0x08014a40

08013e80 <_ZdlPvj>:
 8013e80:	f000 b800 	b.w	8013e84 <_ZdlPv>

08013e84 <_ZdlPv>:
 8013e84:	f000 b832 	b.w	8013eec <free>

08013e88 <__errno>:
 8013e88:	4b01      	ldr	r3, [pc, #4]	; (8013e90 <__errno+0x8>)
 8013e8a:	6818      	ldr	r0, [r3, #0]
 8013e8c:	4770      	bx	lr
 8013e8e:	bf00      	nop
 8013e90:	20000194 	.word	0x20000194

08013e94 <__libc_init_array>:
 8013e94:	b570      	push	{r4, r5, r6, lr}
 8013e96:	4d0d      	ldr	r5, [pc, #52]	; (8013ecc <__libc_init_array+0x38>)
 8013e98:	4c0d      	ldr	r4, [pc, #52]	; (8013ed0 <__libc_init_array+0x3c>)
 8013e9a:	1b64      	subs	r4, r4, r5
 8013e9c:	10a4      	asrs	r4, r4, #2
 8013e9e:	2600      	movs	r6, #0
 8013ea0:	42a6      	cmp	r6, r4
 8013ea2:	d109      	bne.n	8013eb8 <__libc_init_array+0x24>
 8013ea4:	4d0b      	ldr	r5, [pc, #44]	; (8013ed4 <__libc_init_array+0x40>)
 8013ea6:	4c0c      	ldr	r4, [pc, #48]	; (8013ed8 <__libc_init_array+0x44>)
 8013ea8:	f000 fc78 	bl	801479c <_init>
 8013eac:	1b64      	subs	r4, r4, r5
 8013eae:	10a4      	asrs	r4, r4, #2
 8013eb0:	2600      	movs	r6, #0
 8013eb2:	42a6      	cmp	r6, r4
 8013eb4:	d105      	bne.n	8013ec2 <__libc_init_array+0x2e>
 8013eb6:	bd70      	pop	{r4, r5, r6, pc}
 8013eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ebc:	4798      	blx	r3
 8013ebe:	3601      	adds	r6, #1
 8013ec0:	e7ee      	b.n	8013ea0 <__libc_init_array+0xc>
 8013ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ec6:	4798      	blx	r3
 8013ec8:	3601      	adds	r6, #1
 8013eca:	e7f2      	b.n	8013eb2 <__libc_init_array+0x1e>
 8013ecc:	08015280 	.word	0x08015280
 8013ed0:	08015280 	.word	0x08015280
 8013ed4:	08015280 	.word	0x08015280
 8013ed8:	08015288 	.word	0x08015288

08013edc <malloc>:
 8013edc:	4b02      	ldr	r3, [pc, #8]	; (8013ee8 <malloc+0xc>)
 8013ede:	4601      	mov	r1, r0
 8013ee0:	6818      	ldr	r0, [r3, #0]
 8013ee2:	f000 b871 	b.w	8013fc8 <_malloc_r>
 8013ee6:	bf00      	nop
 8013ee8:	20000194 	.word	0x20000194

08013eec <free>:
 8013eec:	4b02      	ldr	r3, [pc, #8]	; (8013ef8 <free+0xc>)
 8013eee:	4601      	mov	r1, r0
 8013ef0:	6818      	ldr	r0, [r3, #0]
 8013ef2:	f000 b819 	b.w	8013f28 <_free_r>
 8013ef6:	bf00      	nop
 8013ef8:	20000194 	.word	0x20000194

08013efc <memcpy>:
 8013efc:	440a      	add	r2, r1
 8013efe:	4291      	cmp	r1, r2
 8013f00:	f100 33ff 	add.w	r3, r0, #4294967295
 8013f04:	d100      	bne.n	8013f08 <memcpy+0xc>
 8013f06:	4770      	bx	lr
 8013f08:	b510      	push	{r4, lr}
 8013f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013f0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013f12:	4291      	cmp	r1, r2
 8013f14:	d1f9      	bne.n	8013f0a <memcpy+0xe>
 8013f16:	bd10      	pop	{r4, pc}

08013f18 <memset>:
 8013f18:	4402      	add	r2, r0
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	4293      	cmp	r3, r2
 8013f1e:	d100      	bne.n	8013f22 <memset+0xa>
 8013f20:	4770      	bx	lr
 8013f22:	f803 1b01 	strb.w	r1, [r3], #1
 8013f26:	e7f9      	b.n	8013f1c <memset+0x4>

08013f28 <_free_r>:
 8013f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013f2a:	2900      	cmp	r1, #0
 8013f2c:	d048      	beq.n	8013fc0 <_free_r+0x98>
 8013f2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f32:	9001      	str	r0, [sp, #4]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	f1a1 0404 	sub.w	r4, r1, #4
 8013f3a:	bfb8      	it	lt
 8013f3c:	18e4      	addlt	r4, r4, r3
 8013f3e:	f000 f8e7 	bl	8014110 <__malloc_lock>
 8013f42:	4a20      	ldr	r2, [pc, #128]	; (8013fc4 <_free_r+0x9c>)
 8013f44:	9801      	ldr	r0, [sp, #4]
 8013f46:	6813      	ldr	r3, [r2, #0]
 8013f48:	4615      	mov	r5, r2
 8013f4a:	b933      	cbnz	r3, 8013f5a <_free_r+0x32>
 8013f4c:	6063      	str	r3, [r4, #4]
 8013f4e:	6014      	str	r4, [r2, #0]
 8013f50:	b003      	add	sp, #12
 8013f52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013f56:	f000 b8e1 	b.w	801411c <__malloc_unlock>
 8013f5a:	42a3      	cmp	r3, r4
 8013f5c:	d90b      	bls.n	8013f76 <_free_r+0x4e>
 8013f5e:	6821      	ldr	r1, [r4, #0]
 8013f60:	1862      	adds	r2, r4, r1
 8013f62:	4293      	cmp	r3, r2
 8013f64:	bf04      	itt	eq
 8013f66:	681a      	ldreq	r2, [r3, #0]
 8013f68:	685b      	ldreq	r3, [r3, #4]
 8013f6a:	6063      	str	r3, [r4, #4]
 8013f6c:	bf04      	itt	eq
 8013f6e:	1852      	addeq	r2, r2, r1
 8013f70:	6022      	streq	r2, [r4, #0]
 8013f72:	602c      	str	r4, [r5, #0]
 8013f74:	e7ec      	b.n	8013f50 <_free_r+0x28>
 8013f76:	461a      	mov	r2, r3
 8013f78:	685b      	ldr	r3, [r3, #4]
 8013f7a:	b10b      	cbz	r3, 8013f80 <_free_r+0x58>
 8013f7c:	42a3      	cmp	r3, r4
 8013f7e:	d9fa      	bls.n	8013f76 <_free_r+0x4e>
 8013f80:	6811      	ldr	r1, [r2, #0]
 8013f82:	1855      	adds	r5, r2, r1
 8013f84:	42a5      	cmp	r5, r4
 8013f86:	d10b      	bne.n	8013fa0 <_free_r+0x78>
 8013f88:	6824      	ldr	r4, [r4, #0]
 8013f8a:	4421      	add	r1, r4
 8013f8c:	1854      	adds	r4, r2, r1
 8013f8e:	42a3      	cmp	r3, r4
 8013f90:	6011      	str	r1, [r2, #0]
 8013f92:	d1dd      	bne.n	8013f50 <_free_r+0x28>
 8013f94:	681c      	ldr	r4, [r3, #0]
 8013f96:	685b      	ldr	r3, [r3, #4]
 8013f98:	6053      	str	r3, [r2, #4]
 8013f9a:	4421      	add	r1, r4
 8013f9c:	6011      	str	r1, [r2, #0]
 8013f9e:	e7d7      	b.n	8013f50 <_free_r+0x28>
 8013fa0:	d902      	bls.n	8013fa8 <_free_r+0x80>
 8013fa2:	230c      	movs	r3, #12
 8013fa4:	6003      	str	r3, [r0, #0]
 8013fa6:	e7d3      	b.n	8013f50 <_free_r+0x28>
 8013fa8:	6825      	ldr	r5, [r4, #0]
 8013faa:	1961      	adds	r1, r4, r5
 8013fac:	428b      	cmp	r3, r1
 8013fae:	bf04      	itt	eq
 8013fb0:	6819      	ldreq	r1, [r3, #0]
 8013fb2:	685b      	ldreq	r3, [r3, #4]
 8013fb4:	6063      	str	r3, [r4, #4]
 8013fb6:	bf04      	itt	eq
 8013fb8:	1949      	addeq	r1, r1, r5
 8013fba:	6021      	streq	r1, [r4, #0]
 8013fbc:	6054      	str	r4, [r2, #4]
 8013fbe:	e7c7      	b.n	8013f50 <_free_r+0x28>
 8013fc0:	b003      	add	sp, #12
 8013fc2:	bd30      	pop	{r4, r5, pc}
 8013fc4:	20004ebc 	.word	0x20004ebc

08013fc8 <_malloc_r>:
 8013fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fca:	1ccd      	adds	r5, r1, #3
 8013fcc:	f025 0503 	bic.w	r5, r5, #3
 8013fd0:	3508      	adds	r5, #8
 8013fd2:	2d0c      	cmp	r5, #12
 8013fd4:	bf38      	it	cc
 8013fd6:	250c      	movcc	r5, #12
 8013fd8:	2d00      	cmp	r5, #0
 8013fda:	4606      	mov	r6, r0
 8013fdc:	db01      	blt.n	8013fe2 <_malloc_r+0x1a>
 8013fde:	42a9      	cmp	r1, r5
 8013fe0:	d903      	bls.n	8013fea <_malloc_r+0x22>
 8013fe2:	230c      	movs	r3, #12
 8013fe4:	6033      	str	r3, [r6, #0]
 8013fe6:	2000      	movs	r0, #0
 8013fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fea:	f000 f891 	bl	8014110 <__malloc_lock>
 8013fee:	4921      	ldr	r1, [pc, #132]	; (8014074 <_malloc_r+0xac>)
 8013ff0:	680a      	ldr	r2, [r1, #0]
 8013ff2:	4614      	mov	r4, r2
 8013ff4:	b99c      	cbnz	r4, 801401e <_malloc_r+0x56>
 8013ff6:	4f20      	ldr	r7, [pc, #128]	; (8014078 <_malloc_r+0xb0>)
 8013ff8:	683b      	ldr	r3, [r7, #0]
 8013ffa:	b923      	cbnz	r3, 8014006 <_malloc_r+0x3e>
 8013ffc:	4621      	mov	r1, r4
 8013ffe:	4630      	mov	r0, r6
 8014000:	f000 f83c 	bl	801407c <_sbrk_r>
 8014004:	6038      	str	r0, [r7, #0]
 8014006:	4629      	mov	r1, r5
 8014008:	4630      	mov	r0, r6
 801400a:	f000 f837 	bl	801407c <_sbrk_r>
 801400e:	1c43      	adds	r3, r0, #1
 8014010:	d123      	bne.n	801405a <_malloc_r+0x92>
 8014012:	230c      	movs	r3, #12
 8014014:	6033      	str	r3, [r6, #0]
 8014016:	4630      	mov	r0, r6
 8014018:	f000 f880 	bl	801411c <__malloc_unlock>
 801401c:	e7e3      	b.n	8013fe6 <_malloc_r+0x1e>
 801401e:	6823      	ldr	r3, [r4, #0]
 8014020:	1b5b      	subs	r3, r3, r5
 8014022:	d417      	bmi.n	8014054 <_malloc_r+0x8c>
 8014024:	2b0b      	cmp	r3, #11
 8014026:	d903      	bls.n	8014030 <_malloc_r+0x68>
 8014028:	6023      	str	r3, [r4, #0]
 801402a:	441c      	add	r4, r3
 801402c:	6025      	str	r5, [r4, #0]
 801402e:	e004      	b.n	801403a <_malloc_r+0x72>
 8014030:	6863      	ldr	r3, [r4, #4]
 8014032:	42a2      	cmp	r2, r4
 8014034:	bf0c      	ite	eq
 8014036:	600b      	streq	r3, [r1, #0]
 8014038:	6053      	strne	r3, [r2, #4]
 801403a:	4630      	mov	r0, r6
 801403c:	f000 f86e 	bl	801411c <__malloc_unlock>
 8014040:	f104 000b 	add.w	r0, r4, #11
 8014044:	1d23      	adds	r3, r4, #4
 8014046:	f020 0007 	bic.w	r0, r0, #7
 801404a:	1ac2      	subs	r2, r0, r3
 801404c:	d0cc      	beq.n	8013fe8 <_malloc_r+0x20>
 801404e:	1a1b      	subs	r3, r3, r0
 8014050:	50a3      	str	r3, [r4, r2]
 8014052:	e7c9      	b.n	8013fe8 <_malloc_r+0x20>
 8014054:	4622      	mov	r2, r4
 8014056:	6864      	ldr	r4, [r4, #4]
 8014058:	e7cc      	b.n	8013ff4 <_malloc_r+0x2c>
 801405a:	1cc4      	adds	r4, r0, #3
 801405c:	f024 0403 	bic.w	r4, r4, #3
 8014060:	42a0      	cmp	r0, r4
 8014062:	d0e3      	beq.n	801402c <_malloc_r+0x64>
 8014064:	1a21      	subs	r1, r4, r0
 8014066:	4630      	mov	r0, r6
 8014068:	f000 f808 	bl	801407c <_sbrk_r>
 801406c:	3001      	adds	r0, #1
 801406e:	d1dd      	bne.n	801402c <_malloc_r+0x64>
 8014070:	e7cf      	b.n	8014012 <_malloc_r+0x4a>
 8014072:	bf00      	nop
 8014074:	20004ebc 	.word	0x20004ebc
 8014078:	20004ec0 	.word	0x20004ec0

0801407c <_sbrk_r>:
 801407c:	b538      	push	{r3, r4, r5, lr}
 801407e:	4d06      	ldr	r5, [pc, #24]	; (8014098 <_sbrk_r+0x1c>)
 8014080:	2300      	movs	r3, #0
 8014082:	4604      	mov	r4, r0
 8014084:	4608      	mov	r0, r1
 8014086:	602b      	str	r3, [r5, #0]
 8014088:	f7f1 fff2 	bl	8006070 <_sbrk>
 801408c:	1c43      	adds	r3, r0, #1
 801408e:	d102      	bne.n	8014096 <_sbrk_r+0x1a>
 8014090:	682b      	ldr	r3, [r5, #0]
 8014092:	b103      	cbz	r3, 8014096 <_sbrk_r+0x1a>
 8014094:	6023      	str	r3, [r4, #0]
 8014096:	bd38      	pop	{r3, r4, r5, pc}
 8014098:	20007508 	.word	0x20007508

0801409c <_vsniprintf_r>:
 801409c:	b530      	push	{r4, r5, lr}
 801409e:	1e14      	subs	r4, r2, #0
 80140a0:	4605      	mov	r5, r0
 80140a2:	b09b      	sub	sp, #108	; 0x6c
 80140a4:	4618      	mov	r0, r3
 80140a6:	da05      	bge.n	80140b4 <_vsniprintf_r+0x18>
 80140a8:	238b      	movs	r3, #139	; 0x8b
 80140aa:	602b      	str	r3, [r5, #0]
 80140ac:	f04f 30ff 	mov.w	r0, #4294967295
 80140b0:	b01b      	add	sp, #108	; 0x6c
 80140b2:	bd30      	pop	{r4, r5, pc}
 80140b4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80140b8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80140bc:	bf14      	ite	ne
 80140be:	f104 33ff 	addne.w	r3, r4, #4294967295
 80140c2:	4623      	moveq	r3, r4
 80140c4:	9302      	str	r3, [sp, #8]
 80140c6:	9305      	str	r3, [sp, #20]
 80140c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80140cc:	9100      	str	r1, [sp, #0]
 80140ce:	9104      	str	r1, [sp, #16]
 80140d0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80140d4:	4602      	mov	r2, r0
 80140d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80140d8:	4669      	mov	r1, sp
 80140da:	4628      	mov	r0, r5
 80140dc:	f000 f880 	bl	80141e0 <_svfiprintf_r>
 80140e0:	1c43      	adds	r3, r0, #1
 80140e2:	bfbc      	itt	lt
 80140e4:	238b      	movlt	r3, #139	; 0x8b
 80140e6:	602b      	strlt	r3, [r5, #0]
 80140e8:	2c00      	cmp	r4, #0
 80140ea:	d0e1      	beq.n	80140b0 <_vsniprintf_r+0x14>
 80140ec:	9b00      	ldr	r3, [sp, #0]
 80140ee:	2200      	movs	r2, #0
 80140f0:	701a      	strb	r2, [r3, #0]
 80140f2:	e7dd      	b.n	80140b0 <_vsniprintf_r+0x14>

080140f4 <vsniprintf>:
 80140f4:	b507      	push	{r0, r1, r2, lr}
 80140f6:	9300      	str	r3, [sp, #0]
 80140f8:	4613      	mov	r3, r2
 80140fa:	460a      	mov	r2, r1
 80140fc:	4601      	mov	r1, r0
 80140fe:	4803      	ldr	r0, [pc, #12]	; (801410c <vsniprintf+0x18>)
 8014100:	6800      	ldr	r0, [r0, #0]
 8014102:	f7ff ffcb 	bl	801409c <_vsniprintf_r>
 8014106:	b003      	add	sp, #12
 8014108:	f85d fb04 	ldr.w	pc, [sp], #4
 801410c:	20000194 	.word	0x20000194

08014110 <__malloc_lock>:
 8014110:	4801      	ldr	r0, [pc, #4]	; (8014118 <__malloc_lock+0x8>)
 8014112:	f000 baf9 	b.w	8014708 <__retarget_lock_acquire_recursive>
 8014116:	bf00      	nop
 8014118:	20007510 	.word	0x20007510

0801411c <__malloc_unlock>:
 801411c:	4801      	ldr	r0, [pc, #4]	; (8014124 <__malloc_unlock+0x8>)
 801411e:	f000 baf4 	b.w	801470a <__retarget_lock_release_recursive>
 8014122:	bf00      	nop
 8014124:	20007510 	.word	0x20007510

08014128 <__ssputs_r>:
 8014128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801412c:	688e      	ldr	r6, [r1, #8]
 801412e:	429e      	cmp	r6, r3
 8014130:	4682      	mov	sl, r0
 8014132:	460c      	mov	r4, r1
 8014134:	4690      	mov	r8, r2
 8014136:	461f      	mov	r7, r3
 8014138:	d838      	bhi.n	80141ac <__ssputs_r+0x84>
 801413a:	898a      	ldrh	r2, [r1, #12]
 801413c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014140:	d032      	beq.n	80141a8 <__ssputs_r+0x80>
 8014142:	6825      	ldr	r5, [r4, #0]
 8014144:	6909      	ldr	r1, [r1, #16]
 8014146:	eba5 0901 	sub.w	r9, r5, r1
 801414a:	6965      	ldr	r5, [r4, #20]
 801414c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014150:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014154:	3301      	adds	r3, #1
 8014156:	444b      	add	r3, r9
 8014158:	106d      	asrs	r5, r5, #1
 801415a:	429d      	cmp	r5, r3
 801415c:	bf38      	it	cc
 801415e:	461d      	movcc	r5, r3
 8014160:	0553      	lsls	r3, r2, #21
 8014162:	d531      	bpl.n	80141c8 <__ssputs_r+0xa0>
 8014164:	4629      	mov	r1, r5
 8014166:	f7ff ff2f 	bl	8013fc8 <_malloc_r>
 801416a:	4606      	mov	r6, r0
 801416c:	b950      	cbnz	r0, 8014184 <__ssputs_r+0x5c>
 801416e:	230c      	movs	r3, #12
 8014170:	f8ca 3000 	str.w	r3, [sl]
 8014174:	89a3      	ldrh	r3, [r4, #12]
 8014176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801417a:	81a3      	strh	r3, [r4, #12]
 801417c:	f04f 30ff 	mov.w	r0, #4294967295
 8014180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014184:	6921      	ldr	r1, [r4, #16]
 8014186:	464a      	mov	r2, r9
 8014188:	f7ff feb8 	bl	8013efc <memcpy>
 801418c:	89a3      	ldrh	r3, [r4, #12]
 801418e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014196:	81a3      	strh	r3, [r4, #12]
 8014198:	6126      	str	r6, [r4, #16]
 801419a:	6165      	str	r5, [r4, #20]
 801419c:	444e      	add	r6, r9
 801419e:	eba5 0509 	sub.w	r5, r5, r9
 80141a2:	6026      	str	r6, [r4, #0]
 80141a4:	60a5      	str	r5, [r4, #8]
 80141a6:	463e      	mov	r6, r7
 80141a8:	42be      	cmp	r6, r7
 80141aa:	d900      	bls.n	80141ae <__ssputs_r+0x86>
 80141ac:	463e      	mov	r6, r7
 80141ae:	4632      	mov	r2, r6
 80141b0:	6820      	ldr	r0, [r4, #0]
 80141b2:	4641      	mov	r1, r8
 80141b4:	f000 faaa 	bl	801470c <memmove>
 80141b8:	68a3      	ldr	r3, [r4, #8]
 80141ba:	6822      	ldr	r2, [r4, #0]
 80141bc:	1b9b      	subs	r3, r3, r6
 80141be:	4432      	add	r2, r6
 80141c0:	60a3      	str	r3, [r4, #8]
 80141c2:	6022      	str	r2, [r4, #0]
 80141c4:	2000      	movs	r0, #0
 80141c6:	e7db      	b.n	8014180 <__ssputs_r+0x58>
 80141c8:	462a      	mov	r2, r5
 80141ca:	f000 fab9 	bl	8014740 <_realloc_r>
 80141ce:	4606      	mov	r6, r0
 80141d0:	2800      	cmp	r0, #0
 80141d2:	d1e1      	bne.n	8014198 <__ssputs_r+0x70>
 80141d4:	6921      	ldr	r1, [r4, #16]
 80141d6:	4650      	mov	r0, sl
 80141d8:	f7ff fea6 	bl	8013f28 <_free_r>
 80141dc:	e7c7      	b.n	801416e <__ssputs_r+0x46>
	...

080141e0 <_svfiprintf_r>:
 80141e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141e4:	4698      	mov	r8, r3
 80141e6:	898b      	ldrh	r3, [r1, #12]
 80141e8:	061b      	lsls	r3, r3, #24
 80141ea:	b09d      	sub	sp, #116	; 0x74
 80141ec:	4607      	mov	r7, r0
 80141ee:	460d      	mov	r5, r1
 80141f0:	4614      	mov	r4, r2
 80141f2:	d50e      	bpl.n	8014212 <_svfiprintf_r+0x32>
 80141f4:	690b      	ldr	r3, [r1, #16]
 80141f6:	b963      	cbnz	r3, 8014212 <_svfiprintf_r+0x32>
 80141f8:	2140      	movs	r1, #64	; 0x40
 80141fa:	f7ff fee5 	bl	8013fc8 <_malloc_r>
 80141fe:	6028      	str	r0, [r5, #0]
 8014200:	6128      	str	r0, [r5, #16]
 8014202:	b920      	cbnz	r0, 801420e <_svfiprintf_r+0x2e>
 8014204:	230c      	movs	r3, #12
 8014206:	603b      	str	r3, [r7, #0]
 8014208:	f04f 30ff 	mov.w	r0, #4294967295
 801420c:	e0d1      	b.n	80143b2 <_svfiprintf_r+0x1d2>
 801420e:	2340      	movs	r3, #64	; 0x40
 8014210:	616b      	str	r3, [r5, #20]
 8014212:	2300      	movs	r3, #0
 8014214:	9309      	str	r3, [sp, #36]	; 0x24
 8014216:	2320      	movs	r3, #32
 8014218:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801421c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014220:	2330      	movs	r3, #48	; 0x30
 8014222:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80143cc <_svfiprintf_r+0x1ec>
 8014226:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801422a:	f04f 0901 	mov.w	r9, #1
 801422e:	4623      	mov	r3, r4
 8014230:	469a      	mov	sl, r3
 8014232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014236:	b10a      	cbz	r2, 801423c <_svfiprintf_r+0x5c>
 8014238:	2a25      	cmp	r2, #37	; 0x25
 801423a:	d1f9      	bne.n	8014230 <_svfiprintf_r+0x50>
 801423c:	ebba 0b04 	subs.w	fp, sl, r4
 8014240:	d00b      	beq.n	801425a <_svfiprintf_r+0x7a>
 8014242:	465b      	mov	r3, fp
 8014244:	4622      	mov	r2, r4
 8014246:	4629      	mov	r1, r5
 8014248:	4638      	mov	r0, r7
 801424a:	f7ff ff6d 	bl	8014128 <__ssputs_r>
 801424e:	3001      	adds	r0, #1
 8014250:	f000 80aa 	beq.w	80143a8 <_svfiprintf_r+0x1c8>
 8014254:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014256:	445a      	add	r2, fp
 8014258:	9209      	str	r2, [sp, #36]	; 0x24
 801425a:	f89a 3000 	ldrb.w	r3, [sl]
 801425e:	2b00      	cmp	r3, #0
 8014260:	f000 80a2 	beq.w	80143a8 <_svfiprintf_r+0x1c8>
 8014264:	2300      	movs	r3, #0
 8014266:	f04f 32ff 	mov.w	r2, #4294967295
 801426a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801426e:	f10a 0a01 	add.w	sl, sl, #1
 8014272:	9304      	str	r3, [sp, #16]
 8014274:	9307      	str	r3, [sp, #28]
 8014276:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801427a:	931a      	str	r3, [sp, #104]	; 0x68
 801427c:	4654      	mov	r4, sl
 801427e:	2205      	movs	r2, #5
 8014280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014284:	4851      	ldr	r0, [pc, #324]	; (80143cc <_svfiprintf_r+0x1ec>)
 8014286:	f7eb ffbb 	bl	8000200 <memchr>
 801428a:	9a04      	ldr	r2, [sp, #16]
 801428c:	b9d8      	cbnz	r0, 80142c6 <_svfiprintf_r+0xe6>
 801428e:	06d0      	lsls	r0, r2, #27
 8014290:	bf44      	itt	mi
 8014292:	2320      	movmi	r3, #32
 8014294:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014298:	0711      	lsls	r1, r2, #28
 801429a:	bf44      	itt	mi
 801429c:	232b      	movmi	r3, #43	; 0x2b
 801429e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80142a2:	f89a 3000 	ldrb.w	r3, [sl]
 80142a6:	2b2a      	cmp	r3, #42	; 0x2a
 80142a8:	d015      	beq.n	80142d6 <_svfiprintf_r+0xf6>
 80142aa:	9a07      	ldr	r2, [sp, #28]
 80142ac:	4654      	mov	r4, sl
 80142ae:	2000      	movs	r0, #0
 80142b0:	f04f 0c0a 	mov.w	ip, #10
 80142b4:	4621      	mov	r1, r4
 80142b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80142ba:	3b30      	subs	r3, #48	; 0x30
 80142bc:	2b09      	cmp	r3, #9
 80142be:	d94e      	bls.n	801435e <_svfiprintf_r+0x17e>
 80142c0:	b1b0      	cbz	r0, 80142f0 <_svfiprintf_r+0x110>
 80142c2:	9207      	str	r2, [sp, #28]
 80142c4:	e014      	b.n	80142f0 <_svfiprintf_r+0x110>
 80142c6:	eba0 0308 	sub.w	r3, r0, r8
 80142ca:	fa09 f303 	lsl.w	r3, r9, r3
 80142ce:	4313      	orrs	r3, r2
 80142d0:	9304      	str	r3, [sp, #16]
 80142d2:	46a2      	mov	sl, r4
 80142d4:	e7d2      	b.n	801427c <_svfiprintf_r+0x9c>
 80142d6:	9b03      	ldr	r3, [sp, #12]
 80142d8:	1d19      	adds	r1, r3, #4
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	9103      	str	r1, [sp, #12]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	bfbb      	ittet	lt
 80142e2:	425b      	neglt	r3, r3
 80142e4:	f042 0202 	orrlt.w	r2, r2, #2
 80142e8:	9307      	strge	r3, [sp, #28]
 80142ea:	9307      	strlt	r3, [sp, #28]
 80142ec:	bfb8      	it	lt
 80142ee:	9204      	strlt	r2, [sp, #16]
 80142f0:	7823      	ldrb	r3, [r4, #0]
 80142f2:	2b2e      	cmp	r3, #46	; 0x2e
 80142f4:	d10c      	bne.n	8014310 <_svfiprintf_r+0x130>
 80142f6:	7863      	ldrb	r3, [r4, #1]
 80142f8:	2b2a      	cmp	r3, #42	; 0x2a
 80142fa:	d135      	bne.n	8014368 <_svfiprintf_r+0x188>
 80142fc:	9b03      	ldr	r3, [sp, #12]
 80142fe:	1d1a      	adds	r2, r3, #4
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	9203      	str	r2, [sp, #12]
 8014304:	2b00      	cmp	r3, #0
 8014306:	bfb8      	it	lt
 8014308:	f04f 33ff 	movlt.w	r3, #4294967295
 801430c:	3402      	adds	r4, #2
 801430e:	9305      	str	r3, [sp, #20]
 8014310:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80143dc <_svfiprintf_r+0x1fc>
 8014314:	7821      	ldrb	r1, [r4, #0]
 8014316:	2203      	movs	r2, #3
 8014318:	4650      	mov	r0, sl
 801431a:	f7eb ff71 	bl	8000200 <memchr>
 801431e:	b140      	cbz	r0, 8014332 <_svfiprintf_r+0x152>
 8014320:	2340      	movs	r3, #64	; 0x40
 8014322:	eba0 000a 	sub.w	r0, r0, sl
 8014326:	fa03 f000 	lsl.w	r0, r3, r0
 801432a:	9b04      	ldr	r3, [sp, #16]
 801432c:	4303      	orrs	r3, r0
 801432e:	3401      	adds	r4, #1
 8014330:	9304      	str	r3, [sp, #16]
 8014332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014336:	4826      	ldr	r0, [pc, #152]	; (80143d0 <_svfiprintf_r+0x1f0>)
 8014338:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801433c:	2206      	movs	r2, #6
 801433e:	f7eb ff5f 	bl	8000200 <memchr>
 8014342:	2800      	cmp	r0, #0
 8014344:	d038      	beq.n	80143b8 <_svfiprintf_r+0x1d8>
 8014346:	4b23      	ldr	r3, [pc, #140]	; (80143d4 <_svfiprintf_r+0x1f4>)
 8014348:	bb1b      	cbnz	r3, 8014392 <_svfiprintf_r+0x1b2>
 801434a:	9b03      	ldr	r3, [sp, #12]
 801434c:	3307      	adds	r3, #7
 801434e:	f023 0307 	bic.w	r3, r3, #7
 8014352:	3308      	adds	r3, #8
 8014354:	9303      	str	r3, [sp, #12]
 8014356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014358:	4433      	add	r3, r6
 801435a:	9309      	str	r3, [sp, #36]	; 0x24
 801435c:	e767      	b.n	801422e <_svfiprintf_r+0x4e>
 801435e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014362:	460c      	mov	r4, r1
 8014364:	2001      	movs	r0, #1
 8014366:	e7a5      	b.n	80142b4 <_svfiprintf_r+0xd4>
 8014368:	2300      	movs	r3, #0
 801436a:	3401      	adds	r4, #1
 801436c:	9305      	str	r3, [sp, #20]
 801436e:	4619      	mov	r1, r3
 8014370:	f04f 0c0a 	mov.w	ip, #10
 8014374:	4620      	mov	r0, r4
 8014376:	f810 2b01 	ldrb.w	r2, [r0], #1
 801437a:	3a30      	subs	r2, #48	; 0x30
 801437c:	2a09      	cmp	r2, #9
 801437e:	d903      	bls.n	8014388 <_svfiprintf_r+0x1a8>
 8014380:	2b00      	cmp	r3, #0
 8014382:	d0c5      	beq.n	8014310 <_svfiprintf_r+0x130>
 8014384:	9105      	str	r1, [sp, #20]
 8014386:	e7c3      	b.n	8014310 <_svfiprintf_r+0x130>
 8014388:	fb0c 2101 	mla	r1, ip, r1, r2
 801438c:	4604      	mov	r4, r0
 801438e:	2301      	movs	r3, #1
 8014390:	e7f0      	b.n	8014374 <_svfiprintf_r+0x194>
 8014392:	ab03      	add	r3, sp, #12
 8014394:	9300      	str	r3, [sp, #0]
 8014396:	462a      	mov	r2, r5
 8014398:	4b0f      	ldr	r3, [pc, #60]	; (80143d8 <_svfiprintf_r+0x1f8>)
 801439a:	a904      	add	r1, sp, #16
 801439c:	4638      	mov	r0, r7
 801439e:	f3af 8000 	nop.w
 80143a2:	1c42      	adds	r2, r0, #1
 80143a4:	4606      	mov	r6, r0
 80143a6:	d1d6      	bne.n	8014356 <_svfiprintf_r+0x176>
 80143a8:	89ab      	ldrh	r3, [r5, #12]
 80143aa:	065b      	lsls	r3, r3, #25
 80143ac:	f53f af2c 	bmi.w	8014208 <_svfiprintf_r+0x28>
 80143b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80143b2:	b01d      	add	sp, #116	; 0x74
 80143b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143b8:	ab03      	add	r3, sp, #12
 80143ba:	9300      	str	r3, [sp, #0]
 80143bc:	462a      	mov	r2, r5
 80143be:	4b06      	ldr	r3, [pc, #24]	; (80143d8 <_svfiprintf_r+0x1f8>)
 80143c0:	a904      	add	r1, sp, #16
 80143c2:	4638      	mov	r0, r7
 80143c4:	f000 f87a 	bl	80144bc <_printf_i>
 80143c8:	e7eb      	b.n	80143a2 <_svfiprintf_r+0x1c2>
 80143ca:	bf00      	nop
 80143cc:	08015244 	.word	0x08015244
 80143d0:	0801524e 	.word	0x0801524e
 80143d4:	00000000 	.word	0x00000000
 80143d8:	08014129 	.word	0x08014129
 80143dc:	0801524a 	.word	0x0801524a

080143e0 <_printf_common>:
 80143e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143e4:	4616      	mov	r6, r2
 80143e6:	4699      	mov	r9, r3
 80143e8:	688a      	ldr	r2, [r1, #8]
 80143ea:	690b      	ldr	r3, [r1, #16]
 80143ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80143f0:	4293      	cmp	r3, r2
 80143f2:	bfb8      	it	lt
 80143f4:	4613      	movlt	r3, r2
 80143f6:	6033      	str	r3, [r6, #0]
 80143f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80143fc:	4607      	mov	r7, r0
 80143fe:	460c      	mov	r4, r1
 8014400:	b10a      	cbz	r2, 8014406 <_printf_common+0x26>
 8014402:	3301      	adds	r3, #1
 8014404:	6033      	str	r3, [r6, #0]
 8014406:	6823      	ldr	r3, [r4, #0]
 8014408:	0699      	lsls	r1, r3, #26
 801440a:	bf42      	ittt	mi
 801440c:	6833      	ldrmi	r3, [r6, #0]
 801440e:	3302      	addmi	r3, #2
 8014410:	6033      	strmi	r3, [r6, #0]
 8014412:	6825      	ldr	r5, [r4, #0]
 8014414:	f015 0506 	ands.w	r5, r5, #6
 8014418:	d106      	bne.n	8014428 <_printf_common+0x48>
 801441a:	f104 0a19 	add.w	sl, r4, #25
 801441e:	68e3      	ldr	r3, [r4, #12]
 8014420:	6832      	ldr	r2, [r6, #0]
 8014422:	1a9b      	subs	r3, r3, r2
 8014424:	42ab      	cmp	r3, r5
 8014426:	dc26      	bgt.n	8014476 <_printf_common+0x96>
 8014428:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801442c:	1e13      	subs	r3, r2, #0
 801442e:	6822      	ldr	r2, [r4, #0]
 8014430:	bf18      	it	ne
 8014432:	2301      	movne	r3, #1
 8014434:	0692      	lsls	r2, r2, #26
 8014436:	d42b      	bmi.n	8014490 <_printf_common+0xb0>
 8014438:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801443c:	4649      	mov	r1, r9
 801443e:	4638      	mov	r0, r7
 8014440:	47c0      	blx	r8
 8014442:	3001      	adds	r0, #1
 8014444:	d01e      	beq.n	8014484 <_printf_common+0xa4>
 8014446:	6823      	ldr	r3, [r4, #0]
 8014448:	68e5      	ldr	r5, [r4, #12]
 801444a:	6832      	ldr	r2, [r6, #0]
 801444c:	f003 0306 	and.w	r3, r3, #6
 8014450:	2b04      	cmp	r3, #4
 8014452:	bf08      	it	eq
 8014454:	1aad      	subeq	r5, r5, r2
 8014456:	68a3      	ldr	r3, [r4, #8]
 8014458:	6922      	ldr	r2, [r4, #16]
 801445a:	bf0c      	ite	eq
 801445c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014460:	2500      	movne	r5, #0
 8014462:	4293      	cmp	r3, r2
 8014464:	bfc4      	itt	gt
 8014466:	1a9b      	subgt	r3, r3, r2
 8014468:	18ed      	addgt	r5, r5, r3
 801446a:	2600      	movs	r6, #0
 801446c:	341a      	adds	r4, #26
 801446e:	42b5      	cmp	r5, r6
 8014470:	d11a      	bne.n	80144a8 <_printf_common+0xc8>
 8014472:	2000      	movs	r0, #0
 8014474:	e008      	b.n	8014488 <_printf_common+0xa8>
 8014476:	2301      	movs	r3, #1
 8014478:	4652      	mov	r2, sl
 801447a:	4649      	mov	r1, r9
 801447c:	4638      	mov	r0, r7
 801447e:	47c0      	blx	r8
 8014480:	3001      	adds	r0, #1
 8014482:	d103      	bne.n	801448c <_printf_common+0xac>
 8014484:	f04f 30ff 	mov.w	r0, #4294967295
 8014488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801448c:	3501      	adds	r5, #1
 801448e:	e7c6      	b.n	801441e <_printf_common+0x3e>
 8014490:	18e1      	adds	r1, r4, r3
 8014492:	1c5a      	adds	r2, r3, #1
 8014494:	2030      	movs	r0, #48	; 0x30
 8014496:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801449a:	4422      	add	r2, r4
 801449c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80144a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80144a4:	3302      	adds	r3, #2
 80144a6:	e7c7      	b.n	8014438 <_printf_common+0x58>
 80144a8:	2301      	movs	r3, #1
 80144aa:	4622      	mov	r2, r4
 80144ac:	4649      	mov	r1, r9
 80144ae:	4638      	mov	r0, r7
 80144b0:	47c0      	blx	r8
 80144b2:	3001      	adds	r0, #1
 80144b4:	d0e6      	beq.n	8014484 <_printf_common+0xa4>
 80144b6:	3601      	adds	r6, #1
 80144b8:	e7d9      	b.n	801446e <_printf_common+0x8e>
	...

080144bc <_printf_i>:
 80144bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80144c0:	460c      	mov	r4, r1
 80144c2:	4691      	mov	r9, r2
 80144c4:	7e27      	ldrb	r7, [r4, #24]
 80144c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80144c8:	2f78      	cmp	r7, #120	; 0x78
 80144ca:	4680      	mov	r8, r0
 80144cc:	469a      	mov	sl, r3
 80144ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80144d2:	d807      	bhi.n	80144e4 <_printf_i+0x28>
 80144d4:	2f62      	cmp	r7, #98	; 0x62
 80144d6:	d80a      	bhi.n	80144ee <_printf_i+0x32>
 80144d8:	2f00      	cmp	r7, #0
 80144da:	f000 80d8 	beq.w	801468e <_printf_i+0x1d2>
 80144de:	2f58      	cmp	r7, #88	; 0x58
 80144e0:	f000 80a3 	beq.w	801462a <_printf_i+0x16e>
 80144e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80144e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80144ec:	e03a      	b.n	8014564 <_printf_i+0xa8>
 80144ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80144f2:	2b15      	cmp	r3, #21
 80144f4:	d8f6      	bhi.n	80144e4 <_printf_i+0x28>
 80144f6:	a001      	add	r0, pc, #4	; (adr r0, 80144fc <_printf_i+0x40>)
 80144f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80144fc:	08014555 	.word	0x08014555
 8014500:	08014569 	.word	0x08014569
 8014504:	080144e5 	.word	0x080144e5
 8014508:	080144e5 	.word	0x080144e5
 801450c:	080144e5 	.word	0x080144e5
 8014510:	080144e5 	.word	0x080144e5
 8014514:	08014569 	.word	0x08014569
 8014518:	080144e5 	.word	0x080144e5
 801451c:	080144e5 	.word	0x080144e5
 8014520:	080144e5 	.word	0x080144e5
 8014524:	080144e5 	.word	0x080144e5
 8014528:	08014675 	.word	0x08014675
 801452c:	08014599 	.word	0x08014599
 8014530:	08014657 	.word	0x08014657
 8014534:	080144e5 	.word	0x080144e5
 8014538:	080144e5 	.word	0x080144e5
 801453c:	08014697 	.word	0x08014697
 8014540:	080144e5 	.word	0x080144e5
 8014544:	08014599 	.word	0x08014599
 8014548:	080144e5 	.word	0x080144e5
 801454c:	080144e5 	.word	0x080144e5
 8014550:	0801465f 	.word	0x0801465f
 8014554:	680b      	ldr	r3, [r1, #0]
 8014556:	1d1a      	adds	r2, r3, #4
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	600a      	str	r2, [r1, #0]
 801455c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014560:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014564:	2301      	movs	r3, #1
 8014566:	e0a3      	b.n	80146b0 <_printf_i+0x1f4>
 8014568:	6825      	ldr	r5, [r4, #0]
 801456a:	6808      	ldr	r0, [r1, #0]
 801456c:	062e      	lsls	r6, r5, #24
 801456e:	f100 0304 	add.w	r3, r0, #4
 8014572:	d50a      	bpl.n	801458a <_printf_i+0xce>
 8014574:	6805      	ldr	r5, [r0, #0]
 8014576:	600b      	str	r3, [r1, #0]
 8014578:	2d00      	cmp	r5, #0
 801457a:	da03      	bge.n	8014584 <_printf_i+0xc8>
 801457c:	232d      	movs	r3, #45	; 0x2d
 801457e:	426d      	negs	r5, r5
 8014580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014584:	485e      	ldr	r0, [pc, #376]	; (8014700 <_printf_i+0x244>)
 8014586:	230a      	movs	r3, #10
 8014588:	e019      	b.n	80145be <_printf_i+0x102>
 801458a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801458e:	6805      	ldr	r5, [r0, #0]
 8014590:	600b      	str	r3, [r1, #0]
 8014592:	bf18      	it	ne
 8014594:	b22d      	sxthne	r5, r5
 8014596:	e7ef      	b.n	8014578 <_printf_i+0xbc>
 8014598:	680b      	ldr	r3, [r1, #0]
 801459a:	6825      	ldr	r5, [r4, #0]
 801459c:	1d18      	adds	r0, r3, #4
 801459e:	6008      	str	r0, [r1, #0]
 80145a0:	0628      	lsls	r0, r5, #24
 80145a2:	d501      	bpl.n	80145a8 <_printf_i+0xec>
 80145a4:	681d      	ldr	r5, [r3, #0]
 80145a6:	e002      	b.n	80145ae <_printf_i+0xf2>
 80145a8:	0669      	lsls	r1, r5, #25
 80145aa:	d5fb      	bpl.n	80145a4 <_printf_i+0xe8>
 80145ac:	881d      	ldrh	r5, [r3, #0]
 80145ae:	4854      	ldr	r0, [pc, #336]	; (8014700 <_printf_i+0x244>)
 80145b0:	2f6f      	cmp	r7, #111	; 0x6f
 80145b2:	bf0c      	ite	eq
 80145b4:	2308      	moveq	r3, #8
 80145b6:	230a      	movne	r3, #10
 80145b8:	2100      	movs	r1, #0
 80145ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80145be:	6866      	ldr	r6, [r4, #4]
 80145c0:	60a6      	str	r6, [r4, #8]
 80145c2:	2e00      	cmp	r6, #0
 80145c4:	bfa2      	ittt	ge
 80145c6:	6821      	ldrge	r1, [r4, #0]
 80145c8:	f021 0104 	bicge.w	r1, r1, #4
 80145cc:	6021      	strge	r1, [r4, #0]
 80145ce:	b90d      	cbnz	r5, 80145d4 <_printf_i+0x118>
 80145d0:	2e00      	cmp	r6, #0
 80145d2:	d04d      	beq.n	8014670 <_printf_i+0x1b4>
 80145d4:	4616      	mov	r6, r2
 80145d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80145da:	fb03 5711 	mls	r7, r3, r1, r5
 80145de:	5dc7      	ldrb	r7, [r0, r7]
 80145e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80145e4:	462f      	mov	r7, r5
 80145e6:	42bb      	cmp	r3, r7
 80145e8:	460d      	mov	r5, r1
 80145ea:	d9f4      	bls.n	80145d6 <_printf_i+0x11a>
 80145ec:	2b08      	cmp	r3, #8
 80145ee:	d10b      	bne.n	8014608 <_printf_i+0x14c>
 80145f0:	6823      	ldr	r3, [r4, #0]
 80145f2:	07df      	lsls	r7, r3, #31
 80145f4:	d508      	bpl.n	8014608 <_printf_i+0x14c>
 80145f6:	6923      	ldr	r3, [r4, #16]
 80145f8:	6861      	ldr	r1, [r4, #4]
 80145fa:	4299      	cmp	r1, r3
 80145fc:	bfde      	ittt	le
 80145fe:	2330      	movle	r3, #48	; 0x30
 8014600:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014604:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014608:	1b92      	subs	r2, r2, r6
 801460a:	6122      	str	r2, [r4, #16]
 801460c:	f8cd a000 	str.w	sl, [sp]
 8014610:	464b      	mov	r3, r9
 8014612:	aa03      	add	r2, sp, #12
 8014614:	4621      	mov	r1, r4
 8014616:	4640      	mov	r0, r8
 8014618:	f7ff fee2 	bl	80143e0 <_printf_common>
 801461c:	3001      	adds	r0, #1
 801461e:	d14c      	bne.n	80146ba <_printf_i+0x1fe>
 8014620:	f04f 30ff 	mov.w	r0, #4294967295
 8014624:	b004      	add	sp, #16
 8014626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801462a:	4835      	ldr	r0, [pc, #212]	; (8014700 <_printf_i+0x244>)
 801462c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014630:	6823      	ldr	r3, [r4, #0]
 8014632:	680e      	ldr	r6, [r1, #0]
 8014634:	061f      	lsls	r7, r3, #24
 8014636:	f856 5b04 	ldr.w	r5, [r6], #4
 801463a:	600e      	str	r6, [r1, #0]
 801463c:	d514      	bpl.n	8014668 <_printf_i+0x1ac>
 801463e:	07d9      	lsls	r1, r3, #31
 8014640:	bf44      	itt	mi
 8014642:	f043 0320 	orrmi.w	r3, r3, #32
 8014646:	6023      	strmi	r3, [r4, #0]
 8014648:	b91d      	cbnz	r5, 8014652 <_printf_i+0x196>
 801464a:	6823      	ldr	r3, [r4, #0]
 801464c:	f023 0320 	bic.w	r3, r3, #32
 8014650:	6023      	str	r3, [r4, #0]
 8014652:	2310      	movs	r3, #16
 8014654:	e7b0      	b.n	80145b8 <_printf_i+0xfc>
 8014656:	6823      	ldr	r3, [r4, #0]
 8014658:	f043 0320 	orr.w	r3, r3, #32
 801465c:	6023      	str	r3, [r4, #0]
 801465e:	2378      	movs	r3, #120	; 0x78
 8014660:	4828      	ldr	r0, [pc, #160]	; (8014704 <_printf_i+0x248>)
 8014662:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014666:	e7e3      	b.n	8014630 <_printf_i+0x174>
 8014668:	065e      	lsls	r6, r3, #25
 801466a:	bf48      	it	mi
 801466c:	b2ad      	uxthmi	r5, r5
 801466e:	e7e6      	b.n	801463e <_printf_i+0x182>
 8014670:	4616      	mov	r6, r2
 8014672:	e7bb      	b.n	80145ec <_printf_i+0x130>
 8014674:	680b      	ldr	r3, [r1, #0]
 8014676:	6826      	ldr	r6, [r4, #0]
 8014678:	6960      	ldr	r0, [r4, #20]
 801467a:	1d1d      	adds	r5, r3, #4
 801467c:	600d      	str	r5, [r1, #0]
 801467e:	0635      	lsls	r5, r6, #24
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	d501      	bpl.n	8014688 <_printf_i+0x1cc>
 8014684:	6018      	str	r0, [r3, #0]
 8014686:	e002      	b.n	801468e <_printf_i+0x1d2>
 8014688:	0671      	lsls	r1, r6, #25
 801468a:	d5fb      	bpl.n	8014684 <_printf_i+0x1c8>
 801468c:	8018      	strh	r0, [r3, #0]
 801468e:	2300      	movs	r3, #0
 8014690:	6123      	str	r3, [r4, #16]
 8014692:	4616      	mov	r6, r2
 8014694:	e7ba      	b.n	801460c <_printf_i+0x150>
 8014696:	680b      	ldr	r3, [r1, #0]
 8014698:	1d1a      	adds	r2, r3, #4
 801469a:	600a      	str	r2, [r1, #0]
 801469c:	681e      	ldr	r6, [r3, #0]
 801469e:	6862      	ldr	r2, [r4, #4]
 80146a0:	2100      	movs	r1, #0
 80146a2:	4630      	mov	r0, r6
 80146a4:	f7eb fdac 	bl	8000200 <memchr>
 80146a8:	b108      	cbz	r0, 80146ae <_printf_i+0x1f2>
 80146aa:	1b80      	subs	r0, r0, r6
 80146ac:	6060      	str	r0, [r4, #4]
 80146ae:	6863      	ldr	r3, [r4, #4]
 80146b0:	6123      	str	r3, [r4, #16]
 80146b2:	2300      	movs	r3, #0
 80146b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80146b8:	e7a8      	b.n	801460c <_printf_i+0x150>
 80146ba:	6923      	ldr	r3, [r4, #16]
 80146bc:	4632      	mov	r2, r6
 80146be:	4649      	mov	r1, r9
 80146c0:	4640      	mov	r0, r8
 80146c2:	47d0      	blx	sl
 80146c4:	3001      	adds	r0, #1
 80146c6:	d0ab      	beq.n	8014620 <_printf_i+0x164>
 80146c8:	6823      	ldr	r3, [r4, #0]
 80146ca:	079b      	lsls	r3, r3, #30
 80146cc:	d413      	bmi.n	80146f6 <_printf_i+0x23a>
 80146ce:	68e0      	ldr	r0, [r4, #12]
 80146d0:	9b03      	ldr	r3, [sp, #12]
 80146d2:	4298      	cmp	r0, r3
 80146d4:	bfb8      	it	lt
 80146d6:	4618      	movlt	r0, r3
 80146d8:	e7a4      	b.n	8014624 <_printf_i+0x168>
 80146da:	2301      	movs	r3, #1
 80146dc:	4632      	mov	r2, r6
 80146de:	4649      	mov	r1, r9
 80146e0:	4640      	mov	r0, r8
 80146e2:	47d0      	blx	sl
 80146e4:	3001      	adds	r0, #1
 80146e6:	d09b      	beq.n	8014620 <_printf_i+0x164>
 80146e8:	3501      	adds	r5, #1
 80146ea:	68e3      	ldr	r3, [r4, #12]
 80146ec:	9903      	ldr	r1, [sp, #12]
 80146ee:	1a5b      	subs	r3, r3, r1
 80146f0:	42ab      	cmp	r3, r5
 80146f2:	dcf2      	bgt.n	80146da <_printf_i+0x21e>
 80146f4:	e7eb      	b.n	80146ce <_printf_i+0x212>
 80146f6:	2500      	movs	r5, #0
 80146f8:	f104 0619 	add.w	r6, r4, #25
 80146fc:	e7f5      	b.n	80146ea <_printf_i+0x22e>
 80146fe:	bf00      	nop
 8014700:	08015255 	.word	0x08015255
 8014704:	08015266 	.word	0x08015266

08014708 <__retarget_lock_acquire_recursive>:
 8014708:	4770      	bx	lr

0801470a <__retarget_lock_release_recursive>:
 801470a:	4770      	bx	lr

0801470c <memmove>:
 801470c:	4288      	cmp	r0, r1
 801470e:	b510      	push	{r4, lr}
 8014710:	eb01 0402 	add.w	r4, r1, r2
 8014714:	d902      	bls.n	801471c <memmove+0x10>
 8014716:	4284      	cmp	r4, r0
 8014718:	4623      	mov	r3, r4
 801471a:	d807      	bhi.n	801472c <memmove+0x20>
 801471c:	1e43      	subs	r3, r0, #1
 801471e:	42a1      	cmp	r1, r4
 8014720:	d008      	beq.n	8014734 <memmove+0x28>
 8014722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014726:	f803 2f01 	strb.w	r2, [r3, #1]!
 801472a:	e7f8      	b.n	801471e <memmove+0x12>
 801472c:	4402      	add	r2, r0
 801472e:	4601      	mov	r1, r0
 8014730:	428a      	cmp	r2, r1
 8014732:	d100      	bne.n	8014736 <memmove+0x2a>
 8014734:	bd10      	pop	{r4, pc}
 8014736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801473a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801473e:	e7f7      	b.n	8014730 <memmove+0x24>

08014740 <_realloc_r>:
 8014740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014742:	4607      	mov	r7, r0
 8014744:	4614      	mov	r4, r2
 8014746:	460e      	mov	r6, r1
 8014748:	b921      	cbnz	r1, 8014754 <_realloc_r+0x14>
 801474a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801474e:	4611      	mov	r1, r2
 8014750:	f7ff bc3a 	b.w	8013fc8 <_malloc_r>
 8014754:	b922      	cbnz	r2, 8014760 <_realloc_r+0x20>
 8014756:	f7ff fbe7 	bl	8013f28 <_free_r>
 801475a:	4625      	mov	r5, r4
 801475c:	4628      	mov	r0, r5
 801475e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014760:	f000 f814 	bl	801478c <_malloc_usable_size_r>
 8014764:	42a0      	cmp	r0, r4
 8014766:	d20f      	bcs.n	8014788 <_realloc_r+0x48>
 8014768:	4621      	mov	r1, r4
 801476a:	4638      	mov	r0, r7
 801476c:	f7ff fc2c 	bl	8013fc8 <_malloc_r>
 8014770:	4605      	mov	r5, r0
 8014772:	2800      	cmp	r0, #0
 8014774:	d0f2      	beq.n	801475c <_realloc_r+0x1c>
 8014776:	4631      	mov	r1, r6
 8014778:	4622      	mov	r2, r4
 801477a:	f7ff fbbf 	bl	8013efc <memcpy>
 801477e:	4631      	mov	r1, r6
 8014780:	4638      	mov	r0, r7
 8014782:	f7ff fbd1 	bl	8013f28 <_free_r>
 8014786:	e7e9      	b.n	801475c <_realloc_r+0x1c>
 8014788:	4635      	mov	r5, r6
 801478a:	e7e7      	b.n	801475c <_realloc_r+0x1c>

0801478c <_malloc_usable_size_r>:
 801478c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014790:	1f18      	subs	r0, r3, #4
 8014792:	2b00      	cmp	r3, #0
 8014794:	bfbc      	itt	lt
 8014796:	580b      	ldrlt	r3, [r1, r0]
 8014798:	18c0      	addlt	r0, r0, r3
 801479a:	4770      	bx	lr

0801479c <_init>:
 801479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801479e:	bf00      	nop
 80147a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147a2:	bc08      	pop	{r3}
 80147a4:	469e      	mov	lr, r3
 80147a6:	4770      	bx	lr

080147a8 <_fini>:
 80147a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147aa:	bf00      	nop
 80147ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147ae:	bc08      	pop	{r3}
 80147b0:	469e      	mov	lr, r3
 80147b2:	4770      	bx	lr
